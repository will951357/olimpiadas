 1/1:
from PySide6.QtQml import QQmlApplicationEngine
from PySide6.QtGui import QGuiApplication

app = QGuiApplication()

engine = QQmlApplicationEngine()

engine.load('Principal.qml')

app.exec
 2/1:
print('PyDev console: using IPython 8.16.1\n')

import sys; print('Python %s on %s' % (sys.version, sys.platform))
sys.path.extend(['C:\\Users\\willi\\Desktop\\Curso_Selenium'])
 3/1: navegador.find_element_css_selector('input')
 3/2: navegador.find_element(By.CSS_SELECTOR,'input')
 3/3: navegador.find_element(By.CSS_SELECTOR,'input').send_keys('Will')
 3/4: navegador.find_elements(By.CSS_SELECTOR,'input').send_keys('Will')
 3/5: navegador.find_elements(By.CSS_SELECTOR,'input')
 3/6: navegador.find_element(By.CSS_SELECTOR,'[for*="nA"]')
 3/7: navegador.find_element(By.CSS_SELECTOR,'[for*="na"]')
 3/8: navegador.find_element(By.CSS_SELECTOR,'[for^="na"]')
 3/9: navegador.find_element(By.CSS_SELECTOR,'[for="name"]')
3/10: navegador.find_element(By.CSS_SELECTOR,'[for="nome"]')
3/11: navegador.find_element(By.CSS_SELECTOR,'[for*="no"]')
3/12: navegador.find_element(By.CSS_SELECTOR,'[for^="n"]')
3/13: navegador.find_element(By.CSS_SELECTOR,'input[type$="t"]')
3/14: navegador.find_elements(By.CSS_SELECTOR,'div + br')
3/15: navegador.find_elements(By.CSS_SELECTOR,'h2 ~ div')
3/16: navegador.find_elements(By.CSS_SELECTOR,'h2 + div')
3/17:  navegador.find_elements(By.CSS_SELECTOR,'div > br')
3/18: navegador.find_elements(By.CSS_SELECTOR,'form br')
 4/1:
import numpy as np
import pandas as pd
import seaborn as sns
import os
from matplotlib import pyplot as plt

print(os.listdir(path="./olimpiadas/input"))
 4/2:
import numpy as np
import pandas as pd
import seaborn as sns
import os
from matplotlib import pyplot as plt

print(os.listdir(path=".\\olimpiadas\\input"))
 4/3:
import numpy as np
import pandas as pd
import seaborn as sns
import os

from pathlib import Path
from matplotlib import pyplot as plt

print(Path(__file__).parent)
 4/4:
import numpy as np
import pandas as pd
import seaborn as sns
import os

from pathlib import Path
from matplotlib import pyplot as plt

print(Path("__file__").parent)
 4/5:
import numpy as np
import pandas as pd
import seaborn as sns
import os

from pathlib import Path
from matplotlib import pyplot as plt

root = Path("__file__").parent

print(os.listdir(root / 'olimpiadas'))
 4/6:
import numpy as np
import pandas as pd
import seaborn as sns
import os

from pathlib import Path
from matplotlib import pyplot as plt

root = Path("__file__").parent

print(os.listdir(root))
 4/7:
import numpy as np
import pandas as pd
import seaborn as sns
import os

from pathlib import Path
from matplotlib import pyplot as plt

root = Path("__file__").parent.parent

print(os.listdir(root))
 4/8:
import numpy as np
import pandas as pd
import seaborn as sns
import os

from pathlib import Path
from matplotlib import pyplot as plt

root = Path("__file__").parent.parent

print(os.listdir(root))
 4/9:
import numpy as np
import pandas as pd
import seaborn as sns
import os

from pathlib import Path
from matplotlib import pyplot as plt

root = Path("__file__").parent.root

print(os.listdir(root))
4/10:
import numpy as np
import pandas as pd
import seaborn as sns
import os

from pathlib import Path
from matplotlib import pyplot as plt

root = Path("__file__").parent.resolve

print(os.listdir(root))
4/11:
import numpy as np
import pandas as pd
import seaborn as sns
import os

from pathlib import Path
from matplotlib import pyplot as plt

root = Path("__file__").parent.resolve

print(os.listdir(root.__str__))
4/12:
import numpy as np
import pandas as pd
import seaborn as sns
import os

from pathlib import Path
from matplotlib import pyplot as plt

root = Path("__file__").parent.cwd

print(os.listdir(root))
4/13:
import numpy as np
import pandas as pd
import seaborn as sns
import os

from pathlib import Path
from matplotlib import pyplot as plt

root = Path("__file__").parent.cwd()

print(os.listdir(root))
4/14:
import numpy as np
import pandas as pd
import seaborn as sns
import os

from pathlib import Path
from matplotlib import pyplot as plt

root = Path("__file__").parent.parent

print(os.listdir(root))
4/15:
import numpy as np
import pandas as pd
import seaborn as sns
import os

from pathlib import Path
from matplotlib import pyplot as plt

root = Path("__file__").parent.parent.parent

print(os.listdir(root))
4/16:
import numpy as np
import pandas as pd
import seaborn as sns
import os

from pathlib import Path
from matplotlib import pyplot as plt

root = Path("__file__").parent.parent.parent

print(os.listdir(root))
4/17:
import numpy as np
import pandas as pd
import seaborn as sns
import os

from pathlib import Path
from matplotlib import pyplot as plt

dir_atual = os.path.dirname(os.path.abspath(__file__))
root_dir = os.path.abspath(os.path.join(dir_atual, '..'))

print(os.listdir(root_dir))
4/18:
import numpy as np
import pandas as pd
import seaborn as sns
import os.path

from pathlib import Path
from matplotlib import pyplot as plt

dir_atual = os.path.dirname(os.path.abspath(__file__))
root_dir = os.path.abspath(os.path.join(dir_atual, '..'))

print(os.listdir(root_dir))
4/19:
import numpy as np
import pandas as pd
import seaborn as sns
import os
from matplotlib import pyplot as plt

dir_atual = os.path.dirname(os.path.abspath('__file__'))
root_dir = os.path.abspath(os.path.join(dir_atual, '..'))

print(os.listdir(root_dir))
4/20:
import numpy as np
import pandas as pd
import seaborn as sns
import os
from matplotlib import pyplot as plt

dir_atual = os.path.dirname(os.path.abspath('__file__'))
root_dir = os.path.abspath(os.path.join(dir_atual, '..'))
input_path = os.path.join(dir_atual, 'input')


print(os.listdir(input_path))
  4/21:
  dados = pd.read_csv(os.path.join(input_path, 'athlete_events.csv'))
  regioes = pd.read_csv(os.path.join(input_path, 'noc_regions.csv'))
  4/22: dados.head(4)
  4/23: dados.describe()
  4/24: dados.info()
  4/25: regioes.head()
  4/26:
mesclado = pd.merge(dados, regioes, on='NOC', how='left')
mesclado.head()
4/27:
medalhas_ouro = mesclado[(mesclado.Medal == 'Gold')]
medalhas_ouro.head()
4/28: medalhas_ouro.isnull().any()
4/29: medalhas_ouro = medalhas_ouro[np.isfinite(medalhas_ouro['Age'])]
4/30:
plt.figure(figsize=(20,10))
plt.tight_layout()
sns.countplot(x=medalhas_ouro['Age'], data=medalhas_ouro)
plt.title('Distribuição de medalhas de ouro por idade')
4/31:
medalhas_ouro = medalhas_ouro[np.isfinite(medalhas_ouro['Age'])]
medalhas_ouro['Age'] = medalhas_ouro['Age'].astype(int)
4/32:
plt.figure(figsize=(20,10))
plt.tight_layout()
sns.countplot(x=medalhas_ouro['Age'], data=medalhas_ouro)
plt.title('Distribuição de medalhas de ouro por idade')
4/33:
plt.figure(figsize=(20,10))
plt.tight_layout()
sns.countplot(x=medalhas_ouro['Age'], data=medalhas_ouro)
plt.title('Distribuição de medalhas de ouro por idade')
plt.ylabel('Medalhas de ouro')
4/34:
plt.figure(figsize=(20,10))
plt.tight_layout()
sns.countplot(x=medalhas_ouro['Age'], data=medalhas_ouro)
plt.title('Distribuição de medalhas de ouro por idade')
plt.ylabel('Medalhas de ouro')
plt.xlabel('Idade')
4/35:
import numpy as np
import pandas as pd
import seaborn as sns
import os
from matplotlib import pyplot as plt
from matplotlib.colors import LinearSegmentedColormap

dir_atual = os.path.dirname(os.path.abspath('__file__'))
root_dir = os.path.abspath(os.path.join(dir_atual, '..'))
input_path = os.path.join(dir_atual, 'input')

print(os.listdir(input_path))
4/36:
cores_douradas = ["#d4af37", "#ffd700", "#f0e68c"]
mapa_dourado = LinearSegmentedColormap.from_list("golden", cores_douradas, N=100)

def obter_gradiente_cores(cmap, n):
    return [cmap(i / n) for i in range(n)]
 5/1:
import numpy as np
import pandas as pd
import seaborn as sns
import os
from matplotlib import pyplot as plt
from matplotlib.colors import LinearSegmentedColormap

dir_atual = os.path.dirname(os.path.abspath('__file__'))
root_dir = os.path.abspath(os.path.join(dir_atual, '..'))
input_path = os.path.join(dir_atual, 'input')

print(os.listdir(input_path))
 5/2:
cores_douradas = ["#d4af37", "#ffd700", "#f0e68c"]
mapa_dourado = LinearSegmentedColormap.from_list("golden", cores_douradas, N=100)
 5/3:
dados = pd.read_csv(os.path.join(input_path, 'athlete_events.csv'))
regioes = pd.read_csv(os.path.join(input_path, 'noc_regions.csv'))
 5/4: dados.head(4)
 5/5: dados.describe()
 5/6: dados.info()
 5/7: regioes.head()
 5/8:
mesclado = pd.merge(dados, regioes, on='NOC', how='left')
mesclado.head()
 5/9:
medalhas_ouro = mesclado[(mesclado.Medal == 'Gold')]
medalhas_ouro.head()
5/10: medalhas_ouro.isnull().any()
5/11:
medalhas_ouro = medalhas_ouro[np.isfinite(medalhas_ouro['Age'])]
medalhas_ouro['Age'] = medalhas_ouro['Age'].astype(int)
5/12:
num_barras = medalhas_ouro['Age'].nunique()
paleta_dourada = [mapa_dourado(i / num_barras) for i in range(num_barras)]

plt.figure(figsize=(20,10))
plt.tight_layout()
sns.countplot(x=medalhas_ouro['Age'], data=medalhas_ouro)
plt.title('Distribuição de medalhas de ouro por idade')
plt.ylabel('Medalhas de ouro')
plt.xlabel('Idade')
5/13:
num_barras = medalhas_ouro['Age'].nunique()
paleta_dourada = [mapa_dourado(i / num_barras) for i in range(num_barras)]

plt.figure(figsize=(20,10))
plt.tight_layout()
sns.countplot(x=medalhas_ouro['Age'], data=medalhas_ouro, palette=paleta_dourada)
plt.title('Distribuição de medalhas de ouro por idade')
plt.ylabel('Medalhas de ouro')
plt.xlabel('Idade')
5/14:
num_barras = medalhas_ouro['Age'].nunique()
paleta_dourada = [mapa_dourado(i / num_barras) for i in range(num_barras)]

plt.figure(figsize=(20,10))
plt.tight_layout()
sns.countplot(hue=medalhas_ouro['Age'], legend=False,  data=medalhas_ouro, palette=paleta_dourada)
plt.title('Distribuição de medalhas de ouro por idade')
plt.ylabel('Medalhas de ouro')
plt.xlabel('Idade')
5/15:
num_barras = medalhas_ouro['Age'].nunique()
paleta_dourada = [mapa_dourado(i / num_barras) for i in range(num_barras)]

plt.figure(figsize=(20,10))
plt.tight_layout()
sns.countplot(x=medalhas_ouro['Age'], data=medalhas_ouro, palette=paleta_dourada)
plt.title('Distribuição de medalhas de ouro por idade')
plt.ylabel('Medalhas de ouro')
plt.xlabel('Idade')
5/16:
num_barras = medalhas_ouro['Age'].nunique()
paleta_dourada = [mapa_dourado(i / num_barras) for i in range(num_barras)]

plt.figure(figsize=(20,10))
plt.tight_layout()
sns.countplot(x=medalhas_ouro['Age'], data=medalhas_ouro, palette=paleta_dourada)
plt.title('Distribuição de medalhas de ouro por idade')
plt.ylabel('Medalhas de ouro')
plt.xlabel('Idade')
5/17:
num_barras = medalhas_ouro['Age'].nunique()
paleta_dourada = [mapa_dourado(i / num_barras) for i in range(num_barras)]

plt.figure(figsize=(20,10))
plt.tight_layout()
sns.countplot(x=medalhas_ouro['Age'],hue=medalhas_ouro['Age'], legend=False, data=medalhas_ouro, palette=paleta_dourada)
plt.title('Distribuição de medalhas de ouro por idade')
plt.ylabel('Medalhas de ouro')
plt.xlabel('Idade')
5/18: medalhas_ouro['ID'][medalhas_ouro['Age'] < 15].count()
5/19: print(medalhas_ouro['ID'][medalhas_ouro['Age'] < 15].count())
5/20: menores_quinze_anos = medalhas_ouro['Sport'][medalhas_ouro['Age']<15]
5/21:
menores_quinze_anos = medalhas_ouro['Sport'][medalhas_ouro['Age']<15]
menores_quinze_anos.head()
5/22:
plt.figure(figsize=(20, 10))
plt.tight_layout()
sns.countplot(x=menores_quinze_anos)
plt.title('Medalhas de Ouro por atletas menores de 15 anos')
5/23: medalhas_ouro['ID'].value_counts()
5/24: menores_quinze_anos['Sport'].value_counts()
5/25: menores_quinze_anos.value_counts()
5/26:
cores_douradas = ["#d4af37", "#ffd700", "#f0e68c"]
cores_olimpicas = ["#89CFF0", "#FFFACD", "#C0C0C0", "#98FB98", "#FFB6C1"]

mapa_dourado = LinearSegmentedColormap.from_list("golden", cores_douradas, N=100)
 6/1:
import numpy as np
import pandas as pd
import seaborn as sns
import os
from matplotlib import pyplot as plt
from matplotlib.colors import LinearSegmentedColormap

dir_atual = os.path.dirname(os.path.abspath('__file__'))
root_dir = os.path.abspath(os.path.join(dir_atual, '..'))
input_path = os.path.join(dir_atual, 'input')

print(os.listdir(input_path))
 6/2:
cores_douradas = ["#d4af37", "#ffd700", "#f0e68c"]
cores_olimpicas = ["#89CFF0", "#FFFACD", "#C0C0C0", "#98FB98", "#FFB6C1"]

mapa_dourado = LinearSegmentedColormap.from_list("golden", cores_douradas, N=100)
 6/3:
dados = pd.read_csv(os.path.join(input_path, 'athlete_events.csv'))
regioes = pd.read_csv(os.path.join(input_path, 'noc_regions.csv'))
 6/4: dados.head(4)
 6/5: dados.describe()
 6/6: dados.info()
 6/7: regioes.head()
 6/8:
mesclado = pd.merge(dados, regioes, on='NOC', how='left')
mesclado.head()
 6/9:
medalhas_ouro = mesclado[(mesclado.Medal == 'Gold')]
medalhas_ouro.head()
6/10: medalhas_ouro.isnull().any()
6/11:
medalhas_ouro = medalhas_ouro[np.isfinite(medalhas_ouro['Age'])]
medalhas_ouro['Age'] = medalhas_ouro['Age'].astype(int)
6/12:
num_barras = medalhas_ouro['Age'].nunique()
paleta_dourada = [mapa_dourado(i / num_barras) for i in range(num_barras)]

plt.figure(figsize=(20,10))
plt.tight_layout()
sns.countplot(x=medalhas_ouro['Age'],hue=medalhas_ouro['Age'], legend=False, data=medalhas_ouro, palette=paleta_dourada)
plt.title('Distribuição de medalhas de ouro por idade')
plt.ylabel('Medalhas de ouro')
plt.xlabel('Idade')
6/13: menores_quinze_anos = medalhas_ouro['Sport'][medalhas_ouro['Age']<15]
6/14:
plt.figure(figsize=(20, 10))
plt.tight_layout()
sns.countplot(x=menores_quinze_anos)
plt.title('Medalhas de Ouro por atletas menores de 15 anos')
6/15: menores_quinze_anos.value_counts()
6/16:
plt.figure(figsize=(20, 10))
plt.tight_layout()
sns.countplot(x=menores_quinze_anos, hue=menores_quinze_anos, legend==False, palette=cores_olimpicas)
plt.title('Medalhas de Ouro por atletas menores de 15 anos')
6/17:
plt.figure(figsize=(20, 10))
plt.tight_layout()
sns.countplot(x=menores_quinze_anos, hue=menores_quinze_anos, legend=False, palette=cores_olimpicas)
plt.title('Medalhas de Ouro por atletas menores de 15 anos')
6/18:
cores_douradas = ["#d4af37", "#ffd700", "#f0e68c"]
cores_olimpicas = ["#5CA3E4", "#FFF685", "#A9A9A9", "#77DD77", "#FFA07A"]

mapa_dourado = LinearSegmentedColormap.from_list("golden", cores_douradas, N=100)
6/19:
plt.figure(figsize=(20, 10))
plt.tight_layout()
sns.countplot(x=menores_quinze_anos, hue=menores_quinze_anos, legend=False, palette=cores_olimpicas)
plt.title('Medalhas de Ouro por atletas menores de 15 anos')
6/20:
cores_douradas = ["#d4af37", "#ffd700", "#f0e68c"]
cores_olimpicas = ["#6CA6CD", "#FFEC8B", "#BEBEBE", "#90EE90", "#FF7F7F"]

mapa_dourado = LinearSegmentedColormap.from_list("golden", cores_douradas, N=100)
6/21:
cores_douradas = ["#d4af37", "#ffd700", "#f0e68c"]
cores_olimpicas = ["#6CA6CD", "#FFEC8B", "#BEBEBE", "#90EE90", "#FF7F7F"]

mapa_dourado = LinearSegmentedColormap.from_list("golden", cores_douradas, N=100)
6/22:
plt.figure(figsize=(20, 10))
plt.tight_layout()
sns.countplot(x=menores_quinze_anos, hue=menores_quinze_anos, legend=False, palette=cores_olimpicas)
plt.title('Medalhas de Ouro por atletas menores de 15 anos')
6/23:
cores_douradas = ["#d4af37", "#ffd700", "#f0e68c"]
cores_olimpicas = ["#6CA6CD", "#FFEC8B", "#BEBEBE", "#90EE90", "#FF7F7F"]

mapa_dourado = LinearSegmentedColormap.from_list("golden", cores_douradas, N=100)
6/24:
plt.figure(figsize=(20, 10))
plt.tight_layout()
sns.countplot(x=menores_quinze_anos, hue=menores_quinze_anos, legend=False, palette=cores_olimpicas)
plt.title('Medalhas de Ouro por atletas menores de 15 anos')
6/25:
cores_douradas = ["#d4af37", "#ffd700", "#f0e68c"]
cores_olimpicas_pastel = ["#4F94CD", "#FFDE7D", "#A9A9A9", "#7CCD7C", "#FF6A6A"]

mapa_dourado = LinearSegmentedColormap.from_list("golden", cores_douradas, N=100)
6/26:
plt.figure(figsize=(20, 10))
plt.tight_layout()
sns.countplot(x=menores_quinze_anos, hue=menores_quinze_anos, legend=False, palette=cores_olimpicas)
plt.title('Medalhas de Ouro por atletas menores de 15 anos')
6/27:
cores_douradas = ["#d4af37", "#ffd700", "#f0e68c"]
cores_olimpicas = ["#4F94CD", "#FFDE7D", "#696969", "#7CCD7C", "#FF6A6A"]

mapa_dourado = LinearSegmentedColormap.from_list("golden", cores_douradas, N=100)
6/28:
plt.figure(figsize=(20, 10))
plt.tight_layout()
sns.countplot(x=menores_quinze_anos, hue=menores_quinze_anos, legend=False, palette=cores_olimpicas)
plt.title('Medalhas de Ouro por atletas menores de 15 anos')
6/29:
plt.figure(figsize=(20, 10))
plt.tight_layout()
sns.countplot(x=menores_quinze_anos, hue=menores_quinze_anos, legend=False, palette=cores_olimpicas)
plt.title('Medalhas de Ouro por esporte com atletas menores de 15 anos')
plt.ylabel('Medalhas de ouro')
plt.xlabel('Esporte')
6/30: mais_cinquenta_anos = medalhas_ouro['Sport'][medalhas_ouro['Age']<50]
6/31:
plt.figure(figsize=(20, 10))
plt.tight_layout()
sns.countplot(x=menores_quinze_anos, hue=menores_quinze_anos, legend=False, palette=cores_olimpicas)
plt.title('Medalhas de Ouro por esporte com atletas menores de 15 anos')
plt.ylabel('Medalhas de ouro')
plt.xlabel('Esporte')
6/32:
plt.figure(figsize=(20, 10))
plt.tight_layout()
sns.countplot(x=mais_cinquenta_anos, hue=mais_cinquenta_anos, legend=False, palette=cores_olimpicas)
plt.title('Medalhas de Ouro por esporte para atletas com mais de 50 anos')
plt.ylabel('Medalhas de ouro')
plt.xlabel('Esporte')
6/33: mais_cinquenta_anos.value_counts()
6/34: mais_cinquenta_anos = medalhas_ouro['Sport'][medalhas_ouro['Age']>50]
6/35:
plt.figure(figsize=(20, 10))
plt.tight_layout()
sns.countplot(x=mais_cinquenta_anos, hue=mais_cinquenta_anos, legend=False, palette=cores_olimpicas)
plt.title('Medalhas de Ouro por esporte para atletas com mais de 50 anos')
plt.ylabel('Medalhas de ouro')
plt.xlabel('Esporte')
6/36: mais_cinquenta_anos.value_counts()
6/37:
mais_cinquenta_anos = medalhas_ouro['Sport'][medalhas_ouro['Age']>50]
mais_cinquenta_anos.value_counts()
6/38:
mais_cinquenta_anos = medalhas_ouro['Sport'][medalhas_ouro['Age']>50]
contagem = mais_cinquenta_anos.value_counts()
6/39:
mais_cinquenta_anos = medalhas_ouro['Sport'][medalhas_ouro['Age']>50]
contagem = mais_cinquenta_anos.value_counts()
print(contagem)
6/40:
plt.figure(figsize=(20, 10))
plt.tight_layout()
sns.countplot(x=mais_cinquenta_anos, hue=mais_cinquenta_anos, legend=False, order=contagem.index, palette=cores_olimpicas)
plt.title('Medalhas de Ouro por esporte para atletas com mais de 50 anos')
plt.ylabel('Medalhas de ouro')
plt.xlabel('Esporte')
6/41:
plt.figure(figsize=(20, 10))
plt.tight_layout()
sns.countplot(x=mais_cinquenta_anos, hue=mais_cinquenta_anos, legend=False, order=contagem.index, color=cores_olimpicas[1])
plt.title('Medalhas de Ouro por esporte para atletas com mais de 50 anos')
plt.ylabel('Medalhas de ouro')
plt.xlabel('Esporte')
6/42:
plt.figure(figsize=(20, 10))
plt.tight_layout()
sns.countplot(x=mais_cinquenta_anos, hue=mais_cinquenta_anos, legend=False, order=contagem.index, color=cores_olimpicas[0])
plt.title('Medalhas de Ouro por esporte para atletas com mais de 50 anos')
plt.ylabel('Medalhas de ouro')
plt.xlabel('Esporte')
6/43:
plt.figure(figsize=(20, 10))
plt.tight_layout()
sns.countplot(x=mais_cinquenta_anos, hue=mais_cinquenta_anos, legend=False, order=contagem.index, color=cores_olimpicas[1])
plt.title('Medalhas de Ouro por esporte para atletas com mais de 50 anos')
plt.ylabel('Medalhas de ouro')
plt.xlabel('Esporte')
6/44:
plt.figure(figsize=(20, 10))
plt.tight_layout()
sns.countplot(x=mais_cinquenta_anos, hue=mais_cinquenta_anos, legend=False, order=contagem.index, palette=cores_olimpicas[1])
plt.title('Medalhas de Ouro por esporte para atletas com mais de 50 anos')
plt.ylabel('Medalhas de ouro')
plt.xlabel('Esporte')
6/45:
plt.figure(figsize=(20, 10))
plt.tight_layout()
sns.countplot(x=mais_cinquenta_anos, hue=mais_cinquenta_anos, legend=False, order=contagem.index, palette=f'light:{cores_olimpicas[1]}')
plt.title('Medalhas de Ouro por esporte para atletas com mais de 50 anos')
plt.ylabel('Medalhas de ouro')
plt.xlabel('Esporte')
6/46:
plt.figure(figsize=(20, 10))
plt.tight_layout()
sns.countplot(x=mais_cinquenta_anos, hue=mais_cinquenta_anos, legend=False, order=contagem.index, palette=f'dark:{cores_olimpicas[1]}')
plt.title('Medalhas de Ouro por esporte para atletas com mais de 50 anos')
plt.ylabel('Medalhas de ouro')
plt.xlabel('Esporte')
6/47:
cores_douradas = ["#d4af37", "#ffd700", "#f0e68c"]
cores_olimpicas = ["#4A90D9", "#F0E4A1", "#6D6E71", "#8BCC8C", "#FF5E5E", "#3A78C2", "#F7E5A5", "#8C8C8C", "#7ABF7A", "#FF4D4D", "#5D8AB4", "#F5D787", "#6D6E6E", "#9BCC9B", "#FF4C4C", "#3C8CC2", "#F7E7A2", "#7F7F7F", "#7EBF7E", "#FF6D6D"]


mapa_dourado = LinearSegmentedColormap.from_list("golden", cores_douradas, N=100)
6/48:
plt.figure(figsize=(20, 10))
plt.tight_layout()
sns.countplot(x=menores_quinze_anos, hue=menores_quinze_anos, legend=False, palette=cores_olimpicas)
plt.title('Medalhas de Ouro por esporte com atletas menores de 15 anos')
plt.ylabel('Medalhas de ouro')
plt.xlabel('Esporte')
6/49:
plt.figure(figsize=(20, 10))
plt.tight_layout()
sns.countplot(x=mais_cinquenta_anos, hue=mais_cinquenta_anos, legend=False, order=contagem.index, palette=cores_olimpicas)
plt.title('Medalhas de Ouro por esporte para atletas com mais de 50 anos')
plt.ylabel('Medalhas de ouro')
plt.xlabel('Esporte')
6/50: mulheres = mesclado[mesclado.Sex == 'F']
6/51:
mulheres = mesclado[mesclado.Sex == 'F']
mulheres.head()
6/52:
import numpy as np
import pandas as pd
import seaborn as sns
import os
from matplotlib import pyplot as plt
from matplotlib.colors import LinearSegmentedColormap

dir_atual = os.path.dirname(os.path.abspath('__file__'))
root_dir = os.path.abspath(os.path.join(dir_atual, '..'))
input_path = os.path.join(dir_atual, 'input')

print(os.listdir(input_path))
6/53:
cores_douradas = ["#d4af37", "#ffd700", "#f0e68c"]
cores_olimpicas = ["#4A90D9", "#F0E4A1", "#6D6E71", "#8BCC8C", "#FF5E5E", "#3A78C2", "#F7E5A5", "#8C8C8C", "#7ABF7A", "#FF4D4D", "#5D8AB4", "#F5D787", "#6D6E6E", "#9BCC9B", "#FF4C4C", "#3C8CC2", "#F7E7A2", "#7F7F7F", "#7EBF7E", "#FF6D6D"]


mapa_dourado = LinearSegmentedColormap.from_list("golden", cores_douradas, N=100)
6/54:
dados = pd.read_csv(os.path.join(input_path, 'athlete_events.csv'))
regioes = pd.read_csv(os.path.join(input_path, 'noc_regions.csv'))
6/55:
dados.head(4)
dados['Age'] = dados['Age'].astype(int)
6/56:
mulheres = mesclado[mesclado.Sex == 'F']
mulheres.head()
6/57:
medalhas_ouro = medalhas_ouro[np.isfinite(medalhas_ouro['Age'])]
medalhas_ouro['Age'] = medalhas_ouro['Age'].astype(int)
6/58:
cores_douradas = ["#d4af37", "#ffd700", "#f0e68c"]
cores_olimpicas = ["#4A90D9", "#F0E4A1", "#6D6E71", "#8BCC8C", "#FF5E5E", "#3A78C2", "#F7E5A5", "#8C8C8C", "#7ABF7A", "#FF4D4D", "#5D8AB4", "#F5D787", "#6D6E6E", "#9BCC9B", "#FF4C4C", "#3C8CC2", "#F7E7A2", "#7F7F7F", "#7EBF7E", "#FF6D6D"]


mapa_dourado = LinearSegmentedColormap.from_list("golden", cores_douradas, N=100)
mapa_olimpico = LinearSegmentedColormap.from_list("olimpic", cores_olimpicas, N=100)
6/59:
num_barras = mulheres['Year'].nunique()
paleta_olimpica = [mapa_olimpico(i / num_barras) for i in range(num_barras)]

plt.figure(figsize=(20,10))
plt.tight_layout()
sns.countplot(x=mulheres['Year'],hue=mulheres['Year'], legend=False, data=mulheres, palette=paleta_olimpica)
plt.title('Distribuição de medalhas por ano')
plt.ylabel('Medalhas')
plt.xlabel('Ano')
6/60:
mulheres_verao = mesclado[mesclado.Sex == 'F'] & mesclado[mesclado.Season == "Summer"]
mulheres.head()
6/61:
mulheres_verao = mesclado[(mesclado.Sex == 'F'& mesclado.Season == "Summer")]
mulheres.head()
6/62:
mulheres_verao = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Summer")]
mulheres.head()
6/63:
mulheres_verao = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Summer")]
mulhes_inverno = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Winter")]
mulheres.head()
6/64:
mulheres_verao = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Summer")]
mulhes_inverno = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Winter")]
6/65:
num_barras = mulheres_verao['Year'].nunique()
paleta_olimpica = [mapa_olimpico(i / num_barras) for i in range(num_barras)]

plt.figure(figsize=(20,10))
plt.tight_layout()
sns.countplot(x=mulheres_verao['Year'],hue=mulheres_verao['Year'], legend=False, data=mulheres_verao, palette=paleta_olimpica)
plt.title('Distribuição de medalhas por ano')
plt.ylabel('Medalhas')
plt.xlabel('Ano')
6/66:
num_barras = mulheres_verao['Year'].nunique()
paleta_olimpica = [mapa_olimpico(i / num_barras) for i in range(num_barras)]

plt.figure(figsize=(20,10))
plt.tight_layout()
sns.countplot(x=mulheres_verao['Year'],hue=mulheres_verao['Year'], legend=False, data=mulheres_verao, palette=paleta_olimpica)
plt.title('Distribuição de medalhas por ano - Verao')
plt.ylabel('Medalhas')
plt.xlabel('Ano')
6/67:
plt.figure(figsize=(20, 10))
plt.tight_layout()
sns.countplot(x=mais_cinquenta_anos, hue=mais_cinquenta_anos, legend=False, order=contagem.index, palette=cores_olimpicas)
plt.title('Medalhas de Ouro por esporte para atletas com mais de 50 anos')
plt.ylabel('Medalhas de ouro')
plt.xlabel('Esporte')
6/68:
num_barras = mulheres_verao['Year'].nunique()
paleta_olimpica = [mapa_olimpico(i / num_barras) for i in range(num_barras)]

plt.figure(figsize=(20,10))
plt.tight_layout()
sns.countplot(x=mulheres_verao['Year'],hue=mulheres_verao['Year'], legend=False, data=mulheres_verao, palette=paleta_olimpica)
plt.title('Distribuição de medalhas por ano - Verao')
plt.ylabel('Medalhas')
plt.xlabel('Ano')

plt.figure(figsize=(20,10))
plt.tight_layout()
sns.countplot(x=mulhes_inverno['Year'],hue=mulhes_inverno['Year'], legend=False, data=mulhes_inverno, palette=paleta_olimpica)
plt.title('Distribuição de medalhas por ano - Inverno')
plt.ylabel('Medalhas')
plt.xlabel('Ano')
6/69: top_10_paises = mesclado.region.value_counts().head(10)
6/70:
top_10_paises = mesclado.region.value_counts().head(10)
print(top_10_paises)
6/71:
medal_summary = mesclado.pivot_table(index='region', columns='medal', aggfunc='size', fill_value=0)

# Renomear as colunas para melhor legibilidade
medal_summary.columns = ['gold', 'silver', 'bronze']

# Ordenar pelos países com mais medalhas de ouro
medal_summary = medal_summary.sort_values(by='gold', ascending=False)

print(medal_summary)
6/72:
medal_summary = mesclado.pivot_table(index='region', columns='medals', aggfunc='size', fill_value=0)

# Renomear as colunas para melhor legibilidade
medal_summary.columns = ['gold', 'silver', 'bronze']

# Ordenar pelos países com mais medalhas de ouro
medal_summary = medal_summary.sort_values(by='gold', ascending=False)

print(medal_summary)
6/73:
medal_summary = mesclado.pivot_table(index='Region', columns='Medal', aggfunc='size', fill_value=0)

# Renomear as colunas para melhor legibilidade
medal_summary.columns = ['gold', 'silver', 'bronze']

# Ordenar pelos países com mais medalhas de ouro
medal_summary = medal_summary.sort_values(by='gold', ascending=False)

print(medal_summary)
6/74:
medal_summary = mesclado.pivot_table(index='region', columns='Medal', aggfunc='size', fill_value=0)

# Renomear as colunas para melhor legibilidade
medal_summary.columns = ['gold', 'silver', 'bronze']

# Ordenar pelos países com mais medalhas de ouro
medal_summary = medal_summary.sort_values(by='gold', ascending=False)

print(medal_summary)
6/75:
medal_summary = mesclado.pivot_table(index='region', columns='Medal', aggfunc='size', fill_value=0).head(10)

# Renomear as colunas para melhor legibilidade
medal_summary.columns = ['gold', 'silver', 'bronze']

# Ordenar pelos países com mais medalhas de ouro
medal_summary = medal_summary.sort_values(by='gold', ascending=False)

print(medal_summary)
6/76:
medal_summary = mesclado.pivot_table(index='region', columns='Medal', aggfunc='size', fill_value=0).head(10)

# Renomear as colunas para melhor legibilidade
medal_summary.columns = ['Ouro', 'Prata', 'Bronze']

# Ordenar pelos países com mais medalhas de ouro
medal_summary = medal_summary.sort_values(by='gold', ascending=False)

print(medal_summary)
6/77:
medal_summary = mesclado.pivot_table(index='region', columns='Medal', aggfunc='size', fill_value=0).head(10)

# Renomear as colunas para melhor legibilidade
medal_summary.columns = ['Ouro', 'Prata', 'Bronze']

# Ordenar pelos países com mais medalhas de ouro
medal_summary = medal_summary.sort_values(by='Ouro', ascending=False)

print(medal_summary)
6/78:
medal_summary = mesclado.pivot_table(index='region', columns='Medal', aggfunc='size', fill_value=0).head(10)

# Renomear as colunas para melhor legibilidade
medal_summary.columns = ['gold', 'silver', 'bronze']

# Ordenar pelos países com mais medalhas de ouro
medal_summary = medal_summary.sort_values(by='gold', ascending=False)

print(medal_summary)
6/79:
medal_summary = mesclado.pivot_table(index='region', columns='Medal', aggfunc='size', fill_value=0)

# Renomear as colunas para melhor legibilidade
medal_summary.columns = ['gold', 'silver', 'bronze']

# Ordenar pelos países com mais medalhas de ouro
medal_summary = medal_summary.sort_values(by='gold', ascending=False)

print(medal_summary)
6/80:
medal_summary = mesclado.pivot_table(index='region', columns='Medal', aggfunc='size', fill_value=0).head(10)

# Renomear as colunas para melhor legibilidade
medal_summary.columns = ['gold', 'silver', 'bronze']

# Ordenar pelos países com mais medalhas de ouro
medal_summary = medal_summary.sort_values(by='gold', ascending=False)

print(medal_summary)
6/81:
medal_summary = mesclado.pivot_table(index='region', columns='Medal', aggfunc='size', fill_value=0)

# Renomear as colunas para melhor legibilidade
medal_summary.columns = ['Ouro', 'Prata', 'Bronze']

# Ordenar pelos países com mais medalhas de ouro
medal_summary = medal_summary.sort_values(by='Ouro', ascending=False)

top_10_paises_ouro = medal_summary.head(10)

print(medal_summary)
6/82:
medal_summary = mesclado.pivot_table(index='region', columns='Medal', aggfunc='size')

# Renomear as colunas para melhor legibilidade
medal_summary.columns = ['Ouro', 'Prata', 'Bronze']

# Ordenar pelos países com mais medalhas de ouro
medal_summary = medal_summary.sort_values(by='Ouro', ascending=False)

top_10_paises_ouro = medal_summary.head(10)

print(medal_summary)
6/83:
medal_summary = mesclado.pivot_table(index='region', columns='Medal', aggfunc='size', fill_value=0)

# Renomear as colunas para melhor legibilidade
medal_summary.columns = ['Ouro', 'Prata', 'Bronze']

# Ordenar pelos países com mais medalhas de ouro
medal_summary = medal_summary.sort_values(by='Ouro', ascending=False)

top_10_paises_ouro = medal_summary.head(10)

print(medal_summary)
6/84:
medal_summary = mesclado.pivot_table(index='region', columns='Medal', aggfunc='size', fill_value=0)

# Renomear as colunas para melhor legibilidade
medal_summary.columns = ['Ouro', 'Prata', 'Bronze']

# Ordenar pelos países com mais medalhas de ouro
medal_summary = medal_summary.sort_values(by='Ouro', ascending=False)

medal_summary.head(10)
6/85: qtde_verao = mesclado[mesclado['Season']=='Summer'].value_counts()
6/86:
qtde_verao = mesclado[mesclado['Season']=='Summer'].value_counts()
qtde_inverno = mesclado[mesclado['Season']=='Winter'].value_counts()

print(qtde_verao, qtde_inverno)
6/87:
qtde_verao = mesclado[mesclado['Season']=='Summer']
qtde_inverno = mesclado[mesclado['Season']=='Winter']

print(qtde_verao, qtde_inverno)
6/88:
qtde_verao = mesclado[mesclado['Season']=='Summer']
qtde_inverno = mesclado[mesclado['Season']=='Winter']

print(qtde_verao, qtde_inverno)
6/89:
qtde_verao = mesclado[mesclado['Season']=='Summer']
qtde_inverno = mesclado[mesclado['Season']=='Winter']

num_comp_verao = qtde_verao['Year'].unique


print(num_comp_verao)
6/90:
qtde_verao = mesclado[mesclado['Season']=='Summer']
qtde_inverno = mesclado[mesclado['Season']=='Winter']

num_comp_verao = qtde_verao['Year'].value_counts()


print(num_comp_verao)
6/91:
qtde_verao = mesclado[mesclado['Season']=='Summer']
qtde_inverno = mesclado[mesclado['Season']=='Winter']

num_comp_verao = qtde_verao['Year'].value_counts


print(num_comp_verao)
6/92:
qtde_verao = mesclado[mesclado['Season']=='Summer']
qtde_inverno = mesclado[mesclado['Season']=='Winter']

num_comp_verao = qtde_verao['Year'].nunique()


print(num_comp_verao)
6/93:
comp_verao = mesclado[mesclado['Season']=='Summer']
comp_inverno = mesclado[mesclado['Season']=='Winter']

num_comp_verao = comp_verao['Year'].nunique()
num_comp_inverno = comp_inverno['Year'].nunique()


print(num_comp_verao, num_comp_inverno)
6/94: dados.head()
6/95:
comp_verao = mesclado[mesclado['Season']=='Summer']
comp_inverno = mesclado[mesclado['Season']=='Winter']

num_comp_verao = comp_verao['Year'].nunique()
num_comp_inverno = comp_inverno['Year'].nunique()

comp_verao = comp_verao[np.isfinite(comp_verao['Medal'])]
comp_inverno = comp_inverno[np.isfinite(comp_inverno['Medal'])]

num_medalhas_verao = comp_verao['Medal'].value_counts()
num_medalhas_inverno = comp_inverno['Medal'].value_counts()

print(num_medalhas_verao, num_medalhas_inverno)
6/96:
comp_verao = mesclado[mesclado['Season']=='Summer']
comp_inverno = mesclado[mesclado['Season']=='Winter']

num_comp_verao = comp_verao['Year'].nunique()
num_comp_inverno = comp_inverno['Year'].nunique()

comp_verao = comp_verao[comp_verao['Medal'] != 'NA']
comp_inverno = comp_inverno[comp_inverno['Medal'] != 'NA']

num_medalhas_verao = comp_verao['Medal'].value_counts()
num_medalhas_inverno = comp_inverno['Medal'].value_counts()

print(num_medalhas_verao, num_medalhas_inverno)
6/97:
comp_verao = mesclado[mesclado['Season']=='Summer']
comp_inverno = mesclado[mesclado['Season']=='Winter']

num_comp_verao = comp_verao['Year'].nunique()
num_comp_inverno = comp_inverno['Year'].nunique()

comp_verao = comp_verao[comp_verao['Medal'] != 'NA']
comp_inverno = comp_inverno[comp_inverno['Medal'] != 'NA']

num_medalhas_verao = comp_verao['Medal'].value_counts()
num_medalhas_inverno = comp_inverno['Medal'].value_counts()

media_medalha_competicao = (num_medalhas_inverno + num_medalhas_verao)/(num_comp_verao + num_comp_inverno)

print(f'''Então nesses ultimos 120 anos tivemos {num_comp_verao} competições de verão e 
    {comp_inverno} competições de inverno.\nForam distribuidas
    {num_medalhas_verao + num_medalhas_inverno} medalhas.\nNa média, são distribuidas {media_medalha_competicao}
    por competicao''')
6/98:
comp_verao = mesclado[mesclado['Season']=='Summer']
comp_inverno = mesclado[mesclado['Season']=='Winter']

num_comp_verao = comp_verao['Year'].nunique()
num_comp_inverno = comp_inverno['Year'].nunique()

comp_verao = comp_verao[comp_verao['Medal'] != 'NA']
comp_inverno = comp_inverno[comp_inverno['Medal'] != 'NA']

num_medalhas_verao = comp_verao['Medal'].value_counts()
num_medalhas_inverno = comp_inverno['Medal'].value_counts()

media_medalha_competicao = (num_medalhas_inverno + num_medalhas_verao)/(num_comp_verao + num_comp_inverno)

print(f'''Então nesses ultimos 120 anos tivemos {num_comp_verao} competições de verão e 
    {num_comp_inverno} competições de inverno.\nForam distribuidas
    {num_medalhas_verao + num_medalhas_inverno} medalhas.\nNa média, são distribuidas {media_medalha_competicao}
    por competicao''')
6/99:
comp_verao = mesclado[mesclado['Season']=='Summer']
comp_inverno = mesclado[mesclado['Season']=='Winter']

num_comp_verao = comp_verao['Year'].nunique()
num_comp_inverno = comp_inverno['Year'].nunique()

comp_verao = comp_verao[comp_verao['Medal'] != 'NA']
comp_inverno = comp_inverno[comp_inverno['Medal'] != 'NA']

num_medalhas_verao = comp_verao['Medal'].value_counts()
num_medalhas_inverno = comp_inverno['Medal'].value_counts()

media_medalha_competicao = (num_medalhas_inverno + num_medalhas_verao)/(num_comp_verao + num_comp_inverno)

print(f'''Então nesses ultimos 120 anos tivemos {num_comp_verao} competições de verão e 
{num_comp_inverno} competições de inverno.\nForam distribuidas
{num_medalhas_verao + num_medalhas_inverno} medalhas.\nNa média, são distribuidas {media_medalha_competicao}
por competicao''')
6/100:
comp_verao = mesclado[mesclado['Season']=='Summer']
comp_inverno = mesclado[mesclado['Season']=='Winter']

num_comp_verao = comp_verao['Year'].nunique()
num_comp_inverno = comp_inverno['Year'].nunique()

comp_verao = comp_verao[comp_verao['Medal'] != 'NA']
comp_inverno = comp_inverno[comp_inverno['Medal'] != 'NA']

num_medalhas_verao = comp_verao['Medal'].value_counts()
num_medalhas_inverno = comp_inverno['Medal'].value_counts()

media_medalha_competicao = (num_medalhas_inverno + num_medalhas_verao)/(num_comp_verao + num_comp_inverno)

print(f"Então nesses ultimos 120 anos tivemos {num_comp_verao} competições de verão e "
        f"{num_comp_inverno} competições de inverno.\nForam distribuidas"
        f"{num_medalhas_verao + num_medalhas_inverno} medalhas.\nNa média, "
        f"são distribuidas {media_medalha_competicao}"
        f"por competicao")
6/101:
comp_verao = mesclado[mesclado['Season']=='Summer']
comp_inverno = mesclado[mesclado['Season']=='Winter']

num_comp_verao = comp_verao['Year'].nunique()
num_comp_inverno = comp_inverno['Year'].nunique()

comp_verao = comp_verao[comp_verao['Medal'] != 'NA']
comp_inverno = comp_inverno[comp_inverno['Medal'] != 'NA']

num_medalhas_verao = comp_verao['Medal'].value_counts().count()
num_medalhas_inverno = comp_inverno['Medal'].value_counts()

media_medalha_competicao = (num_medalhas_inverno + num_medalhas_verao)/(num_comp_verao + num_comp_inverno)

print(f"Então nesses ultimos 120 anos tivemos {num_comp_verao} competições de verão e "
        f"{num_comp_inverno} competições de inverno.\nForam distribuidas"
        f"{num_medalhas_verao + num_medalhas_inverno} medalhas.\nNa média, "
        f"são distribuidas {media_medalha_competicao}"
        f"por competicao")
6/102:
comp_verao = mesclado[mesclado['Season']=='Summer']
comp_inverno = mesclado[mesclado['Season']=='Winter']

num_comp_verao = comp_verao['Year'].nunique()
num_comp_inverno = comp_inverno['Year'].nunique()

comp_verao = comp_verao[comp_verao['Medal'] != 'NA']
comp_inverno = comp_inverno[comp_inverno['Medal'] != 'NA']

num_medalhas_verao = comp_verao['Medal'].value_counts()
num_medalhas_inverno = comp_inverno['Medal'].value_counts()

media_medalha_competicao = (num_medalhas_inverno + num_medalhas_verao)/(num_comp_verao + num_comp_inverno)

print(f"Então nesses ultimos 120 anos tivemos {num_comp_verao} competições de verão e "
        f"{num_comp_inverno} competições de inverno.\nForam distribuidas"
        f"{num_medalhas_verao + num_medalhas_inverno} medalhas.\nNa média, "
        f"são distribuidas {media_medalha_competicao}"
        f"por competicao")
6/103:
comp_verao = mesclado[mesclado['Season']=='Summer']
comp_inverno = mesclado[mesclado['Season']=='Winter']

num_comp_verao = comp_verao['Year'].nunique()
num_comp_inverno = comp_inverno['Year'].nunique()

comp_verao = comp_verao[comp_verao['Medal'] != 'NA']
comp_inverno = comp_inverno[comp_inverno['Medal'] != 'NA']

num_medalhas_verao = comp_verao['Medal'].value_counts()
num_medalhas_inverno = comp_inverno['Medal'].value_counts()

media_medalha_competicao = (num_medalhas_inverno + num_medalhas_verao)/(num_comp_verao + num_comp_inverno)

print(f"Então nesses ultimos 120 anos tivemos {num_comp_verao} competições de verão e "
        f"{num_comp_inverno} competições de inverno.\nForam distribuidas "
        f"{num_medalhas_verao + num_medalhas_inverno} medalhas.\nNa média, "
        f"são distribuidas {media_medalha_competicao}"
        f"por competicao")
6/104:
comp_verao = mesclado[mesclado['Season']=='Summer']
comp_inverno = mesclado[mesclado['Season']=='Winter']

num_comp_verao = comp_verao['Year'].nunique()
num_comp_inverno = comp_inverno['Year'].nunique()

comp_verao = comp_verao[comp_verao['Medal'] != 'NA']
comp_inverno = comp_inverno[comp_inverno['Medal'] != 'NA']

num_medalhas_verao = comp_verao['Medal'].value_counts().sum()
num_medalhas_inverno = comp_inverno['Medal'].value_counts()

media_medalha_competicao = (num_medalhas_inverno + num_medalhas_verao)/(num_comp_verao + num_comp_inverno)

print(f"Então nesses ultimos 120 anos tivemos {num_comp_verao} competições de verão e "
        f"{num_comp_inverno} competições de inverno.\nForam distribuidas "
        f"{num_medalhas_verao + num_medalhas_inverno} medalhas.\nNa média, "
        f"são distribuidas {media_medalha_competicao}"
        f"por competicao")
6/105:
comp_verao = mesclado[mesclado['Season']=='Summer']
comp_inverno = mesclado[mesclado['Season']=='Winter']

num_comp_verao = comp_verao['Year'].nunique()
num_comp_inverno = comp_inverno['Year'].nunique()

comp_verao = comp_verao[comp_verao['Medal'] != 'NA']
comp_inverno = comp_inverno[comp_inverno['Medal'] != 'NA']

num_medalhas_verao = comp_verao['Medal'].value_counts()
num_medalhas_inverno = comp_inverno['Medal'].value_counts()

media_medalha_competicao = (num_medalhas_inverno + num_medalhas_verao)/(num_comp_verao + num_comp_inverno)

print(f"Então nesses ultimos 120 anos tivemos {num_comp_verao} competições de verão e "
        f"{num_comp_inverno} competições de inverno.\nForam distribuidas "
        f"{num_medalhas_verao + num_medalhas_inverno} medalhas.\nNa média, "
        f"são distribuidas {media_medalha_competicao}"
        f"por competicao")
6/106:
comp_verao = mesclado[mesclado['Season']=='Summer']
comp_inverno = mesclado[mesclado['Season']=='Winter']

num_comp_verao = comp_verao['Year'].nunique()
num_comp_inverno = comp_inverno['Year'].nunique()

comp_verao = comp_verao[comp_verao['Medal'] != 'NA']
comp_inverno = comp_inverno[comp_inverno['Medal'] != 'NA']

num_medalhas_verao = comp_verao['Medal'].count()
num_medalhas_inverno = comp_inverno['Medal'].value_counts()

media_medalha_competicao = (num_medalhas_inverno + num_medalhas_verao)/(num_comp_verao + num_comp_inverno)

print(f"Então nesses ultimos 120 anos tivemos {num_comp_verao} competições de verão e "
        f"{num_comp_inverno} competições de inverno.\nForam distribuidas "
        f"{num_medalhas_verao + num_medalhas_inverno} medalhas.\nNa média, "
        f"são distribuidas {media_medalha_competicao}"
        f"por competicao")
6/107:
comp_verao = mesclado[mesclado['Season']=='Summer']
comp_inverno = mesclado[mesclado['Season']=='Winter']

num_comp_verao = comp_verao['Year'].nunique()
num_comp_inverno = comp_inverno['Year'].nunique()

comp_verao = comp_verao[comp_verao['Medal'] != 'NA']
comp_inverno = comp_inverno[comp_inverno['Medal'] != 'NA']

num_medalhas_verao = comp_verao.count()
num_medalhas_inverno = comp_inverno['Medal'].value_counts()

media_medalha_competicao = (num_medalhas_inverno + num_medalhas_verao)/(num_comp_verao + num_comp_inverno)

print(f"Então nesses ultimos 120 anos tivemos {num_comp_verao} competições de verão e "
        f"{num_comp_inverno} competições de inverno.\nForam distribuidas "
        f"{num_medalhas_verao + num_medalhas_inverno} medalhas.\nNa média, "
        f"são distribuidas {media_medalha_competicao}"
        f"por competicao")
6/108:
comp_verao = mesclado[mesclado['Season']=='Summer']
comp_inverno = mesclado[mesclado['Season']=='Winter']

num_comp_verao = comp_verao['Year'].nunique()
num_comp_inverno = comp_inverno['Year'].nunique()

comp_verao = comp_verao[comp_verao['Medal'] != 'NA']
comp_inverno = comp_inverno[comp_inverno['Medal'] != 'NA']

num_medalhas_verao = comp_verao['Medal'].value_counts().sum()
num_medalhas_inverno = comp_inverno['Medal'].value_counts().sum()

media_medalha_competicao = (num_medalhas_inverno + num_medalhas_verao)/(num_comp_verao + num_comp_inverno)

print(f"Então nesses ultimos 120 anos tivemos {num_comp_verao} competições de verão e "
        f"{num_comp_inverno} competições de inverno.\nForam distribuidas "
        f"{num_medalhas_verao + num_medalhas_inverno} medalhas.\nNa média, "
        f"são distribuidas {media_medalha_competicao}"
        f"por competicao")
6/109:
comp_verao = mesclado[mesclado['Season']=='Summer']
comp_inverno = mesclado[mesclado['Season']=='Winter']

num_comp_verao = comp_verao['Year'].nunique()
num_comp_inverno = comp_inverno['Year'].nunique()

comp_verao = comp_verao[comp_verao['Medal'] != 'NA']
comp_inverno = comp_inverno[comp_inverno['Medal'] != 'NA']

num_medalhas_verao = comp_verao['Medal'].value_counts().sum()
num_medalhas_inverno = comp_inverno['Medal'].value_counts().sum()

media_medalha_competicao = (num_medalhas_inverno + num_medalhas_verao)/(num_comp_verao + num_comp_inverno)

print(f"Então nesses ultimos 120 anos tivemos {num_comp_verao} competições de verão e "
        f"{num_comp_inverno} competições de inverno.\nForam distribuidas "
        f"{num_medalhas_verao + num_medalhas_inverno} medalhas.\nNa média, "
        f"são distribuidas {media_medalha_competicao:.2f} "
        f"por competicao")
6/110:
comp_verao = mesclado[mesclado['Season']=='Summer']
comp_inverno = mesclado[mesclado['Season']=='Winter']

num_comp_verao = comp_verao['Year'].nunique()
num_comp_inverno = comp_inverno['Year'].nunique()

comp_verao = comp_verao[comp_verao['Medal'] != 'NA']
comp_inverno = comp_inverno[comp_inverno['Medal'] != 'NA']

num_medalhas_verao = comp_verao['Medal'].value_counts().sum()
num_medalhas_inverno = comp_inverno['Medal'].value_counts().sum()

media_medalha_competicao = (num_medalhas_inverno + num_medalhas_verao)/(num_comp_verao + num_comp_inverno)

print(f"Então nesses ultimos 120 anos tivemos {num_comp_verao} competições de verão e "
        f"{num_comp_inverno} competições de inverno.\nForam distribuidas "
        f"{num_medalhas_verao + num_medalhas_inverno} medalhas.\nNa média, "
        f"são distribuidas {media_medalha_competicao:.0f} "
        f"por competicao")
6/111:
comp_verao = mesclado[mesclado['Season']=='Summer']
comp_inverno = mesclado[mesclado['Season']=='Winter']

num_comp_verao = comp_verao['Year'].nunique()
num_comp_inverno = comp_inverno['Year'].nunique()

comp_verao = comp_verao[comp_verao['Medal'] != 'NA']
comp_inverno = comp_inverno[comp_inverno['Medal'] != 'NA']

num_medalhas_verao = comp_verao['Medal'].value_counts().sum()
num_medalhas_inverno = comp_inverno['Medal'].value_counts().sum()

media_medalha_competicao = (num_medalhas_inverno + num_medalhas_verao)/(num_comp_verao + num_comp_inverno)

print(f"Então nesses ultimos 120 anos tivemos {num_comp_verao} competições de verão e "
        f"{num_comp_inverno} competições de inverno.\nForam distribuidas "
        f"{num_medalhas_verao + num_medalhas_inverno} medalhas.\nNa média, "
        f"são distribuidas {media_medalha_competicao:.0f} medalhas "
        f"por competicao")
6/112:
comp_verao = mesclado[mesclado['Season']=='Summer']
comp_inverno = mesclado[mesclado['Season']=='Winter']

num_comp_verao = comp_verao['Year'].nunique()
num_comp_inverno = comp_inverno['Year'].nunique()

comp_verao = comp_verao[comp_verao['Medal'] != 'NA']
comp_inverno = comp_inverno[comp_inverno['Medal'] != 'NA']

num_medalhas_verao = comp_verao['Medal'].value_counts().sum()
num_medalhas_inverno = comp_inverno['Medal'].value_counts().sum()

media_medalha_comp_verao = (num_medalhas_verao)/(num_comp_verao)
media_medalha_comp_inverno = (num_medalhas_inverno)/(num_comp_inverno)


print(f"Então nesses ultimos 120 anos tivemos {num_comp_verao} competições de verão e "
        f"{num_comp_inverno} competições de inverno.\nForam distribuidas "
        f"{num_medalhas_verao + num_medalhas_inverno} medalhas.\nNa média, "
        f"são distribuidas {media_medalha_comp_verao:.0f} medalhas "
        f"por competicao no verão e {media_medalha_comp_inverno:.0f} medalhas por competição no inverno")
6/113:
comp_verao = mesclado[mesclado['Season']=='Summer']
comp_inverno = mesclado[mesclado['Season']=='Winter']

num_comp_verao = comp_verao['Year'].nunique()
num_comp_inverno = comp_inverno['Year'].nunique()

comp_verao = comp_verao[comp_verao['Medal'] != 'NA']
comp_inverno = comp_inverno[comp_inverno['Medal'] != 'NA']

num_medalhas_verao = comp_verao['Medal'].value_counts().sum()
num_medalhas_inverno = comp_inverno['Medal'].value_counts().sum()

media_medalha_comp_verao = (num_medalhas_verao)/(num_comp_verao)
media_medalha_comp_inverno = (num_medalhas_inverno)/(num_comp_inverno)


print(f"Então nesses ultimos 120 anos tivemos {num_comp_verao} competições de verão e "
        f"{num_comp_inverno} competições de inverno.\nForam distribuidas "
        f"{num_medalhas_verao + num_medalhas_inverno} medalhas.\nNa média, "
        f"são distribuidas {media_medalha_comp_verao:.0f} medalhas "
        f"por competição no verão e {media_medalha_comp_inverno:.0f} medalhas por competição no inverno")
6/114:
comp_verao = mesclado[mesclado['Season']=='Summer']
comp_inverno = mesclado[mesclado['Season']=='Winter']

num_comp_verao = comp_verao['Year'].nunique()
num_comp_inverno = comp_inverno['Year'].nunique()

comp_verao = comp_verao[comp_verao['Medal'] != 'NA']
comp_inverno = comp_inverno[comp_inverno['Medal'] != 'NA']

num_medalhas_verao = comp_verao['Medal'].value_counts().sum()
num_medalhas_inverno = comp_inverno['Medal'].value_counts().sum()

media_medalha_comp_verao = (num_medalhas_verao)/(num_comp_verao)
media_medalha_comp_inverno = (num_medalhas_inverno)/(num_comp_inverno)


print(f"Então nesses ultimos 120 anos tivemos {num_comp_verao} competições de verão e "
        f"{num_comp_inverno} competições de inverno.\nForam distribuidas "
        f"{num_medalhas_verao + num_medalhas_inverno} medalhas.\nNa média, "
        f"são distribuidas {media_medalha_comp_verao:.0f} medalhas "
        f"por competição no verão e {media_medalha_comp_inverno:.0f} medalhas por competição no inverno")
6/115:
resumo_medalhas.plot(kind='bar', stacked=True, figsize=(10,7))

plt.title('Top 10 Países por Número de Medalhas')
plt.xlabel('País')
plt.ylabel('Número de Medalhas')
plt.legend(title='Tipo de Medalha')
plt.xticks(rotation=45)
plt.tight_layout()
6/116:
resumo_medalhas = mesclado.pivot_table(index='region', columns='Medal', aggfunc='size', fill_value=0)

# Renomear as colunas para melhor legibilidade
resumo_medalhas.columns = ['Ouro', 'Prata', 'Bronze']

# Ordenar pelos países com mais medalhas de ouro
resumo_medalhas = resumo_medalhas.sort_values(by='Ouro', ascending=False)

resumo_medalhas.head(10)
6/117:
resumo_medalhas.plot(kind='bar', stacked=True, figsize=(10,7))

plt.title('Top 10 Países por Número de Medalhas')
plt.xlabel('País')
plt.ylabel('Número de Medalhas')
plt.legend(title='Tipo de Medalha')
plt.xticks(rotation=45)
plt.tight_layout()
6/118:
resumo_medalhas.plot(kind='bar', stacked=False, figsize=(10,7))

plt.title('Top 10 Países por Número de Medalhas')
plt.xlabel('País')
plt.ylabel('Número de Medalhas')
plt.legend(title='Tipo de Medalha')
plt.xticks(rotation=45)
plt.tight_layout()
6/119: top_10_medalhas_ouro = medalhas_ouro['region'].value_counts().reset_index(name='Medal').head(10)
6/120: top_10_medalhas_ouro = medalhas_ouro['region'].value_counts().reset_index(name='Medal').head(10)
6/121: medalhas_ouro['region'].value_counts().reset_index(name='Medal').head(10)
6/122:
resumo_medalhas = mesclado.pivot_table(index='region', columns='Medal', aggfunc='size', fill_value=0)

# Renomear as colunas para melhor legibilidade
resumo_medalhas.columns = ['Bronze', 'Ouro', 'Prata']

# Ordenar pelos países com mais medalhas de ouro
resumo_medalhas = resumo_medalhas.sort_values(by='Ouro', ascending=False)

resumo_medalhas.head(10)
6/123: top_10_medalhas_ouro = mesclado[mesclado['Medal']=='Gold'].value_counts().head(10)
6/124: mesclado[mesclado['Medal']=='Gold'].value_counts().head(10)
6/125: mesclado[mesclado['Medal']=='Gold'].value_counts()
6/126: mesclado[mesclado['Medal']=='Gold'].value_counts
6/127: mesclado['region'][mesclado['Medal']=='Gold'].value_counts().head(10)
6/128:
top_10_medalhas_ouro = mesclado['region'][mesclado['Medal']=='Gold'].value_counts().head(10)

top_10_medalhas_ouro.plot(kind='bar', stacked='True', figsize=(10,7))
plt.title('Top 10 Países por Número de Medalhas de Ouro')
plt.xlabel('País')
plt.ylabel('Número de Medalhas')
plt.tight_layout()
6/129:
top_10_medalhas_ouro = mesclado['region'][mesclado['Medal']=='Gold'].value_counts().head(10)

top_10_medalhas_ouro.plot(kind='bar', figsize=(10,7))
plt.title('Top 10 Países por Número de Medalhas de Ouro')
plt.xlabel('País')
plt.ylabel('Número de Medalhas')
plt.xticks(rotation=45)
plt.tight_layout()
6/130:
top_10_medalhas_ouro = mesclado['region'][mesclado['Medal']=='Gold'].value_counts().head(10)

top_10_medalhas_ouro.plot(kind='bar', figsize=(10,7), colorbar=paleta_olimpica[0])
plt.title('Top 10 Países por Número de Medalhas de Ouro')
plt.xlabel('País')
plt.ylabel('Número de Medalhas')
plt.xticks(rotation=45)
plt.tight_layout()
6/131:
top_10_medalhas_ouro = mesclado['region'][mesclado['Medal']=='Gold'].value_counts().head(10)

top_10_medalhas_ouro.plot(kind='bar', figsize=(10,7), colorbar=cores_douradas[0])
plt.title('Top 10 Países por Número de Medalhas de Ouro')
plt.xlabel('País')
plt.ylabel('Número de Medalhas')
plt.xticks(rotation=45)
plt.tight_layout()
6/132:
top_10_medalhas_ouro = mesclado['region'][mesclado['Medal']=='Gold'].value_counts().head(10)

top_10_medalhas_ouro.plot(kind='bar', figsize=(10,7), colormap=cores_douradas[0])
plt.title('Top 10 Países por Número de Medalhas de Ouro')
plt.xlabel('País')
plt.ylabel('Número de Medalhas')
plt.xticks(rotation=45)
plt.tight_layout()
6/133:
top_10_medalhas_ouro = mesclado['region'][mesclado['Medal']=='Gold'].value_counts().head(10)

top_10_medalhas_ouro.plot(kind='bar', figsize=(10,7), colormap=mapa_dourado[0])
plt.title('Top 10 Países por Número de Medalhas de Ouro')
plt.xlabel('País')
plt.ylabel('Número de Medalhas')
plt.xticks(rotation=45)
plt.tight_layout()
6/134:
top_10_medalhas_ouro = mesclado['region'][mesclado['Medal']=='Gold'].value_counts().head(10)

top_10_medalhas_ouro.plot(kind='bar', figsize=(10,7), colormap=mapa_dourado(1))
plt.title('Top 10 Países por Número de Medalhas de Ouro')
plt.xlabel('País')
plt.ylabel('Número de Medalhas')
plt.xticks(rotation=45)
plt.tight_layout()
6/135:
top_10_medalhas_ouro = mesclado['region'][mesclado['Medal']=='Gold'].value_counts().head(10)

top_10_medalhas_ouro.plot(kind='bar', figsize=(10,7), colormap=mapa_dourado())
plt.title('Top 10 Países por Número de Medalhas de Ouro')
plt.xlabel('País')
plt.ylabel('Número de Medalhas')
plt.xticks(rotation=45)
plt.tight_layout()
6/136:
top_10_medalhas_ouro = mesclado['region'][mesclado['Medal']=='Gold'].value_counts().head(10)

top_10_medalhas_ouro.plot(kind='bar', figsize=(10,7), colormap=mapa_dourado(X=1))
plt.title('Top 10 Países por Número de Medalhas de Ouro')
plt.xlabel('País')
plt.ylabel('Número de Medalhas')
plt.xticks(rotation=45)
plt.tight_layout()
6/137:
top_10_medalhas_ouro = mesclado['region'][mesclado['Medal']=='Gold'].value_counts().head(10)

top_10_medalhas_ouro.plot(kind='bar', figsize=(10,7), colormap='gold')
plt.title('Top 10 Países por Número de Medalhas de Ouro')
plt.xlabel('País')
plt.ylabel('Número de Medalhas')
plt.xticks(rotation=45)
plt.tight_layout()
6/138:
top_10_medalhas_ouro = mesclado['region'][mesclado['Medal']=='Gold'].value_counts().head(10)

top_10_medalhas_ouro.plot(kind='bar', figsize=(10,7))
plt.title('Top 10 Países por Número de Medalhas de Ouro')
plt.xlabel('País')
plt.ylabel('Número de Medalhas')
plt.xticks(rotation=45)
plt.tight_layout()
6/139:
top_10_medalhas_ouro = mesclado['region'][mesclado['Medal']=='Gold'].value_counts().head(10)

top_10_medalhas_ouro.plot(kind='bar', figsize=(10,7))
plt.title('Top 10 Países por Número de Medalhas de Ouro')
plt.xlabel('País')
plt.ylabel('Número de Medalhas')
plt.xticks(rotation=45)
plt.tight_layout()
6/140:
top_10_medalhas_ouro = mesclado['region'][mesclado['Medal']=='Gold'].value_counts().head(10)


num_barras = top_10_medalhas_ouro['region'].nunique()
paleta_dourada = [mapa_dourado(i / num_barras) for i in range(num_barras)]

plt.figure(figsize=(20,10))
plt.tight_layout()
sns.countplot(x=top_10_medalhas_ouro['region'],hue=top_10_medalhas_ouro['region'], legend=False, data=top_10_medalhas_ouro, palette=paleta_dourada)
plt.title('Distribuição de medalhas de ouro por idade')
plt.ylabel('Medalhas de ouro')
plt.xlabel('Idade')
6/141:
top_10_medalhas_ouro = mesclado['region'][mesclado['Medal']=='Gold'].value_counts().head(10)


num_barras = top_10_medalhas_ouro['region'].nunique()
paleta_dourada = [mapa_dourado(i / num_barras) for i in range(num_barras)]

plt.figure(figsize=(20,10))
plt.tight_layout()
sns.countplot(x=top_10_medalhas_ouro['region'],hue=top_10_medalhas_ouro['region'], legend=False, data=top_10_medalhas_ouro, palette=paleta_dourada)
plt.title('Distribuição de medalhas de ouro por idade')
plt.ylabel('Medalhas de ouro')
plt.xlabel('Idade')
6/142:
top_10_medalhas_ouro = mesclado['region'][mesclado['Medal']=='Gold'].value_counts().head(10)


print(top_10_medalhas_ouro)
6/143:
top_10_medalhas_ouro = mesclado['region'][mesclado['Medal']=='Gold'].value_counts().head(10)


num_barras = top_10_medalhas_ouro['region'].nunique()
paleta_dourada = [mapa_dourado(i / num_barras) for i in range(num_barras)]

plt.figure(figsize=(20,10))
plt.tight_layout()
sns.countplot(x=top_10_medalhas_ouro['region'],hue=top_10_medalhas_ouro['region'], legend=False, data=top_10_medalhas_ouro, palette=paleta_dourada)
plt.title('Distribuição de medalhas de ouro por idade')
plt.ylabel('Medalhas de ouro')
plt.xlabel('Idade')
6/144:
top_10_medalhas_ouro = mesclado['region'][mesclado['Medal']=='Gold'].value_counts().head(10)

top_10_medalhas_ouro.plot(kind='bar', figsize=(10,7))
plt.title('Top 10 Países por Número de Medalhas de Ouro')
plt.xlabel('País')
plt.ylabel('Número de Medalhas')
plt.xticks(rotation=45)
plt.tight_layout()
6/145:
mais_cinquenta_anos = medalhas_ouro['Sport'][medalhas_ouro['Age']>50]
contagem = mais_cinquenta_anos.value_counts()
contagem
6/146: medalhas_ouro_usa = mesclado['Event'][mesclado['Medal']=='Gold'].loc[mesclado['NOC']=='USA']
6/147: mesclado['Event'][mesclado['Medal']=='Gold'].loc[mesclado['NOC']=='USA']
6/148: medalhas_ouro_usa = mesclado['Event'][mesclado['Medal']=='Gold'].loc[mesclado['NOC']=='USA']
 7/1:
import numpy as np
import pandas as pd
import seaborn as sns
import os
from matplotlib import pyplot as plt
from matplotlib.colors import LinearSegmentedColormap

dir_atual = os.path.dirname(os.path.abspath('__file__'))
root_dir = os.path.abspath(os.path.join(dir_atual, '..'))
input_path = os.path.join(dir_atual, 'input')

print(os.listdir(input_path))
 7/2:
cores_douradas = ["#d4af37", "#ffd700", "#f0e68c"]
cores_olimpicas = ["#4A90D9", "#F0E4A1", "#6D6E71", "#8BCC8C", "#FF5E5E", "#3A78C2", "#F7E5A5", "#8C8C8C", "#7ABF7A", "#FF4D4D", "#5D8AB4", "#F5D787", "#6D6E6E", "#9BCC9B", "#FF4C4C", "#3C8CC2", "#F7E7A2", "#7F7F7F", "#7EBF7E", "#FF6D6D"]


mapa_dourado = LinearSegmentedColormap.from_list("golden", cores_douradas, N=100)
mapa_olimpico = LinearSegmentedColormap.from_list("olimpic", cores_olimpicas, N=100)
 7/3:
dados = pd.read_csv(os.path.join(input_path, 'athlete_events.csv'))
regioes = pd.read_csv(os.path.join(input_path, 'noc_regions.csv'))
 7/4: dados.head()
 7/5: dados.describe()
 7/6: dados.info()
 7/7: regioes.head()
 7/8:
mesclado = pd.merge(dados, regioes, on='NOC', how='left')
mesclado.head()
 7/9:
comp_verao = mesclado[mesclado['Season']=='Summer']
comp_inverno = mesclado[mesclado['Season']=='Winter']

num_comp_verao = comp_verao['Year'].nunique()
num_comp_inverno = comp_inverno['Year'].nunique()

comp_verao = comp_verao[comp_verao['Medal'] != 'NA']
comp_inverno = comp_inverno[comp_inverno['Medal'] != 'NA']

num_medalhas_verao = comp_verao['Medal'].value_counts().sum()
num_medalhas_inverno = comp_inverno['Medal'].value_counts().sum()

media_medalha_comp_verao = (num_medalhas_verao)/(num_comp_verao)
media_medalha_comp_inverno = (num_medalhas_inverno)/(num_comp_inverno)


print(f"Então nesses últimos 120 anos tivemos {num_comp_verao} competições de verão e "
        f"{num_comp_inverno} competições de inverno.\nForam distribuidas "
        f"{num_medalhas_verao + num_medalhas_inverno} medalhas.\nNa média, "
        f"são distribuidas {media_medalha_comp_verao:.0f} medalhas "
        f"por competição no verão e {media_medalha_comp_inverno:.0f} medalhas por competição no inverno")
7/10:
medalhas_ouro = mesclado[(mesclado.Medal == 'Gold')]
medalhas_ouro.head()
7/11: medalhas_ouro.isnull().any()
7/12:
medalhas_ouro = medalhas_ouro[np.isfinite(medalhas_ouro['Age'])]
medalhas_ouro['Age'] = medalhas_ouro['Age'].astype(int)
7/13:
num_barras = medalhas_ouro['Age'].nunique()
paleta_dourada = [mapa_dourado(i / num_barras) for i in range(num_barras)]

plt.figure(figsize=(20,10))
plt.tight_layout()
sns.countplot(x=medalhas_ouro['Age'],hue=medalhas_ouro['Age'], legend=False, data=medalhas_ouro, palette=paleta_dourada)
plt.title('Distribuição de medalhas de ouro por idade')
plt.ylabel('Medalhas de ouro')
plt.xlabel('Idade')
7/14: menores_quinze_anos = medalhas_ouro['Sport'][medalhas_ouro['Age']<15]
7/15:
plt.figure(figsize=(20, 10))
plt.tight_layout()
sns.countplot(x=menores_quinze_anos, hue=menores_quinze_anos, legend=False, palette=cores_olimpicas)
plt.title('Medalhas de Ouro por esporte com atletas menores de 15 anos')
plt.ylabel('Medalhas de ouro')
plt.xlabel('Esporte')
7/16: menores_quinze_anos.value_counts()
7/17:
mais_cinquenta_anos = medalhas_ouro['Sport'][medalhas_ouro['Age']>50]
contagem = mais_cinquenta_anos.value_counts()
contagem
7/18:
plt.figure(figsize=(20, 10))
plt.tight_layout()
sns.countplot(x=mais_cinquenta_anos, hue=mais_cinquenta_anos, legend=False, order=contagem.index, palette=cores_olimpicas)
plt.title('Medalhas de Ouro por esporte para atletas com mais de 50 anos')
plt.ylabel('Medalhas de ouro')
plt.xlabel('Esporte')
7/19:
mulheres_verao = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Summer")]
mulhes_inverno = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Winter")]
7/20:
num_barras = mulheres_verao['Year'].nunique()
paleta_olimpica = [mapa_olimpico(i / num_barras) for i in range(num_barras)]

plt.figure(figsize=(20,10))
plt.tight_layout()
sns.countplot(x=mulheres_verao['Year'],hue=mulheres_verao['Year'], legend=False, data=mulheres_verao, palette=paleta_olimpica)
plt.title('Distribuição de medalhas por ano - Verao')
plt.ylabel('Medalhas')
plt.xlabel('Ano')

plt.figure(figsize=(20,10))
plt.tight_layout()
sns.countplot(x=mulhes_inverno['Year'],hue=mulhes_inverno['Year'], legend=False, data=mulhes_inverno, palette=paleta_olimpica)
plt.title('Distribuição de medalhas por ano - Inverno')
plt.ylabel('Medalhas')
plt.xlabel('Ano')
7/21:
resumo_medalhas = mesclado.pivot_table(index='region', columns='Medal', aggfunc='size', fill_value=0)

# Renomear as colunas para melhor legibilidade
resumo_medalhas.columns = ['Bronze', 'Ouro', 'Prata']

# Ordenar pelos países com mais medalhas de ouro
resumo_medalhas = resumo_medalhas.sort_values(by='Ouro', ascending=False)

resumo_medalhas.head(10)
7/22:
top_10_medalhas_ouro = mesclado['region'][mesclado['Medal']=='Gold'].value_counts().head(10)

top_10_medalhas_ouro.plot(kind='bar', figsize=(10,7))
plt.title('Top 10 Países por Número de Medalhas de Ouro')
plt.xlabel('País')
plt.ylabel('Número de Medalhas')
plt.xticks(rotation=45)
plt.tight_layout()
7/23: medalhas_ouro_usa = mesclado['Event'][mesclado['Medal']=='Gold'].loc[mesclado['NOC']=='USA']
7/24:
medalhas_ouro_usa = mesclado['Event'][mesclado['Medal']=='Gold'].loc[mesclado['NOC']=='USA']
medalhas_ouro_usa
7/25: medalhas_ouro_usa = mesclado['Event'][mesclado['Medal']=='Gold'].loc[mesclado['NOC']=='USA']
7/26:
medalhas_ouro_usa = mesclado['Event'][mesclado['Medal']=='Gold'].loc[mesclado['NOC']=='USA']
medalhas_ouro_usa.Event.value_counts().head(20)
7/27:
medalhas_ouro_usa = mesclado['Event'][mesclado['Medal']=='Gold'].loc[mesclado['NOC']=='USA']
medalhas_ouro_usa.value_counts().head(20)
7/28:
medalhas_ouro_usa = mesclado[mesclado['Medal']=='Gold'].loc[mesclado['NOC']=='USA']
medalhas_ouro_usa.value_counts().head(20)
7/29:
medalhas_ouro_usa = mesclado[mesclado['Medal']=='Gold'].loc[mesclado['NOC']=='USA']
medalhas_ouro_usa.Event.value_counts().head(20)
7/30:
medalhas_ouro_usa_m = medalhas_ouro_usa[medalhas_ouro_usa['Sex']=='M'].sort_values(['Year'])
medalhas_ouro_usa_m
7/31:
medalhas_ouro_usa_m = medalhas_ouro_usa[(medalhas_ouro_usa['Sex']=='M' & medalhas_ouro_usa['Event']=="Basketball Men's Basketball")].sort_values(['Year'])
medalhas_ouro_usa_m
7/32:
medalhas_ouro_usa_m = medalhas_ouro_usa[
    (medalhas_ouro_usa['Sex'] == 'M') & 
    (medalhas_ouro_usa['Event'] == "Basketball Men's Basketball")
].sort_values(['Year'])
medalhas_ouro_usa_m
7/33:
medalhas_ouro_usa_m = medalhas_ouro_usa[
    (medalhas_ouro_usa['Sex'] == 'M') & 
    (medalhas_ouro_usa['Event'] == "Basketball Men's Basketball")
].sort_values(['Year'])
medalhas_ouro_usa_m['Name'].value_counts().index()
7/34:
medalhas_ouro_usa_m = medalhas_ouro_usa[
    (medalhas_ouro_usa['Sex'] == 'M') & 
    (medalhas_ouro_usa['Event'] == "Basketball Men's Basketball")
].sort_values(['Year'])
medalhas_ouro_usa_m['Name'].value_counts().index
7/35:
medalhas_ouro_usa_m = medalhas_ouro_usa[
    (medalhas_ouro_usa['Sex'] == 'M') & 
    (medalhas_ouro_usa['Event'] == "Basketball Men's Basketball")
].sort_values(['Year'])
medalhas_ouro_usa_m['Name'].value_counts()
7/36:
medalhas_ouro_usa_m = medalhas_ouro_usa[
    (medalhas_ouro_usa['Sex'] == 'M') & 
    (medalhas_ouro_usa['Event'] == "Basketball Men's Basketball")
].sort_values(['Year'])
medalhas_ouro_usa_m['Name'].value_counts().head(10)
7/37:
medalhas_ouro_usa_m = medalhas_ouro_usa[
    (medalhas_ouro_usa['Sex'] == 'M') & 
    (medalhas_ouro_usa['Event'] == "Basketball Men's Basketball")
].sort_values(['Year'])
medalhas_ouro_usa_m['Name'].value_counts()
7/38:
medalhas_ouro_usa_m = medalhas_ouro_usa[
    (medalhas_ouro_usa['Sex'] == 'M') & 
    (medalhas_ouro_usa['Event'] == "Basketball Men's Basketball")
].sort_values(['Year'])
medalhas_ouro_usa_m['Name'].value_counts
7/39:
medalhas_ouro_usa_m = medalhas_ouro_usa[
    (medalhas_ouro_usa['Sex'] == 'M') & 
    (medalhas_ouro_usa['Event'] == "Basketball Men's Basketball")
].sort_values(['Year'])
medalhas_ouro_usa_m['Name'].value_counts()
7/40:
medalhas_ouro_usa_m_equipe = medalhas_ouro_usa_m.groupby(['Year']).first()
medalhas_ouro_usa_m_equipe
7/41:
medalhas_ouro_usa_m = medalhas_ouro_usa[
    (medalhas_ouro_usa['Sex'] == 'M') & 
    (medalhas_ouro_usa['Event'] == "Basketball Men's Basketball")
].sort_values(['Year'])
medalhas_ouro_usa_m['Name'].value_counts()
medalhas_ouro_usa_m['Name'].count()
7/42:
medalhas_ouro_usa_m = medalhas_ouro_usa[
    (medalhas_ouro_usa['Sex'] == 'M') & 
    (medalhas_ouro_usa['Event'] == "Basketball Men's Basketball")
].sort_values(['Year'])
medalhas_ouro_usa_m['Name'].value_counts()
7/43: medalhas_ouro_usa = mesclado[mesclado['Medal']=='Gold']
7/44: medalhas_ouro = mesclado[mesclado['Medal']=='Gold']
7/45:
medalhas_ouro = mesclado[mesclado['Medal']=='Gold']
medalhas_ouro.isna().any()
7/46:
medalhas_ouro = medalhas_ouro[
    (np.isfinite(medalhas_ouro['Height'])) &
    (np.isfinite(medalhas_ouro['Weight']))
]
7/47:
medalhas_ouro = medalhas_ouro[
    (np.isfinite(medalhas_ouro['Height'])) &
    (np.isfinite(medalhas_ouro['Weight']))
]

medalhas_ouro
7/48:
medalhas_ouro = medalhas_ouro[
    (np.isfinite(medalhas_ouro['Height'])) &
    (np.isfinite(medalhas_ouro['Weight']))
]

medalhas_ouro.isna().any()
7/49:
medalhas_ouro = medalhas_ouro[
    (np.isfinite(medalhas_ouro['Height'])) &
    (np.isfinite(medalhas_ouro['Weight']))
]

medalhas_ouro.isna().any(['Height'])
7/50:
medalhas_ouro = medalhas_ouro[
    (np.isfinite(medalhas_ouro['Height'])) &
    (np.isfinite(medalhas_ouro['Weight']))
]

medalhas_ouro.isna().any()
7/51:
plt.figure(figsize=(10,7))
ax = sns.scatterplot(x=medalhas_ouro['Height'], y= medalhas_ouro['Height'], data=medalhas_ouro)
plt.title('Altura vs Peso nos jogos olimpicos')
7/52:
plt.figure(figsize=(12,10))
ax = sns.scatterplot(x=medalhas_ouro['Height'], y= medalhas_ouro['Height'], data=medalhas_ouro)
plt.title('Altura vs Peso nos jogos olimpicos')
7/53:
plt.figure(figsize=(12,10))
ax = sns.scatterplot(x="Height", y="Weight", data=medalhas_ouro)
plt.title('Altura vs Peso nos jogos olimpicos')
7/54:
plt.figure(figsize=(12,10))
ax = sns.scatterplot(x="Height", y="Weight", data=medalhas_ouro, palette=cores_olimpicas)
plt.title('Altura vs Peso nos jogos olimpicos')
7/55:
plt.figure(figsize=(12,10))
ax = sns.scatterplot(x="Height", y="Weight", data=medalhas_ouro)
plt.title('Altura vs Peso nos jogos olimpicos')
7/56:
plt.figure(figsize=(12,10))
ax = sns.scatterplot(x="Height", y="Weight", data=medalhas_ouro)
plt.title('Altura vs Peso nos jogos olimpicos')
plt.xlabel('Altura')
plt.ylabel('Peso')
7/57:
plt.figure(figsize=(12,10))
ax = sns.scatterplot(x="Height", y="Weight", data=medalhas_ouro)
plt.title('Altura vs Peso nos jogos olimpicos')
plt.xlabel('Altura(kg)')
plt.ylabel('Peso(cm)')
7/58:
plt.figure(figsize=(12,10))
ax = sns.scatterplot(x="Height", y="Weight", data=medalhas_ouro)
plt.title('Altura vs Peso nos jogos olimpicos')
plt.xlabel('Altura (cm)')
plt.ylabel('Peso (kg)')
7/59:
disp_medalhas_ouro = medalhas_ouro[
    (medalhas_ouro['Weight']>140) &
    (medalhas_ouro['Height']>170) &
    (medalhas_ouro['Height']<190) 
]
7/60:
medalhas_ouro[
    (medalhas_ouro['Weight']>140) &
    (medalhas_ouro['Height']>170) &
    (medalhas_ouro['Height']<190) 
]
7/61:
medalhas_ouro[
    (medalhas_ouro['Weight']>140) &
    (medalhas_ouro['Height']>170) &
    (medalhas_ouro['Height']<190) 
]['Sport']
7/62:
plt.figure(figsize=(12,10))
ax = sns.scatterplot(x="Height", y="Weight", data=medalhas_ouro, color="#FFD700")
plt.title('Altura vs Peso nos jogos olimpicos')
plt.xlabel('Altura (cm)')
plt.ylabel('Peso (kg)')
7/63:
plt.figure(figsize=(12,10))
ax = sns.scatterplot(x="Height", y="Weight", data=medalhas_ouro, color="#F0E4A1")
plt.title('Altura vs Peso nos jogos olimpicos')
plt.xlabel('Altura (cm)')
plt.ylabel('Peso (kg)')
7/64:
plt.figure(figsize=(12,10))
ax = sns.scatterplot(x="Height", y="Weight", data=medalhas_ouro, color="#FF5E5E")
plt.title('Altura vs Peso nos jogos olimpicos')
plt.xlabel('Altura (cm)')
plt.ylabel('Peso (kg)')
7/65:
top_10_medalhas_ouro = mesclado['region'][mesclado['Medal']=='Gold'].value_counts().head(10)

top_10_medalhas_ouro.plot(kind='bar', figsize=(10,7))
plt.title('Top 10 Países por Número de Medalhas de Ouro', color='#F0E4A1')
plt.xlabel('País')
plt.ylabel('Número de Medalhas')
plt.xticks(rotation=45)
plt.tight_layout()
7/66:
top_10_medalhas_ouro = mesclado['region'][mesclado['Medal']=='Gold'].value_counts().head(10)

top_10_medalhas_ouro.plot(kind='bar', figsize=(10,7))
plt.title('Top 10 Países por Número de Medalhas de Ouro')
plt.xlabel('País')
plt.ylabel('Número de Medalhas')
plt.xticks(rotation=45)
plt.tight_layout()
7/67:
top_10_medalhas_ouro = mesclado['region'][mesclado['Medal']=='Gold'].value_counts().head(10)

top_10_medalhas_ouro.plot(kind='bar', figsize=(10,7), color='#F0E4A1')
plt.title('Top 10 Países por Número de Medalhas de Ouro')
plt.xlabel('País')
plt.ylabel('Número de Medalhas')
plt.xticks(rotation=45)
plt.tight_layout()
7/68:
top_10_medalhas_ouro = mesclado['region'][mesclado['Medal']=='Gold'].value_counts().head(10)

top_10_medalhas_ouro.plot(kind='bar', figsize=(10,7), color='#ffd700')
plt.title('Top 10 Países por Número de Medalhas de Ouro')
plt.xlabel('País')
plt.ylabel('Número de Medalhas')
plt.xticks(rotation=45)
plt.tight_layout()
7/69:
top_10_medalhas_ouro = mesclado['region'][mesclado['Medal']=='Gold'].value_counts().head(10)

top_10_medalhas_ouro.plot(kind='bar', figsize=(10,7), color='#f0e68c')
plt.title('Top 10 Países por Número de Medalhas de Ouro')
plt.xlabel('País')
plt.ylabel('Número de Medalhas')
plt.xticks(rotation=45)
plt.tight_layout()
7/70:
import numpy as np
import pandas as pd
import seaborn as sns
import os
import warnings

from matplotlib import pyplot as plt
from matplotlib.colors import LinearSegmentedColormap

dir_atual = os.path.dirname(os.path.abspath('__file__'))
root_dir = os.path.abspath(os.path.join(dir_atual, '..'))
input_path = os.path.join(dir_atual, 'input')

warnings.filterwarnings('ignore')
7/71:
import numpy as np
import pandas as pd
import seaborn as sns
import os
import warnings

from matplotlib import pyplot as plt
from matplotlib.colors import LinearSegmentedColormap

dir_atual = os.path.dirname(os.path.abspath('__file__'))
root_dir = os.path.abspath(os.path.join(dir_atual, '..'))
input_path = os.path.join(dir_atual, 'input')

warnings.filterwarnings('ignore')
7/72:
cores_douradas = ["#d4af37", "#ffd700", "#f0e68c"]
cores_olimpicas = ["#4A90D9", "#F0E4A1", "#6D6E71", "#8BCC8C", "#FF5E5E", "#3A78C2", "#F7E5A5", "#8C8C8C", "#7ABF7A", "#FF4D4D", "#5D8AB4", "#F5D787", "#6D6E6E", "#9BCC9B", "#FF4C4C", "#3C8CC2", "#F7E7A2", "#7F7F7F", "#7EBF7E", "#FF6D6D"]


mapa_dourado = LinearSegmentedColormap.from_list("golden", cores_douradas, N=100)
mapa_olimpico = LinearSegmentedColormap.from_list("olimpic", cores_olimpicas, N=100)
7/73:
dados = pd.read_csv(os.path.join(input_path, 'athlete_events.csv'))
regioes = pd.read_csv(os.path.join(input_path, 'noc_regions.csv'))
7/74: dados.head()
7/75: dados.describe()
7/76: dados.info()
7/77: regioes.head()
7/78:
mesclado = pd.merge(dados, regioes, on='NOC', how='left')
mesclado.head()
7/79:
comp_verao = mesclado[mesclado['Season']=='Summer']
comp_inverno = mesclado[mesclado['Season']=='Winter']

num_comp_verao = comp_verao['Year'].nunique()
num_comp_inverno = comp_inverno['Year'].nunique()

comp_verao = comp_verao[comp_verao['Medal'] != 'NA']
comp_inverno = comp_inverno[comp_inverno['Medal'] != 'NA']

num_medalhas_verao = comp_verao['Medal'].value_counts().sum()
num_medalhas_inverno = comp_inverno['Medal'].value_counts().sum()

media_medalha_comp_verao = (num_medalhas_verao)/(num_comp_verao)
media_medalha_comp_inverno = (num_medalhas_inverno)/(num_comp_inverno)


print(f"Então nesses últimos 120 anos tivemos {num_comp_verao} competições de verão e "
        f"{num_comp_inverno} competições de inverno.\nForam distribuidas "
        f"{num_medalhas_verao + num_medalhas_inverno} medalhas.\nNa média, "
        f"são distribuidas {media_medalha_comp_verao:.0f} medalhas "
        f"por competição no verão e {media_medalha_comp_inverno:.0f} medalhas por competição no inverno")
7/80:
medalhas_ouro = mesclado[(mesclado.Medal == 'Gold')]
medalhas_ouro.head()
7/81: medalhas_ouro.isnull().any()
7/82:
medalhas_ouro = medalhas_ouro[np.isfinite(medalhas_ouro['Age'])]
medalhas_ouro['Age'] = medalhas_ouro['Age'].astype(int)
7/83:
num_barras = medalhas_ouro['Age'].nunique()
paleta_dourada = [mapa_dourado(i / num_barras) for i in range(num_barras)]

plt.figure(figsize=(20,10))
plt.tight_layout()
sns.countplot(x=medalhas_ouro['Age'],hue=medalhas_ouro['Age'], legend=False, data=medalhas_ouro, palette=paleta_dourada)
plt.title('Distribuição de medalhas de ouro por idade')
plt.ylabel('Medalhas de ouro')
plt.xlabel('Idade')
7/84: menores_quinze_anos = medalhas_ouro['Sport'][medalhas_ouro['Age']<15]
7/85:
plt.figure(figsize=(20, 10))
plt.tight_layout()
sns.countplot(x=menores_quinze_anos, hue=menores_quinze_anos, legend=False, palette=cores_olimpicas)
plt.title('Medalhas de Ouro por esporte com atletas menores de 15 anos')
plt.ylabel('Medalhas de ouro')
plt.xlabel('Esporte')
7/86: menores_quinze_anos.value_counts()
7/87:
mais_cinquenta_anos = medalhas_ouro['Sport'][medalhas_ouro['Age']>50]
contagem = mais_cinquenta_anos.value_counts()
contagem
7/88:
plt.figure(figsize=(20, 10))
plt.tight_layout()
sns.countplot(x=mais_cinquenta_anos, hue=mais_cinquenta_anos, legend=False, order=contagem.index, palette=cores_olimpicas)
plt.title('Medalhas de Ouro por esporte para atletas com mais de 50 anos')
plt.ylabel('Medalhas de ouro')
plt.xlabel('Esporte')
7/89:
mulheres_verao = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Summer")]
mulhes_inverno = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Winter")]
7/90:
num_barras = mulheres_verao['Year'].nunique()
paleta_olimpica = [mapa_olimpico(i / num_barras) for i in range(num_barras)]

plt.figure(figsize=(20,10))
plt.tight_layout()
sns.countplot(x=mulheres_verao['Year'],hue=mulheres_verao['Year'], legend=False, data=mulheres_verao, palette=paleta_olimpica)
plt.title('Distribuição de medalhas por ano - Verao')
plt.ylabel('Medalhas')
plt.xlabel('Ano')

plt.figure(figsize=(20,10))
plt.tight_layout()
sns.countplot(x=mulhes_inverno['Year'],hue=mulhes_inverno['Year'], legend=False, data=mulhes_inverno, palette=paleta_olimpica)
plt.title('Distribuição de medalhas por ano - Inverno')
plt.ylabel('Medalhas')
plt.xlabel('Ano')
7/91:
resumo_medalhas = mesclado.pivot_table(index='region', columns='Medal', aggfunc='size', fill_value=0)

# Renomear as colunas para melhor legibilidade
resumo_medalhas.columns = ['Bronze', 'Ouro', 'Prata']

# Ordenar pelos países com mais medalhas de ouro
resumo_medalhas = resumo_medalhas.sort_values(by='Ouro', ascending=False)

resumo_medalhas.head(10)
7/92:
top_10_medalhas_ouro = mesclado['region'][mesclado['Medal']=='Gold'].value_counts().head(10)

top_10_medalhas_ouro.plot(kind='bar', figsize=(10,7), color='#f0e68c')
plt.title('Top 10 Países por Número de Medalhas de Ouro')
plt.xlabel('País')
plt.ylabel('Número de Medalhas')
plt.xticks(rotation=45)
plt.tight_layout()
7/93:
medalhas_ouro_usa = mesclado[mesclado['Medal']=='Gold'].loc[mesclado['NOC']=='USA']
medalhas_ouro_usa.Event.value_counts().head(20)
7/94:
medalhas_ouro_usa_m = medalhas_ouro_usa[
    (medalhas_ouro_usa['Sex'] == 'M') & 
    (medalhas_ouro_usa['Event'] == "Basketball Men's Basketball")
].sort_values(['Year'])
medalhas_ouro_usa_m['Name'].value_counts()
7/95:
medalhas_ouro_usa_m_equipe = medalhas_ouro_usa_m.groupby(['Year']).first()
medalhas_ouro_usa_m_equipe
7/96:
medalhas_ouro = mesclado[mesclado['Medal']=='Gold']
medalhas_ouro.isna().any()
7/97:
medalhas_ouro = medalhas_ouro[
    (np.isfinite(medalhas_ouro['Height'])) &
    (np.isfinite(medalhas_ouro['Weight']))
]

medalhas_ouro.isna().any()
7/98:
plt.figure(figsize=(12,10))
ax = sns.scatterplot(x="Height", y="Weight", data=medalhas_ouro, color="#FF5E5E")
plt.title('Altura vs Peso nos jogos olimpicos')
plt.xlabel('Altura (cm)')
plt.ylabel('Peso (kg)')
7/99:
medalhas_ouro[
    (medalhas_ouro['Weight']>140) &
    (medalhas_ouro['Height']>170) &
    (medalhas_ouro['Height']<190) 
]['Sport']
7/100:
import numpy as np
import pandas as pd
import seaborn as sns
import os
import warnings

from matplotlib import pyplot as plt
from matplotlib.colors import LinearSegmentedColormap

dir_atual = os.path.dirname(os.path.abspath('__file__'))
root_dir = os.path.abspath(os.path.join(dir_atual, '..'))
input_path = os.path.join(dir_atual, 'input')

warnings.filterwarnings('ignore')

sns.set()

%matplotlib inline
7/101:
cores_douradas = ["#d4af37", "#ffd700", "#f0e68c"]
cores_olimpicas = ["#4A90D9", "#F0E4A1", "#6D6E71", "#8BCC8C", "#FF5E5E", "#3A78C2", "#F7E5A5", "#8C8C8C", "#7ABF7A", "#FF4D4D", "#5D8AB4", "#F5D787", "#6D6E6E", "#9BCC9B", "#FF4C4C", "#3C8CC2", "#F7E7A2", "#7F7F7F", "#7EBF7E", "#FF6D6D"]


mapa_dourado = LinearSegmentedColormap.from_list("golden", cores_douradas, N=100)
mapa_olimpico = LinearSegmentedColormap.from_list("olimpic", cores_olimpicas, N=100)
7/102:
dados = pd.read_csv(os.path.join(input_path, 'athlete_events.csv'))
regioes = pd.read_csv(os.path.join(input_path, 'noc_regions.csv'))
7/103: dados.head()
7/104: dados.describe()
7/105: dados.info()
7/106: regioes.head()
7/107:
mesclado = pd.merge(dados, regioes, on='NOC', how='left')
mesclado.head()
7/108:
comp_verao = mesclado[mesclado['Season']=='Summer']
comp_inverno = mesclado[mesclado['Season']=='Winter']

num_comp_verao = comp_verao['Year'].nunique()
num_comp_inverno = comp_inverno['Year'].nunique()

comp_verao = comp_verao[comp_verao['Medal'] != 'NA']
comp_inverno = comp_inverno[comp_inverno['Medal'] != 'NA']

num_medalhas_verao = comp_verao['Medal'].value_counts().sum()
num_medalhas_inverno = comp_inverno['Medal'].value_counts().sum()

media_medalha_comp_verao = (num_medalhas_verao)/(num_comp_verao)
media_medalha_comp_inverno = (num_medalhas_inverno)/(num_comp_inverno)


print(f"Então nesses últimos 120 anos tivemos {num_comp_verao} competições de verão e "
        f"{num_comp_inverno} competições de inverno.\nForam distribuidas "
        f"{num_medalhas_verao + num_medalhas_inverno} medalhas.\nNa média, "
        f"são distribuidas {media_medalha_comp_verao:.0f} medalhas "
        f"por competição no verão e {media_medalha_comp_inverno:.0f} medalhas por competição no inverno")
7/109:
medalhas_ouro = mesclado[(mesclado.Medal == 'Gold')]
medalhas_ouro.head()
7/110: medalhas_ouro.isnull().any()
7/111:
medalhas_ouro = medalhas_ouro[np.isfinite(medalhas_ouro['Age'])]
medalhas_ouro['Age'] = medalhas_ouro['Age'].astype(int)
7/112:
num_barras = medalhas_ouro['Age'].nunique()
paleta_dourada = [mapa_dourado(i / num_barras) for i in range(num_barras)]

plt.figure(figsize=(20,10))
plt.tight_layout()
sns.countplot(x=medalhas_ouro['Age'],hue=medalhas_ouro['Age'], legend=False, data=medalhas_ouro, palette=paleta_dourada)
plt.title('Distribuição de medalhas de ouro por idade')
plt.ylabel('Medalhas de ouro')
plt.xlabel('Idade')
7/113: menores_quinze_anos = medalhas_ouro['Sport'][medalhas_ouro['Age']<15]
7/114:
plt.figure(figsize=(20, 10))
plt.tight_layout()
sns.countplot(x=menores_quinze_anos, hue=menores_quinze_anos, legend=False, palette=cores_olimpicas)
plt.title('Medalhas de Ouro por esporte com atletas menores de 15 anos')
plt.ylabel('Medalhas de ouro')
plt.xlabel('Esporte')
7/115: menores_quinze_anos.value_counts()
7/116:
mais_cinquenta_anos = medalhas_ouro['Sport'][medalhas_ouro['Age']>50]
contagem = mais_cinquenta_anos.value_counts()
contagem
7/117:
plt.figure(figsize=(20, 10))
plt.tight_layout()
sns.countplot(x=mais_cinquenta_anos, hue=mais_cinquenta_anos, legend=False, order=contagem.index, palette=cores_olimpicas)
plt.title('Medalhas de Ouro por esporte para atletas com mais de 50 anos')
plt.ylabel('Medalhas de ouro')
plt.xlabel('Esporte')
7/118:
mulheres_verao = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Summer")]
mulhes_inverno = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Winter")]
7/119:
num_barras = mulheres_verao['Year'].nunique()
paleta_olimpica = [mapa_olimpico(i / num_barras) for i in range(num_barras)]

plt.figure(figsize=(20,10))
plt.tight_layout()
sns.countplot(x=mulheres_verao['Year'],hue=mulheres_verao['Year'], legend=False, data=mulheres_verao, palette=paleta_olimpica)
plt.title('Distribuição de medalhas por ano - Verao')
plt.ylabel('Medalhas')
plt.xlabel('Ano')

plt.figure(figsize=(20,10))
plt.tight_layout()
sns.countplot(x=mulhes_inverno['Year'],hue=mulhes_inverno['Year'], legend=False, data=mulhes_inverno, palette=paleta_olimpica)
plt.title('Distribuição de medalhas por ano - Inverno')
plt.ylabel('Medalhas')
plt.xlabel('Ano')
7/120:
resumo_medalhas = mesclado.pivot_table(index='region', columns='Medal', aggfunc='size', fill_value=0)

# Renomear as colunas para melhor legibilidade
resumo_medalhas.columns = ['Bronze', 'Ouro', 'Prata']

# Ordenar pelos países com mais medalhas de ouro
resumo_medalhas = resumo_medalhas.sort_values(by='Ouro', ascending=False)

resumo_medalhas.head(10)
7/121:
top_10_medalhas_ouro = mesclado['region'][mesclado['Medal']=='Gold'].value_counts().head(10)

top_10_medalhas_ouro.plot(kind='bar', figsize=(10,7), color='#f0e68c')
plt.title('Top 10 Países por Número de Medalhas de Ouro')
plt.xlabel('País')
plt.ylabel('Número de Medalhas')
plt.xticks(rotation=45)
plt.tight_layout()
7/122:
medalhas_ouro_usa = mesclado[mesclado['Medal']=='Gold'].loc[mesclado['NOC']=='USA']
medalhas_ouro_usa.Event.value_counts().head(20)
7/123:
medalhas_ouro_usa_m = medalhas_ouro_usa[
    (medalhas_ouro_usa['Sex'] == 'M') & 
    (medalhas_ouro_usa['Event'] == "Basketball Men's Basketball")
].sort_values(['Year'])
medalhas_ouro_usa_m['Name'].value_counts()
7/124:
medalhas_ouro_usa_m_equipe = medalhas_ouro_usa_m.groupby(['Year']).first()
medalhas_ouro_usa_m_equipe
7/125:
medalhas_ouro = mesclado[mesclado['Medal']=='Gold']
medalhas_ouro.isna().any()
7/126:
medalhas_ouro = medalhas_ouro[
    (np.isfinite(medalhas_ouro['Height'])) &
    (np.isfinite(medalhas_ouro['Weight']))
]

medalhas_ouro.isna().any()
7/127:
plt.figure(figsize=(12,10))
ax = sns.scatterplot(x="Height", y="Weight", data=medalhas_ouro, color="#FF5E5E")
plt.title('Altura vs Peso nos jogos olimpicos')
plt.xlabel('Altura (cm)')
plt.ylabel('Peso (kg)')
7/128:
medalhas_ouro[
    (medalhas_ouro['Weight']>140) &
    (medalhas_ouro['Height']>170) &
    (medalhas_ouro['Height']<190) 
]['Sport']
7/129: mesclado.isna().any()
7/130:
homens = mesclado[(mesclado['Sex'] == 'M') & (mesclado['Season'] == 'Summer')]
mulheres = mesclado[(mesclado['Sex'] == 'F') & (mesclado['Season'] == 'Summer')]
7/131:
participacao_masculina = homens.groupby(['Year'])['Sex'].value_counts()
participacao_masculina
7/132:
participacao_masculina = homens.groupby(['Year']).value_counts()
participacao_masculina
7/133:
participacao_masculina = homens.groupby(['Year'])['Year'].value_counts()
participacao_masculina
7/134: participacao_masculina = homens.groupby(['Year']).size()
7/135:
participacao_masculina = homens.groupby(['Year']).size()
participacao_masculina
7/136:
participacao_masculina = homens.groupby(['Year']).value_counts()
participacao_masculina
7/137:
participacao_masculina = homens.groupby(['Year'])['Year'].value_counts()
participacao_masculina
7/138:
participacao_masculina = homens.groupby(['Year']).size()
participacao_masculina.plot()
plt.title('Variation of Male Athletes over time')
7/139:
participacao_masculina = homens.groupby(['Year']).size()
plt.figure(figsize=(20, 10))
participacao_masculina.plot()
plt.title('Variation of Male Athletes over time')
7/140:
participacao_masculina = homens.groupby(['Year']).size()

plt.figure(figsize=(20, 10))
ax = participacao_masculina.plot()

# Adicionando anotações para eventos históricos
plt.annotate('WWI (1914-1918)', xy=(1916, 0), xytext=(1916, 5000),
             arrowprops=dict(facecolor='black', shrink=0.05),
             fontsize=12, color='red')

plt.annotate('WWII (1939-1945)', xy=(1940, 0), xytext=(1940, 5000),
             arrowprops=dict(facecolor='black', shrink=0.05),
             fontsize=12, color='red')

plt.annotate('Great Depression', xy=(1930, 4000), xytext=(1930, 8000),
             arrowprops=dict(facecolor='black', shrink=0.05),
             fontsize=12, color='blue')

plt.annotate('1980 Boycott', xy=(1980, 6000), xytext=(1980, 10000),
             arrowprops=dict(facecolor='black', shrink=0.05),
             fontsize=12, color='green')

plt.annotate('1984 Boycott', xy=(1984, 8000), xytext=(1984, 12000),
             arrowprops=dict(facecolor='black', shrink=0.05),
             fontsize=12, color='green')

plt.title('Variation of Male Athletes over time')
plt.xlabel('Year')
plt.ylabel('Number of Male Athletes')
plt.show()
7/141:
participacao_masculina = homens.groupby(['Year']).size()

plt.figure(figsize=(20, 10))
ax = participacao_masculina.plot()
plt.title('Variation of Male Athletes over time')
plt.xlabel('Year')
plt.ylabel('Number of Male Athletes')
plt.show()
7/142:
participacao_fiminina = mulheres.groupby(['Year']).size()

plt.figure(figsize=(20, 10))
ax = participacao_masculina.plot()
plt.title('Variation of Female Athletes over time')
plt.xlabel('Year')
plt.ylabel('Number of Male Athletes')
7/143:
participacao_fiminina = mulheres.groupby(['Year']).size()

plt.figure(figsize=(20, 10))
ax = participacao_fiminina.plot()
plt.title('Variation of Female Athletes over time')
plt.xlabel('Year')
plt.ylabel('Number of Male Athletes')
7/144:
participacao_fiminina = mulheres.groupby(['Year']).size()

plt.figure(figsize=(20, 10))
ax = participacao_fiminina.plot(color='#FF5E5E')
plt.title('Variation of Female Athletes over time')
plt.xlabel('Year')
plt.ylabel('Number of Male Athletes')
7/145:
plt.figure(figuresize=(20,10))
sns.boxplot('Year', 'Age', data=homens)
7/146:
plt.figure(figsize=(20, 10))
sns.boxplot('Year', 'Age', data=homens)
7/147:
plt.figure(figsize=(20, 10))
sns.boxplot(x='Year', y='Age', data=homens)
7/148: homens.loc[homens['Age'] > 80]
7/149:
plt.figure(figsize=(20, 10))
sns.boxplot(x='Year', y='Age', data=homens)
plt.xlabel('Ano')
plt.ylabel('Idade')
plt.title('Distribuição de idade atraves dos anos - Homens')
7/150:
plt.figure(figsize=(20, 10))
sns.boxplot(x='Year', y='Age', data=homens)
plt.ylabel('Idade')
plt.title('Distribuição de idade atraves dos anos - Homens')
7/151:
plt.figure(figsize=(20, 10))
sns.boxplot(x='Year', y='Age', data=homens)
plt.xlabel('')
plt.ylabel('Idade')
plt.title('Distribuição de idade atraves dos anos - Homens')
7/152:
plt.figure(figsize=(25, 10))
sns.boxplot(x='Year', y='Age', data=homens)
plt.xlabel('')
plt.ylabel('Idade')
plt.title('Distribuição de idade atraves dos anos - Homens')
7/153:
plt.figure(figsize=(20, 10))
sns.boxplot(x='Year', y='Age', data=homens)
plt.xlabel('')
plt.ylabel('Idade')
plt.title('Distribuição de idade atraves dos anos - Homens')
7/154:
plt.figure(figuresize=(20,10))
sns.boxplot(x='Year', y='Age', data=mulheres)
plt.xlabel('')
plt.ylabel('Idade')
plt.title('Distribuição de idade atraves dos anos - Mulheres')
7/155:
plt.figure(figsize=(20,10))
sns.boxplot(x='Year', y='Age', data=mulheres)
plt.xlabel('')
plt.ylabel('Idade')
plt.title('Distribuição de idade atraves dos anos - Mulheres')
7/156: mulheres.loc[mulheres['Year']=='1904']
7/157: mulheres.loc[mulheres['Year'] == 1904]
7/158:
homens_br = homens[homens['region']=='Brazil']
homens_br
7/159: homens_br = homens[homens['region']=='Brazil']
7/160:
homens_br = homens[homens['region']=='Brazil']
homens_br.head(5)
7/161:
plt.figure(figsize=(20, 10))
sns.countplot(x='Year', data=homens_br, palette='Set2')
plt.title('Participação masculina nos Jogos Olímpicos')
7/162:
homens_br = homens[homens['region']=='Brazil']
homens_br.head(5)
7/163:
mulheres_br = mulheres[mulheres['region']=='Brazil']
mulheres_br.head(5)
7/164:
plt.figure(figsize=(20, 10))
sns.countplot(x='Year', data=mulheres_br, palette='Set2')
plt.title('Participação masculina nos Jogos Olímpicos')
7/165:
brasileiros = mesclado[(mesclado['region'] == 'Brazil') & (mesclado['Season'] == 'Summer')]
brasileiros
7/166:
brasileiros_verao = mesclado[(mesclado['region'] == 'Brazil') & (mesclado['Season'] == 'Summer')]
brasileiros_verao
7/167:
brasileiros = mesclado[(mesclado['region'] == 'Brazil')]
brasileiros
7/168:
medalhas_ouro_br = brasileiros[brasileiros['Medal'] == 'Gold']['Event'].value_counts()
medalhas_ouro_br
7/169: brasil = mesclado[mesclado['region'] == 'Brazil']
7/170:
brasil = mesclado[mesclado['region'] == 'Brazil']
brasil
7/171: brasil = mesclado[mesclado['region'] == 'Brazil']
7/172:
brasil = mesclado[mesclado['region'] == 'Brazil']
resto_mundo = mesclado[mesclado['region'] != 'Brazil']
7/173:
brasil = mesclado[mesclado['region'] == 'Brazil']
resto_mundo = mesclado[mesclado['region'] != 'Brazil']

brasil_edicao = brasil.groupby['Year']['ID'].nuique()
resto_mundo_edicao = resto_mundo.groupby['Year']['ID'].nunique()
7/174:
brasil = mesclado[mesclado['region'] == 'Brazil']
resto_mundo = mesclado[mesclado['region'] != 'Brazil']

brasil_edicao = brasil.groupby('Year')['ID'].nuique()
resto_mundo_edicao = resto_mundo.groupby('Year')['ID'].nunique()
7/175:
brasil = mesclado[mesclado['region'] == 'Brazil']
resto_mundo = mesclado[mesclado['region'] != 'Brazil']

brasil_edicao = brasil.groupby('Year')['ID'].unique()
resto_mundo_edicao = resto_mundo.groupby('Year')['ID'].unique()
7/176:
brasil = mesclado[mesclado['region'] == 'Brazil']
resto_mundo = mesclado[mesclado['region'] != 'Brazil']

brasil_edicao = brasil.groupby('Year')['ID'].unique()
resto_mundo_edicao = resto_mundo.groupby('Year')['ID'].unique()

brasil_edicao
7/177:
brasil = mesclado[mesclado['region'] == 'Brazil']
resto_mundo = mesclado[mesclado['region'] != 'Brazil']

brasil_edicao = brasil.groupby('Year')['ID'].unique()
resto_mundo_edicao = resto_mundo.groupby('Year')['ID'].unique()

brasil_edicao.loc['1900']
7/178:
brasil = mesclado[mesclado['region'] == 'Brazil']
resto_mundo = mesclado[mesclado['region'] != 'Brazil']

brasil_edicao = brasil.groupby('Year')['ID'].unique()
resto_mundo_edicao = resto_mundo.groupby('Year')['ID'].unique()

brasil_edicao.loc['1900':]
7/179:
brasil = mesclado[mesclado['region'] == 'Brazil']
resto_mundo = mesclado[mesclado['region'] != 'Brazil']

brasil_edicao = brasil.groupby('Year')['ID'].unique()
resto_mundo_edicao = resto_mundo.groupby('Year')['ID'].unique()

brasil_edicao.loc[:'1900']
7/180:
brasil = mesclado[mesclado['region'] == 'Brazil']
resto_mundo = mesclado[mesclado['region'] != 'Brazil']

brasil_edicao = brasil.groupby('Year')['ID'].unique()
resto_mundo_edicao = resto_mundo.groupby('Year')['ID'].unique()

brasil_edicao.loc['1900']
7/181:
brasil = mesclado[mesclado['region'] == 'Brazil']
resto_mundo = mesclado[mesclado['region'] != 'Brazil']

brasil_edicao = brasil.groupby('Year')['ID'].unique()
resto_mundo_edicao = resto_mundo.groupby('Year')['ID'].unique()

brasil_edicao
7/182:
brasil = mesclado[mesclado['region'] == 'Brazil']
resto_mundo = mesclado[mesclado['region'] != 'Brazil']

brasil_edicao = brasil.groupby('Year')['ID'].unique()
resto_mundo_edicao = resto_mundo.groupby('Year')['ID'].unique()

brasil_edicao.loc[:'1920']
7/183:
brasil = mesclado[mesclado['region'] == 'Brazil']
resto_mundo = mesclado[mesclado['region'] != 'Brazil']

brasil_edicao = brasil.groupby('Year')['ID'].unique()
resto_mundo_edicao = resto_mundo.groupby('Year')['ID'].unique()

brasil_edicao
7/184:
brasil = mesclado[mesclado['region'] == 'Brazil']
resto_mundo = mesclado[mesclado['region'] != 'Brazil']

brasil_edicao = brasil.groupby('Year')['ID'].unique()
resto_mundo_edicao = resto_mundo.groupby('Year')['ID'].unique()

plt.figure(figsize=(20,10))
plt.plot(brasil_edicao.index, brasil_edicao, label='Brasil')
plt.plot(resto_mundo_edicao.index, resto_mundo_edicao, label='Resto do Mundo')
7/185:
brasil = mesclado[mesclado['region'] == 'Brazil']
resto_mundo = mesclado[mesclado['region'] != 'Brazil']

brasil_edicao = brasil.groupby('Year')['ID'].unique().value_counts()
resto_mundo_edicao = resto_mundo.groupby('Year')['ID'].unique().value_counts()

plt.figure(figsize=(20,10))
plt.plot(brasil_edicao.index, brasil_edicao, label='Brasil')
plt.plot(resto_mundo_edicao.index, resto_mundo_edicao, label='Resto do Mundo')
7/186:
brasil = mesclado[mesclado['region'] == 'Brazil']
resto_mundo = mesclado[mesclado['region'] != 'Brazil']

brasil_edicao = brasil.groupby('Year')['ID'].unique().value_counts()
resto_mundo_edicao = resto_mundo.groupby('Year')['ID'].unique().value_counts()
7/187:
brasil = mesclado[mesclado['region'] == 'Brazil']
resto_mundo = mesclado[mesclado['region'] != 'Brazil']

brasil_edicao = brasil.groupby('Year')['ID'].unique().value_counts()
resto_mundo_edicao = resto_mundo.groupby('Year')['ID'].unique().value_counts()

brasil_edicao
7/188:
brasil = mesclado[mesclado['region'] == 'Brazil']
resto_mundo = mesclado[mesclado['region'] != 'Brazil']

brasil_edicao = brasil.groupby('Year')['ID'].unique()
resto_mundo_edicao = resto_mundo.groupby('Year')['ID'].unique().value_counts()

brasil_edicao['Year']
7/189:
brasil = mesclado[mesclado['region'] == 'Brazil']
resto_mundo = mesclado[mesclado['region'] != 'Brazil']

brasil_edicao = brasil.groupby('Year')['ID'].unique()
resto_mundo_edicao = resto_mundo.groupby('Year')['ID'].unique().value_counts()

brasil_edicao.keys
7/190:
brasil = mesclado[mesclado['region'] == 'Brazil']
resto_mundo = mesclado[mesclado['region'] != 'Brazil']

brasil_edicao = brasil.groupby('Year')['ID'].unique()
resto_mundo_edicao = resto_mundo.groupby('Year')['ID'].unique().value_counts()

brasil_edicao.keys()
7/191:
brasil = mesclado[mesclado['region'] == 'Brazil']
resto_mundo = mesclado[mesclado['region'] != 'Brazil']

brasil_edicao = brasil.groupby('Year')['ID'].unique()
resto_mundo_edicao = resto_mundo.groupby('Year')['ID'].unique().value_counts()

brasil_edicao.index
7/192:
brasil = mesclado[mesclado['region'] == 'Brazil']
resto_mundo = mesclado[mesclado['region'] != 'Brazil']

brasil_athletes_per_edition = brasil.groupby('Year')['ID'].nunique()
world_athletes_per_edition = mesclado.groupby('Year')['ID'].nunique() - brasil_athletes_per_edition

# Plotar o número de atletas
plt.figure(figsize=(14, 7))
plt.plot(brasil_athletes_per_edition.index, brasil_athletes_per_edition, label='Brasil')
plt.plot(world_athletes_per_edition.index, world_athletes_per_edition, label='Resto do Mundo')
plt.title('Número de Atletas por Edição')
plt.xlabel('Ano')
plt.ylabel('Número de Atletas')
7/193:
brasil = mesclado[mesclado['region'] == 'Brazil']
resto_mundo = mesclado[mesclado['region'] != 'Brazil']

total_athletes_per_edition = mesclado.groupby('Year')['ID'].nunique()
brasil_athletes_per_edition = brasil.groupby('Year')['ID'].nunique()
7/194:
brasil = mesclado[mesclado['region'] == 'Brazil']
resto_mundo = mesclado[mesclado['region'] != 'Brazil']

total_athletes_per_edition = mesclado.groupby('Year')['ID'].nunique()
brasil_athletes_per_edition = brasil.groupby('Year')['ID'].nunique()

percent_brasil_athletes = (brasil_athletes_per_edition / total_athletes_per_edition) * 100
percent_brasil_athletes = percent_brasil_athletes.reindex(total_athletes_per_edition.index, fill_value=0)

plt.figure(figsize=(14, 7))
percent_brasil_athletes.plot(kind='bar', color='green')
plt.title('Porcentagem de Atletas Brasileiros em Relação ao Mundo por Edição')
plt.xlabel('Ano')
plt.ylabel('Porcentagem de Atletas Brasileiros (%)')
plt.tight_layout()
7/195:
total_atletas = mesclado['ID'].nunique()
total_atletas
7/196: total_atletas_pais = mesclado.groupby('region')['ID'].nunique()
7/197:
total_atletas_pais = mesclado.groupby('region')['ID'].nunique()
total_atletas_pais
7/198:
total_atletas_pais = mesclado.groupby('region')['ID'].nunique().index
total_atletas_pais
7/199:
total_atletas_pais = mesclado.groupby('region')['ID'].nunique()
total_atletas_pais
7/200:
participacao_percentual = (total_atletas_pais / total_atletas) * 100
participacao_percentual
7/201:
participacao_percentual = (total_atletas_pais / total_atletas) * 100
participacao_percentual.sort_values(ascending=False)
7/202:
participacao_percentual = (total_atletas_pais / total_atletas) * 100
participacao_percentual_ordenada = participacao_percentual.sort_values(ascending=False)

participacao_brasileira = participacao_percentual_ordenada.index.get_loc('Brazil') + 1
participacao_brasileira
7/203:
participacao_percentual = (total_atletas_pais / total_atletas) * 100
participacao_percentual_ordenada = participacao_percentual.sort_values(ascending=False)


participacao_percentual_ordenada.loc[:'Brazil']
7/204:
participacao_percentual = (total_atletas_pais / total_atletas) * 100
participacao_percentual_ordenada = participacao_percentual.sort_values(ascending=False)


participacao_percentual_ordenada.loc['Brazil']
7/205:
participacao_percentual = (total_atletas_pais / total_atletas) * 100
participacao_percentual_ordenada = participacao_percentual.sort_values(ascending=False)


participacao_percentual_ordenada
7/206:

participacao_brasileira = participacao_percentual_ordenada.index.get_loc('Brazil') + 1
participacao_brasileira
7/207:
print(participacao_percentual_ordenada.loc['Brazil'])
participacao_brasileira = participacao_percentual_ordenada.index.get_loc('Brazil') + 1
participacao_brasileira
7/208:
print(f"{participacao_percentual_ordenada.loc['Brazil']}:.0f%")
participacao_brasileira = participacao_percentual_ordenada.index.get_loc('Brazil') + 1
participacao_brasileira
7/209:
print(f"{participacao_percentual_ordenada.loc['Brazil']}")
participacao_brasileira = participacao_percentual_ordenada.index.get_loc('Brazil') + 1
participacao_brasileira
7/210:
print(f"{participacao_percentual_ordenada.loc['Brazil']}")
print(f"{participacao_percentual_ordenada.index.get_loc('Brazil') + 1}")
7/211:
brasil_medals = brasil[brasil['Medal'].notna()]
world_medals = mesclado[mesclado['Medal'].notna() & (mesclado['region'] != 'Brazil')]

# Contar o número de medalhas por modalidade para o Brasil e o resto do mundo
brasil_medals_per_sport = brasil_medals.groupby('Sport')['Medal'].count()
world_medals_per_sport = world_medals.groupby('Sport')['Medal'].count()

# Plotar o número de medalhas por modalidade
fig, ax = plt.subplots(figsize=(14, 7))
brasil_medals_per_sport.plot(kind='bar', color='green', ax=ax, position=0, width=0.4, label='Brasil')
world_medals_per_sport.plot(kind='bar', color='blue', ax=ax, position=1, width=0.4, label='Resto do Mundo')
plt.title('Número de Medalhas por Modalidade')
plt.xlabel('Modalidade')
plt.ylabel('Número de Medalhas')
plt.legend()
7/212: brasil_ouro = brasil[brasil['Medal'] == 'Gold']
7/213:
brasil_ouro = brasil[brasil['Medal'] == 'Gold']

brasil_ouro['Event'].value_counts()
7/214: top_3_modalidades_br =brasil_ouro.head(3).index
7/215:
top_3_modalidades_br =brasil_ouro.head(3).index
top_3_modalidades_br
7/216: top_3_modalidades_br =brasil_ouro.head(3)
7/217:
top_3_modalidades_br =brasil_ouro.head(3)
top_3_modalidades_br
7/218:
top_3_modalidades_br =brasil_ouro['Event'].value_counts().head(3)
top_3_modalidades_br
7/219:
top_3_modalidades_br =brasil_ouro['Event'].value_counts().head(3).index
top_3_modalidades_br
7/220:
top_3_modalidades_br =brasil_ouro['Event'].value_counts().head(3).index

top_3_modalidades_mundo = mesclado[
    (mesclado['Event'].isin(top_3_modalidades_br)) &
    (mesclado['Medal'] == 'Gold') &
    (mesclado['region'] != 'Brazil')
]

top_3_modalidades_mundo
7/221:
top_3_modalidades =brasil_ouro['Event'].value_counts().head(3).index

brasil_top_3 = brasil_ouro[brasil_ouro['Event'].isin(top_3_modalidades)]
mundo_top_3 = mesclado[
    (mesclado['Event'].isin(top_3_modalidades)) &
    (mesclado['Medal'] == 'Gold') &
    (mesclado['region'] != 'Brazil')
]

brasil_top_3
7/222:
top_3_modalidades =brasil_ouro['Event'].value_counts().head(3).index

brasil_top_3 = brasil_ouro[brasil_ouro['Event'].isin(top_3_modalidades)]
mundo_top_3 = mesclado[
    (mesclado['Event'].isin(top_3_modalidades)) &
    (mesclado['Medal'] == 'Gold') &
    (mesclado['region'] != 'Brazil')
]

medalhas_categ_br = brasil_top_3['Event'].value_counts()
medalhas_categ_mundo = mundo_top_3['Event'].value_counts()

medalhas_categ_br
7/223:
top_3_modalidades =brasil_ouro['Event'].value_counts().head(3).index

brasil_top_3 = brasil_ouro[brasil_ouro['Event'].isin(top_3_modalidades)]
mundo_top_3 = mesclado[
    (mesclado['Event'].isin(top_3_modalidades)) &
    (mesclado['Medal'] == 'Gold') &
    (mesclado['region'] != 'Brazil')
]

medalhas_categ_br = brasil_top_3['Event'].value_counts()
medalhas_categ_mundo = mundo_top_3['Event'].value_counts()

medalhas_categ_mundo
7/224:
top_3_modalidades =brasil_ouro['Event'].value_counts().head(3).index

resultados = pd.DataFrame(columns=('Evento', 'País', 'Medalhas de ouro'))

for event in top_3_modalidades:
    sport_medals = mesclado[(mesclado['Event'] == event) & (mesclado['Medal'] == 'Gold')]
    medals_count = sport_medals['NOC'].value_counts().reset_index()
    medals_count.columns = ['Country', 'Gold Medals']
    medals_count['Event'] = event
    results = pd.concat([results, medals_count])
7/225:
top_3_modalidades =brasil_ouro['Event'].value_counts().head(3).index

resultados = pd.DataFrame(columns=('Evento', 'País', 'Medalhas de ouro'))

for event in top_3_modalidades:
    sport_medals = mesclado[(mesclado['Event'] == event) & (mesclado['Medal'] == 'Gold')]
    medals_count = sport_medals['NOC'].value_counts().reset_index()
    medals_count.columns = ['Country', 'Gold Medals']
    medals_count['Event'] = event
    results = pd.concat([resultados, medals_count])
7/226:
top_3_modalidades =brasil_ouro['Event'].value_counts().head(3).index

resultados = pd.DataFrame(columns=('Evento', 'País', 'Medalhas de ouro'))

for event in top_3_modalidades:
    sport_medals = mesclado[(mesclado['Event'] == event) & (mesclado['Medal'] == 'Gold')]
    medals_count = sport_medals['NOC'].value_counts().reset_index()
    medals_count.columns = ['Country', 'Gold Medals']
    medals_count['Event'] = event
    results = pd.concat([resultados, medals_count])

for event in top_3_modalidades:
    sport_results = results[results['Event'] == event].sort_values(by='Gold Medals', ascending=False).reset_index(drop=True)
    brasil_position = sport_results[sport_results['Country'] == 'BRA'].index[0] + 1
    print(f"Ranking do Brasil em {event}: {brasil_position}º lugar")
    print(sport_results.head(10))  # Exibir os top 10 países para cada esporte
7/227:
top_3_modalidades =brasil_ouro['Event'].value_counts().head(3).index

resultados = pd.DataFrame(columns=('Evento', 'País', 'Medalhas de ouro'))

for event in top_3_modalidades:
    sport_medals = mesclado[(mesclado['Event'] == event) & (mesclado['Medal'] == 'Gold')]
    medals_count = sport_medals['NOC'].value_counts().reset_index()
    medals_count.columns = ['Country', 'Gold Medals']
    medals_count['Event'] = event
    results = pd.concat([resultados, medals_count])

for event in top_3_modalidades:
    sport_results = resultados[results['Event'] == event].sort_values(by='Gold Medals', ascending=False).reset_index(drop=True)
    brasil_position = sport_results[sport_results['Country'] == 'BRA'].index[0] + 1
    print(f"Ranking do Brasil em {event}: {brasil_position}º lugar")
    print(sport_results.head(10))  # Exibir os top 10 países para cada esporte
7/228:
top_3_modalidades =brasil_ouro['Event'].value_counts().head(3).index

resultados = pd.DataFrame(columns=('Evento', 'País', 'Medalhas de ouro'))

for event in top_3_modalidades:
    sport_medals = mesclado[(mesclado['Event'] == event) & (mesclado['Medal'] == 'Gold')]
    medals_count = sport_medals['NOC'].value_counts().reset_index()
    medals_count.columns = ['País', 'Medalhas de ouro']
    medals_count['Event'] = event
    results = pd.concat([resultados, medals_count])

for event in top_3_modalidades:
    sport_results = resultados[results['Evento'] == event].sort_values(by='Medalhas de ouro', ascending=False).reset_index(drop=True)
    brasil_position = sport_results[sport_results['País'] == 'BRA'].index[0] + 1
    print(f"Ranking do Brasil em {event}: {brasil_position}º lugar")
    print(sport_results.head(10))  # Exibir os top 10 países para cada esporte
7/229:
top_3_modalidades =brasil_ouro['Event'].value_counts().head(3).index

resultados = pd.DataFrame(columns=('Evento', 'País', 'Medalhas de ouro'))

for event in top_3_modalidades:
    sport_medals = mesclado[(mesclado['Event'] == event) & (mesclado['Medal'] == 'Gold')]
    medals_count = sport_medals['NOC'].value_counts().reset_index()
    medals_count.columns = ['País', 'Medalhas de ouro']
    medals_count['Event'] = event
    resultados = pd.concat([resultados, medals_count])

resultados
7/230:
top_3_modalidades =brasil_ouro['Event'].value_counts().head(3).index

resultados = pd.DataFrame(columns=('Event', 'País', 'Medalhas de ouro'))

for event in top_3_modalidades:
    sport_medals = mesclado[(mesclado['Event'] == event) & (mesclado['Medal'] == 'Gold')]
    medals_count = sport_medals['NOC'].value_counts().reset_index()
    medals_count.columns = ['País', 'Medalhas de ouro']
    medals_count['Event'] = event
    resultados = pd.concat([resultados, medals_count])

resultados
7/231:
top_3_modalidades = brasil_ouro['Event'].value_counts().head(3).index

resultados = pd.DataFrame(columns=('Event', 'País', 'Medalhas de ouro'))

for event in top_3_modalidades:
    sport_medals = mesclado[(mesclado['Event'] == event) & (mesclado['Medal'] == 'Gold')]
    medals_count = sport_medals['NOC'].value_counts().reset_index()
    medals_count.columns = ['País', 'Medalhas de ouro']
    medals_count['Event'] = event
    resultados = pd.concat([resultados, medals_count])

fig, ax = plt.subplots(figsize=(14, 7))

for event in top_3_modalidades:
    event_data = resultados[resultados['Event'] == event].sort_values(by='Medalhas de ouro', ascending=False).head(5)
    ax.bar(event_data['País'], event_data['Medalhas de ouro'], label=event)

ax.set_title('Top 5 Países por Medalhas de Ouro nos Top 3 Eventos do Brasil')
ax.set_xlabel('País')
ax.set_ylabel('Medalhas de Ouro')
ax.legend(title='Evento')
plt.xticks(rotation=45)
plt.tight_layout()
7/232:
top_3_modalidades = brasil_ouro['Event'].value_counts().head(3).index

resultados = pd.DataFrame(columns=('Event', 'País', 'Medalhas de ouro'))

for event in top_3_modalidades:
    sport_medals = mesclado[(mesclado['Event'] == event) & (mesclado['Medal'] == 'Gold')]
    medals_count = sport_medals['NOC'].value_counts().reset_index()
    medals_count.columns = ['País', 'Medalhas de ouro']
    medals_count['Event'] = event
    resultados = pd.concat([resultados, medals_count])

top_countries = resultados.groupby('País')['Medalhas de ouro'].sum().sort_values(ascending=False).head(5).index

top_countries
7/233:
top_3_modalidades = brasil_ouro['Event'].value_counts().head(3).index

resultados = pd.DataFrame(columns=('Event', 'País', 'Medalhas de ouro'))

for event in top_3_modalidades:
    sport_medals = mesclado[(mesclado['Event'] == event) & (mesclado['Medal'] == 'Gold')]
    medals_count = sport_medals['NOC'].value_counts().reset_index()
    medals_count.columns = ['País', 'Medalhas de ouro']
    medals_count['Event'] = event
    resultados = pd.concat([resultados, medals_count])

top_countries = resultados.groupby('País')['Medalhas de ouro'].sum().sort_values(ascending=False).head(5)

top_countries
7/234:
top_3_modalidades = brasil_ouro['Event'].value_counts().head(3).index

resultados = pd.DataFrame(columns=('Event', 'País', 'Medalhas de ouro'))

for event in top_3_modalidades:
    sport_medals = mesclado[(mesclado['Event'] == event) & (mesclado['Medal'] == 'Gold')]
    medals_count = sport_medals['NOC'].value_counts().reset_index()
    medals_count.columns = ['País', 'Medalhas de ouro']
    medals_count['Event'] = event
    resultados = pd.concat([resultados, medals_count])

top_countries = resultados.groupby('País')['Medalhas de ouro'].sum().sort_values(ascending=False).head(5)

# Filtrar os resultados para incluir apenas os top 5 países
resultados_top = resultados[resultados['País'].isin(top_countries)]

# Plotar os resultados
fig, ax = plt.subplots(figsize=(14, 7))

for country in top_countries:
    country_data = resultados_top[resultados_top['País'] == country]
    ax.bar(country_data['Event'], country_data['Medalhas de ouro'], label=country)

ax.set_title('Top 5 Países por Medalhas de Ouro nos Top 3 Eventos do Brasil')
ax.set_xlabel('Evento')
ax.set_ylabel('Medalhas de Ouro')
ax.legend(title='País')
plt.xticks(rotation=45)
plt.tight_layout()
7/235:
top_3_modalidades = brasil_ouro['Event'].value_counts().head(3).index

resultados = pd.DataFrame(columns=('Event', 'País', 'Medalhas de ouro'))

for event in top_3_modalidades:
    sport_medals = mesclado[(mesclado['Event'] == event) & (mesclado['Medal'] == 'Gold')]
    medals_count = sport_medals['NOC'].value_counts().reset_index()
    medals_count.columns = ['País', 'Medalhas de ouro']
    medals_count['Event'] = event
    resultados = pd.concat([resultados, medals_count])

top_countries = resultados.groupby('País')['Medalhas de ouro'].sum().sort_values(ascending=False).head(5)

# Filtrar os resultados para incluir apenas os top 5 países
resultados_top = resultados[resultados['País'].isin(top_countries)]

resultados_top
7/236:
top_3_modalidades = brasil_ouro['Event'].value_counts().head(3).index

resultados = pd.DataFrame(columns=('Event', 'País', 'Medalhas de ouro'))

for event in top_3_modalidades:
    sport_medals = mesclado[(mesclado['Event'] == event) & (mesclado['Medal'] == 'Gold')]
    medals_count = sport_medals['NOC'].value_counts().reset_index()
    medals_count.columns = ['País', 'Medalhas de ouro']
    medals_count['Event'] = event
    resultados = pd.concat([resultados, medals_count])

top_countries = resultados.groupby('País')['Medalhas de ouro'].sum().sort_values(ascending=False).head(5)
7/237:
top_3_modalidades = brasil_ouro['Event'].value_counts().head(3).index

resultados = pd.DataFrame(columns=('Event', 'País', 'Medalhas de ouro'))

for event in top_3_modalidades:
    sport_medals = mesclado[(mesclado['Event'] == event) & (mesclado['Medal'] == 'Gold')]
    medals_count = sport_medals['NOC'].value_counts().reset_index()
    medals_count.columns = ['País', 'Medalhas de ouro']
    medals_count['Event'] = event
    resultados = pd.concat([resultados, medals_count])

top_countries = resultados.groupby('País')['Medalhas de ouro'].sum().sort_values(ascending=False).head(5)

top_countries
7/238:
top_3_modalidades = brasil_ouro['Event'].value_counts().head(3).index

resultados = pd.DataFrame(columns=('Event', 'País', 'Medalhas de ouro'))

for event in top_3_modalidades:
    sport_medals = mesclado[(mesclado['Event'] == event) & (mesclado['Medal'] == 'Gold')]
    medals_count = sport_medals['NOC'].value_counts().reset_index()
    medals_count.columns = ['País', 'Medalhas de ouro']
    medals_count['Event'] = event
    resultados = pd.concat([resultados, medals_count])

top_countries = resultados.groupby('País')['Medalhas de ouro'].sum().sort_values(ascending=False)

top_countries
7/239:
top_3_modalidades = brasil_ouro['Event'].value_counts().head(3).index

resultados = pd.DataFrame(columns=('Event', 'País', 'Medalhas de ouro'))

for event in top_3_modalidades:
    sport_medals = mesclado[(mesclado['Event'] == event) & (mesclado['Medal'] == 'Gold')]
    medals_count = sport_medals['NOC'].value_counts().reset_index()
    medals_count.columns = ['País', 'Medalhas de ouro']
    medals_count['Event'] = event
    resultados = pd.concat([resultados, medals_count])

top_countries = resultados.groupby('País')['Medalhas de ouro'].sum().sort_values(ascending=False).head(10)

plt.figure(figsize=(20,10))
top_countries.plot()
7/240:
top_3_modalidades = brasil_ouro['Event'].value_counts().head(3).index

resultados = pd.DataFrame(columns=('Event', 'País', 'Medalhas de ouro'))

for event in top_3_modalidades:
    sport_medals = mesclado[(mesclado['Event'] == event) & (mesclado['Medal'] == 'Gold')]
    medals_count = sport_medals['NOC'].value_counts().reset_index()
    medals_count.columns = ['País', 'Medalhas de ouro']
    medals_count['Event'] = event
    resultados = pd.concat([resultados, medals_count])

top_countries = resultados.groupby('País')['Medalhas de ouro'].sum().sort_values(ascending=False).head(10)

plt.figure(figsize=(20,10))
top_countries.plot(kind='bar')
7/241:
top_3_modalidades = brasil_ouro['Event'].value_counts().head(3).index

resultados = pd.DataFrame(columns=('Event', 'País', 'Medalhas de ouro'))

for event in top_3_modalidades:
    sport_medals = mesclado[(mesclado['Event'] == event) & (mesclado['Medal'] == 'Gold')]
    medals_count = sport_medals['NOC'].value_counts().reset_index()
    medals_count.columns = ['País', 'Medalhas de ouro']
    medals_count['Event'] = event
    resultados = pd.concat([resultados, medals_count])

top_countries = resultados.groupby('País')['Medalhas de ouro'].sum().sort_values(ascending=False).head(10)

plt.figure(figsize=(10,10))
top_countries.plot(kind='bar')
7/242:
top_3_modalidades = brasil_ouro['Event'].value_counts().head(3).index

resultados = pd.DataFrame(columns=('Event', 'País', 'Medalhas de ouro'))

for event in top_3_modalidades:
    sport_medals = mesclado[(mesclado['Event'] == event) & (mesclado['Medal'] == 'Gold')]
    medals_count = sport_medals['NOC'].value_counts().reset_index()
    medals_count.columns = ['País', 'Medalhas de ouro']
    medals_count['Event'] = event
    resultados = pd.concat([resultados, medals_count])

top_countries = resultados.groupby('País')['Medalhas de ouro'].sum().sort_values(ascending=False).head(10)

plt.figure(figsize=(20,10))
top_countries.plot(kind='bar')
7/243:
top_3_modalidades = brasil_ouro['Event'].value_counts().head(3).index

resultados = pd.DataFrame(columns=('Event', 'País', 'Medalhas de ouro'))

for event in top_3_modalidades:
    sport_medals = mesclado[(mesclado['Event'] == event) & (mesclado['Medal'] == 'Gold')]
    medals_count = sport_medals['NOC'].value_counts().reset_index()
    medals_count.columns = ['País', 'Medalhas de ouro']
    medals_count['Event'] = event
    resultados = pd.concat([resultados, medals_count])

top_countries = resultados.groupby('País')['Medalhas de ouro'].sum().sort_values(ascending=False).head(10)

plt.figure(figsize=(20,10))
top_countries.plot(kind='bar', color='gold')
7/244:
top_3_modalidades = brasil_ouro['Event'].value_counts().head(3).index

resultados = pd.DataFrame(columns=('Event', 'País', 'Medalhas de ouro'))

for event in top_3_modalidades:
    sport_medals = mesclado[(mesclado['Event'] == event) & (mesclado['Medal'] == 'Gold')]
    medals_count = sport_medals['NOC'].value_counts().reset_index()
    medals_count.columns = ['País', 'Medalhas de ouro']
    medals_count['Event'] = event
    resultados = pd.concat([resultados, medals_count])

top_countries = resultados.groupby('País')['Medalhas de ouro'].sum().sort_values(ascending=False).head(10)

plt.figure(figsize=(20,10))
top_countries.plot(kind='bar', color='darkblue')
7/245:
top_3_modalidades = brasil_ouro['Event'].value_counts().head(3).index

resultados = pd.DataFrame(columns=('Event', 'País', 'Medalhas de ouro'))

for event in top_3_modalidades:
    sport_medals = mesclado[(mesclado['Event'] == event) & (mesclado['Medal'] == 'Gold')]
    medals_count = sport_medals['NOC'].value_counts().reset_index()
    medals_count.columns = ['País', 'Medalhas de ouro']
    medals_count['Event'] = event
    resultados = pd.concat([resultados, medals_count])

top_countries = resultados.groupby('País')['Medalhas de ouro'].sum().sort_values(ascending=False).head(10)

plt.figure(figsize=(20,10))
top_countries.plot(kind='bar', palette='Set2')
7/246:
top_3_modalidades = brasil_ouro['Event'].value_counts().head(3).index

resultados = pd.DataFrame(columns=('Event', 'País', 'Medalhas de ouro'))

for event in top_3_modalidades:
    sport_medals = mesclado[(mesclado['Event'] == event) & (mesclado['Medal'] == 'Gold')]
    medals_count = sport_medals['NOC'].value_counts().reset_index()
    medals_count.columns = ['País', 'Medalhas de ouro']
    medals_count['Event'] = event
    resultados = pd.concat([resultados, medals_count])

top_countries = resultados.groupby('País')['Medalhas de ouro'].sum().sort_values(ascending=False).head(10)

plt.figure(figsize=(20,10))
top_countries.plot(kind='bar', color='Set2')
7/247:
top_3_modalidades = brasil_ouro['Event'].value_counts().head(3).index

resultados = pd.DataFrame(columns=('Event', 'País', 'Medalhas de ouro'))

for event in top_3_modalidades:
    sport_medals = mesclado[(mesclado['Event'] == event) & (mesclado['Medal'] == 'Gold')]
    medals_count = sport_medals['NOC'].value_counts().reset_index()
    medals_count.columns = ['País', 'Medalhas de ouro']
    medals_count['Event'] = event
    resultados = pd.concat([resultados, medals_count])

top_countries = resultados.groupby('País')['Medalhas de ouro'].sum().sort_values(ascending=False).head(10)

plt.figure(figsize=(20,10))
top_countries.plot(kind='bar')
7/248:
top_3_modalidades = brasil_ouro['Event'].value_counts().head(3).index

resultados = pd.DataFrame(columns=('Event', 'País', 'Medalhas de ouro'))

for event in top_3_modalidades:
    sport_medals = mesclado[(mesclado['Event'] == event) & (mesclado['Medal'] == 'Gold')]
    medals_count = sport_medals['NOC'].value_counts().reset_index()
    medals_count.columns = ['País', 'Medalhas de ouro']
    medals_count['Event'] = event
    resultados = pd.concat([resultados, medals_count])

top_countries = resultados.groupby('País')['Medalhas de ouro'].sum().sort_values(ascending=False).head(10)

plt.figure(figsize=(20,10))
top_countries.plot(kind='bar', color='#95A3C3')
7/249:
top_3_modalidades = brasil_ouro['Event'].value_counts().head(3).index

resultados = pd.DataFrame(columns=('Event', 'País', 'Medalhas de ouro'))

for event in top_3_modalidades:
    sport_medals = mesclado[(mesclado['Event'] == event) & (mesclado['Medal'] == 'Gold')]
    medals_count = sport_medals['NOC'].value_counts().reset_index()
    medals_count.columns = ['País', 'Medalhas de ouro']
    medals_count['Event'] = event
    resultados = pd.concat([resultados, medals_count])

top_countries = resultados.groupby('País')['Medalhas de ouro'].sum().sort_values(ascending=False).head(10)

plt.figure(figsize=(20,10))
top_countries.plot(kind='bar', color='#95A3C3')
plt.xticks(rotation=45)
7/250:
top_3_modalidades = brasil_ouro['Event'].value_counts().head(3).index

resultados = pd.DataFrame(columns=('Event', 'País', 'Medalhas de ouro'))

for event in top_3_modalidades:
    sport_medals = mesclado[(mesclado['Event'] == event) & (mesclado['Medal'] == 'Gold')]
    medals_count = sport_medals['NOC'].value_counts().reset_index()
    medals_count.columns = ['País', 'Medalhas de ouro']
    medals_count['Event'] = event
    resultados = pd.concat([resultados, medals_count])

top_countries = resultados.groupby('País')['Medalhas de ouro'].sum().sort_values(ascending=False).head(10)

plt.figure(figsize=(20,10))
top_countries.plot(kind='bar', color='#95A3C3')
plt.xticks(rotation=-45)
7/251:
top_3_modalidades = brasil_ouro['Event'].value_counts().head(3).index

resultados = pd.DataFrame(columns=('Event', 'País', 'Medalhas de ouro'))

for event in top_3_modalidades:
    sport_medals = mesclado[(mesclado['Event'] == event) & (mesclado['Medal'] == 'Gold')]
    medals_count = sport_medals['NOC'].value_counts().reset_index()
    medals_count.columns = ['País', 'Medalhas de ouro']
    medals_count['Event'] = event
    resultados = pd.concat([resultados, medals_count])

top_countries = resultados.groupby('País')['Medalhas de ouro'].sum().sort_values(ascending=False).head(10)

plt.figure(figsize=(20,10))
top_countries.plot(kind='bar', color='#95A3C3')
plt.xticks(rotation=90)
7/252:
top_3_modalidades = brasil_ouro['Event'].value_counts().head(3).index

resultados = pd.DataFrame(columns=('Event', 'País', 'Medalhas de ouro'))

for event in top_3_modalidades:
    sport_medals = mesclado[(mesclado['Event'] == event) & (mesclado['Medal'] == 'Gold')]
    medals_count = sport_medals['NOC'].value_counts().reset_index()
    medals_count.columns = ['País', 'Medalhas de ouro']
    medals_count['Event'] = event
    resultados = pd.concat([resultados, medals_count])

top_countries = resultados.groupby('País')['Medalhas de ouro'].sum().sort_values(ascending=False).head(10)

plt.figure(figsize=(20,10))
top_countries.plot(kind='bar', color='#95A3C3')
plt.xticks(rotation=-90)
7/253:
top_3_modalidades = brasil_ouro['Event'].value_counts().head(3).index

resultados = pd.DataFrame(columns=('Event', 'País', 'Medalhas de ouro'))

for event in top_3_modalidades:
    sport_medals = mesclado[(mesclado['Event'] == event) & (mesclado['Medal'] == 'Gold')]
    medals_count = sport_medals['NOC'].value_counts().reset_index()
    medals_count.columns = ['País', 'Medalhas de ouro']
    medals_count['Event'] = event
    resultados = pd.concat([resultados, medals_count])

top_countries = resultados.groupby('País')['Medalhas de ouro'].sum().sort_values(ascending=False).head(10)

plt.figure(figsize=(20,10))
top_countries.plot(kind='bar', color='#95A3C3')
plt.xticks(rotation=-275)
7/254:
top_3_modalidades = brasil_ouro['Event'].value_counts().head(3).index

resultados = pd.DataFrame(columns=('Event', 'País', 'Medalhas de ouro'))

for event in top_3_modalidades:
    sport_medals = mesclado[(mesclado['Event'] == event) & (mesclado['Medal'] == 'Gold')]
    medals_count = sport_medals['NOC'].value_counts().reset_index()
    medals_count.columns = ['País', 'Medalhas de ouro']
    medals_count['Event'] = event
    resultados = pd.concat([resultados, medals_count])

top_countries = resultados.groupby('País')['Medalhas de ouro'].sum().sort_values(ascending=False).head(10)

plt.figure(figsize=(20,10))
top_countries.plot(kind='bar', color='#95A3C3')
plt.xticks(rotation=45)
7/255:
top_3_modalidades = brasil_ouro['Event'].value_counts().head(3).index

resultados = pd.DataFrame(columns=('Event', 'País', 'Medalhas de ouro'))

for event in top_3_modalidades:
    sport_medals = mesclado[(mesclado['Event'] == event) & (mesclado['Medal'] == 'Gold')]
    medals_count = sport_medals['NOC'].value_counts().reset_index()
    medals_count.columns = ['País', 'Medalhas de ouro']
    medals_count['Event'] = event
    resultados = pd.concat([resultados, medals_count])

top_countries = resultados.groupby('País')['Medalhas de ouro'].sum().sort_values(ascending=False).head(10)

plt.figure(figsize=(20,10))
top_countries.plot(kind='bar', color='#95A3C3')
plt.xticks(rotation=60)
7/256:
top_3_modalidades = brasil_ouro['Event'].value_counts().head(3).index

resultados = pd.DataFrame(columns=('Event', 'País', 'Medalhas de ouro'))

for event in top_3_modalidades:
    sport_medals = mesclado[(mesclado['Event'] == event) & (mesclado['Medal'] == 'Gold')]
    medals_count = sport_medals['NOC'].value_counts().reset_index()
    medals_count.columns = ['País', 'Medalhas de ouro']
    medals_count['Event'] = event
    resultados = pd.concat([resultados, medals_count])

top_countries = resultados.groupby('País')['Medalhas de ouro'].sum().sort_values(ascending=False).head(10)

plt.figure(figsize=(20,10))
top_countries.plot(kind='bar', color='#95A3C3')
plt.xticks(rotation=60)
plt.xlabel(xlabel='País')
plt.ylabel(ylabel='Medalhas de ouro')
7/257:
top_3_modalidades = brasil_ouro['Event'].value_counts().head(3).index

resultados = pd.DataFrame(columns=('Event', 'País', 'Medalhas de ouro'))

for event in top_3_modalidades:
    sport_medals = mesclado[(mesclado['Event'] == event) & (mesclado['Medal'] == 'Gold')]
    medals_count = sport_medals['NOC'].value_counts().reset_index()
    medals_count.columns = ['País', 'Medalhas de ouro']
    medals_count['Event'] = event
    resultados = pd.concat([resultados, medals_count])

top_countries = resultados.groupby('País')['Medalhas de ouro'].sum().sort_values(ascending=False).head(10)

plt.figure(figsize=(20,10))
top_countries.plot(kind='bar', color='#95A3C3')
plt.xticks(rotation=60)
plt.xlabel(xlabel='País')
plt.ylabel(ylabel='Medalhas de ouro')

top_countries
7/258:
top_3_modalidades = brasil_ouro['Event'].value_counts().head(3).index

resultados = pd.DataFrame(columns=('Event', 'País', 'Medalhas de ouro'))

for event in top_3_modalidades:
    sport_medals = mesclado[(mesclado['Event'] == event) & (mesclado['Medal'] == 'Gold')]
    medals_count = sport_medals['NOC'].value_counts().reset_index()
    medals_count.columns = ['País', 'Medalhas de ouro']
    medals_count['Event'] = event
    resultados = pd.concat([resultados, medals_count])

top_countries = resultados.groupby('País')['Medalhas de ouro'].sum().sort_values(ascending=False).head(10)

plt.figure(figsize=(20,10))
top_countries.plot(kind='bar', color='#95A3C3')
plt.xticks(rotation=60)
plt.xlabel(xlabel='País')
plt.ylabel(ylabel='Medalhas de ouro')
7/259:
top_3_modalidades = brasil_ouro['Event'].value_counts().head(3).index

resultados = pd.DataFrame(columns=('Event', 'País', 'Medalhas de ouro'))

for event in top_3_modalidades:
    sport_medals = mesclado[(mesclado['Event'] == event) & (mesclado['Medal'] == 'Gold')]
    medals_count = sport_medals['NOC'].value_counts().reset_index()
    medals_count.columns = ['País', 'Medalhas de ouro']
    medals_count['Event'] = event
    resultados = pd.concat([resultados, medals_count])

top_countries = resultados.groupby(['País', 'Event'])['Medalhas de ouro'].sum().sort_values(ascending=False).head(10)

top_countries
7/260:
top_3_modalidades = brasil_ouro['Event'].value_counts().head(3).index

resultados = pd.DataFrame(columns=('Event', 'País', 'Medalhas de ouro'))

for event in top_3_modalidades:
    sport_medals = mesclado[(mesclado['Event'] == event) & (mesclado['Medal'] == 'Gold')]
    medals_count = sport_medals['NOC'].value_counts().reset_index()
    medals_count.columns = ['País', 'Medalhas de ouro']
    medals_count['Event'] = event
    resultados = pd.concat([resultados, medals_count])

top_countries = resultados.groupby(['País', 'Event'])['Medalhas de ouro'].sum().sort_values(ascending=False).head(10)
top_countries = top_countries.groupby('País')['Medalhas de ouro'].sum().sort_values(ascending=False).head(10).index

# Filtrar os resultados para incluir apenas os top 10 países
resultados_top = resultados[resultados['País'].isin(top_countries)]

# Pivotar os dados para facilitar a plotagem
pivot_df = resultados_top.pivot(index='Event', columns='País', values='Medalhas de ouro').fillna(0)

# Plotar os resultados
pivot_df.plot(kind='bar', figsize=(14, 7))
plt.title('Top 10 Países por Medalhas de Ouro nos Top 3 Eventos do Brasil')
plt.xlabel('Evento')
plt.ylabel('Medalhas de Ouro')
plt.legend(title='País')
plt.xticks(rotation=45)
plt.tight_layout()
7/261:
top_3_modalidades = brasil_ouro['Event'].value_counts().head(3).index

resultados = pd.DataFrame(columns=('Event', 'País', 'Medalhas de ouro'))

for event in top_3_modalidades:
    sport_medals = mesclado[(mesclado['Event'] == event) & (mesclado['Medal'] == 'Gold')]
    medals_count = sport_medals['NOC'].value_counts().reset_index()
    medals_count.columns = ['País', 'Medalhas de ouro']
    medals_count['Event'] = event
    resultados = pd.concat([resultados, medals_count])

top_countries = resultados.groupby('País')['Medalhas de ouro'].sum().sort_values(ascending=False).head(10).index

# Filtrar os resultados para incluir apenas os top 10 países
resultados_top = resultados[resultados['País'].isin(top_countries)]

# Pivotar os dados para facilitar a plotagem
pivot_df = resultados_top.pivot(index='Event', columns='País', values='Medalhas de ouro').fillna(0)

# Plotar os resultados
pivot_df.plot(kind='bar', figsize=(14, 7))
plt.title('Top 10 Países por Medalhas de Ouro nos Top 3 Eventos do Brasil')
plt.xlabel('Evento')
plt.ylabel('Medalhas de Ouro')
plt.legend(title='País')
plt.xticks(rotation=45)
plt.tight_layout()
7/262:
top_3_modalidades = brasil_ouro['Event'].value_counts().head(3).index

resultados = pd.DataFrame(columns=('Event', 'País', 'Medalhas de ouro'))

for event in top_3_modalidades:
    sport_medals = mesclado[(mesclado['Event'] == event) & (mesclado['Medal'] == 'Gold')]
    medals_count = sport_medals['NOC'].value_counts().reset_index()
    medals_count.columns = ['País', 'Medalhas de ouro']
    medals_count['Event'] = event
    resultados = pd.concat([resultados, medals_count])

top_countries = resultados.groupby('País')['Medalhas de ouro'].sum().sort_values(ascending=False).head(10).index

# Filtrar os resultados para incluir apenas os top 10 países
resultados_top = resultados[resultados['País'].isin(top_countries)]

# Pivotar os dados para facilitar a plotagem
pivot_df = resultados_top.pivot(index='Event', columns='País', values='Medalhas de ouro').fillna(0)

# Plotar os resultados
pivot_df.plot(kind='bar', figsize=(14, 7))
plt.title('Top 10 Países por Medalhas de Ouro nos Top 3 Eventos do Brasil')
plt.xlabel('Evento')
plt.ylabel('Medalhas de Ouro')
plt.legend(title='País')
plt.xticks(rotation=0)
plt.tight_layout()
7/263:
top_3_modalidades = brasil_ouro['Event'].value_counts().head(3).index

resultados = pd.DataFrame(columns=('Event', 'País', 'Medalhas de ouro'))

for event in top_3_modalidades:
    sport_medals = mesclado[(mesclado['Event'] == event) & (mesclado['Medal'] == 'Gold')]
    medals_count = sport_medals['NOC'].value_counts().reset_index()
    medals_count.columns = ['País', 'Medalhas de ouro']
    medals_count['Event'] = event
    resultados = pd.concat([resultados, medals_count])

top_countries = resultados.groupby('País')['Medalhas de ouro'].sum().sort_values(ascending=False).head(5).index

# Filtrar os resultados para incluir apenas os top 10 países
resultados_top = resultados[resultados['País'].isin(top_countries)]

# Pivotar os dados para facilitar a plotagem
pivot_df = resultados_top.pivot(index='Event', columns='País', values='Medalhas de ouro').fillna(0)

# Plotar os resultados
pivot_df.plot(kind='bar', figsize=(14, 7))
plt.title('Top 10 Países por Medalhas de Ouro nos Top 3 Eventos do Brasil')
plt.xlabel('Evento')
plt.ylabel('Medalhas de Ouro')
plt.legend(title='País')
plt.xticks(rotation=0)
plt.tight_layout()
7/264:
top_3_modalidades = brasil_ouro['Event'].value_counts().head(3).index

resultados = pd.DataFrame(columns=('Event', 'País', 'Medalhas de ouro'))

for event in top_3_modalidades:
    sport_medals = mesclado[(mesclado['Event'] == event) & (mesclado['Medal'] == 'Gold')]
    medals_count = sport_medals['NOC'].value_counts().reset_index()
    medals_count.columns = ['País', 'Medalhas de ouro']
    medals_count['Event'] = event
    resultados = pd.concat([resultados, medals_count])

top_countries = resultados.groupby('País')['Medalhas de ouro'].sum().sort_values(ascending=False).head(5).index

# Filtrar os resultados para incluir apenas os top 10 países
resultados_top = resultados[resultados['País'].isin(top_countries)]

# Pivotar os dados para facilitar a plotagem
pivot_df = resultados_top.pivot(index='Event', columns='País', values='Medalhas de ouro').fillna(0)

top_countries
7/265:
top_3_modalidades = brasil_ouro['Event'].value_counts().head(3).index

resultados = pd.DataFrame(columns=('Event', 'País', 'Medalhas de ouro'))

for event in top_3_modalidades:
    sport_medals = mesclado[(mesclado['Event'] == event) & (mesclado['Medal'] == 'Gold')]
    medals_count = sport_medals['NOC'].value_counts().reset_index()
    medals_count.columns = ['País', 'Medalhas de ouro']
    medals_count['Event'] = event
    resultados = pd.concat([resultados, medals_count])

top_countries = resultados.groupby('País')['Medalhas de ouro'].sum().sort_values(ascending=False).head(5)

# Filtrar os resultados para incluir apenas os top 10 países
resultados_top = resultados[resultados['País'].isin(top_countries)]

# Pivotar os dados para facilitar a plotagem
pivot_df = resultados_top.pivot(index='Event', columns='País', values='Medalhas de ouro').fillna(0)

top_countries
7/266:
top_3_modalidades = brasil_ouro['Event'].value_counts().head(3).index

resultados = pd.DataFrame(columns=('Event', 'País', 'Medalhas de ouro'))

for event in top_3_modalidades:
    sport_medals = mesclado[(mesclado['Event'] == event) & (mesclado['Medal'] == 'Gold')]
    medals_count = sport_medals['NOC'].value_counts().reset_index()
    medals_count.columns = ['País', 'Medalhas de ouro']
    medals_count['Event'] = event
    resultados = pd.concat([resultados, medals_count])

top_countries = resultados.groupby('País')['Medalhas de ouro'].sum().sort_values(ascending=False).head(5)

# Filtrar os resultados para incluir apenas os top 10 países
resultados_top = resultados[resultados['País'].isin(top_countries.index)]

# Pivotar os dados para facilitar a plotagem
pivot_df = resultados_top.pivot(index='Event', columns='País', values='Medalhas de ouro').fillna(0)

plt.figure(figsize=(15,7))
top_countries.plot(kind='bar')
7/267:
top_3_modalidades = brasil_ouro['Event'].value_counts().head(3).index

resultados = pd.DataFrame(columns=('Event', 'País', 'Medalhas de ouro'))

for event in top_3_modalidades:
    sport_medals = mesclado[(mesclado['Event'] == event) & (mesclado['Medal'] == 'Gold')]
    medals_count = sport_medals['NOC'].value_counts().reset_index()
    medals_count.columns = ['País', 'Medalhas de ouro']
    medals_count['Event'] = event
    resultados = pd.concat([resultados, medals_count])

top_countries = resultados.groupby('País')['Medalhas de ouro'].sum().sort_values(ascending=False).head(5)

# Filtrar os resultados para incluir apenas os top 10 países
resultados_top = resultados[resultados['País'].isin(top_countries.index)]

# Pivotar os dados para facilitar a plotagem
pivot_df = resultados_top.pivot(index='Event', columns='País', values='Medalhas de ouro').fillna(0)

plt.figure(figsize=(15,7))
top_countries.plot(kind='bar')
plt.xticks(rotation=0)
7/268:
# Plotar os resultados
pivot_df.plot(kind='bar', figsize=(14, 7))
plt.title('Top 10 Países por Medalhas de Ouro nos Top 3 Eventos do Brasil')
plt.xlabel('Evento')
plt.ylabel('Medalhas de Ouro')
plt.legend(title='País')
plt.xticks(rotation=0)
plt.tight_layout()
7/269:
top_3_modalidades = brasil_ouro['Event'].value_counts().head(3).index

resultados = pd.DataFrame(columns=('Event', 'País', 'Medalhas de ouro'))

for event in top_3_modalidades:
    sport_medals = mesclado[(mesclado['Event'] == event) & (mesclado['Medal'] == 'Gold')]
    medals_count = sport_medals['NOC'].value_counts().reset_index()
    medals_count.columns = ['País', 'Medalhas de ouro']
    medals_count['Event'] = event
    resultados = pd.concat([resultados, medals_count])

top_countries = resultados.groupby('País')['Medalhas de ouro'].sum().sort_values(ascending=False).head(10)

# Filtrar os resultados para incluir apenas os top 10 países
resultados_top = resultados[resultados['País'].isin(top_countries.index)]

# Pivotar os dados para facilitar a plotagem
pivot_df = resultados_top.pivot(index='Event', columns='País', values='Medalhas de ouro').fillna(0)

plt.figure(figsize=(15,7))
top_countries.plot(kind='bar')
plt.xticks(rotation=0)
7/270:
top_3_modalidades = brasil_ouro['Event'].value_counts().head(3).index

resultados = pd.DataFrame(columns=('Event', 'País', 'Medalhas de ouro'))

for event in top_3_modalidades:
    sport_medals = mesclado[(mesclado['Event'] == event) & (mesclado['Medal'] == 'Gold')]
    medals_count = sport_medals['NOC'].value_counts().reset_index()
    medals_count.columns = ['País', 'Medalhas de ouro']
    medals_count['Event'] = event
    resultados = pd.concat([resultados, medals_count])

top_countries = resultados.groupby('País')['Medalhas de ouro'].sum().sort_values(ascending=False).head(10)

resultados_top = resultados[resultados['País'].isin(top_countries.index)]

pivot_df = resultados_top.pivot(index='Event', columns='País', values='Medalhas de ouro').fillna(0)

plt.figure(figsize=(15,7))
top_countries.plot(kind='bar')
plt.xticks(rotation=0)
7/271:
# Plotar os resultados
pivot_df.plot(kind='bar', figsize=(14, 7))
plt.title('Top 10 Países por Medalhas de Ouro nos Top 3 Eventos do Brasil')
plt.xlabel('Evento')
plt.ylabel('Medalhas de Ouro')
plt.legend(title='País')
plt.xticks(rotation=0)
plt.tight_layout()
7/272:
medalhas_br = brasil[brasil['Medal'] != 'NA']
medalhas_ano_br = medalhas_br.groupby('Year')['Medal'].count()

medalhas_ano_br
7/273:
medalhas_br = brasil[brasil['Medal'] != 'NA']
medalhas_ano_br = medalhas_br.groupby('Year')['Medal'].count()

medalhas_br
7/274:
medalhas_br = brasil[brasil['Medal'] != 'NaN']
medalhas_ano_br = medalhas_br.groupby('Year')['Medal'].count()

medalhas_br
7/275:
medalhas_br = brasil[brasil['Medal'] != 'NaN']
medalhas_ano_br = medalhas_br.groupby('Year')['Medal'].count()

medalhas_ano_br
7/276:
medalhas_br = brasil[brasil['Medal'] != 'NaN']
medalhas_ano_br = medalhas_br.groupby('Year')['Medal'].count()

medalhas_br
7/277:
medalhas_br = brasil[np.isfinite(brasil['Medal'])]
medalhas_ano_br = medalhas_br.groupby('Year')['Medal'].count()

medalhas_br
7/278:
medalhas_br = brasil[brasil['Medal'] == 'NaN']
medalhas_ano_br = medalhas_br.groupby('Year')['Medal'].count()

medalhas_br
7/279:
medalhas_br = brasil[brasil['Medal'].isna(True)]
medalhas_ano_br = medalhas_br.groupby('Year')['Medal'].count()

medalhas_br
7/280:
medalhas_br = brasil[brasil['Medal'].isna()]
medalhas_ano_br = medalhas_br.groupby('Year')['Medal'].count()

medalhas_br
7/281:
medalhas_br = brasil[~(brasil['Medal'].isna())]
medalhas_ano_br = medalhas_br.groupby('Year')['Medal'].count()

medalhas_br
7/282:
medalhas_br = brasil[~(brasil['Medal'].isna())]
medalhas_ano_br = medalhas_br.groupby('Year')['Medal'].count()

medalhas_ano_br
7/283: medalhas_ano_br = brasil.groupby('Year')['Medal'].count()
7/284:
medalhas_ano_br = brasil.groupby('Year')['Medal'].count()

medalhas_ano_br
7/285:
medalhas_ano_br = brasil.groupby('Year')['Medal'].count()

plt.figure(figsize=(20,10))
sns.countplot(data=medalhas_ano_br)
7/286:
medalhas_ano_br = brasil.groupby('Year')['Medal'].count()

plt.figure(figsize=(20,10))
medalhas_ano_br.plot()
7/287:
medalhas_ano_br = brasil.groupby('Year')['Medal'].count()

plt.figure(figsize=(20,10))
medalhas_ano_br.plot(kind='area')
7/288:
medalhas_ano_br = brasil.groupby('Year')['Medal'].count()

plt.figure(figsize=(20,10))
medalhas_ano_br.plot(kind='barh')
7/289:
medalhas_ano_br = brasil.groupby('Year')['Medal'].count()

plt.figure(figsize=(20,10))
medalhas_ano_br.plot(kind='hexbin')
7/290:
medalhas_ano_br = brasil.groupby('Year')['Medal'].count()

plt.figure(figsize=(20,10))
medalhas_ano_br.plot(kind='kde')
7/291:
medalhas_ano_br = brasil.groupby('Year')['Medal'].count()

plt.figure(figsize=(20,10))
medalhas_ano_br.plot(kind='hist')
7/292:
medalhas_ano_br = brasil.groupby('Year')['Medal'].count()

plt.figure(figsize=(20,10))
medalhas_ano_br.plot(kind='scatter')
7/293:
medalhas_ano_br = brasil.groupby('Year')['Medal'].count()

plt.figure(figsize=(20,10))
medalhas_ano_br.plot(kind='bar')
7/294: medalhas_ouro_ano_br = brasil[brasil['Medal']=='Gold'].groupby('Year')['Medal'].count()
7/295:
medalhas_ouro_ano_br = brasil[brasil['Medal']=='Gold'].groupby('Year')['Medal'].count()

plt.figure(figsize=(20,10))
medalhas_ouro_ano_br.plot(kind='bar')
7/296:
medalhas_ouro_ano_br = brasil[(brasil['Medal']=='Gold') | (brasil['Medal'].isna())].groupby('Year')['Medal'].count()

plt.figure(figsize=(20,10))
medalhas_ouro_ano_br.plot(kind='bar')
7/297:
medalhas_prata_ano_br = brasil[(brasil['Medal']=='Silver') | (brasil['Medal'].isna())].groupby('Year')['Medal'].count()

plt.figure(figsize=(20,10))
medalhas_prata_ano_br.plot(kind='bar')
7/298:
medalhas_bronze_ano_br = brasil[(brasil['Medal']=='Bronze') | (brasil['Medal'].isna())].groupby('Year')['Medal'].count()

plt.figure(figsize=(20,10))
medalhas_bronze_ano_br.plot(kind='bar')
7/299:
plt.figure(figsize=(14, 7))
brasil['Age'].hist(bins=20, alpha=0.5, label='Brasil')
mesclado[mesclado['NOC'] != 'BRA']['Age'].hist(bins=20, alpha=0.5, label='Resto do Mundo')
plt.title('Distribuição Etária dos Atletas')
plt.xlabel('Idade')
plt.ylabel('Número de Atletas')
plt.legend()
7/300:
plt.figure(figsize=(20, 10))
sns.boxplot(x='Year', y='Age', data=brasil)
plt.xlabel('')
plt.ylabel('Idade')
plt.title('Distribuição de idade atraves dos anos - Homens')
7/301:
plt.figure(figsize=(20, 10))
sns.boxplot(x='Year', y='Age', data=brasil)
plt.xlabel('')
plt.ylabel('Idade')
plt.title('Distribuição de idade atraves dos anos - Brasil')
7/302:
plt.figure(figsize=(20, 10))
sns.boxplot(x='Year', y='Age', data=brasil[brasil['Medal']=='Gold'])
plt.xlabel('')
plt.ylabel('Idade')
plt.title('Distribuição de idade atraves dos anos - Brasil')
7/303:
plt.figure(figsize=(20, 10))
sns.boxplot(x='Year', y='Age', data=brasil[brasil['Medal']=='Gold'])
plt.xlabel('')
plt.ylabel('Idade')
plt.title('Distribuição de idade atraves dos anos - Brasil (Medalhistas Ouro)')
7/304: brasil_ouro_outliers = brasil[(brasil['Medal']=='Gold') & (brasil['Age']>=40)]
7/305:
brasil_ouro_outliers = brasil[(brasil['Medal']=='Gold') & (brasil['Age']>=40)]
brasil_ouro_outliers
7/306: brasil[(brasil['Medal']=='Gold') & (brasil['Age']>=40)]
7/307:
volei_masculino = brasil_ouro[brasil_ouro['Event']=="Volleyball Men's Volleyball"]
volei_masculino
7/308:
volei_masculino = brasil_ouro[brasil_ouro['Event']=="Volleyball Men's Volleyball"]
plt.figure(figsize=(10, 20))
plt.scatter(x='Height', y = 'Weight', data=volei_masculino)
7/309:
volei_masculino = brasil_ouro[brasil_ouro['Event']=="Volleyball Men's Volleyball"]
plt.figure(figsize=(10, 20))
plt.scatter(x='Weight', y = 'Height', data=volei_masculino)
7/310:
volei_masculino = brasil_ouro[brasil_ouro['Event']=="Volleyball Men's Volleyball"]
plt.figure(figsize=(10, 20))
plt.scatter(x='Height', y = 'Weight', data=volei_masculino)
plt.tight_layout()
7/311:
volei_masculino = brasil_ouro[brasil_ouro['Event']=="Volleyball Men's Volleyball"]
plt.figure(figsize=(10, 20))
plt.hist(x='Height', y='Weight', dados=volei_masculino)
plt.tight_layout()
7/312: volei_masculino = brasil_ouro[brasil_ouro['Event']=="Volleyball Men's Volleyball"]
7/313:
volei_masculino = brasil_ouro[brasil_ouro['Event']=="Volleyball Men's Volleyball"]
volei_masculino
7/314:
volei_masculino = brasil_ouro[brasil_ouro['Event']=="Volleyball Men's Volleyball"]
plt.figure(figsize=(20, 10))
sns.barplot('Year', 'Weight', data=volei_masculino)
7/315:
volei_masculino = brasil_ouro[brasil_ouro['Event']=="Volleyball Men's Volleyball"]
plt.figure(figsize=(20, 10))
sns.barplot(x='Year', y='Weight', data=volei_masculino)
7/316:
volei_masculino = brasil_ouro[brasil_ouro['Event']=="Volleyball Men's Volleyball"]

volei_masculino.groupby('Year')['Wight'].count()
7/317:
volei_masculino = brasil_ouro[brasil_ouro['Event']=="Volleyball Men's Volleyball"]

volei_masculino.groupby('Year')['Wight']
7/318:
volei_masculino = brasil_ouro[brasil_ouro['Event']=="Volleyball Men's Volleyball"]

volei_masculino.groupby('Year')['Weight']
7/319:
volei_masculino = brasil_ouro[brasil_ouro['Event']=="Volleyball Men's Volleyball"]

volei_masculino.groupby('Year')['Weight'].count()
7/320:
volei_masculino = brasil_ouro[brasil_ouro['Event']=="Volleyball Men's Volleyball"]

volei_masculino
7/321:
volei_masculino = brasil_ouro[brasil_ouro['Event']=="Volleyball Men's Volleyball"]

volei_masculino.plot()
7/322:
volei_masculino = brasil_ouro[brasil_ouro['Event']=="Volleyball Men's Volleyball"]

volei_masculino.plot(x='Year')
7/323:
volei_masculino = brasil_ouro[brasil_ouro['Event']=="Volleyball Men's Volleyball"]

volei_masculino.plot(x='Year', y='Weight')
7/324:
volei_masculino = brasil_ouro[brasil_ouro['Event']=="Volleyball Men's Volleyball"]

volei_masculino.plot(kind='bar' x='Year', y='Weight')
7/325:
volei_masculino = brasil_ouro[brasil_ouro['Event']=="Volleyball Men's Volleyball"]

volei_masculino.plot(kind='bar', x='Year', y='Weight')
7/326:
volei_masculino = brasil_ouro[brasil_ouro['Event']=="Volleyball Men's Volleyball"]

plt.figure(figsize=(20,10))
volei_masculino.plot(kind='bar', x='Year', y='Weight')
7/327:
volei_masculino = brasil_ouro[brasil_ouro['Event']=="Volleyball Men's Volleyball"]

plt.figure(figsize=(20,10))
sns.barplot(data=volei_masculino, x='Year', y='Weight')
7/328:
volei_masculino = brasil_ouro[brasil_ouro['Event']=="Volleyball Men's Volleyball"]
volei_masculino['Year'] = volei_masculino['Year'].astype('category')
plt.figure(figsize=(20,10))
sns.barplot(data=volei_masculino, x='Year', y='Weight')
7/329:
volei_masculino = brasil_ouro[brasil_ouro['Event']=="Volleyball Men's Volleyball"]
volei_masculino['Year'] = volei_masculino['Year'].astype('category')
plt.figure(figsize=(20,10))
sns.pointplot(data=volei_masculino, x='Year', y='Weight', ci=None)
7/330:
volei_masculino = brasil_ouro[brasil_ouro['Event']=="Volleyball Men's Volleyball"]
volei_masculino['Year'].value_counts()
7/331:
volei_masculino = brasil_ouro[brasil_ouro['Event']=="Volleyball Men's Volleyball"]
volei_masculino['Year'].mean('Weight')
7/332:
volei_masculino = brasil_ouro[brasil_ouro['Event']=="Volleyball Men's Volleyball"]
volei_masculino['Year']
7/333:
volei_masculino = brasil_ouro[brasil_ouro['Event']=="Volleyball Men's Volleyball"]
volei_masculino
7/334:
volei_masculino = brasil_ouro[brasil_ouro['Event']=="Volleyball Men's Volleyball"]
sns.barplot('Year', 'Weight', data=volei_masculino)
plt.title('Weight over year for Male Gymnasts')
7/335:
volei_masculino = brasil_ouro[brasil_ouro['Event']=="Volleyball Men's Volleyball"]
sns.barplot(x='Year', y='Weight', data=volei_masculino)
plt.title('Weight over year for Male Gymnasts')
7/336:
volei_masculino = brasil_ouro[brasil_ouro['Event']=="Volleyball Men's Volleyball"]
plt.figure(figsize=(20, 10))
sns.barplot(x='Year', y='Weight', data=volei_masculino)
plt.title('Weight over year for Male Gymnasts')
7/337:
volei_masculino = brasil_ouro[brasil_ouro['Event']=="Volleyball Men's Volleyball"]
plt.figure(figsize=(20, 10))
sns.barplot(x='Year', y='Hieght', data=volei_masculino)
plt.title('Weight over year for Male Gymnasts')
7/338:
volei_masculino = brasil_ouro[brasil_ouro['Event']=="Volleyball Men's Volleyball"]
plt.figure(figsize=(20, 10))
sns.barplot(x='Year', y='Height', data=volei_masculino)
plt.title('Weight over year for Male Gymnasts')
7/339:
volei_masculino = brasil[brasil_ouro['Event']=="Volleyball Men's Volleyball"]
plt.figure(figsize=(20, 10))
sns.barplot(x='Year', y='Weight', data=volei_masculino)
plt.title('Weight over year for Male Gymnasts')
7/340:
volei_masculino = brasil[brasil['Event']=="Volleyball Men's Volleyball"]
plt.figure(figsize=(20, 10))
sns.barplot(x='Year', y='Weight', data=volei_masculino)
plt.title('Weight over year for Male Gymnasts')
7/341:
volei_masculino = brasil[brasil['Event']=="Volleyball Men's Volleyball"]
plt.figure(figsize=(20, 10))
sns.barplot(x='Year', y='Height', data=volei_masculino)
plt.title('Weight over year for Male Gymnasts')
7/342:
volei_feminino = brasil[brasil['Event']=="Volleyball Women's Volleyball"]
plt.figure(figsize=(20, 10))
sns.barplot(x='Year', y='Weight', data=volei_feminino)
plt.title('Weight over year for Male Gymnasts')
7/343:
volei_feminino = brasil[brasil['Event']=="Volleyball Women's Volleyball"]
plt.figure(figsize=(20, 10))
sns.barplot(x='Year', y='Height', data=volei_feminino)
plt.title('Weight over year for Male Gymnasts')
7/344:
volei_masculino = brasil[brasil['Event']=="Volleyball Men's Volleyball"]
plt.figure(figsize=(20, 10))
sns.barplot(x='Year', y=volei_masculino['Weight']/volei_masculino['Height'], data=volei_masculino)
plt.title('Weight over year for Male Gymnasts')
7/345:
volei_feminino = brasil[brasil['Event']=="Volleyball Women's Volleyball"]
plt.figure(figsize=(20, 10))
sns.barplot(x='Year', y=volei_feminino['Weight']/volei_feminino['Height'], data=volei_feminino)
plt.title('Weight over year for Male Gymnasts')
7/346:
futebol_masculino = brasil[brasil['Event']=="Football Men's Football"]
plt.figure(figsize=(20, 10))
sns.barplot(x='Year', y=futebol_masculino['Weight']/futebol_masculino['Height'], data=futebol_masculino)
plt.title('Weight over year for Male Gymnasts')
7/347:
futebol_masculino = brasil[(brasil['Event']=="Football Men's Football") & np.isfinite(brasil['Height'])]
plt.figure(figsize=(20, 10))
sns.barplot(x='Year', y=futebol_masculino['Weight']/futebol_masculino['Height'], data=futebol_masculino)
plt.title('Weight over year for Male Gymnasts')
7/348:
futebol_masculino = brasil[(brasil['Event']=="Football Men's Football") 
                           & np.isfinite(brasil['Height'])
                           & np.isfinite(brasil['Weight'])
                           ]
plt.figure(figsize=(20, 10))
sns.barplot(x='Year', y=futebol_masculino['Weight']/futebol_masculino['Height'], data=futebol_masculino)
plt.title('Weight over year for Male Gymnasts')
7/349:
volei_masculino = brasil[brasil['Event']=="Volleyball Men's Volleyball"]
plt.figure(figsize=(20, 10))
sns.pointplot(x='Year', y=volei_masculino['Weight']/volei_masculino['Height'], data=volei_masculino)
plt.title('Weight over year for Male Gymnasts')
7/350:
volei_masculino = brasil[brasil['Event']=="Volleyball Men's Volleyball"]
plt.figure(figsize=(20, 10))
sns.pointplot(x='Year',
            y=volei_masculino['Weight']/volei_masculino['Height'], 
            data=volei_masculino,
            palette='Set2'
        )
plt.title('Weight over year for Male Gymnasts')
7/351:
volei_feminino = brasil[brasil['Event']=="Volleyball Women's Volleyball"]
plt.figure(figsize=(20, 10))
sns.pointplot(x='Year',
               y=volei_feminino['Weight']/volei_feminino['Height'], 
               data=volei_feminino,
               palette='Set2'
            )
plt.title('Weight over year for Male Gymnasts')
7/352:
futebol_masculino = brasil[(brasil['Event']=="Football Men's Football") 
                           & np.isfinite(brasil['Height'])
                           & np.isfinite(brasil['Weight'])
                           ]
plt.figure(figsize=(20, 10))
sns.pointplot(x='Year',
            y=futebol_masculino['Weight']/futebol_masculino['Height'],
            data=futebol_masculino,
            palette='Set2'
        )
plt.title('Weight over year for Male Gymnasts')
7/353:
import numpy as np
import pandas as pd
import seaborn as sns
import os
import warnings

from matplotlib import pyplot as plt
from matplotlib.colors import LinearSegmentedColormap

dir_atual = os.path.dirname(os.path.abspath('__file__'))
root_dir = os.path.abspath(os.path.join(dir_atual, '..'))
input_path = os.path.join(dir_atual, 'input')

warnings.filterwarnings('ignore')

sns.set_theme('dark')

%matplotlib inline
7/354:
import numpy as np
import pandas as pd
import seaborn as sns
import os
import warnings

from matplotlib import pyplot as plt
from matplotlib.colors import LinearSegmentedColormap

dir_atual = os.path.dirname(os.path.abspath('__file__'))
root_dir = os.path.abspath(os.path.join(dir_atual, '..'))
input_path = os.path.join(dir_atual, 'input')

warnings.filterwarnings('ignore')

sns.set()

%matplotlib inline
7/355:
comp_verao = mesclado[mesclado['Season']=='Summer']   
comp_inverno = mesclado[mesclado['Season']=='Winter']  

num_comp_verao = comp_verao['Year'].nunique()           
num_comp_inverno = comp_inverno['Year'].nunique()     

comp_verao = comp_verao[comp_verao['Medal'] != 'NA']
comp_inverno = comp_inverno[comp_inverno['Medal'] != 'NA']

num_medalhas_verao = comp_verao['Medal'].value_counts().sum()
num_medalhas_inverno = comp_inverno['Medal'].value_counts().sum()

media_medalha_comp_verao = (num_medalhas_verao)/(num_comp_verao)
media_medalha_comp_inverno = (num_medalhas_inverno)/(num_comp_inverno)


print(f"Então nesses últimos 120 anos tivemos {num_comp_verao} competições de verão e "
        f"{num_comp_inverno} competições de inverno.\nForam distribuidas, sendo "
        f"{num_medalhas_verao + num_medalhas_inverno} medalhas, sendo "
        f"{num_medalhas_verao} nas competições de verão e "
        f"{media_medalha_comp_inverno} nas competições de inverno\n\n" 
        f"Na média, "
        f"são distribuidas {media_medalha_comp_verao:.0f} medalhas "
        f"por competição no verão e {media_medalha_comp_inverno:.0f} medalhas por competição no inverno")
7/356:
comp_verao = mesclado[mesclado['Season']=='Summer']   
comp_inverno = mesclado[mesclado['Season']=='Winter']  

num_comp_verao = comp_verao['Year'].nunique()           
num_comp_inverno = comp_inverno['Year'].nunique()     

comp_verao = comp_verao[comp_verao['Medal'] != 'NA']
comp_inverno = comp_inverno[comp_inverno['Medal'] != 'NA']

num_medalhas_verao = comp_verao['Medal'].value_counts().sum()
num_medalhas_inverno = comp_inverno['Medal'].value_counts().sum()

media_medalha_comp_verao = (num_medalhas_verao)/(num_comp_verao)
media_medalha_comp_inverno = (num_medalhas_inverno)/(num_comp_inverno)


print(f"Então nesses últimos 120 anos tivemos {num_comp_verao} competições de verão e "
        f"{num_comp_inverno} competições de inverno.\nForam distribuidas, sendo "
        f"{num_medalhas_verao + num_medalhas_inverno} medalhas, sendo "
        f"{num_medalhas_verao} nas competições de verão e "
        f"{num_medalhas_inverno} nas competições de inverno\n\n" 
        f"Na média, "
        f"são distribuidas {media_medalha_comp_verao:.0f} medalhas "
        f"por competição no verão e {media_medalha_comp_inverno:.0f} medalhas por competição no inverno")
7/357:
comp_verao = mesclado[mesclado['Season']=='Summer']   
comp_inverno = mesclado[mesclado['Season']=='Winter']  

num_comp_verao = comp_verao['Year'].nunique()           
num_comp_inverno = comp_inverno['Year'].nunique()     

comp_verao = comp_verao[comp_verao['Medal'] != 'NA']
comp_inverno = comp_inverno[comp_inverno['Medal'] != 'NA']

num_medalhas_verao = comp_verao['Medal'].value_counts().sum()
num_medalhas_inverno = comp_inverno['Medal'].value_counts().sum()

media_medalha_comp_verao = (num_medalhas_verao)/(num_comp_verao)
media_medalha_comp_inverno = (num_medalhas_inverno)/(num_comp_inverno)

print(f"Então nesses últimos 120 anos tivemos {num_comp_verao} competições de verão e "
        f"{num_comp_inverno} competições de inverno.\n\nForam distribuidas, sendo "
        f"{num_medalhas_verao + num_medalhas_inverno} medalhas, sendo "
        f"{num_medalhas_verao} nas competições de verão e "
        f"{num_medalhas_inverno} nas competições de inverno\n\n" 
        f"Na média, "
        f"são distribuidas {media_medalha_comp_verao:.0f} medalhas "
        f"por competição no verão e {media_medalha_comp_inverno:.0f} medalhas por competição no inverno")
7/358:
plt.figure(figsize=(20,10))
plt.tight_layout()
sns.countplot(x=medalhas_ouro['Age'],hue=medalhas_ouro['Age'], legend=False, data=medalhas_ouro, palette='Set2')
plt.title('Distribuição de medalhas de ouro por idade')
plt.ylabel('Medalhas de ouro')
plt.xlabel('Idade')
7/359:
num_barras = medalhas_ouro['Age'].nunique()
paleta_dourada = [mapa_dourado(i / num_barras) for i in range(num_barras)]

plt.figure(figsize=(20,10))
plt.tight_layout()
sns.countplot(x=medalhas_ouro['Age'],hue=medalhas_ouro['Age'], legend=False, data=medalhas_ouro, palette=paleta_dourada)
plt.title('Distribuição de medalhas de ouro por idade')
plt.ylabel('Medalhas de ouro')
plt.xlabel('Idade')
7/360:
plt.figure(figsize=(20,10))
plt.tight_layout()
sns.countplot(x=medalhas_ouro['Age'],hue=medalhas_ouro['Age'], legend=False, data=medalhas_ouro, palette='Set2')
plt.title('Distribuição de medalhas de ouro por idade')
plt.ylabel('Medalhas de ouro')
plt.xlabel('Idade')
7/361:
medalhas_ouro = medalhas_ouro[np.isfinite(medalhas_ouro['Age'])]
medalhas_ouro['Age'] = medalhas_ouro['Age'].astype(int)
7/362:
plt.figure(figsize=(20,10))
plt.tight_layout()
sns.countplot(x=medalhas_ouro['Age'],hue=medalhas_ouro['Age'], legend=False, data=medalhas_ouro, palette='Set2')
plt.title('Distribuição de medalhas de ouro por idade')
plt.ylabel('Medalhas de ouro')
plt.xlabel('Idade')
7/363: menores_quinze_anos = medalhas_ouro['Sport'][medalhas_ouro['Age']<=15]
7/364:
plt.figure(figsize=(20, 10))
plt.tight_layout()
sns.countplot(x=menores_quinze_anos, hue=menores_quinze_anos, legend=False, palette=cores_olimpicas)
plt.title('Medalhas de Ouro por esporte com atletas menores de 15 anos')
plt.ylabel('Medalhas de ouro')
plt.xlabel('Esporte')
7/365: menores_quinze_anos.value_counts()
7/366:
plt.figure(figsize=(20, 10))
plt.tight_layout()
sns.countplot(x=menores_quinze_anos, hue=menores_quinze_anos, legend=False, palette='Set2')
plt.title('Medalhas de Ouro por esporte com atletas menores de 15 anos')
plt.ylabel('Medalhas de ouro')
plt.xlabel('Esporte')
7/367:
plt.figure(figsize=(20, 10))
plt.tight_layout()
sns.countplot(x=menores_quinze_anos, hue=menores_quinze_anos, legend=False, palette='Set1')
plt.title('Medalhas de Ouro por esporte com atletas menores de 15 anos')
plt.ylabel('Medalhas de ouro')
plt.xlabel('Esporte')
7/368:
plt.figure(figsize=(20, 10))
plt.tight_layout()
sns.countplot(x=menores_quinze_anos, hue=menores_quinze_anos, legend=False, palette='Set3')
plt.title('Medalhas de Ouro por esporte com atletas menores de 15 anos')
plt.ylabel('Medalhas de ouro')
plt.xlabel('Esporte')
7/369:
plt.figure(figsize=(20, 10))
plt.tight_layout()
sns.countplot(x=menores_quinze_anos, hue=menores_quinze_anos, legend=False, palette='Set2')
plt.title('Medalhas de Ouro por esporte com atletas menores de 15 anos')
plt.ylabel('Medalhas de ouro')
plt.xlabel('Esporte')
7/370:
plt.figure(figsize=(20, 10))
plt.tight_layout()
sns.countplot(x=menores_quinze_anos, hue=menores_quinze_anos, legend=False, palette='Set2')
plt.title('Medalhas de Ouro por esporte com atletas menores de 15 anos')
plt.ylabel('Medalhas de ouro')
plt.xlabel('Modalidade')
7/371:
plt.figure(figsize=(20, 10))
plt.tight_layout()
sns.countplot(x=menores_quinze_anos, hue=menores_quinze_anos, legend=False, palette='Set2')
plt.title('Medalhas de Ouro por esporte com atletas menores de 16 anos')
plt.ylabel('Medalhas de ouro')
plt.xlabel('Modalidade')
7/372:
plt.figure(figsize=(20, 10))
plt.tight_layout()
sns.countplot(x=mais_cinquenta_anos, hue=mais_cinquenta_anos, legend=False, order=contagem.index, palette='Set2')
plt.title('Medalhas de Ouro por esporte para atletas com mais de 50 anos')
plt.ylabel('Medalhas de ouro')
plt.xlabel('Esporte')
7/373: ouro_paises = medalhas_ouro['NOC'].value_counts()
7/374:
ouro_paises = medalhas_ouro['NOC'].value_counts()
ouro_paises
7/375:
ouro_paises = medalhas_ouro['NOC'].value_counts().head(10)
ouro_paises
7/376:
ouro_paises = medalhas_ouro['region'].value_counts().head(10)
ouro_paises
7/377:
ouro_paises = medalhas_ouro['region'].value_counts().head(10)

plt.figure(figsize=(10,20))

plt.barh(y='region', data=ouro_paises)
7/378:
ouro_paises = medalhas_ouro['region'].value_counts().head(10)

y = ouro_paises.index()
y
7/379:
ouro_paises = medalhas_ouro['region'].value_counts().head(10)

y = ouro_paises.index
y
7/380:
ouro_paises = medalhas_ouro['region'].value_counts().head(10)

y = ouro_paises.index
x = ouro_paises.values
x
7/381:
ouro_paises = medalhas_ouro['region'].value_counts().head(10)

y = ouro_paises.index
x = ouro_paises.values

plt.figure(figsize=(10,20))

plt.barh(y=y, data=ouro_paises, width=x)
7/382:
ouro_paises = medalhas_ouro['region'].value_counts().head(10)

y = ouro_paises.index
x = ouro_paises.values

plt.figure(figsize=(20,10))

plt.barh(y=y, data=ouro_paises, width=x)
7/383:
ouro_paises = medalhas_ouro['region'].value_counts().head(10)
ouro_paises.sort_values(ascending=False)
y = ouro_paises.index
x = ouro_paises.values

plt.figure(figsize=(20,10))

plt.barh(y=y, data=ouro_paises, width=x)
7/384:
ouro_paises = medalhas_ouro['region'].value_counts().head(10)
ouro_paises.sort_values(ascending=True)
y = ouro_paises.index
x = ouro_paises.values

plt.figure(figsize=(20,10))

plt.barh(y=y, data=ouro_paises, width=x)
7/385:
ouro_paises = medalhas_ouro['region'].value_counts().head(10)
ouro_paises = ouro_paises.sort_values(ascending=False)
y = ouro_paises.index
x = ouro_paises.values

plt.figure(figsize=(20,10))

plt.barh(y=y, data=ouro_paises, width=x)
7/386:
ouro_paises = medalhas_ouro['region'].value_counts().head(10)
ouro_paises = ouro_paises.sort_values(ascending=True)
y = ouro_paises.index
x = ouro_paises.values

plt.figure(figsize=(20,10))

plt.barh(y=y, data=ouro_paises, width=x)
7/387:
ouro_paises = medalhas_ouro['region'].value_counts().head(10)
ouro_paises = ouro_paises.sort_values(ascending=True)
y = ouro_paises.index
x = ouro_paises.values

plt.figure(figsize=(20,10))

plt.barh(y=y, data=ouro_paises, width=x)
plt.xlabel('Número de Medalhas de Ouro')
plt.title('Top 10 Países com Mais Medalhas de Ouro')
plt.show()
7/388:
ouro_paises = medalhas_ouro['region'].value_counts().head(10)
ouro_paises = ouro_paises.sort_values(ascending=True)
y = ouro_paises.index
x = ouro_paises.values

plt.figure(figsize=(20,10))

plt.barh(y=y, data=ouro_paises, width=x)
plt.xlabel('Número de Medalhas de Ouro')
plt.title('Top 10 Países com Mais Medalhas de Ouro')
7/389:
ouro_paises = medalhas_ouro['region'].value_counts().head(10)
ouro_paises = ouro_paises.sort_values(ascending=True)
y = ouro_paises.index
x = ouro_paises.values

plt.figure(figsize=(20,10))

plt.barh(y=y, data=ouro_paises, width=x, pallete='Set2')
plt.xlabel('Número de Medalhas de Ouro')
plt.title('Top 10 Países com Mais Medalhas de Ouro')
7/390:
ouro_paises = medalhas_ouro['region'].value_counts().head(10)
ouro_paises = ouro_paises.sort_values(ascending=True)
y = ouro_paises.index
x = ouro_paises.values

plt.figure(figsize=(20,10))

plt.barh(y=y, data=ouro_paises, width=x, color='blue')
plt.xlabel('Número de Medalhas de Ouro')
plt.title('Top 10 Países com Mais Medalhas de Ouro')
7/391:
ouro_paises = medalhas_ouro['region'].value_counts().head(10)
ouro_paises = ouro_paises.sort_values(ascending=True)
y = ouro_paises.index
x = ouro_paises.values

plt.figure(figsize=(20,10))

plt.barh(y=y, data=ouro_paises, width=x, color='#E5C949')
plt.xlabel('Número de Medalhas de Ouro')
plt.title('Top 10 Países com Mais Medalhas de Ouro')
7/392:
plt.figure(figsize=(20, 10))
plt.tight_layout()
sns.countplot(x=mais_cinquenta_anos, hue=mais_cinquenta_anos, legend=False, order=contagem.index, palette='Set2')
plt.title('Medalhas de Ouro por modalidade para atletas com mais de 50 anos')
plt.ylabel('Medalhas de ouro')
plt.xlabel('Modalidade')
7/393:
ouro_paises = medalhas_ouro['Sport'].value_counts().head(10)
ouro_paises = ouro_paises.sort_values(ascending=True)
y = ouro_paises.index
x = ouro_paises.values

plt.figure(figsize=(20,10))

plt.barh(y=y, data=ouro_paises, width=x, color='#E5C949')
plt.xlabel('Número de Medalhas de Ouro')
plt.title('Top 10 Países com Mais Medalhas de Ouro')
7/394:
ouro_paises = medalhas_ouro['Sport'].value_counts().head(10)
ouro_paises = ouro_paises.sort_values(ascending=True)
y = ouro_paises.index
x = ouro_paises.values

plt.figure(figsize=(20,10))

plt.barh(y=y, data=ouro_paises, width=x, color='#A2C865')
plt.xlabel('Número de Medalhas de Ouro')
plt.title('Top 10 Países com Mais Medalhas de Ouro')
7/395:
ouro_paises = medalhas_ouro['Event'].value_counts().head(10)
ouro_paises = ouro_paises.sort_values(ascending=True)
y = ouro_paises.index
x = ouro_paises.values

plt.figure(figsize=(20,10))

plt.barh(y=y, data=ouro_paises, width=x, color='#A2C865')
plt.xlabel('Número de Medalhas de Ouro')
plt.title('Top 10 Países com Mais Medalhas de Ouro')
7/396:
plt.figure(figsize=(20,10))
plt.tight_layout()
sns.countplot(x=mulheres_verao['Year'],hue=mulheres_verao['Year'], legend=False, data=mulheres_verao, palette='Set2')
plt.title('Distribuição de medalhas por ano - Verao')
plt.ylabel('Medalhas')
plt.xlabel('Ano')

plt.figure(figsize=(20,10))
plt.tight_layout()
sns.countplot(x=mulhes_inverno['Year'],hue=mulhes_inverno['Year'], legend=False, data=mulhes_inverno, palette='Set2')
plt.title('Distribuição de medalhas por ano - Inverno')
plt.ylabel('Medalhas')
plt.xlabel('Ano')
7/397:
plt.figure(figsize=(20,10))
plt.tight_layout()
sns.countplot(x=mulheres_verao['Year'],hue=mulheres_verao['Year'], legend=False, data=mulheres_verao, palette='Set2')
plt.title('Distribuição de medalhas por ano - Verão')
plt.ylabel('Medalhas')
plt.xlabel('Ano')

plt.figure(figsize=(20,10))
plt.tight_layout()
sns.countplot(x=mulhes_inverno['Year'],hue=mulhes_inverno['Year'], legend=False, data=mulhes_inverno, palette='Set2')
plt.title('Distribuição de medalhas por ano - Inverno')
plt.ylabel('Medalhas')
plt.xlabel('Ano')
   1:
import numpy as np
import pandas as pd
import seaborn as sns
import os
import warnings

from matplotlib import pyplot as plt
from matplotlib.colors import LinearSegmentedColormap

dir_atual = os.path.dirname(os.path.abspath('__file__'))
root_dir = os.path.abspath(os.path.join(dir_atual, '..'))
input_path = os.path.join(dir_atual, 'input')

warnings.filterwarnings('ignore')

sns.set()

%matplotlib inline
   2:
cores_douradas = ["#d4af37", "#ffd700", "#f0e68c"]
cores_olimpicas = ["#4A90D9", "#F0E4A1", "#6D6E71", "#8BCC8C", "#FF5E5E", "#3A78C2", "#F7E5A5", "#8C8C8C", "#7ABF7A", "#FF4D4D", "#5D8AB4", "#F5D787", "#6D6E6E", "#9BCC9B", "#FF4C4C", "#3C8CC2", "#F7E7A2", "#7F7F7F", "#7EBF7E", "#FF6D6D"]


mapa_dourado = LinearSegmentedColormap.from_list("golden", cores_douradas, N=100)
mapa_olimpico = LinearSegmentedColormap.from_list("olimpic", cores_olimpicas, N=100)
   3:
dados = pd.read_csv(os.path.join(input_path, 'athlete_events.csv'))
regioes = pd.read_csv(os.path.join(input_path, 'noc_regions.csv'))
   4: dados.head()
   5: dados.describe()
   6: dados.info()
   7: regioes.head()
   8:
mesclado = pd.merge(dados, regioes, on='NOC', how='left')
mesclado.head()
   9:
comp_verao = mesclado[mesclado['Season']=='Summer']   
comp_inverno = mesclado[mesclado['Season']=='Winter']  

num_comp_verao = comp_verao['Year'].nunique()           
num_comp_inverno = comp_inverno['Year'].nunique()     

comp_verao = comp_verao[comp_verao['Medal'] != 'NA']
comp_inverno = comp_inverno[comp_inverno['Medal'] != 'NA']

num_medalhas_verao = comp_verao['Medal'].value_counts().sum()
num_medalhas_inverno = comp_inverno['Medal'].value_counts().sum()

media_medalha_comp_verao = (num_medalhas_verao)/(num_comp_verao)
media_medalha_comp_inverno = (num_medalhas_inverno)/(num_comp_inverno)

print(f"Então nesses últimos 120 anos tivemos {num_comp_verao} competições de verão e "
        f"{num_comp_inverno} competições de inverno.\n\nForam distribuidas, sendo "
        f"{num_medalhas_verao + num_medalhas_inverno} medalhas, sendo "
        f"{num_medalhas_verao} nas competições de verão e "
        f"{num_medalhas_inverno} nas competições de inverno\n\n" 
        f"Na média, "
        f"são distribuidas {media_medalha_comp_verao:.0f} medalhas "
        f"por competição no verão e {media_medalha_comp_inverno:.0f} medalhas por competição no inverno")
  10:
medalhas_ouro = mesclado[(mesclado.Medal == 'Gold')]
medalhas_ouro.head()
  11: medalhas_ouro.isnull().any()
  12:
medalhas_ouro = medalhas_ouro[np.isfinite(medalhas_ouro['Age'])]
medalhas_ouro['Age'] = medalhas_ouro['Age'].astype(int)
  13:
plt.figure(figsize=(20,10))
plt.tight_layout()
sns.countplot(x=medalhas_ouro['Age'],hue=medalhas_ouro['Age'], legend=False, data=medalhas_ouro, palette='Set2')
plt.title('Distribuição de medalhas de ouro por idade')
plt.ylabel('Medalhas de ouro')
plt.xlabel('Idade')
  14: menores_quinze_anos = medalhas_ouro['Sport'][medalhas_ouro['Age']<=15]
  15:
plt.figure(figsize=(20, 10))
plt.tight_layout()
sns.countplot(x=menores_quinze_anos, hue=menores_quinze_anos, legend=False, palette='Set2')
plt.title('Medalhas de Ouro por modalidade com atletas menores de 16 anos')
plt.ylabel('Medalhas de ouro')
plt.xlabel('Modalidade')
  16: menores_quinze_anos.value_counts()
  17:
mais_cinquenta_anos = medalhas_ouro['Sport'][medalhas_ouro['Age']>50]
contagem = mais_cinquenta_anos.value_counts()
contagem
  18:
plt.figure(figsize=(20, 10))
plt.tight_layout()
sns.countplot(x=mais_cinquenta_anos, hue=mais_cinquenta_anos, legend=False, order=contagem.index, palette='Set2')
plt.title('Medalhas de Ouro por modalidade para atletas com mais de 50 anos')
plt.ylabel('Medalhas de ouro')
plt.xlabel('Modalidade')
  19:
ouro_paises = medalhas_ouro['region'].value_counts().head(10)
ouro_paises = ouro_paises.sort_values(ascending=True)
y = ouro_paises.index
x = ouro_paises.values

plt.figure(figsize=(20,10))

plt.barh(y=y, data=ouro_paises, width=x, color='#E5C949')
plt.xlabel('Número de Medalhas de Ouro')
plt.title('Top 10 Países com Mais Medalhas de Ouro')
  20:
ouro_paises = medalhas_ouro['Event'].value_counts().head(10)
ouro_paises = ouro_paises.sort_values(ascending=True)
y = ouro_paises.index
x = ouro_paises.values

plt.figure(figsize=(20,10))

plt.barh(y=y, data=ouro_paises, width=x, color='#A2C865')
plt.xlabel('Número de Medalhas de Ouro')
plt.title('Top 10 Países com Mais Medalhas de Ouro')
  21:
mulheres_verao = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Summer")]
mulhes_inverno = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Winter")]
  22:
plt.figure(figsize=(20,10))
plt.tight_layout()
sns.countplot(x=mulheres_verao['Year'],hue=mulheres_verao['Year'], legend=False, data=mulheres_verao, palette='Set2')
plt.title('Distribuição de medalhas por ano - Verão')
plt.ylabel('Medalhas')
plt.xlabel('Ano')

plt.figure(figsize=(20,10))
plt.tight_layout()
sns.countplot(x=mulhes_inverno['Year'],hue=mulhes_inverno['Year'], legend=False, data=mulhes_inverno, palette='Set2')
plt.title('Distribuição de medalhas por ano - Inverno')
plt.ylabel('Medalhas')
plt.xlabel('Ano')

TA ERRADO AQUI NÃO É MEDALHAS, MAS SIM PARTICIPACAO
  23:
import numpy as np
import pandas as pd
import seaborn as sns
import os
import warnings

from matplotlib import pyplot as plt
from matplotlib.colors import LinearSegmentedColormap

dir_atual = os.path.dirname(os.path.abspath('__file__'))
root_dir = os.path.abspath(os.path.join(dir_atual, '..'))
input_path = os.path.join(dir_atual, 'input')

warnings.filterwarnings('ignore')

sns.set()

%matplotlib inline
  24:
cores_douradas = ["#d4af37", "#ffd700", "#f0e68c"]
cores_olimpicas = ["#4A90D9", "#F0E4A1", "#6D6E71", "#8BCC8C", "#FF5E5E", "#3A78C2", "#F7E5A5", "#8C8C8C", "#7ABF7A", "#FF4D4D", "#5D8AB4", "#F5D787", "#6D6E6E", "#9BCC9B", "#FF4C4C", "#3C8CC2", "#F7E7A2", "#7F7F7F", "#7EBF7E", "#FF6D6D"]


mapa_dourado = LinearSegmentedColormap.from_list("golden", cores_douradas, N=100)
mapa_olimpico = LinearSegmentedColormap.from_list("olimpic", cores_olimpicas, N=100)
  25:
dados = pd.read_csv(os.path.join(input_path, 'athlete_events.csv'))
regioes = pd.read_csv(os.path.join(input_path, 'noc_regions.csv'))
  26: dados.head()
  27: dados.describe()
  28: dados.info()
  29: regioes.head()
  30:
mesclado = pd.merge(dados, regioes, on='NOC', how='left')
mesclado.head()
  31:
comp_verao = mesclado[mesclado['Season']=='Summer']   
comp_inverno = mesclado[mesclado['Season']=='Winter']  

num_comp_verao = comp_verao['Year'].nunique()           
num_comp_inverno = comp_inverno['Year'].nunique()     

comp_verao = comp_verao[comp_verao['Medal'] != 'NA']
comp_inverno = comp_inverno[comp_inverno['Medal'] != 'NA']

num_medalhas_verao = comp_verao['Medal'].value_counts().sum()
num_medalhas_inverno = comp_inverno['Medal'].value_counts().sum()

media_medalha_comp_verao = (num_medalhas_verao)/(num_comp_verao)
media_medalha_comp_inverno = (num_medalhas_inverno)/(num_comp_inverno)

print(f"Então nesses últimos 120 anos tivemos {num_comp_verao} competições de verão e "
        f"{num_comp_inverno} competições de inverno.\n\nForam distribuidas, sendo "
        f"{num_medalhas_verao + num_medalhas_inverno} medalhas, sendo "
        f"{num_medalhas_verao} nas competições de verão e "
        f"{num_medalhas_inverno} nas competições de inverno\n\n" 
        f"Na média, "
        f"são distribuidas {media_medalha_comp_verao:.0f} medalhas "
        f"por competição no verão e {media_medalha_comp_inverno:.0f} medalhas por competição no inverno")
  32:
medalhas_ouro = mesclado[(mesclado.Medal == 'Gold')]
medalhas_ouro.head()
  33: medalhas_ouro.isnull().any()
  34:
medalhas_ouro = medalhas_ouro[np.isfinite(medalhas_ouro['Age'])]
medalhas_ouro['Age'] = medalhas_ouro['Age'].astype(int)
  35:
plt.figure(figsize=(20,10))
plt.tight_layout()
sns.countplot(x=medalhas_ouro['Age'],hue=medalhas_ouro['Age'], legend=False, data=medalhas_ouro, palette='Set2')
plt.title('Distribuição de medalhas de ouro por idade')
plt.ylabel('Medalhas de ouro')
plt.xlabel('Idade')
  36: menores_quinze_anos = medalhas_ouro['Sport'][medalhas_ouro['Age']<=15]
  37:
plt.figure(figsize=(20, 10))
plt.tight_layout()
sns.countplot(x=menores_quinze_anos, hue=menores_quinze_anos, legend=False, palette='Set2')
plt.title('Medalhas de Ouro por modalidade com atletas menores de 16 anos')
plt.ylabel('Medalhas de ouro')
plt.xlabel('Modalidade')
  38: menores_quinze_anos.value_counts()
  39:
mais_cinquenta_anos = medalhas_ouro['Sport'][medalhas_ouro['Age']>50]
contagem = mais_cinquenta_anos.value_counts()
contagem
  40:
plt.figure(figsize=(20, 10))
plt.tight_layout()
sns.countplot(x=mais_cinquenta_anos, hue=mais_cinquenta_anos, legend=False, order=contagem.index, palette='Set2')
plt.title('Medalhas de Ouro por modalidade para atletas com mais de 50 anos')
plt.ylabel('Medalhas de ouro')
plt.xlabel('Modalidade')
  41:
ouro_paises = medalhas_ouro['region'].value_counts().head(10)
ouro_paises = ouro_paises.sort_values(ascending=True)
y = ouro_paises.index
x = ouro_paises.values

plt.figure(figsize=(20,10))

plt.barh(y=y, data=ouro_paises, width=x, color='#E5C949')
plt.xlabel('Número de Medalhas de Ouro')
plt.title('Top 10 Países com Mais Medalhas de Ouro')
  42:
ouro_paises = medalhas_ouro['Event'].value_counts().head(10)
ouro_paises = ouro_paises.sort_values(ascending=True)
y = ouro_paises.index
x = ouro_paises.values

plt.figure(figsize=(20,10))

plt.barh(y=y, data=ouro_paises, width=x, color='#A2C865')
plt.xlabel('Número de Medalhas de Ouro')
plt.title('Top 10 Países com Mais Medalhas de Ouro')
  43:
mulheres_verao = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Summer")]
mulhes_inverno = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Winter")]
  44:
plt.figure(figsize=(20,10))
plt.tight_layout()
sns.countplot(x=mulheres_verao['Year'],hue=mulheres_verao['Year'], legend=False, data=mulheres_verao, palette='Set2')
plt.title('Distribuição de medalhas por ano - Verão')
plt.ylabel('Medalhas')
plt.xlabel('Ano')

plt.figure(figsize=(20,10))
plt.tight_layout()
sns.countplot(x=mulhes_inverno['Year'],hue=mulhes_inverno['Year'], legend=False, data=mulhes_inverno, palette='Set2')
plt.title('Distribuição de medalhas por ano - Inverno')
plt.ylabel('Medalhas')
plt.xlabel('Ano')

TA ERRADO AQUI NÃO É MEDALHAS, MAS SIM PARTICIPACAO
  45:
plt.figure(figsize=(12,10))
ax = sns.scatterplot(x="Height", y="Weight", data=medalhas_ouro, pallete='Blues')
plt.title('Altura vs Peso nos jogos olimpicos')
plt.xlabel('Altura (cm)')
plt.ylabel('Peso (kg)')
  46:
plt.figure(figsize=(12,10))
ax = sns.scatterplot(x="Height", y="Weight", data=medalhas_ouro, palette='Blues')
plt.title('Altura vs Peso nos jogos olimpicos')
plt.xlabel('Altura (cm)')
plt.ylabel('Peso (kg)')
  47:
plt.figure(figsize=(12,10))
ax = sns.scatterplot(x="Height", y="Weight", data=medalhas_ouro, palette='Blues')
plt.title('Altura vs Peso nos jogos olimpicos')
plt.xlabel('Altura (cm)')
plt.ylabel('Peso (kg)')
  48:
plt.figure(figsize=(12,10))
ax = sns.scatterplot(x="Height", y="Weight",hue='Sex' data=medalhas_ouro, palette='Blues')
plt.title('Altura vs Peso nos jogos olimpicos')
plt.xlabel('Altura (cm)')
plt.ylabel('Peso (kg)')
  49:
plt.figure(figsize=(12,10))
ax = sns.scatterplot(x="Height", y="Weight",hue='Sex', data=medalhas_ouro, palette='Blues')
plt.title('Altura vs Peso nos jogos olimpicos')
plt.xlabel('Altura (cm)')
plt.ylabel('Peso (kg)')
  50:
plt.figure(figsize=(12,10))
ax = sns.scatterplot(x="Height", y="Weight",hue='Sex', data=medalhas_ouro, palette='PuOr')
plt.title('Altura vs Peso nos jogos olimpicos')
plt.xlabel('Altura (cm)')
plt.ylabel('Peso (kg)')
  51:
plt.figure(figsize=(12,10))
ax = sns.scatterplot(x="Height", y="Weight",hue='Sex', data=medalhas_ouro, palette='rocket')
plt.title('Altura vs Peso nos jogos olimpicos')
plt.xlabel('Altura (cm)')
plt.ylabel('Peso (kg)')
  52:
plt.figure(figsize=(20, 10))
plt.tight_layout()
sns.countplot(x=mais_cinquenta_anos, hue=mais_cinquenta_anos, legend=False, order=contagem.index, palette=sns.dark_palette("#69d", reverse=True, as_cmap=True))
plt.title('Medalhas de Ouro por modalidade para atletas com mais de 50 anos')
plt.ylabel('Medalhas de ouro')
plt.xlabel('Modalidade')
  53:
plt.figure(figsize=(20, 10))
plt.tight_layout()
sns.countplot(x=mais_cinquenta_anos, hue=mais_cinquenta_anos, legend=False, order=contagem.index, palette='#69d')
plt.title('Medalhas de Ouro por modalidade para atletas com mais de 50 anos')
plt.ylabel('Medalhas de ouro')
plt.xlabel('Modalidade')
  54:
plt.figure(figsize=(20, 10))
plt.tight_layout()
sns.countplot(x=mais_cinquenta_anos, hue=mais_cinquenta_anos, legend=False, order=contagem.index, palette='Set2')
plt.title('Medalhas de Ouro por modalidade para atletas com mais de 50 anos')
plt.ylabel('Medalhas de ouro')
plt.xlabel('Modalidade')
  55:
plt.figure(figsize=(20, 10))
plt.tight_layout()
sns.countplot(x=mais_cinquenta_anos, hue=mais_cinquenta_anos, legend=False, order=contagem.index, palette='pastel')
plt.title('Medalhas de Ouro por modalidade para atletas com mais de 50 anos')
plt.ylabel('Medalhas de ouro')
plt.xlabel('Modalidade')
  56:
plt.figure(figsize=(20, 10))
plt.tight_layout()
sns.countplot(x=mais_cinquenta_anos, hue=mais_cinquenta_anos, legend=False, order=contagem.index, palette='Set2')
plt.title('Medalhas de Ouro por modalidade para atletas com mais de 50 anos')
plt.ylabel('Medalhas de ouro')
plt.xlabel('Modalidade')
  57:
plt.figure(figsize=(20, 10))
plt.tight_layout()
sns.countplot(x=mais_cinquenta_anos, hue=mais_cinquenta_anos, legend=False, order=contagem.index, palette='RdPu')
plt.title('Medalhas de Ouro por modalidade para atletas com mais de 50 anos')
plt.ylabel('Medalhas de ouro')
plt.xlabel('Modalidade')
  58:
plt.figure(figsize=(20, 10))
plt.tight_layout()
sns.countplot(x=mais_cinquenta_anos, hue=mais_cinquenta_anos, legend=False, order=contagem.index, palette='Set2')
plt.title('Medalhas de Ouro por modalidade para atletas com mais de 50 anos')
plt.ylabel('Medalhas de ouro')
plt.xlabel('Modalidade')
  59:
medals = mesclado.groupby(['region', 'Medal']).value_counts().unstack().fillna(0).astype(int)
medals
  60:
medals = mesclado.groupby(['region', 'Medal']).value_counts().unstack().fillna(0).astype(int)
medals['Total'] = medals['Bronze'] + medals['Silver'] + medals['Gold']
medals
  61: medals = mesclado.groupby(['region', 'Medal']).value_counts().unstack().fillna(0).astype(int)
  62: medals = mesclado.groupby(['region', 'Medal'])['Medal'].value_counts().unstack().fillna(0).astype(int)
  63:
medals = mesclado.groupby(['region', 'Medal'])['Medal'].value_counts().unstack().fillna(0).astype(int)
medals
  64:
medals = mesclado.groupby(['region', 'Medal'])['Medal'].value_counts().unstack().fillna(0).astype(int)
medals['Total'] = medals['Bronze'] + medals['Silver'] + medals['Gold']
medals
  65:
medals = mesclado.groupby(['region', 'Medal'])['Medal'].value_counts().unstack().fillna(0).astype(int)
medals['Total'] = medals['Bronze'] + medals['Silver'] + medals['Gold']
medals = medals[['Bronze','Silver','Gold','Total']].sort_values(by='Total', ascending=False)
medals
  66:
medals = mesclado.groupby(['region', 'Medal'])['Medal'].value_counts().unstack().fillna(0).astype(int)
medals['Total'] = medals['Bronze'] + medals['Silver'] + medals['Gold']
medals = medals[['Bronze','Silver','Gold','Total']].sort_values(by='Total', ascending=False)
medals.iloc[:15].style.set_caption('Medals by Country: Summer Olympic Games [Top 15]')\
.bar(subset=['Gold'], color='#f0c05a')\
.bar(subset=['Silver'], color='Lightgray')\
.bar(subset=['Bronze'], color='#a97142')
medals
  67:
medals = mesclado.groupby(['region', 'Medal'])['Medal'].value_counts().unstack().fillna(0).astype(int)
medals['Total'] = medals['Bronze'] + medals['Silver'] + medals['Gold']
medals = medals[['Bronze','Silver','Gold','Total']].sort_values(by='Total', ascending=False)
medals.iloc[:15].style.set_caption('Medals by Country: Summer Olympic Games [Top 15]')\
.bar(subset=['Gold'], color='#f0c05a')\
.bar(subset=['Silver'], color='Lightgray')\
.bar(subset=['Bronze'], color='#a97142')
medals
  68:
medalhas = mesclado.groupby(['region', 'Medal'])['Medal'].value_counts().unstack().fillna(0).astype(int)
medalhas['Total'] = medalhas['Bronze'] + medalhas['Silver'] + medalhas['Gold']
medals = medalhas[['Bronze','Silver','Gold','Total']].sort_values(by='Total', ascending=False)
medals.iloc[:15].style.set_caption('Medals by Country: Summer Olympic Games [Top 15]')\
.bar(subset=['Gold'], color='#f0c05a')\
.bar(subset=['Silver'], color='Lightgray')\
.bar(subset=['Bronze'], color='#a97142')
medals
  69:
medalhas = mesclado.groupby(['region', 'Medal'])['Medal'].value_counts().unstack().fillna(0).astype(int)
medalhas['Total'] = medalhas['Bronze'] + medalhas['Silver'] + medalhas['Gold']
medals = medalhas[['Bronze','Silver','Gold','Total']].sort_values(by='Total', ascending=False)
medals.iloc[:15].style.set_caption('Medals by Country: Summer Olympic Games [Top 15]')\
.bar(subset=['Gold'], color='#f0c05a')\
.bar(subset=['Silver'], color='Lightgray')\
.bar(subset=['Bronze'], color='#a97142')
  70:
medalhas = mesclado.groupby(['region', 'Medal'])['Medal'].value_counts().unstack().fillna(0).astype(int)
medalhas['Total'] = medalhas['Bronze'] + medalhas['Silver'] + medalhas['Gold']
medals = medalhas[['Bronze','Silver','Gold','Total']].sort_values(by='Total', ascending=False)
medals.iloc[:15].style.set_caption('Medals by Country: Summer Olympic Games [Top 15]')\
.bar(subset=['Gold'], color='#f0c05a')\
.bar(subset=['Silver'], color='Lightgray')\
.bar(subset=['Bronze'], color='#a97142')\
.background_gradient(subset=['Total'], cmap='BuGn')
  71:
medalhas = mesclado.groupby(['region', 'Medal'])['Medal'].value_counts().unstack().fillna(0).astype(int)
medalhas['Total'] = medalhas['Bronze'] + medalhas['Silver'] + medalhas['Gold']
medals = medalhas[['Bronze','Silver','Gold','Total']].sort_values(by='Total', ascending=False)
medals.iloc[:15].style.set_caption('Medals by Country: Summer Olympic Games [Top 15]')\
.bar(subset=['Gold'], color='#f0c05a')\
.bar(subset=['Silver'], color='Lightgray')\
.bar(subset=['Bronze'], color='#a97142')
  72:
medalhas = mesclado.groupby(['region', 'Medal'])['Medal'].value_counts().unstack().fillna(0).astype(int)
medalhas['Total'] = medalhas['Bronze'] + medalhas['Silver'] + medalhas['Gold']
medals = medalhas[['Bronze','Silver','Gold','Total']].sort_values(by='Total', ascending=False)
medals.iloc[:20].style.set_caption('Medals by Country: Summer Olympic Games [Top 15]')\
.bar(subset=['Gold'], color='#f0c05a')\
.bar(subset=['Silver'], color='Lightgray')\
.bar(subset=['Bronze'], color='#a97142')
  73:
medalhas = mesclado.groupby(['region', 'Medal'])['Medal'].value_counts().unstack().fillna(0).astype(int)
medalhas['Total'] = medalhas['Bronze'] + medalhas['Silver'] + medalhas['Gold']
medals = medalhas[['Bronze','Silver','Gold','Total']].sort_values(by='Total', ascending=False)
medals.iloc[:20].style.set_caption('Medalhas por países [Top 20]')\
.bar(subset=['Gold'], color='#f0c05a')\
.bar(subset=['Silver'], color='Lightgray')\
.bar(subset=['Bronze'], color='#a97142')
  74:
comp_verao = mesclado[mesclado['Season']=='Summer']   
comp_inverno = mesclado[mesclado['Season']=='Winter']  

num_comp_verao = comp_verao['Year'].nunique()           
num_comp_inverno = comp_inverno['Year'].nunique()     

comp_verao = comp_verao[comp_verao['Medal'] != 'NA']
comp_inverno = comp_inverno[comp_inverno['Medal'] != 'NA']

num_medalhas_verao = comp_verao['Medal'].value_counts().sum()
num_medalhas_inverno = comp_inverno['Medal'].value_counts().sum()

media_medalha_comp_verao = (num_medalhas_verao)/(num_comp_verao)
media_medalha_comp_inverno = (num_medalhas_inverno)/(num_comp_inverno)

texto = (f"Então nesses últimos 120 anos tivemos {num_comp_verao} competições de verão e "
         f"{num_comp_inverno} competições de inverno.\nForam distribuídas "
         f"{num_medalhas_verao + num_medalhas_inverno} medalhas, sendo "
         f"{num_medalhas_verao} nas competições de verão e "
         f"{num_medalhas_inverno} nas competições de inverno.\nNa média, "
         f"são distribuídas {media_medalha_comp_verao:.0f} medalhas por competição no verão e "
         f"{media_medalha_comp_inverno:.0f} medalhas por competição no inverno.")


data = {
    'Competição': ['Verão', 'Inverno'],
    'Medalhas': [num_medalhas_verao, num_medalhas_inverno]
}
df = pd.DataFrame(data)

# Plotar o gráfico
plt.figure(figsize=(12, 8))
bars = plt.bar(df['Competição'], df['Medalhas'], color=['#ffcc00', '#1f77b4'])

for bar in bars:
    yval = bar.get_height()
    plt.text(bar.get_x() + bar.get_width() / 2, yval + 100, int(yval), ha='center', va='bottom')

plt.text(-0.1, max(df['Medalhas']) + 500, texto, fontsize=12, ha='left', va='top', bbox=dict(facecolor='white', alpha=0.5))

# Configurar títulos e rótulos
plt.title('Distribuição de Medalhas por Competição')
plt.xlabel('Tipo de Competição')
plt.ylabel('Número de Medalhas')
plt.ylim(0, max(df['Medalhas']) + 1000)


# Mostrar o gráfico
plt.tight_layout()
  75:
medalhas_por_ano = mesclado['Year'].value_counts().sort_index()

comp_verao = mesclado[mesclado['Season']=='Summer']   
comp_inverno = mesclado[mesclado['Season']=='Winter']  

num_comp_verao = comp_verao['Year'].nunique()           
num_comp_inverno = comp_inverno['Year'].nunique()     

comp_verao = comp_verao[comp_verao['Medal'] != 'NA']
comp_inverno = comp_inverno[comp_inverno['Medal'] != 'NA']

num_medalhas_verao = comp_verao['Medal'].value_counts().sum()
num_medalhas_inverno = comp_inverno['Medal'].value_counts().sum()

media_medalha_comp_verao = (num_medalhas_verao)/(num_comp_verao)
media_medalha_comp_inverno = (num_medalhas_inverno)/(num_comp_inverno)

texto = (f"Então nesses últimos 120 anos tivemos {num_comp_verao} competições de verão e "
         f"{num_comp_inverno} competições de inverno.\nForam distribuídas "
         f"{num_medalhas_verao + num_medalhas_inverno} medalhas, sendo "
         f"{num_medalhas_verao} nas competições de verão e "
         f"{num_medalhas_inverno} nas competições de inverno.\nNa média, "
         f"são distribuídas {media_medalha_comp_verao:.0f} medalhas por competição no verão e "
         f"{media_medalha_comp_inverno:.0f} medalhas por competição no inverno.")

plt.figure(figsize=(14, 8))
bars = plt.bar(medalhas_por_ano.index, medalhas_por_ano.values, color='skyblue')

plt.text(0.5, max(medalhas_por_ano.values) + 50, texto, fontsize=12, ha='center', va='top', bbox=dict(facecolor='white', alpha=0.5), transform=plt.gca().transAxes)
# Configurar títulos e rótulos
plt.title('Distribuição Total de Medalhas por Ano')
plt.xlabel('Ano')
plt.ylabel('Número de Medalhas')
plt.ylim(0, max(medalhas_por_ano.values) + 100)
  76:
medalhas_por_ano = mesclado['Year'].value_counts().sort_index()

comp_verao = mesclado[mesclado['Season']=='Summer']   
comp_inverno = mesclado[mesclado['Season']=='Winter']  

num_comp_verao = comp_verao['Year'].nunique()           
num_comp_inverno = comp_inverno['Year'].nunique()     

comp_verao = comp_verao[comp_verao['Medal'] != 'NA']
comp_inverno = comp_inverno[comp_inverno['Medal'] != 'NA']

num_medalhas_verao = comp_verao['Medal'].value_counts().sum()
num_medalhas_inverno = comp_inverno['Medal'].value_counts().sum()

media_medalha_comp_verao = (num_medalhas_verao)/(num_comp_verao)
media_medalha_comp_inverno = (num_medalhas_inverno)/(num_comp_inverno)

texto = (f"Então nesses últimos 120 anos tivemos {num_comp_verao} competições de verão e "
         f"{num_comp_inverno} competições de inverno.\nForam distribuídas "
         f"{num_medalhas_verao + num_medalhas_inverno} medalhas, sendo "
         f"{num_medalhas_verao} nas competições de verão e "
         f"{num_medalhas_inverno} nas competições de inverno.\nNa média, "
         f"são distribuídas {media_medalha_comp_verao:.0f} medalhas por competição no verão e "
         f"{media_medalha_comp_inverno:.0f} medalhas por competição no inverno.")

plt.figure(figsize=(14, 8))
bars = plt.bar(medalhas_por_ano.index, medalhas_por_ano.values, color='skyblue')

plt.text(0.5, max(medalhas_por_ano.values) + 50, texto, fontsize=12, ha='center', va='top', bbox=dict(facecolor='white', alpha=0.5), transform=plt.gca().transAxes)
# Configurar títulos e rótulos
plt.title('Distribuição Total de Medalhas por Ano')
plt.xlabel('Ano')
plt.ylabel('Número de Medalhas')
plt.ylim(0, max(medalhas_por_ano.values) + 100)

plt.tight_layout()
  77:
medalhas_por_ano = mesclado['Year'].value_counts().sort_index()

comp_verao = mesclado[mesclado['Season']=='Summer']   
comp_inverno = mesclado[mesclado['Season']=='Winter']  

num_comp_verao = comp_verao['Year'].nunique()           
num_comp_inverno = comp_inverno['Year'].nunique()     

comp_verao = comp_verao[comp_verao['Medal'] != 'NA']
comp_inverno = comp_inverno[comp_inverno['Medal'] != 'NA']

num_medalhas_verao = comp_verao['Medal'].value_counts().sum()
num_medalhas_inverno = comp_inverno['Medal'].value_counts().sum()

media_medalha_comp_verao = (num_medalhas_verao)/(num_comp_verao)
media_medalha_comp_inverno = (num_medalhas_inverno)/(num_comp_inverno)

texto = (f"Então nesses últimos 120 anos tivemos {num_comp_verao} competições de verão e "
         f"{num_comp_inverno} competições de inverno.\nForam distribuídas "
         f"{num_medalhas_verao + num_medalhas_inverno} medalhas, sendo "
         f"{num_medalhas_verao} nas competições de verão e "
         f"{num_medalhas_inverno} nas competições de inverno.\nNa média, "
         f"são distribuídas {media_medalha_comp_verao:.0f} medalhas por competição no verão e "
         f"{media_medalha_comp_inverno:.0f} medalhas por competição no inverno.")

plt.figure(figsize=(14, 8))
bars = plt.bar(medalhas_por_ano.index, medalhas_por_ano.values, color='skyblue')

plt.text(0.5, max(medalhas_por_ano.values) + 50, texto, fontsize=12, ha='center', va='top', bbox=dict(facecolor='white', alpha=0.5), transform=plt.gca().transAxes)
# Configurar títulos e rótulos
plt.title('Distribuição Total de Medalhas por Ano')
plt.xlabel('Ano')
plt.ylabel('Número de Medalhas')

plt.tight_layout()
  78:
medalhas_por_ano = mesclado['Year'].value_counts().sort_index()

comp_verao = mesclado[mesclado['Season']=='Summer']   
comp_inverno = mesclado[mesclado['Season']=='Winter']  

num_comp_verao = comp_verao['Year'].nunique()           
num_comp_inverno = comp_inverno['Year'].nunique()     

comp_verao = comp_verao[comp_verao['Medal'] != 'NA']
comp_inverno = comp_inverno[comp_inverno['Medal'] != 'NA']

num_medalhas_verao = comp_verao['Medal'].value_counts().sum()
num_medalhas_inverno = comp_inverno['Medal'].value_counts().sum()

media_medalha_comp_verao = (num_medalhas_verao)/(num_comp_verao)
media_medalha_comp_inverno = (num_medalhas_inverno)/(num_comp_inverno)

texto = (f"Então nesses últimos 120 anos tivemos {num_comp_verao} competições de verão e "
         f"{num_comp_inverno} competições de inverno.\nForam distribuídas "
         f"{num_medalhas_verao + num_medalhas_inverno} medalhas, sendo "
         f"{num_medalhas_verao} nas competições de verão e "
         f"{num_medalhas_inverno} nas competições de inverno.\nNa média, "
         f"são distribuídas {media_medalha_comp_verao:.0f} medalhas por competição no verão e "
         f"{media_medalha_comp_inverno:.0f} medalhas por competição no inverno.")

plt.figure(figsize=(14, 8))
bars = plt.bar(medalhas_por_ano.index, medalhas_por_ano.values, color='skyblue')

plt.text( texto, fontsize=12, ha='center', va='top')
# Configurar títulos e rótulos
plt.title('Distribuição Total de Medalhas por Ano')
plt.xlabel('Ano')
plt.ylabel('Número de Medalhas')
plt.ylim(0, max(medalhas_por_ano.values) + 100)

plt.tight_layout()
  79:
medalhas_por_ano = mesclado['Year'].value_counts().sort_index()

comp_verao = mesclado[mesclado['Season']=='Summer']   
comp_inverno = mesclado[mesclado['Season']=='Winter']  

num_comp_verao = comp_verao['Year'].nunique()           
num_comp_inverno = comp_inverno['Year'].nunique()     

comp_verao = comp_verao[comp_verao['Medal'] != 'NA']
comp_inverno = comp_inverno[comp_inverno['Medal'] != 'NA']

num_medalhas_verao = comp_verao['Medal'].value_counts().sum()
num_medalhas_inverno = comp_inverno['Medal'].value_counts().sum()

media_medalha_comp_verao = (num_medalhas_verao)/(num_comp_verao)
media_medalha_comp_inverno = (num_medalhas_inverno)/(num_comp_inverno)

texto = (f"Então nesses últimos 120 anos tivemos {num_comp_verao} competições de verão e "
         f"{num_comp_inverno} competições de inverno.\nForam distribuídas "
         f"{num_medalhas_verao + num_medalhas_inverno} medalhas, sendo "
         f"{num_medalhas_verao} nas competições de verão e "
         f"{num_medalhas_inverno} nas competições de inverno.\nNa média, "
         f"são distribuídas {media_medalha_comp_verao:.0f} medalhas por competição no verão e "
         f"{media_medalha_comp_inverno:.0f} medalhas por competição no inverno.")

plt.figure(figsize=(14, 8))
bars = plt.bar(medalhas_por_ano.index, medalhas_por_ano.values, color='skyblue')

plt.text(text=texto, fontsize=12, ha='center', va='top')
# Configurar títulos e rótulos
plt.title('Distribuição Total de Medalhas por Ano')
plt.xlabel('Ano')
plt.ylabel('Número de Medalhas')
plt.ylim(0, max(medalhas_por_ano.values) + 100)

plt.tight_layout()
  80:
medalhas_por_ano = mesclado['Year'].value_counts().sort_index()

comp_verao = mesclado[mesclado['Season']=='Summer']   
comp_inverno = mesclado[mesclado['Season']=='Winter']  

num_comp_verao = comp_verao['Year'].nunique()           
num_comp_inverno = comp_inverno['Year'].nunique()     

comp_verao = comp_verao[comp_verao['Medal'] != 'NA']
comp_inverno = comp_inverno[comp_inverno['Medal'] != 'NA']

num_medalhas_verao = comp_verao['Medal'].value_counts().sum()
num_medalhas_inverno = comp_inverno['Medal'].value_counts().sum()

media_medalha_comp_verao = (num_medalhas_verao)/(num_comp_verao)
media_medalha_comp_inverno = (num_medalhas_inverno)/(num_comp_inverno)

texto = (f"Então nesses últimos 120 anos tivemos {num_comp_verao} competições de verão e "
         f"{num_comp_inverno} competições de inverno.\nForam distribuídas "
         f"{num_medalhas_verao + num_medalhas_inverno} medalhas, sendo "
         f"{num_medalhas_verao} nas competições de verão e "
         f"{num_medalhas_inverno} nas competições de inverno.\nNa média, "
         f"são distribuídas {media_medalha_comp_verao:.0f} medalhas por competição no verão e "
         f"{media_medalha_comp_inverno:.0f} medalhas por competição no inverno.")

plt.figure(figsize=(14, 8))
bars = plt.bar(medalhas_por_ano.index, medalhas_por_ano.values, color='skyblue')

plt.text(0.5, max(medalhas_por_ano.values) + 50, texto, fontsize=12, ha='center', va='top', bbox=dict(facecolor='white', alpha=0.5), transform=plt.gca().transAxes)
# Configurar títulos e rótulos
plt.title('Distribuição Total de Medalhas por Ano')
plt.xlabel('Ano')
plt.ylabel('Número de Medalhas')
plt.ylim(0, max(medalhas_por_ano.values) + 100)
  81:
medalhas_por_ano = mesclado['Year'].value_counts().sort_index()

comp_verao = mesclado[mesclado['Season']=='Summer']   
comp_inverno = mesclado[mesclado['Season']=='Winter']  

num_comp_verao = comp_verao['Year'].nunique()           
num_comp_inverno = comp_inverno['Year'].nunique()     

comp_verao = comp_verao[comp_verao['Medal'] != 'NA']
comp_inverno = comp_inverno[comp_inverno['Medal'] != 'NA']

num_medalhas_verao = comp_verao['Medal'].value_counts().sum()
num_medalhas_inverno = comp_inverno['Medal'].value_counts().sum()

media_medalha_comp_verao = (num_medalhas_verao)/(num_comp_verao)
media_medalha_comp_inverno = (num_medalhas_inverno)/(num_comp_inverno)

texto = (f"Então nesses últimos 120 anos tivemos {num_comp_verao} competições de verão e "
         f"{num_comp_inverno} competições de inverno.\nForam distribuídas "
         f"{num_medalhas_verao + num_medalhas_inverno} medalhas, sendo "
         f"{num_medalhas_verao} nas competições de verão e "
         f"{num_medalhas_inverno} nas competições de inverno.\nNa média, "
         f"são distribuídas {media_medalha_comp_verao:.0f} medalhas por competição no verão e "
         f"{media_medalha_comp_inverno:.0f} medalhas por competição no inverno.")

plt.figure(figsize=(14, 8))
bars = plt.bar(medalhas_por_ano.index, medalhas_por_ano.values, color='skyblue')

plt.text(-0.1, max(mesclado['Medalhas']) + 500, texto, fontsize=12, ha='left', va='top', bbox=dict(facecolor='white', alpha=0.5))

# Configurar títulos e rótulos
plt.title('Distribuição Total de Medalhas por Ano')
plt.xlabel('Ano')
plt.ylabel('Número de Medalhas')
plt.ylim(0, max(medalhas_por_ano.values) + 100)
  82:
medalhas_por_ano = mesclado['Year'].value_counts().sort_index()

comp_verao = mesclado[mesclado['Season']=='Summer']   
comp_inverno = mesclado[mesclado['Season']=='Winter']  

num_comp_verao = comp_verao['Year'].nunique()           
num_comp_inverno = comp_inverno['Year'].nunique()     

comp_verao = comp_verao[comp_verao['Medal'] != 'NA']
comp_inverno = comp_inverno[comp_inverno['Medal'] != 'NA']

num_medalhas_verao = comp_verao['Medal'].value_counts().sum()
num_medalhas_inverno = comp_inverno['Medal'].value_counts().sum()

media_medalha_comp_verao = (num_medalhas_verao)/(num_comp_verao)
media_medalha_comp_inverno = (num_medalhas_inverno)/(num_comp_inverno)

texto = (f"Então nesses últimos 120 anos tivemos {num_comp_verao} competições de verão e "
         f"{num_comp_inverno} competições de inverno.\nForam distribuídas "
         f"{num_medalhas_verao + num_medalhas_inverno} medalhas, sendo "
         f"{num_medalhas_verao} nas competições de verão e "
         f"{num_medalhas_inverno} nas competições de inverno.\nNa média, "
         f"são distribuídas {media_medalha_comp_verao:.0f} medalhas por competição no verão e "
         f"{media_medalha_comp_inverno:.0f} medalhas por competição no inverno.")

plt.figure(figsize=(14, 8))
bars = plt.bar(medalhas_por_ano.index, medalhas_por_ano.values, color='skyblue')

plt.text(-0.1, max(medalhas_por_ano.values) + 500, texto, fontsize=12, ha='left', va='top', bbox=dict(facecolor='white', alpha=0.5))

# Configurar títulos e rótulos
plt.title('Distribuição Total de Medalhas por Ano')
plt.xlabel('Ano')
plt.ylabel('Número de Medalhas')
plt.ylim(0, max(medalhas_por_ano.values) + 100)
  83:
medalhas_por_ano = mesclado['Year'].value_counts().sort_index()

comp_verao = mesclado[mesclado['Season']=='Summer']   
comp_inverno = mesclado[mesclado['Season']=='Winter']  

num_comp_verao = comp_verao['Year'].nunique()           
num_comp_inverno = comp_inverno['Year'].nunique()     

comp_verao = comp_verao[comp_verao['Medal'] != 'NA']
comp_inverno = comp_inverno[comp_inverno['Medal'] != 'NA']

num_medalhas_verao = comp_verao['Medal'].value_counts().sum()
num_medalhas_inverno = comp_inverno['Medal'].value_counts().sum()

media_medalha_comp_verao = (num_medalhas_verao)/(num_comp_verao)
media_medalha_comp_inverno = (num_medalhas_inverno)/(num_comp_inverno)

texto = (f"Então nesses últimos 120 anos tivemos {num_comp_verao} competições de verão e "
         f"{num_comp_inverno} competições de inverno.\nForam distribuídas "
         f"{num_medalhas_verao + num_medalhas_inverno} medalhas, sendo "
         f"{num_medalhas_verao} nas competições de verão e "
         f"{num_medalhas_inverno} nas competições de inverno.\nNa média, "
         f"são distribuídas {media_medalha_comp_verao:.0f} medalhas por competição no verão e "
         f"{media_medalha_comp_inverno:.0f} medalhas por competição no inverno.")

sns.barplot(data=medalhas_por_ano)
  84:
medalhas_por_ano = mesclado['Year'].value_counts().sort_index()

comp_verao = mesclado[mesclado['Season']=='Summer']   
comp_inverno = mesclado[mesclado['Season']=='Winter']  

num_comp_verao = comp_verao['Year'].nunique()           
num_comp_inverno = comp_inverno['Year'].nunique()     

comp_verao = comp_verao[comp_verao['Medal'] != 'NA']
comp_inverno = comp_inverno[comp_inverno['Medal'] != 'NA']

num_medalhas_verao = comp_verao['Medal'].value_counts().sum()
num_medalhas_inverno = comp_inverno['Medal'].value_counts().sum()

media_medalha_comp_verao = (num_medalhas_verao)/(num_comp_verao)
media_medalha_comp_inverno = (num_medalhas_inverno)/(num_comp_inverno)

texto = (f"Então nesses últimos 120 anos tivemos {num_comp_verao} competições de verão e "
         f"{num_comp_inverno} competições de inverno.\nForam distribuídas "
         f"{num_medalhas_verao + num_medalhas_inverno} medalhas, sendo "
         f"{num_medalhas_verao} nas competições de verão e "
         f"{num_medalhas_inverno} nas competições de inverno.\nNa média, "
         f"são distribuídas {media_medalha_comp_verao:.0f} medalhas por competição no verão e "
         f"{media_medalha_comp_inverno:.0f} medalhas por competição no inverno.")

plt.figure(figsize=(20,10))
sns.barplot(data=medalhas_por_ano)
  85:


comp_verao = mesclado[mesclado['Season']=='Summer']   
comp_inverno = mesclado[mesclado['Season']=='Winter']  

num_comp_verao = comp_verao['Year'].nunique()           
num_comp_inverno = comp_inverno['Year'].nunique()     

comp_verao = comp_verao[comp_verao['Medal'] != 'NA']
comp_inverno = comp_inverno[comp_inverno['Medal'] != 'NA']

num_medalhas_verao = comp_verao['Medal'].value_counts().sum()
num_medalhas_inverno = comp_inverno['Medal'].value_counts().sum()

media_medalha_comp_verao = (num_medalhas_verao)/(num_comp_verao)
media_medalha_comp_inverno = (num_medalhas_inverno)/(num_comp_inverno)

texto = (f"Então nesses últimos 120 anos tivemos {num_comp_verao} competições de verão e "
         f"{num_comp_inverno} competições de inverno.\nForam distribuídas "
         f"{num_medalhas_verao + num_medalhas_inverno} medalhas, sendo "
         f"{num_medalhas_verao} nas competições de verão e "
         f"{num_medalhas_inverno} nas competições de inverno.\nNa média, "
         f"são distribuídas {media_medalha_comp_verao:.0f} medalhas por competição no verão e "
         f"{media_medalha_comp_inverno:.0f} medalhas por competição no inverno.")

medalhas_por_ano = mesclado.groupby(['region', 'Season'])['Medal'].value_counts().unstack().fillna(0).astype(int)
medalhas_por_ano
  86:


comp_verao = mesclado[mesclado['Season']=='Summer']   
comp_inverno = mesclado[mesclado['Season']=='Winter']  

num_comp_verao = comp_verao['Year'].nunique()           
num_comp_inverno = comp_inverno['Year'].nunique()     

comp_verao = comp_verao[comp_verao['Medal'] != 'NA']
comp_inverno = comp_inverno[comp_inverno['Medal'] != 'NA']

num_medalhas_verao = comp_verao['Medal'].value_counts().sum()
num_medalhas_inverno = comp_inverno['Medal'].value_counts().sum()

media_medalha_comp_verao = (num_medalhas_verao)/(num_comp_verao)
media_medalha_comp_inverno = (num_medalhas_inverno)/(num_comp_inverno)

texto = (f"Então nesses últimos 120 anos tivemos {num_comp_verao} competições de verão e "
         f"{num_comp_inverno} competições de inverno.\nForam distribuídas "
         f"{num_medalhas_verao + num_medalhas_inverno} medalhas, sendo "
         f"{num_medalhas_verao} nas competições de verão e "
         f"{num_medalhas_inverno} nas competições de inverno.\nNa média, "
         f"são distribuídas {media_medalha_comp_verao:.0f} medalhas por competição no verão e "
         f"{media_medalha_comp_inverno:.0f} medalhas por competição no inverno.")

medalhas_por_ano = mesclado.groupby(['region', 'Season'])['Season'].value_counts().unstack().fillna(0).astype(int)
medalhas_por_ano
  87:


comp_verao = mesclado[mesclado['Season']=='Summer']   
comp_inverno = mesclado[mesclado['Season']=='Winter']  

num_comp_verao = comp_verao['Year'].nunique()           
num_comp_inverno = comp_inverno['Year'].nunique()     

comp_verao = comp_verao[comp_verao['Medal'] != 'NA']
comp_inverno = comp_inverno[comp_inverno['Medal'] != 'NA']

num_medalhas_verao = comp_verao['Medal'].value_counts().sum()
num_medalhas_inverno = comp_inverno['Medal'].value_counts().sum()

media_medalha_comp_verao = (num_medalhas_verao)/(num_comp_verao)
media_medalha_comp_inverno = (num_medalhas_inverno)/(num_comp_inverno)

texto = (f"Então nesses últimos 120 anos tivemos {num_comp_verao} competições de verão e "
         f"{num_comp_inverno} competições de inverno.\nForam distribuídas "
         f"{num_medalhas_verao + num_medalhas_inverno} medalhas, sendo "
         f"{num_medalhas_verao} nas competições de verão e "
         f"{num_medalhas_inverno} nas competições de inverno.\nNa média, "
         f"são distribuídas {media_medalha_comp_verao:.0f} medalhas por competição no verão e "
         f"{media_medalha_comp_inverno:.0f} medalhas por competição no inverno.")

medalhas_por_ano = mesclado.groupby(['Year', 'Season'])['Season'].value_counts().unstack().fillna(0).astype(int)
medalhas_por_ano
  88:


comp_verao = mesclado[mesclado['Season']=='Summer']   
comp_inverno = mesclado[mesclado['Season']=='Winter']  

num_comp_verao = comp_verao['Year'].nunique()           
num_comp_inverno = comp_inverno['Year'].nunique()     

comp_verao = comp_verao[comp_verao['Medal'] != 'NA']
comp_inverno = comp_inverno[comp_inverno['Medal'] != 'NA']

num_medalhas_verao = comp_verao['Medal'].value_counts().sum()
num_medalhas_inverno = comp_inverno['Medal'].value_counts().sum()

media_medalha_comp_verao = (num_medalhas_verao)/(num_comp_verao)
media_medalha_comp_inverno = (num_medalhas_inverno)/(num_comp_inverno)

texto = (f"Então nesses últimos 120 anos tivemos {num_comp_verao} competições de verão e "
         f"{num_comp_inverno} competições de inverno.\nForam distribuídas "
         f"{num_medalhas_verao + num_medalhas_inverno} medalhas, sendo "
         f"{num_medalhas_verao} nas competições de verão e "
         f"{num_medalhas_inverno} nas competições de inverno.\nNa média, "
         f"são distribuídas {media_medalha_comp_verao:.0f} medalhas por competição no verão e "
         f"{media_medalha_comp_inverno:.0f} medalhas por competição no inverno.")

medalhas_por_ano = mesclado.groupby(['Year', 'Season'])['Season'].value_counts().unstack().fillna(0).astype(int)

fig, ax = plt.subplots(1, 1, figsize=(12, 6))
color = ["#b20710", "#221f1f"]

for i, mtv in enumerate(mesclado['Season'].value_counts().index):
    mtv_rel = medalhas_por_ano[mtv]
    ax.fill_between(mtv_rel.index, 0, mtv_rel, color=color[i], label=mtv,alpha=0.9)

ax.yaxis.tick_right()

ax.axhline(y = 0, color = 'black', linewidth = 1.3, alpha = .4)

for s in ['top', 'right','bottom','left']:
    ax.spines[s].set_visible(False)

ax.grid(False)
ax.set_xticklabels(medalhas_por_ano.index, fontfamily='serif', rotation=0)
ax.margins(x=0) # remove white spaces next to margins
  89:


comp_verao = mesclado[mesclado['Season']=='Summer']   
comp_inverno = mesclado[mesclado['Season']=='Winter']  

num_comp_verao = comp_verao['Year'].nunique()           
num_comp_inverno = comp_inverno['Year'].nunique()     

comp_verao = comp_verao[comp_verao['Medal'] != 'NA']
comp_inverno = comp_inverno[comp_inverno['Medal'] != 'NA']

num_medalhas_verao = comp_verao['Medal'].value_counts().sum()
num_medalhas_inverno = comp_inverno['Medal'].value_counts().sum()

media_medalha_comp_verao = (num_medalhas_verao)/(num_comp_verao)
media_medalha_comp_inverno = (num_medalhas_inverno)/(num_comp_inverno)

texto = (f"Então nesses últimos 120 anos tivemos {num_comp_verao} competições de verão e "
         f"{num_comp_inverno} competições de inverno.\nForam distribuídas "
         f"{num_medalhas_verao + num_medalhas_inverno} medalhas, sendo "
         f"{num_medalhas_verao} nas competições de verão e "
         f"{num_medalhas_inverno} nas competições de inverno.\nNa média, "
         f"são distribuídas {media_medalha_comp_verao:.0f} medalhas por competição no verão e "
         f"{media_medalha_comp_inverno:.0f} medalhas por competição no inverno.")

medalhas_por_ano = mesclado.groupby(['Year', 'Season'])['Season'].value_counts().unstack().fillna(0).astype(int)

fig, ax = plt.subplots(1, 1, figsize=(12, 6))
color = ["#b20710", "#221f1f"]

for i, mtv in enumerate(mesclado['Season'].value_counts().index):
    mtv_rel = medalhas_por_ano[mtv]
    ax.fill_between(mtv_rel.index, 0, mtv_rel, color=color[i], label=mtv,alpha=0.9)

ax.yaxis.tick_right()

ax.axhline(y = 0, color = 'black', linewidth = 1.3, alpha = .4)

for s in ['top', 'right','bottom','left']:
    ax.spines[s].set_visible(False)

ax.grid(False)
ax.set_xticklabels(medalhas_por_ano.index, fontfamily='serif', rotation=0)
ax.margins(x=0) # remove white spaces next to margins

fig.text(0.13, 0.95, 'Content added by month [Cumulative Total]', fontsize=15, fontweight='bold', fontfamily='serif')
fig.text(0.13, 0.905, 
"The end & beginnings of each year seem to be Netflix's preference for adding content."
, fontsize=12, fontweight='light', fontfamily='serif')
  90:


comp_verao = mesclado[mesclado['Season']=='Summer']   
comp_inverno = mesclado[mesclado['Season']=='Winter']  

num_comp_verao = comp_verao['Year'].nunique()           
num_comp_inverno = comp_inverno['Year'].nunique()     

comp_verao = comp_verao[comp_verao['Medal'] != 'NA']
comp_inverno = comp_inverno[comp_inverno['Medal'] != 'NA']

num_medalhas_verao = comp_verao['Medal'].value_counts().sum()
num_medalhas_inverno = comp_inverno['Medal'].value_counts().sum()

media_medalha_comp_verao = (num_medalhas_verao)/(num_comp_verao)
media_medalha_comp_inverno = (num_medalhas_inverno)/(num_comp_inverno)

texto = (f"Então nesses últimos 120 anos tivemos {num_comp_verao} competições de verão e "
         f"{num_comp_inverno} competições de inverno.\nForam distribuídas "
         f"{num_medalhas_verao + num_medalhas_inverno} medalhas, sendo "
         f"{num_medalhas_verao} nas competições de verão e "
         f"{num_medalhas_inverno} nas competições de inverno.\nNa média, "
         f"são distribuídas {media_medalha_comp_verao:.0f} medalhas por competição no verão e "
         f"{media_medalha_comp_inverno:.0f} medalhas por competição no inverno.")

medalhas_por_ano = mesclado.groupby(['Year', 'Season'])['Season'].value_counts().unstack().fillna(0).astype(int)

fig, ax = plt.subplots(1, 1, figsize=(12, 6))
color = ["#b20710", "#221f1f"]

for i, mtv in enumerate(mesclado['Season'].value_counts().index):
    mtv_rel = medalhas_por_ano[mtv]
    ax.fill_between(mtv_rel.index, 0, mtv_rel, color=color[i], label=mtv,alpha=0.9)

ax.yaxis.tick_right()

ax.axhline(y = 0, color = 'black', linewidth = 1.3, alpha = .4)

for s in ['top', 'right','bottom','left']:
    ax.spines[s].set_visible(False)

ax.grid(False)
ax.set_xticklabels(medalhas_por_ano.index, fontfamily='serif', rotation=0)
ax.margins(x=0) # remove white spaces next to margins

fig.text(0.13, 0.95, 'Content added by month [Cumulative Total]', fontsize=15, fontweight='bold', fontfamily='serif')
fig.text(0.13, 0.905, 
"The end & beginnings of each year seem to be Netflix's preference for adding content."
, fontsize=12, fontweight='light', fontfamily='serif')


fig.text(0.13,0.855,"Movie", fontweight="bold", fontfamily='serif', fontsize=15, color='#b20710')
fig.text(0.19,0.855,"|", fontweight="bold", fontfamily='serif', fontsize=15, color='black')
fig.text(0.2,0.855,"TV Show", fontweight="bold", fontfamily='serif', fontsize=15, color='#221f1f')


ax.tick_params(axis=u'both', which=u'both',length=0)
  91:


comp_verao = mesclado[mesclado['Season']=='Summer']   
comp_inverno = mesclado[mesclado['Season']=='Winter']  

num_comp_verao = comp_verao['Year'].nunique()           
num_comp_inverno = comp_inverno['Year'].nunique()     

comp_verao = comp_verao[comp_verao['Medal'] != 'NA']
comp_inverno = comp_inverno[comp_inverno['Medal'] != 'NA']

num_medalhas_verao = comp_verao['Medal'].value_counts().sum()
num_medalhas_inverno = comp_inverno['Medal'].value_counts().sum()

media_medalha_comp_verao = (num_medalhas_verao)/(num_comp_verao)
media_medalha_comp_inverno = (num_medalhas_inverno)/(num_comp_inverno)

texto = (f"Então nesses últimos 120 anos tivemos {num_comp_verao} competições de verão e "
         f"{num_comp_inverno} competições de inverno.\nForam distribuídas "
         f"{num_medalhas_verao + num_medalhas_inverno} medalhas, sendo "
         f"{num_medalhas_verao} nas competições de verão e "
         f"{num_medalhas_inverno} nas competições de inverno.\nNa média, "
         f"são distribuídas {media_medalha_comp_verao:.0f} medalhas por competição no verão e "
         f"{media_medalha_comp_inverno:.0f} medalhas por competição no inverno.")

medalhas_por_ano = mesclado.groupby(['Year', 'Season'])['Season'].value_counts().unstack().fillna(0).astype(int)

sns.set_theme('notebook')

fig, ax = plt.subplots(1, 1, figsize=(12, 6))
color = ["#b20710", "#221f1f"]

for i, mtv in enumerate(mesclado['Season'].value_counts().index):
    mtv_rel = medalhas_por_ano[mtv]
    ax.fill_between(mtv_rel.index, 0, mtv_rel, color=color[i], label=mtv,alpha=0.9)

ax.yaxis.tick_right()

ax.axhline(y = 0, color = 'black', linewidth = 1.3, alpha = .4)

for s in ['top', 'right','bottom','left']:
    ax.spines[s].set_visible(False)

ax.grid(False)
ax.set_xticklabels(medalhas_por_ano.index, fontfamily='serif', rotation=0)
ax.margins(x=0) # remove white spaces next to margins

fig.text(0.13, 0.95, 'Content added by month [Cumulative Total]', fontsize=15, fontweight='bold', fontfamily='serif')
fig.text(0.13, 0.905, 
"The end & beginnings of each year seem to be Netflix's preference for adding content."
, fontsize=12, fontweight='light', fontfamily='serif')


fig.text(0.13,0.855,"Movie", fontweight="bold", fontfamily='serif', fontsize=15, color='#b20710')
fig.text(0.19,0.855,"|", fontweight="bold", fontfamily='serif', fontsize=15, color='black')
fig.text(0.2,0.855,"TV Show", fontweight="bold", fontfamily='serif', fontsize=15, color='#221f1f')


ax.tick_params(axis=u'both', which=u'both',length=0)
  92:


comp_verao = mesclado[mesclado['Season']=='Summer']   
comp_inverno = mesclado[mesclado['Season']=='Winter']  

num_comp_verao = comp_verao['Year'].nunique()           
num_comp_inverno = comp_inverno['Year'].nunique()     

comp_verao = comp_verao[comp_verao['Medal'] != 'NA']
comp_inverno = comp_inverno[comp_inverno['Medal'] != 'NA']

num_medalhas_verao = comp_verao['Medal'].value_counts().sum()
num_medalhas_inverno = comp_inverno['Medal'].value_counts().sum()

media_medalha_comp_verao = (num_medalhas_verao)/(num_comp_verao)
media_medalha_comp_inverno = (num_medalhas_inverno)/(num_comp_inverno)

texto = (f"Então nesses últimos 120 anos tivemos {num_comp_verao} competições de verão e "
         f"{num_comp_inverno} competições de inverno.\nForam distribuídas "
         f"{num_medalhas_verao + num_medalhas_inverno} medalhas, sendo "
         f"{num_medalhas_verao} nas competições de verão e "
         f"{num_medalhas_inverno} nas competições de inverno.\nNa média, "
         f"são distribuídas {media_medalha_comp_verao:.0f} medalhas por competição no verão e "
         f"{media_medalha_comp_inverno:.0f} medalhas por competição no inverno.")

medalhas_por_ano = mesclado.groupby(['Year', 'Season'])['Season'].value_counts().unstack().fillna(0).astype(int)

sns.set_theme('notebook')

fig, ax = plt.subplots(1, 1, figsize=(12, 6))
color = ["#b20710", "#221f1f"]

for i, mtv in enumerate(mesclado['Year'].value_counts().index):
    mtv_rel = medalhas_por_ano[mtv]
    ax.fill_between(mtv_rel.index, 0, mtv_rel, color=color[i], label=mtv,alpha=0.9)

ax.yaxis.tick_right()

ax.axhline(y = 0, color = 'black', linewidth = 1.3, alpha = .4)

for s in ['top', 'right','bottom','left']:
    ax.spines[s].set_visible(False)

ax.grid(False)
ax.set_xticklabels(medalhas_por_ano.index, fontfamily='serif', rotation=0)
ax.margins(x=0) # remove white spaces next to margins

fig.text(0.13, 0.95, 'Content added by month [Cumulative Total]', fontsize=15, fontweight='bold', fontfamily='serif')
fig.text(0.13, 0.905, 
"The end & beginnings of each year seem to be Netflix's preference for adding content."
, fontsize=12, fontweight='light', fontfamily='serif')


fig.text(0.13,0.855,"Movie", fontweight="bold", fontfamily='serif', fontsize=15, color='#b20710')
fig.text(0.19,0.855,"|", fontweight="bold", fontfamily='serif', fontsize=15, color='black')
fig.text(0.2,0.855,"TV Show", fontweight="bold", fontfamily='serif', fontsize=15, color='#221f1f')


ax.tick_params(axis=u'both', which=u'both',length=0)
  93:


comp_verao = mesclado[mesclado['Season']=='Summer']   
comp_inverno = mesclado[mesclado['Season']=='Winter']  

num_comp_verao = comp_verao['Year'].nunique()           
num_comp_inverno = comp_inverno['Year'].nunique()     

comp_verao = comp_verao[comp_verao['Medal'] != 'NA']
comp_inverno = comp_inverno[comp_inverno['Medal'] != 'NA']

num_medalhas_verao = comp_verao['Medal'].value_counts().sum()
num_medalhas_inverno = comp_inverno['Medal'].value_counts().sum()

media_medalha_comp_verao = (num_medalhas_verao)/(num_comp_verao)
media_medalha_comp_inverno = (num_medalhas_inverno)/(num_comp_inverno)

texto = (f"Então nesses últimos 120 anos tivemos {num_comp_verao} competições de verão e "
         f"{num_comp_inverno} competições de inverno.\nForam distribuídas "
         f"{num_medalhas_verao + num_medalhas_inverno} medalhas, sendo "
         f"{num_medalhas_verao} nas competições de verão e "
         f"{num_medalhas_inverno} nas competições de inverno.\nNa média, "
         f"são distribuídas {media_medalha_comp_verao:.0f} medalhas por competição no verão e "
         f"{media_medalha_comp_inverno:.0f} medalhas por competição no inverno.")

medalhas_por_ano = mesclado.groupby(['Year', 'Season'])['Season'].value_counts().unstack().fillna(0).astype(int)
  94:


comp_verao = mesclado[mesclado['Season']=='Summer']   
comp_inverno = mesclado[mesclado['Season']=='Winter']  

num_comp_verao = comp_verao['Year'].nunique()           
num_comp_inverno = comp_inverno['Year'].nunique()     

comp_verao = comp_verao[comp_verao['Medal'] != 'NA']
comp_inverno = comp_inverno[comp_inverno['Medal'] != 'NA']

num_medalhas_verao = comp_verao['Medal'].value_counts().sum()
num_medalhas_inverno = comp_inverno['Medal'].value_counts().sum()

media_medalha_comp_verao = (num_medalhas_verao)/(num_comp_verao)
media_medalha_comp_inverno = (num_medalhas_inverno)/(num_comp_inverno)

texto = (f"Então nesses últimos 120 anos tivemos {num_comp_verao} competições de verão e "
         f"{num_comp_inverno} competições de inverno.\nForam distribuídas "
         f"{num_medalhas_verao + num_medalhas_inverno} medalhas, sendo "
         f"{num_medalhas_verao} nas competições de verão e "
         f"{num_medalhas_inverno} nas competições de inverno.\nNa média, "
         f"são distribuídas {media_medalha_comp_verao:.0f} medalhas por competição no verão e "
         f"{media_medalha_comp_inverno:.0f} medalhas por competição no inverno.")

medalhas_por_ano = mesclado.groupby(['Year', 'Season'])['Season'].value_counts().unstack().fillna(0).astype(int)
medalhas_por_ano
  95:
comp_verao = mesclado[mesclado['Season']=='Summer']   
comp_inverno = mesclado[mesclado['Season']=='Winter']  

num_comp_verao = comp_verao['Year'].nunique()           
num_comp_inverno = comp_inverno['Year'].nunique()     

comp_verao = comp_verao[comp_verao['Medal'] != 'NA']
comp_inverno = comp_inverno[comp_inverno['Medal'] != 'NA']

num_medalhas_verao = comp_verao['Medal'].value_counts().sum()
num_medalhas_inverno = comp_inverno['Medal'].value_counts().sum()

media_medalha_comp_verao = (num_medalhas_verao)/(num_comp_verao)
media_medalha_comp_inverno = (num_medalhas_inverno)/(num_comp_inverno)

texto = (f"Então nesses últimos 120 anos tivemos {num_comp_verao} competições de verão e "
         f"{num_comp_inverno} competições de inverno.\nForam distribuídas "
         f"{num_medalhas_verao + num_medalhas_inverno} medalhas, sendo "
         f"{num_medalhas_verao} nas competições de verão e "
         f"{num_medalhas_inverno} nas competições de inverno.\nNa média, "
         f"são distribuídas {media_medalha_comp_verao:.0f} medalhas por competição no verão e "
         f"{media_medalha_comp_inverno:.0f} medalhas por competição no inverno.")

medalhas_por_ano = mesclado.groupby(['Year', 'Season'])['Season'].value_counts().unstack().fillna(0).astype(int)
plt.figure(figsize=(14, 8))
medalhas_por_ano.plot(kind='area', stacked=True, figsize=(14, 8))

# Adicionar títulos e rótulos
plt.title('Distribuição Total de Medalhas por Ano e Temporada')
plt.xlabel('Ano')
plt.ylabel('Número de Medalhas')
plt.legend(title='Temporada')
plt.grid(True)
  96:
comp_verao = mesclado[mesclado['Season']=='Summer']   
comp_inverno = mesclado[mesclado['Season']=='Winter']  

num_comp_verao = comp_verao['Year'].nunique()           
num_comp_inverno = comp_inverno['Year'].nunique()     

comp_verao = comp_verao[comp_verao['Medal'] != 'NA']
comp_inverno = comp_inverno[comp_inverno['Medal'] != 'NA']

num_medalhas_verao = comp_verao['Medal'].value_counts().sum()
num_medalhas_inverno = comp_inverno['Medal'].value_counts().sum()

media_medalha_comp_verao = (num_medalhas_verao)/(num_comp_verao)
media_medalha_comp_inverno = (num_medalhas_inverno)/(num_comp_inverno)

texto = (f"Então nesses últimos 120 anos tivemos {num_comp_verao} competições de verão e "
         f"{num_comp_inverno} competições de inverno.\nForam distribuídas "
         f"{num_medalhas_verao + num_medalhas_inverno} medalhas, sendo "
         f"{num_medalhas_verao} nas competições de verão e "
         f"{num_medalhas_inverno} nas competições de inverno.\nNa média, "
         f"são distribuídas {media_medalha_comp_verao:.0f} medalhas por competição no verão e "
         f"{media_medalha_comp_inverno:.0f} medalhas por competição no inverno.")

medalhas_por_ano = mesclado.groupby(['Year', 'Season'])['Season'].value_counts().unstack().fillna(0).astype(int)
plt.figure(figsize=(14, 8))
medalhas_por_ano.plot(kind='area', stacked=False, figsize=(14, 8))

# Adicionar títulos e rótulos
plt.title('Distribuição Total de Medalhas por Ano e Temporada')
plt.xlabel('Ano')
plt.ylabel('Número de Medalhas')
plt.legend(title='Temporada')
plt.grid(True)
  97:
comp_verao = mesclado[mesclado['Season']=='Summer']   
comp_inverno = mesclado[mesclado['Season']=='Winter']  

num_comp_verao = comp_verao['Year'].nunique()           
num_comp_inverno = comp_inverno['Year'].nunique()     

comp_verao = comp_verao[comp_verao['Medal'] != 'NA']
comp_inverno = comp_inverno[comp_inverno['Medal'] != 'NA']

num_medalhas_verao = comp_verao['Medal'].value_counts().sum()
num_medalhas_inverno = comp_inverno['Medal'].value_counts().sum()

media_medalha_comp_verao = (num_medalhas_verao)/(num_comp_verao)
media_medalha_comp_inverno = (num_medalhas_inverno)/(num_comp_inverno)

texto = (f"Então nesses últimos 120 anos tivemos {num_comp_verao} competições de verão e "
         f"{num_comp_inverno} competições de inverno.\nForam distribuídas "
         f"{num_medalhas_verao + num_medalhas_inverno} medalhas, sendo "
         f"{num_medalhas_verao} nas competições de verão e "
         f"{num_medalhas_inverno} nas competições de inverno.\nNa média, "
         f"são distribuídas {media_medalha_comp_verao:.0f} medalhas por competição no verão e "
         f"{media_medalha_comp_inverno:.0f} medalhas por competição no inverno.")

medalhas_por_ano = mesclado.groupby(['Year', 'Season'])['Season'].value_counts().unstack().fillna(0).astype(int)
plt.figure(figsize=(14, 8))
medalhas_por_ano.plot(kind='area', stacked=False, figsize=(14, 8))

# Adicionar títulos e rótulos
plt.title('Distribuição Total de Medalhas por Ano e Temporada')
plt.xlabel('Ano')
plt.ylabel('Número de Medalhas')
plt.legend(title='Temporada')
plt.grid(True)

plt.text(1890, max(medalhas_por_ano.sum(axis=1)) + 200, texto, fontsize=12, bbox=dict(facecolor='white', alpha=0.5))
  98:
comp_verao = mesclado[mesclado['Season']=='Summer']   
comp_inverno = mesclado[mesclado['Season']=='Winter']  

num_comp_verao = comp_verao['Year'].nunique()           
num_comp_inverno = comp_inverno['Year'].nunique()     

comp_verao = comp_verao[comp_verao['Medal'] != 'NA']
comp_inverno = comp_inverno[comp_inverno['Medal'] != 'NA']

num_medalhas_verao = comp_verao['Medal'].value_counts().sum()
num_medalhas_inverno = comp_inverno['Medal'].value_counts().sum()

media_medalha_comp_verao = (num_medalhas_verao)/(num_comp_verao)
media_medalha_comp_inverno = (num_medalhas_inverno)/(num_comp_inverno)

texto = (f"Nesses últimos 120 anos tivemos {num_comp_verao} competições de verão e "
         f"{num_comp_inverno} competições de inverno.\nForam distribuídas "
         f"{num_medalhas_verao + num_medalhas_inverno} medalhas, sendo "
         f"{num_medalhas_verao} nas competições de verão e "
         f"{num_medalhas_inverno} nas competições de inverno.\nNa média, "
         f"são distribuídas {media_medalha_comp_verao:.0f} medalhas por competição no verão e "
         f"{media_medalha_comp_inverno:.0f} medalhas por competição no inverno.")

medalhas_por_ano = mesclado.groupby(['Year', 'Season'])['Season'].value_counts().unstack().fillna(0).astype(int)
plt.figure(figsize=(14, 8))
medalhas_por_ano.plot(kind='area', stacked=False, figsize=(14, 8))

# Adicionar títulos e rótulos
plt.title('Distribuição Total de Medalhas por Ano e Temporada')
plt.xlabel('Ano')
plt.ylabel('Número de Medalhas')
plt.legend(title='Temporada')
plt.grid(False)

plt.text(1890, max(medalhas_por_ano.sum(axis=1)) + 200, texto, fontsize=12, bbox=dict(facecolor='white', alpha=0.5))
  99:
comp_verao = mesclado[mesclado['Season']=='Summer']   
comp_inverno = mesclado[mesclado['Season']=='Winter']  

num_comp_verao = comp_verao['Year'].nunique()           
num_comp_inverno = comp_inverno['Year'].nunique()     

comp_verao = comp_verao[comp_verao['Medal'] != 'NA']
comp_inverno = comp_inverno[comp_inverno['Medal'] != 'NA']

num_medalhas_verao = comp_verao['Medal'].value_counts().sum()
num_medalhas_inverno = comp_inverno['Medal'].value_counts().sum()

media_medalha_comp_verao = (num_medalhas_verao)/(num_comp_verao)
media_medalha_comp_inverno = (num_medalhas_inverno)/(num_comp_inverno)

texto = (f"Nesses últimos 120 anos tivemos {num_comp_verao} competições de verão e "
         f"{num_comp_inverno} competições de inverno.\nForam distribuídas "
         f"{num_medalhas_verao + num_medalhas_inverno} medalhas, sendo "
         f"{num_medalhas_verao} nas competições de verão e "
         f"{num_medalhas_inverno} nas competições de inverno.\nNa média, "
         f"são distribuídas {media_medalha_comp_verao:.0f} medalhas por competição no verão e "
         f"{media_medalha_comp_inverno:.0f} medalhas por competição no inverno.")

medalhas_por_ano = mesclado.groupby(['Year', 'Season'])['Season'].value_counts().unstack().fillna(0).astype(int)
plt.figure(figsize=(14, 8))
medalhas_por_ano.plot(kind='area', stacked=False, figsize=(14, 8))

# Adicionar títulos e rótulos
plt.title('s')
plt.xlabel('Ano')
plt.ylabel('Número de Medalhas')
plt.legend(title='Temporada')
plt.grid(False)

plt.text(1890, max(medalhas_por_ano.sum(axis=1)) + 200, texto, fontsize=12, bbox=dict(facecolor='white', alpha=0.5))
 100:
comp_verao = mesclado[mesclado['Season']=='Summer']   
comp_inverno = mesclado[mesclado['Season']=='Winter']  

num_comp_verao = comp_verao['Year'].nunique()           
num_comp_inverno = comp_inverno['Year'].nunique()     

comp_verao = comp_verao[comp_verao['Medal'] != 'NA']
comp_inverno = comp_inverno[comp_inverno['Medal'] != 'NA']

num_medalhas_verao = comp_verao['Medal'].value_counts().sum()
num_medalhas_inverno = comp_inverno['Medal'].value_counts().sum()

media_medalha_comp_verao = (num_medalhas_verao)/(num_comp_verao)
media_medalha_comp_inverno = (num_medalhas_inverno)/(num_comp_inverno)

texto = (f"Nesses últimos 120 anos tivemos {num_comp_verao} competições de verão e "
         f"{num_comp_inverno} competições de inverno.\nForam distribuídas "
         f"{num_medalhas_verao + num_medalhas_inverno} medalhas, sendo "
         f"{num_medalhas_verao} nas competições de verão e "
         f"{num_medalhas_inverno} nas competições de inverno.\nNa média, "
         f"são distribuídas {media_medalha_comp_verao:.0f} medalhas por competição no verão e "
         f"{media_medalha_comp_inverno:.0f} medalhas por competição no inverno.")

medalhas_por_ano = mesclado.groupby(['Year', 'Season'])['Season'].value_counts().unstack().fillna(0).astype(int)
plt.figure(figsize=(14, 8))
medalhas_por_ano.plot(kind='area', stacked=False, figsize=(14, 8))

# Adicionar títulos e rótulos
plt.title('s')
plt.xlabel('Ano')
plt.ylabel('Número de Medalhas')
plt.legend(title='Temporada')
plt.grid(False)

plt.text(1890, max(medalhas_por_ano.sum(axis=1)), texto, fontsize=12, bbox=dict(facecolor='white', alpha=0.5))
 101:
comp_verao = mesclado[mesclado['Season']=='Summer']   
comp_inverno = mesclado[mesclado['Season']=='Winter']  

num_comp_verao = comp_verao['Year'].nunique()           
num_comp_inverno = comp_inverno['Year'].nunique()     

comp_verao = comp_verao[comp_verao['Medal'] != 'NA']
comp_inverno = comp_inverno[comp_inverno['Medal'] != 'NA']

num_medalhas_verao = comp_verao['Medal'].value_counts().sum()
num_medalhas_inverno = comp_inverno['Medal'].value_counts().sum()

media_medalha_comp_verao = (num_medalhas_verao)/(num_comp_verao)
media_medalha_comp_inverno = (num_medalhas_inverno)/(num_comp_inverno)

texto = (f"Nesses últimos 120 anos tivemos {num_comp_verao} competições de verão e "
         f"{num_comp_inverno} competições de inverno.\nForam distribuídas "
         f"{num_medalhas_verao + num_medalhas_inverno} medalhas, sendo "
         f"{num_medalhas_verao} nas competições de verão e "
         f"{num_medalhas_inverno} nas competições de inverno.\nNa média, "
         f"são distribuídas {media_medalha_comp_verao:.0f} medalhas por competição no verão e "
         f"{media_medalha_comp_inverno:.0f} medalhas por competição no inverno.")

medalhas_por_ano = mesclado.groupby(['Year', 'Season'])['Season'].value_counts().unstack().fillna(0).astype(int)
plt.figure(figsize=(14, 8))
medalhas_por_ano.plot(kind='area', stacked=False, figsize=(14, 8))

# Adicionar títulos e rótulos
plt.title('s')
plt.xlabel('Ano')
plt.ylabel('Número de Medalhas')
plt.legend(title='Temporada')
plt.grid(False)

plt.text(1890, max(medalhas_por_ano.sum(axis=1) - 200), texto, fontsize=12, bbox=dict(facecolor='white', alpha=0.5))
 102:
comp_verao = mesclado[mesclado['Season']=='Summer']   
comp_inverno = mesclado[mesclado['Season']=='Winter']  

num_comp_verao = comp_verao['Year'].nunique()           
num_comp_inverno = comp_inverno['Year'].nunique()     

comp_verao = comp_verao[comp_verao['Medal'] != 'NA']
comp_inverno = comp_inverno[comp_inverno['Medal'] != 'NA']

num_medalhas_verao = comp_verao['Medal'].value_counts().sum()
num_medalhas_inverno = comp_inverno['Medal'].value_counts().sum()

media_medalha_comp_verao = (num_medalhas_verao)/(num_comp_verao)
media_medalha_comp_inverno = (num_medalhas_inverno)/(num_comp_inverno)

texto = (f"Nesses últimos 120 anos tivemos {num_comp_verao} competições de verão e "
         f"{num_comp_inverno} competições de inverno.\nForam distribuídas "
         f"{num_medalhas_verao + num_medalhas_inverno} medalhas, sendo "
         f"{num_medalhas_verao} nas competições de verão e "
         f"{num_medalhas_inverno} nas competições de inverno.\nNa média, "
         f"são distribuídas {media_medalha_comp_verao:.0f} medalhas por competição no verão e "
         f"{media_medalha_comp_inverno:.0f} medalhas por competição no inverno.")

medalhas_por_ano = mesclado.groupby(['Year', 'Season'])['Season'].value_counts().unstack().fillna(0).astype(int)
plt.figure(figsize=(14, 8))
medalhas_por_ano.plot(kind='area', stacked=False, figsize=(14, 8))

# Adicionar títulos e rótulos
plt.title('s')
plt.xlabel('Ano')
plt.ylabel('Número de Medalhas')
plt.legend(title='Temporada')
plt.grid(False)

plt.text(1890, max(medalhas_por_ano.sum(axis=1) - 2000), texto, fontsize=12, bbox=dict(facecolor='white', alpha=0.5))
 103:
comp_verao = mesclado[mesclado['Season']=='Summer']   
comp_inverno = mesclado[mesclado['Season']=='Winter']  

num_comp_verao = comp_verao['Year'].nunique()           
num_comp_inverno = comp_inverno['Year'].nunique()     

comp_verao = comp_verao[comp_verao['Medal'] != 'NA']
comp_inverno = comp_inverno[comp_inverno['Medal'] != 'NA']

num_medalhas_verao = comp_verao['Medal'].value_counts().sum()
num_medalhas_inverno = comp_inverno['Medal'].value_counts().sum()

media_medalha_comp_verao = (num_medalhas_verao)/(num_comp_verao)
media_medalha_comp_inverno = (num_medalhas_inverno)/(num_comp_inverno)

texto = (f"Nesses últimos 120 anos tivemos {num_comp_verao} competições de verão e "
         f"{num_comp_inverno} competições de inverno.\nForam distribuídas "
         f"{num_medalhas_verao + num_medalhas_inverno} medalhas, sendo "
         f"{num_medalhas_verao} nas competições de verão e "
         f"{num_medalhas_inverno} nas competições de inverno.\nNa média, "
         f"são distribuídas {media_medalha_comp_verao:.0f} medalhas por competição no verão e "
         f"{media_medalha_comp_inverno:.0f} medalhas por competição no inverno.")

medalhas_por_ano = mesclado.groupby(['Year', 'Season'])['Season'].value_counts().unstack().fillna(0).astype(int)
plt.figure(figsize=(14, 8))
medalhas_por_ano.plot(kind='area', stacked=False, figsize=(14, 8))

# Adicionar títulos e rótulos
plt.title('s')
plt.xlabel('Ano')
plt.ylabel('Número de Medalhas')
plt.legend(title='Temporada')
plt.grid(False)

plt.text(1890, max(medalhas_por_ano.sum(axis=1) - 1500), texto, fontsize=12, bbox=dict(facecolor='white', alpha=0.5))
 104:
comp_verao = mesclado[mesclado['Season']=='Summer']   
comp_inverno = mesclado[mesclado['Season']=='Winter']  

num_comp_verao = comp_verao['Year'].nunique()           
num_comp_inverno = comp_inverno['Year'].nunique()     

comp_verao = comp_verao[comp_verao['Medal'] != 'NA']
comp_inverno = comp_inverno[comp_inverno['Medal'] != 'NA']

num_medalhas_verao = comp_verao['Medal'].value_counts().sum()
num_medalhas_inverno = comp_inverno['Medal'].value_counts().sum()

media_medalha_comp_verao = (num_medalhas_verao)/(num_comp_verao)
media_medalha_comp_inverno = (num_medalhas_inverno)/(num_comp_inverno)

texto = (f"Nesses últimos 120 anos tivemos {num_comp_verao} competições de verão e "
         f"{num_comp_inverno} competições de inverno.\nForam distribuídas "
         f"{num_medalhas_verao + num_medalhas_inverno} medalhas, sendo "
         f"{num_medalhas_verao} nas competições de verão e "
         f"{num_medalhas_inverno} nas competições de inverno.\nNa média, "
         f"são distribuídas {media_medalha_comp_verao:.0f} medalhas por competição no verão e "
         f"{media_medalha_comp_inverno:.0f} medalhas por competição no inverno.")

medalhas_por_ano = mesclado.groupby(['Year', 'Season'])['Season'].value_counts().unstack().fillna(0).astype(int)
plt.figure(figsize=(14, 8))
medalhas_por_ano.plot(kind='area', stacked=False, figsize=(14, 8))

# Adicionar títulos e rótulos
plt.title('s')
plt.xlabel('Ano')
plt.ylabel('Número de Medalhas')
plt.legend(title='Temporada')
plt.grid(False)

plt.text(1890, max(medalhas_por_ano.sum(axis=1) - 1500), texto, fontsize=12, fontfamily='serif', bbox=dict(facecolor='white', alpha=0.5))
 105:
comp_verao = mesclado[mesclado['Season']=='Summer']   
comp_inverno = mesclado[mesclado['Season']=='Winter']  

num_comp_verao = comp_verao['Year'].nunique()           
num_comp_inverno = comp_inverno['Year'].nunique()     

comp_verao = comp_verao[comp_verao['Medal'] != 'NA']
comp_inverno = comp_inverno[comp_inverno['Medal'] != 'NA']

num_medalhas_verao = comp_verao['Medal'].value_counts().sum()
num_medalhas_inverno = comp_inverno['Medal'].value_counts().sum()

media_medalha_comp_verao = (num_medalhas_verao)/(num_comp_verao)
media_medalha_comp_inverno = (num_medalhas_inverno)/(num_comp_inverno)

texto = (f"Nesses últimos 120 anos tivemos <b>{num_comp_verao}</b> competições de verão e "
         f"<b>{num_comp_inverno}</b> competições de inverno.\nForam distribuídas "
         f"<b>{num_medalhas_verao + num_medalhas_inverno}</b> medalhas, sendo "
         f"<b>{num_medalhas_verao}</b> nas competições de verão e "
         f"<b>{num_medalhas_inverno}</b> nas competições de inverno.\nNa média, "
         f"são distribuídas <b>{media_medalha_comp_verao:.0f}</b> medalhas por competição no verão e "
         f"<b>{media_medalha_comp_inverno:.0f}</b> medalhas por competição no inverno.")

medalhas_por_ano = mesclado.groupby(['Year', 'Season'])['Season'].value_counts().unstack().fillna(0).astype(int)
plt.figure(figsize=(14, 8))
medalhas_por_ano.plot(kind='area', stacked=False, figsize=(14, 8))

# Adicionar títulos e rótulos
plt.title('s')
plt.xlabel('Ano')
plt.ylabel('Número de Medalhas')
plt.legend(title='Temporada')
plt.grid(False)

plt.text(1890, max(medalhas_por_ano.sum(axis=1) - 1500),
        texto, fontsize=12, fontfamily='serif',
        bbox=dict(facecolor='white', alpha=0.5),
        usetex=True
        )
 106:
comp_verao = mesclado[mesclado['Season']=='Summer']   
comp_inverno = mesclado[mesclado['Season']=='Winter']  

num_comp_verao = comp_verao['Year'].nunique()           
num_comp_inverno = comp_inverno['Year'].nunique()     

comp_verao = comp_verao[comp_verao['Medal'] != 'NA']
comp_inverno = comp_inverno[comp_inverno['Medal'] != 'NA']

num_medalhas_verao = comp_verao['Medal'].value_counts().sum()
num_medalhas_inverno = comp_inverno['Medal'].value_counts().sum()

media_medalha_comp_verao = (num_medalhas_verao)/(num_comp_verao)
media_medalha_comp_inverno = (num_medalhas_inverno)/(num_comp_inverno)

texto = (f"Nesses últimos 120 anos tivemos <b>{num_comp_verao}</b> competições de verão e "
         f"<b>{num_comp_inverno}</b> competições de inverno.\nForam distribuídas "
         f"<b>{num_medalhas_verao + num_medalhas_inverno}</b> medalhas, sendo "
         f"<b>{num_medalhas_verao}</b> nas competições de verão e "
         f"<b>{num_medalhas_inverno}</b> nas competições de inverno.\nNa média, "
         f"são distribuídas <b>{media_medalha_comp_verao:.0f}</b> medalhas por competição no verão e "
         f"<b>{media_medalha_comp_inverno:.0f}</b> medalhas por competição no inverno.")

medalhas_por_ano = mesclado.groupby(['Year', 'Season'])['Season'].value_counts().unstack().fillna(0).astype(int)
plt.figure(figsize=(14, 8))
medalhas_por_ano.plot(kind='area', stacked=False, figsize=(14, 8))

# Adicionar títulos e rótulos
plt.title('s')
plt.xlabel('Ano')
plt.ylabel('Número de Medalhas')
plt.legend(title='Temporada')
plt.grid(False)

plt.text(1890, max(medalhas_por_ano.sum(axis=1) - 1500),
        texto, fontsize=12, fontfamily='serif',
        bbox=dict(facecolor='white', alpha=0.5),
        transform=plt.gca().transAxes,
        usetex=True
        )
 107:
comp_verao = mesclado[mesclado['Season']=='Summer']   
comp_inverno = mesclado[mesclado['Season']=='Winter']  

num_comp_verao = comp_verao['Year'].nunique()           
num_comp_inverno = comp_inverno['Year'].nunique()     

comp_verao = comp_verao[comp_verao['Medal'] != 'NA']
comp_inverno = comp_inverno[comp_inverno['Medal'] != 'NA']

num_medalhas_verao = comp_verao['Medal'].value_counts().sum()
num_medalhas_inverno = comp_inverno['Medal'].value_counts().sum()

media_medalha_comp_verao = (num_medalhas_verao)/(num_comp_verao)
media_medalha_comp_inverno = (num_medalhas_inverno)/(num_comp_inverno)

texto = (f"Nesses últimos 120 anos tivemos <b>{num_comp_verao}</b> competições de verão e "
         f"<b>{num_comp_inverno}</b> competições de inverno.\nForam distribuídas "
         f"<b>{num_medalhas_verao + num_medalhas_inverno}</b> medalhas, sendo "
         f"<b>{num_medalhas_verao}</b> nas competições de verão e "
         f"<b>{num_medalhas_inverno}</b> nas competições de inverno.\nNa média, "
         f"são distribuídas <b>{media_medalha_comp_verao:.0f}</b> medalhas por competição no verão e "
         f"<b>{media_medalha_comp_inverno:.0f}</b> medalhas por competição no inverno.")

medalhas_por_ano = mesclado.groupby(['Year', 'Season'])['Season'].value_counts().unstack().fillna(0).astype(int)
plt.figure(figsize=(14, 8))
medalhas_por_ano.plot(kind='area', stacked=False, figsize=(14, 8))

# Adicionar títulos e rótulos
plt.title('s')
plt.xlabel('Ano')
plt.ylabel('Número de Medalhas')
plt.legend(title='Temporada')
plt.grid(False)

plt.text(1890, max(medalhas_por_ano.sum(axis=1) - 1500),
        texto, fontsize=12, fontfamily='serif',
        bbox=dict(facecolor='white', alpha=0.5),
        transform=plt.gca().transAxes
        )
 108:
comp_verao = mesclado[mesclado['Season']=='Summer']   
comp_inverno = mesclado[mesclado['Season']=='Winter']  

num_comp_verao = comp_verao['Year'].nunique()           
num_comp_inverno = comp_inverno['Year'].nunique()     

comp_verao = comp_verao[comp_verao['Medal'] != 'NA']
comp_inverno = comp_inverno[comp_inverno['Medal'] != 'NA']

num_medalhas_verao = comp_verao['Medal'].value_counts().sum()
num_medalhas_inverno = comp_inverno['Medal'].value_counts().sum()

media_medalha_comp_verao = (num_medalhas_verao)/(num_comp_verao)
media_medalha_comp_inverno = (num_medalhas_inverno)/(num_comp_inverno)

texto = (f"Nesses últimos 120 anos tivemos <b>{num_comp_verao}</b> competições de verão e "
         f"<b>{num_comp_inverno}</b> competições de inverno.\nForam distribuídas "
         f"<b>{num_medalhas_verao + num_medalhas_inverno}</b> medalhas, sendo "
         f"<b>{num_medalhas_verao}</b> nas competições de verão e "
         f"<b>{num_medalhas_inverno}</b> nas competições de inverno.\nNa média, "
         f"são distribuídas <b>{media_medalha_comp_verao:.0f}</b> medalhas por competição no verão e "
         f"<b>{media_medalha_comp_inverno:.0f}</b> medalhas por competição no inverno.")

medalhas_por_ano = mesclado.groupby(['Year', 'Season'])['Season'].value_counts().unstack().fillna(0).astype(int)
plt.figure(figsize=(14, 8))
medalhas_por_ano.plot(kind='area', stacked=False, figsize=(14, 8))

# Adicionar títulos e rótulos
plt.title('s')
plt.xlabel('Ano')
plt.ylabel('Número de Medalhas')
plt.legend(title='Temporada')
plt.grid(False)

plt.text(1890, max(medalhas_por_ano.sum(axis=1) - 1500),
        texto, fontsize=12, fontfamily='serif',
        bbox=dict(facecolor='white', alpha=0.5)
        )
 109:
comp_verao = mesclado[mesclado['Season']=='Summer']   
comp_inverno = mesclado[mesclado['Season']=='Winter']  

num_comp_verao = comp_verao['Year'].nunique()           
num_comp_inverno = comp_inverno['Year'].nunique()     

comp_verao = comp_verao[comp_verao['Medal'] != 'NA']
comp_inverno = comp_inverno[comp_inverno['Medal'] != 'NA']

num_medalhas_verao = comp_verao['Medal'].value_counts().sum()
num_medalhas_inverno = comp_inverno['Medal'].value_counts().sum()

media_medalha_comp_verao = (num_medalhas_verao)/(num_comp_verao)
media_medalha_comp_inverno = (num_medalhas_inverno)/(num_comp_inverno)

texto = (f"Nesses últimos 120 anos tivemos {num_comp_verao} competições de verão e "
         f"{num_comp_inverno} competições de inverno.\nForam distribuídas "
         f"{num_medalhas_verao + num_medalhas_inverno} medalhas, sendo "
         f"{num_medalhas_verao} nas competições de verão e "
         f"{num_medalhas_inverno} nas competições de inverno.\nNa média, "
         f"são distribuídas {media_medalha_comp_verao:.0f} medalhas por competição no verão e "
         f"{media_medalha_comp_inverno:.0f} medalhas por competição no inverno.")

medalhas_por_ano = mesclado.groupby(['Year', 'Season'])['Season'].value_counts().unstack().fillna(0).astype(int)
plt.figure(figsize=(14, 8))
medalhas_por_ano.plot(kind='area', stacked=False, figsize=(14, 8))

# Adicionar títulos e rótulos
plt.title('s')
plt.xlabel('Ano')
plt.ylabel('Número de Medalhas')
plt.legend(title='Temporada')
plt.grid(False)

plt.text(1890, max(medalhas_por_ano.sum(axis=1) - 1500),
        texto, fontsize=12, fontfamily='serif',
        bbox=dict(facecolor='white', alpha=0.5),
        )
 110:
comp_verao = mesclado[mesclado['Season']=='Summer']   
comp_inverno = mesclado[mesclado['Season']=='Winter']  

num_comp_verao = comp_verao['Year'].nunique()           
num_comp_inverno = comp_inverno['Year'].nunique()     

comp_verao = comp_verao[comp_verao['Medal'] != 'NA']
comp_inverno = comp_inverno[comp_inverno['Medal'] != 'NA']

num_medalhas_verao = comp_verao['Medal'].value_counts().sum()
num_medalhas_inverno = comp_inverno['Medal'].value_counts().sum()

media_medalha_comp_verao = (num_medalhas_verao)/(num_comp_verao)
media_medalha_comp_inverno = (num_medalhas_inverno)/(num_comp_inverno)

texto = (f"Nesses últimos 120 anos tivemos {num_comp_verao} competições de verão e "
         f"{num_comp_inverno} competições de inverno.\nForam distribuídas "
         f"{num_medalhas_verao + num_medalhas_inverno} medalhas, sendo "
         f"{num_medalhas_verao} nas competições de verão e "
         f"{num_medalhas_inverno} nas competições de inverno.\nNa média, "
         f"são distribuídas {media_medalha_comp_verao:.0f} medalhas por competição no verão e "
         f"{media_medalha_comp_inverno:.0f} medalhas por competição no inverno.")

medalhas_por_ano = mesclado.groupby(['Year', 'Season'])['Season'].value_counts().unstack().fillna(0).astype(int)
plt.figure(figsize=(14, 8))
medalhas_por_ano.plot(kind='area', stacked=False, figsize=(14, 8))

# Adicionar títulos e rótulos
plt.title('s')
plt.xlabel('Ano')
plt.ylabel('Número de Medalhas')
plt.legend(title='Temporada')
plt.grid(False)

plt.text(1890, max(medalhas_por_ano.sum(axis=1) - 1500),
        texto, fontsize=12, fontfamily='serif',
        bbox=dict(facecolor='white', alpha=0.5),
        )

medalhas_por_ano
 111:
comp_verao = mesclado[mesclado['Season']=='Summer']   
comp_inverno = mesclado[mesclado['Season']=='Winter']  

num_comp_verao = comp_verao['Year'].nunique()           
num_comp_inverno = comp_inverno['Year'].nunique()     

comp_verao = comp_verao[comp_verao['Medal'] != 'NA']
comp_inverno = comp_inverno[comp_inverno['Medal'] != 'NA']

num_medalhas_verao = comp_verao['Medal'].value_counts().sum()
num_medalhas_inverno = comp_inverno['Medal'].value_counts().sum()

media_medalha_comp_verao = (num_medalhas_verao)/(num_comp_verao)
media_medalha_comp_inverno = (num_medalhas_inverno)/(num_comp_inverno)

texto = (f"Nesses últimos 120 anos tivemos {num_comp_verao} competições de verão e "
         f"{num_comp_inverno} competições de inverno.\nForam distribuídas "
         f"{num_medalhas_verao + num_medalhas_inverno} medalhas, sendo "
         f"{num_medalhas_verao} nas competições de verão e "
         f"{num_medalhas_inverno} nas competições de inverno.\nNa média, "
         f"são distribuídas {media_medalha_comp_verao:.0f} medalhas por competição no verão e "
         f"{media_medalha_comp_inverno:.0f} medalhas por competição no inverno.")

medalhas_por_ano = mesclado.groupby(['Year', 'Season'])['Season'].value_counts().unstack().fillna(0).astype(int)
plt.figure(figsize=(14, 8))
medalhas_por_ano.plot(kind='area', stacked=False, figsize=(14, 8))

# Adicionar títulos e rótulos
plt.title('s')
plt.xlabel('Ano')
plt.ylabel('Número de Medalhas')
plt.legend(title='Temporada')
plt.grid(False)

plt.text(1890, max(medalhas_por_ano.sum(axis=1) - 1500),
        texto, fontsize=12, fontfamily='serif',
        bbox=dict(facecolor='white', alpha=0.5),
        )
 112:
comp_verao = mesclado[mesclado['Season']=='Summer']   
comp_inverno = mesclado[mesclado['Season']=='Winter']  

num_comp_verao = comp_verao['Year'].nunique()           
num_comp_inverno = comp_inverno['Year'].nunique()     

comp_verao = comp_verao[comp_verao['Medal'] != 'NA']
comp_inverno = comp_inverno[comp_inverno['Medal'] != 'NA']

num_medalhas_verao = comp_verao['Medal'].value_counts().sum()
num_medalhas_inverno = comp_inverno['Medal'].value_counts().sum()

media_medalha_comp_verao = (num_medalhas_verao)/(num_comp_verao)
media_medalha_comp_inverno = (num_medalhas_inverno)/(num_comp_inverno)

texto = (f"Nesses últimos 120 anos tivemos {num_comp_verao} competições de verão e "
         f"{num_comp_inverno} competições de inverno.\nForam distribuídas "
         f"{num_medalhas_verao + num_medalhas_inverno} medalhas, sendo "
         f"{num_medalhas_verao} nas competições de verão e "
         f"{num_medalhas_inverno} nas competições de inverno.\nNa média, "
         f"são distribuídas {media_medalha_comp_verao:.0f} medalhas por competição no verão e "
         f"{media_medalha_comp_inverno:.0f} medalhas por competição no inverno.")

medalhas_por_ano = mesclado.groupby(['Year', 'Medal'])['Medal'].value_counts().unstack().fillna(0).astype(int)
plt.figure(figsize=(14, 8))
medalhas_por_ano.plot(kind='area', stacked=False, figsize=(14, 8))

# Adicionar títulos e rótulos
plt.title('s')
plt.xlabel('Ano')
plt.ylabel('Número de Medalhas')
plt.legend(title='Temporada')
plt.grid(False)

plt.text(1890, max(medalhas_por_ano.sum(axis=1) - 1500),
        texto, fontsize=12, fontfamily='serif',
        bbox=dict(facecolor='white', alpha=0.5),
        )
 113:
comp_verao = mesclado[mesclado['Season']=='Summer']   
comp_inverno = mesclado[mesclado['Season']=='Winter']  

num_comp_verao = comp_verao['Year'].nunique()           
num_comp_inverno = comp_inverno['Year'].nunique()     

comp_verao = comp_verao[comp_verao['Medal'] != 'NA']
comp_inverno = comp_inverno[comp_inverno['Medal'] != 'NA']

num_medalhas_verao = comp_verao['Medal'].value_counts().sum()
num_medalhas_inverno = comp_inverno['Medal'].value_counts().sum()

media_medalha_comp_verao = (num_medalhas_verao)/(num_comp_verao)
media_medalha_comp_inverno = (num_medalhas_inverno)/(num_comp_inverno)

texto = (f"Nesses últimos 120 anos tivemos {num_comp_verao} competições de verão e "
         f"{num_comp_inverno} competições de inverno.\nForam distribuídas "
         f"{num_medalhas_verao + num_medalhas_inverno} medalhas, sendo "
         f"{num_medalhas_verao} nas competições de verão e "
         f"{num_medalhas_inverno} nas competições de inverno.\nNa média, "
         f"são distribuídas {media_medalha_comp_verao:.0f} medalhas por competição no verão e "
         f"{media_medalha_comp_inverno:.0f} medalhas por competição no inverno.")

medalhas_por_ano = mesclado.groupby(['Year', 'Medal'])['Medal'].value_counts().unstack().fillna(0).astype(int)
plt.figure(figsize=(14, 8))
medalhas_por_ano.plot(kind='area', stacked=False, figsize=(14, 8))

# Adicionar títulos e rótulos
plt.title('s')
plt.xlabel('Ano')
plt.ylabel('Número de Medalhas')
plt.legend(title='Temporada')
plt.grid(False)

plt.text(1890, max(medalhas_por_ano.sum(axis=1) - 1500),
        texto, fontsize=12, fontfamily='serif',
        bbox=dict(facecolor='white', alpha=0.5),
        )
medalhas_por_ano
 114:
comp_verao = mesclado[mesclado['Season']=='Summer']   
comp_inverno = mesclado[mesclado['Season']=='Winter']  

num_comp_verao = comp_verao['Year'].nunique()           
num_comp_inverno = comp_inverno['Year'].nunique()     

comp_verao = comp_verao[comp_verao['Medal'] != 'NA']
comp_inverno = comp_inverno[comp_inverno['Medal'] != 'NA']

num_medalhas_verao = comp_verao['Medal'].value_counts().sum()
num_medalhas_inverno = comp_inverno['Medal'].value_counts().sum()

media_medalha_comp_verao = (num_medalhas_verao)/(num_comp_verao)
media_medalha_comp_inverno = (num_medalhas_inverno)/(num_comp_inverno)

texto = (f"Nesses últimos 120 anos tivemos {num_comp_verao} competições de verão e "
         f"{num_comp_inverno} competições de inverno.\nForam distribuídas "
         f"{num_medalhas_verao + num_medalhas_inverno} medalhas, sendo "
         f"{num_medalhas_verao} nas competições de verão e "
         f"{num_medalhas_inverno} nas competições de inverno.\nNa média, "
         f"são distribuídas {media_medalha_comp_verao:.0f} medalhas por competição no verão e "
         f"{media_medalha_comp_inverno:.0f} medalhas por competição no inverno.")

medalhas_por_ano = mesclado.query('Sesion == Summer').groupby(['Year', 'Medal'])['Medal'].value_counts().unstack().fillna(0).astype(int)

plt.figure(figsize=(14, 8))
medalhas_por_ano.plot(kind='area', stacked=False, figsize=(14, 8))

# Adicionar títulos e rótulos
plt.title('s')
plt.xlabel('Ano')
plt.ylabel('Número de Medalhas')
plt.legend(title='Temporada')
plt.grid(False)

plt.text(1890, max(medalhas_por_ano.sum(axis=1) - 1500),
        texto, fontsize=12, fontfamily='serif',
        bbox=dict(facecolor='white', alpha=0.5),
        )
medalhas_por_ano
 115:
comp_verao = mesclado[mesclado['Season']=='Summer']   
comp_inverno = mesclado[mesclado['Season']=='Winter']  

num_comp_verao = comp_verao['Year'].nunique()           
num_comp_inverno = comp_inverno['Year'].nunique()     

comp_verao = comp_verao[comp_verao['Medal'] != 'NA']
comp_inverno = comp_inverno[comp_inverno['Medal'] != 'NA']

num_medalhas_verao = comp_verao['Medal'].value_counts().sum()
num_medalhas_inverno = comp_inverno['Medal'].value_counts().sum()

media_medalha_comp_verao = (num_medalhas_verao)/(num_comp_verao)
media_medalha_comp_inverno = (num_medalhas_inverno)/(num_comp_inverno)

texto = (f"Nesses últimos 120 anos tivemos {num_comp_verao} competições de verão e "
         f"{num_comp_inverno} competições de inverno.\nForam distribuídas "
         f"{num_medalhas_verao + num_medalhas_inverno} medalhas, sendo "
         f"{num_medalhas_verao} nas competições de verão e "
         f"{num_medalhas_inverno} nas competições de inverno.\nNa média, "
         f"são distribuídas {media_medalha_comp_verao:.0f} medalhas por competição no verão e "
         f"{media_medalha_comp_inverno:.0f} medalhas por competição no inverno.")

medalhas_por_ano = mesclado.query('Seasion == Summer').groupby(['Year', 'Medal'])['Medal'].value_counts().unstack().fillna(0).astype(int)

plt.figure(figsize=(14, 8))
medalhas_por_ano.plot(kind='area', stacked=False, figsize=(14, 8))

# Adicionar títulos e rótulos
plt.title('s')
plt.xlabel('Ano')
plt.ylabel('Número de Medalhas')
plt.legend(title='Temporada')
plt.grid(False)

plt.text(1890, max(medalhas_por_ano.sum(axis=1) - 1500),
        texto, fontsize=12, fontfamily='serif',
        bbox=dict(facecolor='white', alpha=0.5),
        )
medalhas_por_ano
 116:
comp_verao = mesclado[mesclado['Season']=='Summer']   
comp_inverno = mesclado[mesclado['Season']=='Winter']  

num_comp_verao = comp_verao['Year'].nunique()           
num_comp_inverno = comp_inverno['Year'].nunique()     

comp_verao = comp_verao[comp_verao['Medal'] != 'NA']
comp_inverno = comp_inverno[comp_inverno['Medal'] != 'NA']

num_medalhas_verao = comp_verao['Medal'].value_counts().sum()
num_medalhas_inverno = comp_inverno['Medal'].value_counts().sum()

media_medalha_comp_verao = (num_medalhas_verao)/(num_comp_verao)
media_medalha_comp_inverno = (num_medalhas_inverno)/(num_comp_inverno)

texto = (f"Nesses últimos 120 anos tivemos {num_comp_verao} competições de verão e "
         f"{num_comp_inverno} competições de inverno.\nForam distribuídas "
         f"{num_medalhas_verao + num_medalhas_inverno} medalhas, sendo "
         f"{num_medalhas_verao} nas competições de verão e "
         f"{num_medalhas_inverno} nas competições de inverno.\nNa média, "
         f"são distribuídas {media_medalha_comp_verao:.0f} medalhas por competição no verão e "
         f"{media_medalha_comp_inverno:.0f} medalhas por competição no inverno.")

medalhas_por_ano = mesclado.query('Season == Summer').groupby(['Year', 'Medal'])['Medal'].value_counts().unstack().fillna(0).astype(int)

plt.figure(figsize=(14, 8))
medalhas_por_ano.plot(kind='area', stacked=False, figsize=(14, 8))

# Adicionar títulos e rótulos
plt.title('s')
plt.xlabel('Ano')
plt.ylabel('Número de Medalhas')
plt.legend(title='Temporada')
plt.grid(False)

plt.text(1890, max(medalhas_por_ano.sum(axis=1) - 1500),
        texto, fontsize=12, fontfamily='serif',
        bbox=dict(facecolor='white', alpha=0.5),
        )
medalhas_por_ano
 117:
comp_verao = mesclado[mesclado['Season']=='Summer']   
comp_inverno = mesclado[mesclado['Season']=='Winter']  

num_comp_verao = comp_verao['Year'].nunique()           
num_comp_inverno = comp_inverno['Year'].nunique()     

comp_verao = comp_verao[comp_verao['Medal'] != 'NA']
comp_inverno = comp_inverno[comp_inverno['Medal'] != 'NA']

num_medalhas_verao = comp_verao['Medal'].value_counts().sum()
num_medalhas_inverno = comp_inverno['Medal'].value_counts().sum()

media_medalha_comp_verao = (num_medalhas_verao)/(num_comp_verao)
media_medalha_comp_inverno = (num_medalhas_inverno)/(num_comp_inverno)

texto = (f"Nesses últimos 120 anos tivemos {num_comp_verao} competições de verão e "
         f"{num_comp_inverno} competições de inverno.\nForam distribuídas "
         f"{num_medalhas_verao + num_medalhas_inverno} medalhas, sendo "
         f"{num_medalhas_verao} nas competições de verão e "
         f"{num_medalhas_inverno} nas competições de inverno.\nNa média, "
         f"são distribuídas {media_medalha_comp_verao:.0f} medalhas por competição no verão e "
         f"{media_medalha_comp_inverno:.0f} medalhas por competição no inverno.")

medalhas_por_ano = mesclado.query('Season == "Summer"').groupby(['Year', 'Medal'])['Medal'].value_counts().unstack().fillna(0).astype(int)

plt.figure(figsize=(14, 8))
medalhas_por_ano.plot(kind='area', stacked=False, figsize=(14, 8))

# Adicionar títulos e rótulos
plt.title('s')
plt.xlabel('Ano')
plt.ylabel('Número de Medalhas')
plt.legend(title='Temporada')
plt.grid(False)

plt.text(1890, max(medalhas_por_ano.sum(axis=1) - 1500),
        texto, fontsize=12, fontfamily='serif',
        bbox=dict(facecolor='white', alpha=0.5),
        )
medalhas_por_ano
 118:
comp_verao = mesclado[mesclado['Season']=='Summer']   
comp_inverno = mesclado[mesclado['Season']=='Winter']  

num_comp_verao = comp_verao['Year'].nunique()           
num_comp_inverno = comp_inverno['Year'].nunique()     

comp_verao = comp_verao[comp_verao['Medal'] != 'NA']
comp_inverno = comp_inverno[comp_inverno['Medal'] != 'NA']

num_medalhas_verao = comp_verao['Medal'].value_counts().sum()
num_medalhas_inverno = comp_inverno['Medal'].value_counts().sum()

media_medalha_comp_verao = (num_medalhas_verao)/(num_comp_verao)
media_medalha_comp_inverno = (num_medalhas_inverno)/(num_comp_inverno)

texto = (f"Nesses últimos 120 anos tivemos {num_comp_verao} competições de verão e "
         f"{num_comp_inverno} competições de inverno.\nForam distribuídas "
         f"{num_medalhas_verao + num_medalhas_inverno} medalhas, sendo "
         f"{num_medalhas_verao} nas competições de verão e "
         f"{num_medalhas_inverno} nas competições de inverno.\nNa média, "
         f"são distribuídas {media_medalha_comp_verao:.0f} medalhas por competição no verão e "
         f"{media_medalha_comp_inverno:.0f} medalhas por competição no inverno.")

medalhas_por_ano = mesclado.query('Season == "Summer"').groupby(['Year', 'Medal'])['Medal'].value_counts().unstack().fillna(0).astype(int)

plt.figure(figsize=(14, 8))
medalhas_por_ano.plot(kind='area', stacked=False, figsize=(14, 8))

# Adicionar títulos e rótulos
plt.title('s')
plt.xlabel('Ano')
plt.ylabel('Número de Medalhas')
plt.legend(title='Temporada')
plt.grid(False)

plt.text(1890, max(medalhas_por_ano.sum(axis=1) - 1500),
        texto, fontsize=12, fontfamily='serif',
        bbox=dict(facecolor='white', alpha=0.5),
        )
 119:
comp_verao = mesclado[mesclado['Season']=='Summer']   
comp_inverno = mesclado[mesclado['Season']=='Winter']  

num_comp_verao = comp_verao['Year'].nunique()           
num_comp_inverno = comp_inverno['Year'].nunique()     

comp_verao = comp_verao[comp_verao['Medal'] != 'NA']
comp_inverno = comp_inverno[comp_inverno['Medal'] != 'NA']

num_medalhas_verao = comp_verao['Medal'].value_counts().sum()
num_medalhas_inverno = comp_inverno['Medal'].value_counts().sum()

media_medalha_comp_verao = (num_medalhas_verao)/(num_comp_verao)
media_medalha_comp_inverno = (num_medalhas_inverno)/(num_comp_inverno)

texto = (f"Nesses últimos 120 anos tivemos {num_comp_verao} competições de verão e "
         f"{num_comp_inverno} competições de inverno.\nForam distribuídas "
         f"{num_medalhas_verao + num_medalhas_inverno} medalhas, sendo "
         f"{num_medalhas_verao} nas competições de verão e "
         f"{num_medalhas_inverno} nas competições de inverno.\nNa média, "
         f"são distribuídas {media_medalha_comp_verao:.0f} medalhas por competição no verão e "
         f"{media_medalha_comp_inverno:.0f} medalhas por competição no inverno.")

medalhas_por_ano = mesclado.query('Season == "Summer"').groupby(['Year', 'Medal'])['Medal'].value_counts().unstack().fillna(0).astype(int)

plt.figure(figsize=(14, 8))
medalhas_por_ano.plot(kind='area', stacked=False, figsize=(14, 8))

# Adicionar títulos e rótulos
plt.title('s')
plt.xlabel('Ano')
plt.ylabel('Número de Medalhas')
plt.legend(title='Temporada')
plt.grid(False)

plt.text(1890, max(medalhas_por_ano.sum(axis=1)),
        texto, fontsize=12, fontfamily='serif',
        bbox=dict(facecolor='white', alpha=0.5),
        )
 120:
comp_verao = mesclado[mesclado['Season']=='Summer']   
comp_inverno = mesclado[mesclado['Season']=='Winter']  

num_comp_verao = comp_verao['Year'].nunique()           
num_comp_inverno = comp_inverno['Year'].nunique()     

comp_verao = comp_verao[comp_verao['Medal'] != 'NA']
comp_inverno = comp_inverno[comp_inverno['Medal'] != 'NA']

num_medalhas_verao = comp_verao['Medal'].value_counts().sum()
num_medalhas_inverno = comp_inverno['Medal'].value_counts().sum()

media_medalha_comp_verao = (num_medalhas_verao)/(num_comp_verao)
media_medalha_comp_inverno = (num_medalhas_inverno)/(num_comp_inverno)

texto = (f"Nesses últimos 120 anos tivemos {num_comp_verao} competições de verão e "
         f"{num_comp_inverno} competições de inverno.\nForam distribuídas "
         f"{num_medalhas_verao + num_medalhas_inverno} medalhas, sendo "
         f"{num_medalhas_verao} nas competições de verão e "
         f"{num_medalhas_inverno} nas competições de inverno.\nNa média, "
         f"são distribuídas {media_medalha_comp_verao:.0f} medalhas por competição no verão e "
         f"{media_medalha_comp_inverno:.0f} medalhas por competição no inverno.")

medalhas_por_ano = mesclado.query('Season == "Summer"').groupby(['Year', 'Medal'])['Medal'].value_counts().unstack().fillna(0).astype(int)

plt.figure(figsize=(14, 8))
medalhas_por_ano.plot(kind='area', stacked=False, figsize=(14, 8))

# Adicionar títulos e rótulos
plt.title('s')
plt.xlabel('Ano')
plt.ylabel('Número de Medalhas')
plt.legend(title='Temporada')
plt.grid(False)

plt.text(1890, max(medalhas_por_ano.values),
        texto, fontsize=12, fontfamily='serif',
        bbox=dict(facecolor='white', alpha=0.5),
        )
 121:
comp_verao = mesclado[mesclado['Season']=='Summer']   
comp_inverno = mesclado[mesclado['Season']=='Winter']  

num_comp_verao = comp_verao['Year'].nunique()           
num_comp_inverno = comp_inverno['Year'].nunique()     

comp_verao = comp_verao[comp_verao['Medal'] != 'NA']
comp_inverno = comp_inverno[comp_inverno['Medal'] != 'NA']

num_medalhas_verao = comp_verao['Medal'].value_counts().sum()
num_medalhas_inverno = comp_inverno['Medal'].value_counts().sum()

media_medalha_comp_verao = (num_medalhas_verao)/(num_comp_verao)
media_medalha_comp_inverno = (num_medalhas_inverno)/(num_comp_inverno)

texto = (f"Nesses últimos 120 anos tivemos {num_comp_verao} competições de verão e "
         f"{num_comp_inverno} competições de inverno.\nForam distribuídas "
         f"{num_medalhas_verao + num_medalhas_inverno} medalhas, sendo "
         f"{num_medalhas_verao} nas competições de verão e "
         f"{num_medalhas_inverno} nas competições de inverno.\nNa média, "
         f"são distribuídas {media_medalha_comp_verao:.0f} medalhas por competição no verão e "
         f"{media_medalha_comp_inverno:.0f} medalhas por competição no inverno.")

medalhas_por_ano = mesclado.query('Season == "Summer"').groupby(['Year', 'Medal'])['Medal'].value_counts().unstack().fillna(0).astype(int)

plt.figure(figsize=(14, 8))
medalhas_por_ano.plot(kind='area', stacked=False, figsize=(14, 8))

# Adicionar títulos e rótulos
plt.title('s')
plt.xlabel('Ano')
plt.ylabel('Número de Medalhas')
plt.legend(title='Temporada')
plt.grid(False)

plt.text(1890, max(medalhas_por_ano.values()),
        texto, fontsize=12, fontfamily='serif',
        bbox=dict(facecolor='white', alpha=0.5),
        )
 122:
comp_verao = mesclado[mesclado['Season']=='Summer']   
comp_inverno = mesclado[mesclado['Season']=='Winter']  

num_comp_verao = comp_verao['Year'].nunique()           
num_comp_inverno = comp_inverno['Year'].nunique()     

comp_verao = comp_verao[comp_verao['Medal'] != 'NA']
comp_inverno = comp_inverno[comp_inverno['Medal'] != 'NA']

num_medalhas_verao = comp_verao['Medal'].value_counts().sum()
num_medalhas_inverno = comp_inverno['Medal'].value_counts().sum()

media_medalha_comp_verao = (num_medalhas_verao)/(num_comp_verao)
media_medalha_comp_inverno = (num_medalhas_inverno)/(num_comp_inverno)

texto = (f"Nesses últimos 120 anos tivemos {num_comp_verao} competições de verão e "
         f"{num_comp_inverno} competições de inverno.\nForam distribuídas "
         f"{num_medalhas_verao + num_medalhas_inverno} medalhas, sendo "
         f"{num_medalhas_verao} nas competições de verão e "
         f"{num_medalhas_inverno} nas competições de inverno.\nNa média, "
         f"são distribuídas {media_medalha_comp_verao:.0f} medalhas por competição no verão e "
         f"{media_medalha_comp_inverno:.0f} medalhas por competição no inverno.")

medalhas_por_ano = mesclado.query('Season == "Summer"').groupby(['Year', 'Medal'])['Medal'].value_counts().unstack().fillna(0).astype(int)

plt.figure(figsize=(14, 8))
medalhas_por_ano.plot(kind='area', stacked=False, figsize=(14, 8))

# Adicionar títulos e rótulos
plt.title('s')
plt.xlabel('Ano')
plt.ylabel('Número de Medalhas')
plt.legend(title='Temporada')
plt.grid(False)

plt.text(1890, max(medalhas_por_ano.values.all()),
        texto, fontsize=12, fontfamily='serif',
        bbox=dict(facecolor='white', alpha=0.5),
        )
 123:
comp_verao = mesclado[mesclado['Season']=='Summer']   
comp_inverno = mesclado[mesclado['Season']=='Winter']  

num_comp_verao = comp_verao['Year'].nunique()           
num_comp_inverno = comp_inverno['Year'].nunique()     

comp_verao = comp_verao[comp_verao['Medal'] != 'NA']
comp_inverno = comp_inverno[comp_inverno['Medal'] != 'NA']

num_medalhas_verao = comp_verao['Medal'].value_counts().sum()
num_medalhas_inverno = comp_inverno['Medal'].value_counts().sum()

media_medalha_comp_verao = (num_medalhas_verao)/(num_comp_verao)
media_medalha_comp_inverno = (num_medalhas_inverno)/(num_comp_inverno)

texto = (f"Nesses últimos 120 anos tivemos {num_comp_verao} competições de verão e "
         f"{num_comp_inverno} competições de inverno.\nForam distribuídas "
         f"{num_medalhas_verao + num_medalhas_inverno} medalhas, sendo "
         f"{num_medalhas_verao} nas competições de verão e "
         f"{num_medalhas_inverno} nas competições de inverno.\nNa média, "
         f"são distribuídas {media_medalha_comp_verao:.0f} medalhas por competição no verão e "
         f"{media_medalha_comp_inverno:.0f} medalhas por competição no inverno.")

medalhas_por_ano = mesclado.query('Season == "Summer"').groupby(['Year', 'Medal'])['Medal'].value_counts().unstack().fillna(0).astype(int)

plt.figure(figsize=(14, 8))
medalhas_por_ano.plot(kind='area', stacked=False, figsize=(14, 8))

# Adicionar títulos e rótulos
plt.title('s')
plt.xlabel('Ano')
plt.ylabel('Número de Medalhas')
plt.legend(title='Temporada')
plt.grid(False)

plt.text(1890, max(medalhas_por_ano),
        texto, fontsize=12, fontfamily='serif',
        bbox=dict(facecolor='white', alpha=0.5),
        )
 124:
comp_verao = mesclado[mesclado['Season']=='Summer']   
comp_inverno = mesclado[mesclado['Season']=='Winter']  

num_comp_verao = comp_verao['Year'].nunique()           
num_comp_inverno = comp_inverno['Year'].nunique()     

comp_verao = comp_verao[comp_verao['Medal'] != 'NA']
comp_inverno = comp_inverno[comp_inverno['Medal'] != 'NA']

num_medalhas_verao = comp_verao['Medal'].value_counts().sum()
num_medalhas_inverno = comp_inverno['Medal'].value_counts().sum()

media_medalha_comp_verao = (num_medalhas_verao)/(num_comp_verao)
media_medalha_comp_inverno = (num_medalhas_inverno)/(num_comp_inverno)

texto = (f"Nesses últimos 120 anos tivemos {num_comp_verao} competições de verão e "
         f"{num_comp_inverno} competições de inverno.\nForam distribuídas "
         f"{num_medalhas_verao + num_medalhas_inverno} medalhas, sendo "
         f"{num_medalhas_verao} nas competições de verão e "
         f"{num_medalhas_inverno} nas competições de inverno.\nNa média, "
         f"são distribuídas {media_medalha_comp_verao:.0f} medalhas por competição no verão e "
         f"{media_medalha_comp_inverno:.0f} medalhas por competição no inverno.")

medalhas_por_ano = mesclado.query('Season == "Summer"').groupby(['Year', 'Medal'])['Medal'].value_counts().unstack().fillna(0).astype(int)

plt.figure(figsize=(14, 8))
medalhas_por_ano.plot(kind='area', stacked=False, figsize=(14, 8))

# Adicionar títulos e rótulos
plt.title('s')
plt.xlabel('Ano')
plt.ylabel('Número de Medalhas')
plt.legend(title='Temporada')
plt.grid(False)

plt.text(1890, max(medalhas_por_ano.sum(axis=1)),
        texto, fontsize=12, fontfamily='serif',
        bbox=dict(facecolor='white', alpha=0.5),
        )
 125:
comp_verao = mesclado[mesclado['Season']=='Summer']   
comp_inverno = mesclado[mesclado['Season']=='Winter']  

num_comp_verao = comp_verao['Year'].nunique()           
num_comp_inverno = comp_inverno['Year'].nunique()     

comp_verao = comp_verao[comp_verao['Medal'] != 'NA']
comp_inverno = comp_inverno[comp_inverno['Medal'] != 'NA']

num_medalhas_verao = comp_verao['Medal'].value_counts().sum()
num_medalhas_inverno = comp_inverno['Medal'].value_counts().sum()

media_medalha_comp_verao = (num_medalhas_verao)/(num_comp_verao)
media_medalha_comp_inverno = (num_medalhas_inverno)/(num_comp_inverno)

texto = (f"Nesses últimos 120 anos tivemos {num_comp_verao} competições de verão e "
         f"{num_comp_inverno} competições de inverno.\nForam distribuídas "
         f"{num_medalhas_verao + num_medalhas_inverno} medalhas, sendo "
         f"{num_medalhas_verao} nas competições de verão e "
         f"{num_medalhas_inverno} nas competições de inverno.\nNa média, "
         f"são distribuídas {media_medalha_comp_verao:.0f} medalhas por competição no verão e "
         f"{media_medalha_comp_inverno:.0f} medalhas por competição no inverno.")

medalhas_por_ano = mesclado.query('Season == "Summer"').groupby(['Year', 'Medal'])['Medal'].value_counts().unstack().fillna(0).astype(int)

plt.figure(figsize=(14, 8))
medalhas_por_ano.plot(kind='area', stacked=False, figsize=(14, 8))

# Adicionar títulos e rótulos
plt.title('s')
plt.xlabel('Ano')
plt.ylabel('Número de Medalhas')
plt.legend(title='Temporada')
plt.grid(False)

plt.text(1890, 1000,
        texto, fontsize=12, fontfamily='serif',
        bbox=dict(facecolor='white', alpha=0.5),
        )
 126:
comp_verao = mesclado[mesclado['Season']=='Summer']   
comp_inverno = mesclado[mesclado['Season']=='Winter']  

num_comp_verao = comp_verao['Year'].nunique()           
num_comp_inverno = comp_inverno['Year'].nunique()     

comp_verao = comp_verao[comp_verao['Medal'] != 'NA']
comp_inverno = comp_inverno[comp_inverno['Medal'] != 'NA']

num_medalhas_verao = comp_verao['Medal'].value_counts().sum()
num_medalhas_inverno = comp_inverno['Medal'].value_counts().sum()

media_medalha_comp_verao = (num_medalhas_verao)/(num_comp_verao)
media_medalha_comp_inverno = (num_medalhas_inverno)/(num_comp_inverno)

texto = (f"Nesses últimos 120 anos tivemos {num_comp_verao} competições de verão e "
         f"{num_comp_inverno} competições de inverno.\nForam distribuídas "
         f"{num_medalhas_verao + num_medalhas_inverno} medalhas, sendo "
         f"{num_medalhas_verao} nas competições de verão e "
         f"{num_medalhas_inverno} nas competições de inverno.\nNa média, "
         f"são distribuídas {media_medalha_comp_verao:.0f} medalhas por competição no verão e "
         f"{media_medalha_comp_inverno:.0f} medalhas por competição no inverno.")

medalhas_por_ano = mesclado.query('Season == "Summer"').groupby(['Year', 'Medal'])['Medal'].value_counts().unstack().fillna(0).astype(int)

plt.figure(figsize=(14, 8))
medalhas_por_ano.plot(kind='area', stacked=False, figsize=(14, 8))

# Adicionar títulos e rótulos
plt.title('s')
plt.xlabel('Ano')
plt.ylabel('Número de Medalhas')
plt.legend(title='Temporada')
plt.grid(False)

plt.text(1890, 800,
        texto, fontsize=12, fontfamily='serif',
        bbox=dict(facecolor='white', alpha=0.5),
        )
 127:
comp_verao = mesclado[mesclado['Season']=='Summer']   
comp_inverno = mesclado[mesclado['Season']=='Winter']  

num_comp_verao = comp_verao['Year'].nunique()           
num_comp_inverno = comp_inverno['Year'].nunique()     

comp_verao = comp_verao[comp_verao['Medal'] != 'NA']
comp_inverno = comp_inverno[comp_inverno['Medal'] != 'NA']

num_medalhas_verao = comp_verao['Medal'].value_counts().sum()
num_medalhas_inverno = comp_inverno['Medal'].value_counts().sum()

media_medalha_comp_verao = (num_medalhas_verao)/(num_comp_verao)
media_medalha_comp_inverno = (num_medalhas_inverno)/(num_comp_inverno)

texto = (f"Nesses últimos 120 anos tivemos {num_comp_verao} competições de verão e "
         f"{num_comp_inverno} competições de inverno.\nForam distribuídas "
         f"{num_medalhas_verao + num_medalhas_inverno} medalhas, sendo "
         f"{num_medalhas_verao} nas competições de verão e "
         f"{num_medalhas_inverno} nas competições de inverno.\nNa média, "
         f"são distribuídas {media_medalha_comp_verao:.0f} medalhas por competição no verão e "
         f"{media_medalha_comp_inverno:.0f} medalhas por competição no inverno.")

medalhas_por_ano_verao = mesclado.query('Season == "Summer"').groupby(['Year', 'Medal'])['Medal'].value_counts().unstack().fillna(0).astype(int)
medalhas_por_ano_inverno = mesclado.query('Season == "Winter"').groupby(['Year', 'Medal'])['Medal'].value_counts().unstack().fillna(0).astype(int)

plt.figure(figsize=(14, 8))
medalhas_por_ano_verao.plot(kind='area', stacked=False, figsize=(14, 8))
medalhas_por_ano_inverno.plot(kind='area', stacked=False, figsize=(14, 8))

# Adicionar títulos e rótulos
plt.title('s')
plt.xlabel('Ano')
plt.ylabel('Número de Medalhas')
plt.legend(title='Temporada')
plt.grid(False)

plt.text(1890, 800,
        texto, fontsize=12, fontfamily='serif',
        bbox=dict(facecolor='white', alpha=0.5),
        )
 128:
comp_verao = mesclado[mesclado['Season']=='Summer']   
comp_inverno = mesclado[mesclado['Season']=='Winter']  

num_comp_verao = comp_verao['Year'].nunique()           
num_comp_inverno = comp_inverno['Year'].nunique()     

comp_verao = comp_verao[comp_verao['Medal'] != 'NA']
comp_inverno = comp_inverno[comp_inverno['Medal'] != 'NA']

num_medalhas_verao = comp_verao['Medal'].value_counts().sum()
num_medalhas_inverno = comp_inverno['Medal'].value_counts().sum()

media_medalha_comp_verao = (num_medalhas_verao)/(num_comp_verao)
media_medalha_comp_inverno = (num_medalhas_inverno)/(num_comp_inverno)

texto = (f"Nesses últimos 120 anos tivemos {num_comp_verao} competições de verão e "
         f"{num_comp_inverno} competições de inverno.\nForam distribuídas "
         f"{num_medalhas_verao + num_medalhas_inverno} medalhas, sendo "
         f"{num_medalhas_verao} nas competições de verão e "
         f"{num_medalhas_inverno} nas competições de inverno.\nNa média, "
         f"são distribuídas {media_medalha_comp_verao:.0f} medalhas por competição no verão e "
         f"{media_medalha_comp_inverno:.0f} medalhas por competição no inverno.")

medalhas_por_ano_verao = mesclado.query('Season == "Summer"').groupby(['Year', 'Medal'])['Medal'].value_counts().unstack().fillna(0).astype(int)
medalhas_por_ano_inverno = mesclado.query('Season == "Winter"').groupby(['Year', 'Medal'])['Medal'].value_counts().unstack().fillna(0).astype(int)

plt.figure(figsize=(14, 8))
medalhas_por_ano_verao.plot(kind='area', stacked=False, figsize=(14, 8))

plt.title('s')
plt.xlabel('Ano')
plt.ylabel('Número de Medalhas')
plt.legend(title='Temporada')
plt.grid(False)

plt.text(1890, 800,
        texto, fontsize=12, fontfamily='serif',
        bbox=dict(facecolor='white', alpha=0.5),
        )

medalhas_por_ano_inverno.plot(kind='area', stacked=False, figsize=(14, 8))
 129:
comp_verao = mesclado[mesclado['Season']=='Summer']   
comp_inverno = mesclado[mesclado['Season']=='Winter']  

num_comp_verao = comp_verao['Year'].nunique()           
num_comp_inverno = comp_inverno['Year'].nunique()     

comp_verao = comp_verao[comp_verao['Medal'] != 'NA']
comp_inverno = comp_inverno[comp_inverno['Medal'] != 'NA']

num_medalhas_verao = comp_verao['Medal'].value_counts().sum()
num_medalhas_inverno = comp_inverno['Medal'].value_counts().sum()

media_medalha_comp_verao = (num_medalhas_verao)/(num_comp_verao)
media_medalha_comp_inverno = (num_medalhas_inverno)/(num_comp_inverno)

texto = (f"Nesses últimos 120 anos tivemos {num_comp_verao} competições de verão e "
         f"{num_comp_inverno} competições de inverno.\nForam distribuídas "
         f"{num_medalhas_verao + num_medalhas_inverno} medalhas, sendo "
         f"{num_medalhas_verao} nas competições de verão e "
         f"{num_medalhas_inverno} nas competições de inverno.\nNa média, "
         f"são distribuídas {media_medalha_comp_verao:.0f} medalhas por competição no verão e "
         f"{media_medalha_comp_inverno:.0f} medalhas por competição no inverno.")

medalhas_por_ano_verao = mesclado.query('Season == "Summer"').groupby(['Year', 'Medal'])['Medal'].value_counts().unstack().fillna(0).astype(int)
medalhas_por_ano_inverno = mesclado.query('Season == "Winter"').groupby(['Year', 'Medal'])['Medal'].value_counts().unstack().fillna(0).astype(int)

# Criar subplots
fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(14, 16))

# Plotar o gráfico de área para competições de verão
medalhas_por_ano_verao.plot(kind='area', stacked=False, ax=ax1)
ax1.set_title('Competições de Verão')
ax1.set_xlabel('Ano')
ax1.set_ylabel('Número de Medalhas')
ax1.legend(title='Medalha')
ax1.grid(False)
ax1.text(0.5, 0.95, texto, fontsize=12, ha='center', va='top', bbox=dict(facecolor='white', alpha=0.5), transform=ax1.transAxes)

# Plotar o gráfico de área para competições de inverno
medalhas_por_ano_inverno.plot(kind='area', stacked=False, ax=ax2)
ax2.set_title('Competições de Inverno')
ax2.set_xlabel('Ano')
ax2.set_ylabel('Número de Medalhas')
ax2.legend(title='Medalha')
ax2.grid(False)

# Ajustar layout e mostrar o gráfico
plt.tight_layout()
plt.show()
 130:
comp_verao = mesclado[mesclado['Season']=='Summer']   
comp_inverno = mesclado[mesclado['Season']=='Winter']  

num_comp_verao = comp_verao['Year'].nunique()           
num_comp_inverno = comp_inverno['Year'].nunique()     

comp_verao = comp_verao[comp_verao['Medal'] != 'NA']
comp_inverno = comp_inverno[comp_inverno['Medal'] != 'NA']

num_medalhas_verao = comp_verao['Medal'].value_counts().sum()
num_medalhas_inverno = comp_inverno['Medal'].value_counts().sum()

media_medalha_comp_verao = (num_medalhas_verao)/(num_comp_verao)
media_medalha_comp_inverno = (num_medalhas_inverno)/(num_comp_inverno)

medalhas_por_ano_verao = mesclado.query('Season == "Summer"').groupby(['Year', 'Medal'])['Medal'].value_counts().unstack().fillna(0).astype(int)
medalhas_por_ano_inverno = mesclado.query('Season == "Winter"').groupby(['Year', 'Medal'])['Medal'].value_counts().unstack().fillna(0).astype(int)

texto = (f"Nesses últimos 120 anos tivemos {num_comp_verao} competições de verão e "
         f"{num_comp_inverno} competições de inverno.\nForam distribuídas "
         f"{num_medalhas_verao + num_medalhas_inverno} medalhas, sendo "
         f"{num_medalhas_verao} nas competições de verão e "
         f"{num_medalhas_inverno} nas competições de inverno.\nNa média, "
         f"são distribuídas {media_medalha_comp_verao:.0f} medalhas por competição no verão e "
         f"{media_medalha_comp_inverno:.0f} medalhas por competição no inverno.")

fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(14, 16))

medalhas_por_ano_verao.plot(kind='area', stacked=False, ax=ax1)
ax1.set_title('Competições de Verão')
ax1.set_xlabel('Ano')
ax1.set_ylabel('Número de Medalhas')
ax1.legend(title='Medalha')
ax1.grid(False)
plt.text(0.5, 0.95, texto, fontsize=12, ha='center', va='top', bbox=dict(facecolor='white', alpha=0.5), transform=ax1.transAxes)

# Plotar o gráfico de área para competições de inverno
medalhas_por_ano_inverno.plot(kind='area', stacked=False, ax=ax2)
ax2.set_title('Competições de Inverno')
ax2.set_xlabel('Ano')
ax2.set_ylabel('Número de Medalhas')
ax2.legend(title='Medalha')
ax2.grid(False)

# Ajustar layout e mostrar o gráfico
plt.tight_layout()
 131:
comp_verao = mesclado[mesclado['Season']=='Summer']   
comp_inverno = mesclado[mesclado['Season']=='Winter']  

num_comp_verao = comp_verao['Year'].nunique()           
num_comp_inverno = comp_inverno['Year'].nunique()     

comp_verao = comp_verao[comp_verao['Medal'] != 'NA']
comp_inverno = comp_inverno[comp_inverno['Medal'] != 'NA']

num_medalhas_verao = comp_verao['Medal'].value_counts().sum()
num_medalhas_inverno = comp_inverno['Medal'].value_counts().sum()

media_medalha_comp_verao = (num_medalhas_verao)/(num_comp_verao)
media_medalha_comp_inverno = (num_medalhas_inverno)/(num_comp_inverno)

medalhas_por_ano_verao = mesclado.query('Season == "Summer"').groupby(['Year', 'Medal'])['Medal'].value_counts().unstack().fillna(0).astype(int)
medalhas_por_ano_inverno = mesclado.query('Season == "Winter"').groupby(['Year', 'Medal'])['Medal'].value_counts().unstack().fillna(0).astype(int)

texto = (f"Nesses últimos 120 anos tivemos {num_comp_verao} competições de verão e "
         f"{num_comp_inverno} competições de inverno.\nForam distribuídas "
         f"{num_medalhas_verao + num_medalhas_inverno} medalhas, sendo "
         f"{num_medalhas_verao} nas competições de verão e "
         f"{num_medalhas_inverno} nas competições de inverno.\nNa média, "
         f"são distribuídas {media_medalha_comp_verao:.0f} medalhas por competição no verão e "
         f"{media_medalha_comp_inverno:.0f} medalhas por competição no inverno.")

fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(14, 16))

medalhas_por_ano_verao.plot(kind='area', stacked=False, ax=ax1)
ax1.set_title('Competições de Verão')
ax1.set_xlabel('Ano')
ax1.set_ylabel('Número de Medalhas')
ax1.legend(title='Medalha')
ax1.grid(False)
ax1.text(0.5, 0.95, texto, fontsize=12, ha='center', va='top', bbox=dict(facecolor='white', alpha=0.5), transform=ax1.transAxes)

# Plotar o gráfico de área para competições de inverno
medalhas_por_ano_inverno.plot(kind='area', stacked=False, ax=ax2)
ax2.set_title('Competições de Inverno')
ax2.set_xlabel('Ano')
ax2.set_ylabel('Número de Medalhas')
ax2.legend(title='Medalha')
ax2.grid(False)

# Ajustar layout e mostrar o gráfico
plt.tight_layout()
 132:
cores_douradas = ["#d4af37", "#ffd700", "#f0e68c"]
cores_medalhas = {'Gold': '#f0c05a', 'Silver': 'Lightgray', 'Bronze': '#a97142'}
cores_olimpicas = ["#4A90D9", "#F0E4A1", "#6D6E71", "#8BCC8C", "#FF5E5E", "#3A78C2", "#F7E5A5", "#8C8C8C", "#7ABF7A", "#FF4D4D", "#5D8AB4", "#F5D787", "#6D6E6E", "#9BCC9B", "#FF4C4C", "#3C8CC2", "#F7E7A2", "#7F7F7F", "#7EBF7E", "#FF6D6D"]


mapa_dourado = LinearSegmentedColormap.from_list("golden", cores_douradas, N=100)
mapa_olimpico = LinearSegmentedColormap.from_list("olimpic", cores_olimpicas, N=100)
 133:
comp_verao = mesclado[mesclado['Season']=='Summer']   
comp_inverno = mesclado[mesclado['Season']=='Winter']  

num_comp_verao = comp_verao['Year'].nunique()           
num_comp_inverno = comp_inverno['Year'].nunique()     

comp_verao = comp_verao[comp_verao['Medal'] != 'NA']
comp_inverno = comp_inverno[comp_inverno['Medal'] != 'NA']

num_medalhas_verao = comp_verao['Medal'].value_counts().sum()
num_medalhas_inverno = comp_inverno['Medal'].value_counts().sum()

media_medalha_comp_verao = (num_medalhas_verao)/(num_comp_verao)
media_medalha_comp_inverno = (num_medalhas_inverno)/(num_comp_inverno)

medalhas_por_ano_verao = mesclado.query('Season == "Summer"').groupby(['Year', 'Medal'])['Medal'].value_counts().unstack().fillna(0).astype(int)
medalhas_por_ano_inverno = mesclado.query('Season == "Winter"').groupby(['Year', 'Medal'])['Medal'].value_counts().unstack().fillna(0).astype(int)

texto = (f"Nesses últimos 120 anos tivemos {num_comp_verao} competições de verão e "
         f"{num_comp_inverno} competições de inverno.\nForam distribuídas "
         f"{num_medalhas_verao + num_medalhas_inverno} medalhas, sendo "
         f"{num_medalhas_verao} nas competições de verão e "
         f"{num_medalhas_inverno} nas competições de inverno.\nNa média, "
         f"são distribuídas {media_medalha_comp_verao:.0f} medalhas por competição no verão e "
         f"{media_medalha_comp_inverno:.0f} medalhas por competição no inverno.")

fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(14, 16))

medalhas_por_ano_verao.plot(kind='area', stacked=False, ax=ax1, color=[cores_medalhas[col] for col in medalhas_por_ano_verao.columns])
ax1.set_title('Competições de Verão')
ax1.set_xlabel('Ano')
ax1.set_ylabel('Número de Medalhas')
ax1.legend(title='Medalha')
ax1.grid(False)
ax1.text(0.5, 0.95, texto, fontsize=12, ha='center', va='top', bbox=dict(facecolor='white', alpha=0.5), transform=ax1.transAxes)

# Plotar o gráfico de área para competições de inverno
medalhas_por_ano_inverno.plot(kind='area', stacked=False, ax=ax2, color=[cores_medalhas[col] for col in medalhas_por_ano_verao.columns])
ax2.set_title('Competições de Inverno')
ax2.set_xlabel('Ano')
ax2.set_ylabel('Número de Medalhas')
ax2.legend(title='Medalha')
ax2.grid(False)

# Ajustar layout e mostrar o gráfico
plt.tight_layout()
 134:
comp_verao = mesclado[mesclado['Season']=='Summer']   
comp_inverno = mesclado[mesclado['Season']=='Winter']  

num_comp_verao = comp_verao['Year'].nunique()           
num_comp_inverno = comp_inverno['Year'].nunique()     

comp_verao = comp_verao[comp_verao['Medal'] != 'NA']
comp_inverno = comp_inverno[comp_inverno['Medal'] != 'NA']

num_medalhas_verao = comp_verao['Medal'].value_counts().sum()
num_medalhas_inverno = comp_inverno['Medal'].value_counts().sum()

media_medalha_comp_verao = (num_medalhas_verao)/(num_comp_verao)
media_medalha_comp_inverno = (num_medalhas_inverno)/(num_comp_inverno)

medalhas_por_ano_verao = mesclado.query('Season == "Summer"').groupby(['Year', 'Medal'])['Medal'].value_counts().unstack().fillna(0).astype(int)
medalhas_por_ano_inverno = mesclado.query('Season == "Winter"').groupby(['Year', 'Medal'])['Medal'].value_counts().unstack().fillna(0).astype(int)

texto = (f"Nesses últimos 120 anos tivemos {num_comp_verao} competições de verão e "
         f"{num_comp_inverno} competições de inverno.\nForam distribuídas "
         f"{num_medalhas_verao + num_medalhas_inverno} medalhas, sendo "
         f"{num_medalhas_verao} nas competições de verão e "
         f"{num_medalhas_inverno} nas competições de inverno.\nNa média, "
         f"são distribuídas {media_medalha_comp_verao:.0f} medalhas por competição no verão e "
         f"{media_medalha_comp_inverno:.0f} medalhas por competição no inverno.")

fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(14, 16))

medalhas_por_ano_verao.plot(kind='area', stacked=False, ax=ax1, color=[cores_medalhas[col] for col in medalhas_por_ano_verao.columns])
ax1.set_title('Competições de Verão')
ax1.set_xlabel('Ano')
ax1.set_ylabel('Número de Medalhas')
ax1.legend(title='Medalha')
ax1.grid(False)
ax1.text(0.5, 0, texto, fontsize=12, ha='center', va='top', bbox=dict(facecolor='white', alpha=0.5), transform=ax1.transAxes)

medalhas_por_ano_inverno.plot(kind='area', stacked=False, ax=ax2, color=[cores_medalhas[col] for col in medalhas_por_ano_verao.columns])
ax2.set_title('Competições de Inverno')
ax2.set_xlabel('Ano')
ax2.set_ylabel('Número de Medalhas')
ax2.legend(title='Medalha')
ax2.grid(False)

plt.tight_layout()
 135:
comp_verao = mesclado[mesclado['Season']=='Summer']   
comp_inverno = mesclado[mesclado['Season']=='Winter']  

num_comp_verao = comp_verao['Year'].nunique()           
num_comp_inverno = comp_inverno['Year'].nunique()     

comp_verao = comp_verao[comp_verao['Medal'] != 'NA']
comp_inverno = comp_inverno[comp_inverno['Medal'] != 'NA']

num_medalhas_verao = comp_verao['Medal'].value_counts().sum()
num_medalhas_inverno = comp_inverno['Medal'].value_counts().sum()

media_medalha_comp_verao = (num_medalhas_verao)/(num_comp_verao)
media_medalha_comp_inverno = (num_medalhas_inverno)/(num_comp_inverno)

medalhas_por_ano_verao = mesclado.query('Season == "Summer"').groupby(['Year', 'Medal'])['Medal'].value_counts().unstack().fillna(0).astype(int)
medalhas_por_ano_inverno = mesclado.query('Season == "Winter"').groupby(['Year', 'Medal'])['Medal'].value_counts().unstack().fillna(0).astype(int)

texto = (f"Nesses últimos 120 anos tivemos {num_comp_verao} competições de verão e "
         f"{num_comp_inverno} competições de inverno.\nForam distribuídas "
         f"{num_medalhas_verao + num_medalhas_inverno} medalhas, sendo "
         f"{num_medalhas_verao} nas competições de verão e "
         f"{num_medalhas_inverno} nas competições de inverno.\nNa média, "
         f"são distribuídas {media_medalha_comp_verao:.0f} medalhas por competição no verão e "
         f"{media_medalha_comp_inverno:.0f} medalhas por competição no inverno.")

fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(14, 16))

medalhas_por_ano_verao.plot(kind='area', stacked=False, ax=ax1, color=[cores_medalhas[col] for col in medalhas_por_ano_verao.columns])
ax1.set_title('Competições de Verão')
ax1.set_xlabel('Ano')
ax1.set_ylabel('Número de Medalhas')
ax1.legend(title='Medalha')
ax1.grid(False)
ax1.text(0.5, 1, texto, fontsize=12, ha='center', va='top', bbox=dict(facecolor='white', alpha=0.5), transform=ax1.transAxes)

medalhas_por_ano_inverno.plot(kind='area', stacked=False, ax=ax2, color=[cores_medalhas[col] for col in medalhas_por_ano_verao.columns])
ax2.set_title('Competições de Inverno')
ax2.set_xlabel('Ano')
ax2.set_ylabel('Número de Medalhas')
ax2.legend(title='Medalha')
ax2.grid(False)

plt.tight_layout()
 136:
comp_verao = mesclado[mesclado['Season']=='Summer']   
comp_inverno = mesclado[mesclado['Season']=='Winter']  

num_comp_verao = comp_verao['Year'].nunique()           
num_comp_inverno = comp_inverno['Year'].nunique()     

comp_verao = comp_verao[comp_verao['Medal'] != 'NA']
comp_inverno = comp_inverno[comp_inverno['Medal'] != 'NA']

num_medalhas_verao = comp_verao['Medal'].value_counts().sum()
num_medalhas_inverno = comp_inverno['Medal'].value_counts().sum()

media_medalha_comp_verao = (num_medalhas_verao)/(num_comp_verao)
media_medalha_comp_inverno = (num_medalhas_inverno)/(num_comp_inverno)

medalhas_por_ano_verao = mesclado.query('Season == "Summer"').groupby(['Year', 'Medal'])['Medal'].value_counts().unstack().fillna(0).astype(int)
medalhas_por_ano_inverno = mesclado.query('Season == "Winter"').groupby(['Year', 'Medal'])['Medal'].value_counts().unstack().fillna(0).astype(int)

texto = (f"Nesses últimos 120 anos tivemos {num_comp_verao} competições de verão e "
         f"{num_comp_inverno} competições de inverno.\nForam distribuídas "
         f"{num_medalhas_verao + num_medalhas_inverno} medalhas, sendo "
         f"{num_medalhas_verao} nas competições de verão e "
         f"{num_medalhas_inverno} nas competições de inverno.\nNa média, "
         f"são distribuídas {media_medalha_comp_verao:.0f} medalhas por competição no verão e "
         f"{media_medalha_comp_inverno:.0f} medalhas por competição no inverno.")

fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(14, 16))

medalhas_por_ano_verao.plot(kind='area', stacked=False, ax=ax1, color=[cores_medalhas[col] for col in medalhas_por_ano_verao.columns])
ax1.set_title('Competições de Verão')
ax1.set_xlabel('Ano')
ax1.set_ylabel('Número de Medalhas')
ax1.legend(title='Medalha')
ax1.grid(False)
ax1.text(0.5, 1.2, texto, fontsize=12, ha='center', va='top', bbox=dict(facecolor='white', alpha=0.5), transform=ax1.transAxes)

medalhas_por_ano_inverno.plot(kind='area', stacked=False, ax=ax2, color=[cores_medalhas[col] for col in medalhas_por_ano_verao.columns])
ax2.set_title('Competições de Inverno')
ax2.set_xlabel('Ano')
ax2.set_ylabel('Número de Medalhas')
ax2.legend(title='Medalha')
ax2.grid(False)

plt.tight_layout()
 137:
comp_verao = mesclado[mesclado['Season']=='Summer']   
comp_inverno = mesclado[mesclado['Season']=='Winter']  

num_comp_verao = comp_verao['Year'].nunique()           
num_comp_inverno = comp_inverno['Year'].nunique()     

comp_verao = comp_verao[comp_verao['Medal'] != 'NA']
comp_inverno = comp_inverno[comp_inverno['Medal'] != 'NA']

num_medalhas_verao = comp_verao['Medal'].value_counts().sum()
num_medalhas_inverno = comp_inverno['Medal'].value_counts().sum()

media_medalha_comp_verao = (num_medalhas_verao)/(num_comp_verao)
media_medalha_comp_inverno = (num_medalhas_inverno)/(num_comp_inverno)

medalhas_por_ano_verao = mesclado.query('Season == "Summer"').groupby(['Year', 'Medal'])['Medal'].value_counts().unstack().fillna(0).astype(int)
medalhas_por_ano_inverno = mesclado.query('Season == "Winter"').groupby(['Year', 'Medal'])['Medal'].value_counts().unstack().fillna(0).astype(int)

texto = (f"Nesses últimos 120 anos tivemos {num_comp_verao} competições de verão e "
         f"{num_comp_inverno} competições de inverno.\nForam distribuídas "
         f"{num_medalhas_verao + num_medalhas_inverno} medalhas, sendo "
         f"{num_medalhas_verao} nas competições de verão e "
         f"{num_medalhas_inverno} nas competições de inverno.\nNa média, "
         f"são distribuídas {media_medalha_comp_verao:.0f} medalhas por competição no verão e "
         f"{media_medalha_comp_inverno:.0f} medalhas por competição no inverno.")

fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(14, 16))

medalhas_por_ano_verao.plot(kind='area', stacked=False, ax=ax1, color=[cores_medalhas[col] for col in medalhas_por_ano_verao.columns])
ax1.set_title('Competições de Verão')
ax1.set_xlabel('Ano')
ax1.set_ylabel('Número de Medalhas')
ax1.legend(title='Medalha')
ax1.grid(False)
ax1.text(0.5, 1.1, texto, fontsize=12, ha='center', va='top', bbox=dict(facecolor='white', alpha=0.5), transform=ax1.transAxes)

medalhas_por_ano_inverno.plot(kind='area', stacked=False, ax=ax2, color=[cores_medalhas[col] for col in medalhas_por_ano_verao.columns])
ax2.set_title('Competições de Inverno')
ax2.set_xlabel('Ano')
ax2.set_ylabel('Número de Medalhas')
ax2.legend(title='Medalha')
ax2.grid(False)

plt.tight_layout()
 138:
comp_verao = mesclado[mesclado['Season']=='Summer']   
comp_inverno = mesclado[mesclado['Season']=='Winter']  

num_comp_verao = comp_verao['Year'].nunique()           
num_comp_inverno = comp_inverno['Year'].nunique()     

comp_verao = comp_verao[comp_verao['Medal'] != 'NA']
comp_inverno = comp_inverno[comp_inverno['Medal'] != 'NA']

num_medalhas_verao = comp_verao['Medal'].value_counts().sum()
num_medalhas_inverno = comp_inverno['Medal'].value_counts().sum()

media_medalha_comp_verao = (num_medalhas_verao)/(num_comp_verao)
media_medalha_comp_inverno = (num_medalhas_inverno)/(num_comp_inverno)

medalhas_por_ano_verao = mesclado.query('Season == "Summer"').groupby(['Year', 'Medal'])['Medal'].value_counts().unstack().fillna(0).astype(int)
medalhas_por_ano_inverno = mesclado.query('Season == "Winter"').groupby(['Year', 'Medal'])['Medal'].value_counts().unstack().fillna(0).astype(int)

texto = (f"Nesses últimos 120 anos tivemos {num_comp_verao} competições de verão e "
         f"{num_comp_inverno} competições de inverno.\nForam distribuídas "
         f"{num_medalhas_verao + num_medalhas_inverno} medalhas, sendo "
         f"{num_medalhas_verao} nas competições de verão e "
         f"{num_medalhas_inverno} nas competições de inverno.\nNa média, "
         f"são distribuídas {media_medalha_comp_verao:.0f} medalhas por competição no verão e "
         f"{media_medalha_comp_inverno:.0f} medalhas por competição no inverno.")

fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(14, 16))

medalhas_por_ano_verao.plot(kind='area', stacked=False, ax=ax1, color=[cores_medalhas[col] for col in medalhas_por_ano_verao.columns])
ax1.set_title('Competições de Verão')
ax1.set_xlabel('Ano')
ax1.set_ylabel('Número de Medalhas')
ax1.legend(title='Medalha')
ax1.grid(False)
ax1.text(0.5, 1.17, texto, fontsize=12, ha='center', va='top', bbox=dict(facecolor='white', alpha=0.5), transform=ax1.transAxes)

medalhas_por_ano_inverno.plot(kind='area', stacked=False, ax=ax2, color=[cores_medalhas[col] for col in medalhas_por_ano_verao.columns])
ax2.set_title('Competições de Inverno')
ax2.set_xlabel('Ano')
ax2.set_ylabel('Número de Medalhas')
ax2.legend(title='Medalha')
ax2.grid(False)

plt.tight_layout()
 139:
comp_verao = mesclado[mesclado['Season']=='Summer']   
comp_inverno = mesclado[mesclado['Season']=='Winter']  

num_comp_verao = comp_verao['Year'].nunique()           
num_comp_inverno = comp_inverno['Year'].nunique()     

comp_verao = comp_verao[comp_verao['Medal'] != 'NA']
comp_inverno = comp_inverno[comp_inverno['Medal'] != 'NA']

num_medalhas_verao = comp_verao['Medal'].value_counts().sum()
num_medalhas_inverno = comp_inverno['Medal'].value_counts().sum()

media_medalha_comp_verao = (num_medalhas_verao)/(num_comp_verao)
media_medalha_comp_inverno = (num_medalhas_inverno)/(num_comp_inverno)

medalhas_por_ano_verao = mesclado.query('Season == "Summer"').groupby(['Year', 'Medal'])['Medal'].value_counts().unstack().fillna(0).astype(int)
medalhas_por_ano_inverno = mesclado.query('Season == "Winter"').groupby(['Year', 'Medal'])['Medal'].value_counts().unstack().fillna(0).astype(int)

texto = (f"Nesses últimos 120 anos tivemos {num_comp_verao} competições de verão e "
         f"{num_comp_inverno} competições de inverno.\nForam distribuídas "
         f"{num_medalhas_verao + num_medalhas_inverno} medalhas, sendo "
         f"{num_medalhas_verao} nas competições de verão e "
         f"{num_medalhas_inverno} nas competições de inverno.\nNa média, "
         f"são distribuídas {media_medalha_comp_verao:.0f} medalhas por competição no verão e "
         f"{media_medalha_comp_inverno:.0f} medalhas por competição no inverno.")

fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(14, 16))

fig.patch.set_facecolor('white')
ax1.set_facecolor('white')
ax2.set_facecolor('white')

medalhas_por_ano_verao.plot(kind='area', stacked=False, ax=ax1, color=[cores_medalhas[col] for col in medalhas_por_ano_verao.columns])
ax1.set_title('Competições de Verão')
ax1.set_xlabel('Ano')
ax1.set_ylabel('Número de Medalhas')
ax1.legend(title='Medalha')
ax1.grid(False)
ax1.text(0.5, 1.17, texto, fontsize=12, ha='center', va='top', bbox=dict(facecolor='white', alpha=0.5), transform=ax1.transAxes)

medalhas_por_ano_inverno.plot(kind='area', stacked=False, ax=ax2, color=[cores_medalhas[col] for col in medalhas_por_ano_verao.columns])
ax2.set_title('Competições de Inverno')
ax2.set_xlabel('Ano')
ax2.set_ylabel('Número de Medalhas')
ax2.legend(title='Medalha')
ax2.grid(False)

plt.tight_layout()
 140:
comp_verao = mesclado[mesclado['Season']=='Summer']   
comp_inverno = mesclado[mesclado['Season']=='Winter']  

num_comp_verao = comp_verao['Year'].nunique()           
num_comp_inverno = comp_inverno['Year'].nunique()     

comp_verao = comp_verao[comp_verao['Medal'] != 'NA']
comp_inverno = comp_inverno[comp_inverno['Medal'] != 'NA']

num_medalhas_verao = comp_verao['Medal'].value_counts().sum()
num_medalhas_inverno = comp_inverno['Medal'].value_counts().sum()

media_medalha_comp_verao = (num_medalhas_verao)/(num_comp_verao)
media_medalha_comp_inverno = (num_medalhas_inverno)/(num_comp_inverno)

medalhas_por_ano_verao = mesclado.query('Season == "Summer"').groupby(['Year', 'Medal'])['Medal'].value_counts().unstack().fillna(0).astype(int)
medalhas_por_ano_inverno = mesclado.query('Season == "Winter"').groupby(['Year', 'Medal'])['Medal'].value_counts().unstack().fillna(0).astype(int)

texto = (f"Nesses últimos 120 anos tivemos {num_comp_verao} competições de verão e "
         f"{num_comp_inverno} competições de inverno.\nForam distribuídas "
         f"{num_medalhas_verao + num_medalhas_inverno} medalhas, sendo "
         f"{num_medalhas_verao} nas competições de verão e "
         f"{num_medalhas_inverno} nas competições de inverno.\nNa média, "
         f"são distribuídas {media_medalha_comp_verao:.0f} medalhas por competição no verão e "
         f"{media_medalha_comp_inverno:.0f} medalhas por competição no inverno.")

fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(14, 16))

fig.patch.set_facecolor('white')
ax1.set_facecolor('white')
ax2.set_facecolor('white')

medalhas_por_ano_verao.plot(kind='area', stacked=False, ax=ax1, color=[cores_medalhas[col] for col in medalhas_por_ano_verao.columns])
ax1.set_title('Competições de Verão')
ax1.set_xlabel('Ano')
ax1.set_ylabel('Número de Medalhas')
ax1.legend(title='Medalha')
ax1.grid(False)
ax1.text(0.5, 1.17, texto, fontsize=12, ha='center', va='top', bbox=dict(facecolor='white', alpha=0.5), transform=ax1.transAxes)

medalhas_por_ano_inverno.plot(kind='area', stacked=False, ax=ax2, color=[cores_medalhas[col] for col in medalhas_por_ano_verao.columns])
ax2.set_title('Competições de Inverno')
ax2.set_xlabel('')
ax2.set_ylabel('Número de Medalhas')
ax2.legend(title='Medalha')
ax2.grid(False)

plt.tight_layout()
 141:
comp_verao = mesclado[mesclado['Season']=='Summer']   
comp_inverno = mesclado[mesclado['Season']=='Winter']  

num_comp_verao = comp_verao['Year'].nunique()           
num_comp_inverno = comp_inverno['Year'].nunique()     

comp_verao = comp_verao[comp_verao['Medal'] != 'NA']
comp_inverno = comp_inverno[comp_inverno['Medal'] != 'NA']

num_medalhas_verao = comp_verao['Medal'].value_counts().sum()
num_medalhas_inverno = comp_inverno['Medal'].value_counts().sum()

media_medalha_comp_verao = (num_medalhas_verao)/(num_comp_verao)
media_medalha_comp_inverno = (num_medalhas_inverno)/(num_comp_inverno)

medalhas_por_ano_verao = mesclado.query('Season == "Summer"').groupby(['Year', 'Medal'])['Medal'].value_counts().unstack().fillna(0).astype(int)
medalhas_por_ano_inverno = mesclado.query('Season == "Winter"').groupby(['Year', 'Medal'])['Medal'].value_counts().unstack().fillna(0).astype(int)

texto = (f"Nesses últimos 120 anos tivemos {num_comp_verao} competições de verão e "
         f"{num_comp_inverno} competições de inverno.\nForam distribuídas "
         f"{num_medalhas_verao + num_medalhas_inverno} medalhas, sendo "
         f"{num_medalhas_verao} nas competições de verão e "
         f"{num_medalhas_inverno} nas competições de inverno.\nNa média, "
         f"são distribuídas {media_medalha_comp_verao:.0f} medalhas por competição no verão e "
         f"{media_medalha_comp_inverno:.0f} medalhas por competição no inverno.")

fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(14, 16))

fig.patch.set_facecolor('white')
ax1.set_facecolor('white')
ax2.set_facecolor('white')

medalhas_por_ano_verao.plot(kind='area', stacked=False, ax=ax1, color=[cores_medalhas[col] for col in medalhas_por_ano_verao.columns])
ax1.set_title('Competições de Verão')
ax1.set_xlabel('')
ax1.set_ylabel('Número de Medalhas')
ax1.legend(title='Medalha')
ax1.grid(False)
ax1.text(0.5, 1.17, texto, fontsize=12, ha='center', va='top', bbox=dict(facecolor='white', alpha=0.5), transform=ax1.transAxes)

medalhas_por_ano_inverno.plot(kind='area', stacked=False, ax=ax2, color=[cores_medalhas[col] for col in medalhas_por_ano_verao.columns])
ax2.set_title('Competições de Inverno')
ax2.set_xlabel('')
ax2.set_ylabel('Número de Medalhas')
ax2.legend(title='Medalha')
ax2.grid(False)

plt.tight_layout()
 142:
comp_verao = mesclado[mesclado['Season']=='Summer']   
comp_inverno = mesclado[mesclado['Season']=='Winter']  

num_comp_verao = comp_verao['Year'].nunique()           
num_comp_inverno = comp_inverno['Year'].nunique()     

comp_verao = comp_verao[comp_verao['Medal'] != 'NA']
comp_inverno = comp_inverno[comp_inverno['Medal'] != 'NA']

num_medalhas_verao = comp_verao['Medal'].value_counts().sum()
num_medalhas_inverno = comp_inverno['Medal'].value_counts().sum()

media_medalha_comp_verao = (num_medalhas_verao)/(num_comp_verao)
media_medalha_comp_inverno = (num_medalhas_inverno)/(num_comp_inverno)

medalhas_por_ano_verao = mesclado.query('Season == "Summer"').groupby(['Year', 'Medal'])['Medal'].value_counts().unstack().fillna(0).astype(int)
medalhas_por_ano_inverno = mesclado.query('Season == "Winter"').groupby(['Year', 'Medal'])['Medal'].value_counts().unstack().fillna(0).astype(int)

texto = (f"Nesses últimos 120 anos tivemos {num_comp_verao} competições de verão e "
         f"{num_comp_inverno} competições de inverno.\nForam distribuídas "
         f"{num_medalhas_verao + num_medalhas_inverno} medalhas, sendo "
         f"{num_medalhas_verao} nas competições de verão e "
         f"{num_medalhas_inverno} nas competições de inverno.\nNa média, "
         f"são distribuídas {media_medalha_comp_verao:.0f} medalhas por competição no verão e "
         f"{media_medalha_comp_inverno:.0f} medalhas por competição no inverno.")

fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(14, 16))

fig.patch.set_facecolor('white')
ax1.set_facecolor('white')
ax2.set_facecolor('white')

medalhas_por_ano_verao.plot(kind='area', stacked=False, ax=ax1, color=[cores_medalhas[col] for col in medalhas_por_ano_verao.columns])
ax1.set_title('Competições de Verão', fontsize=15)
ax1.set_xlabel('')
ax1.set_ylabel('Número de Medalhas')
ax1.legend(title='Medalha')
ax1.grid(False)
ax1.text(0.5, 1.17, texto, fontsize=12, ha='center', va='top', bbox=dict(facecolor='white', alpha=0.5), transform=ax1.transAxes)

medalhas_por_ano_inverno.plot(kind='area', stacked=False, ax=ax2, color=[cores_medalhas[col] for col in medalhas_por_ano_verao.columns])
ax2.set_title('Competições de Inverno', fontsize=15)
ax2.set_xlabel('')
ax2.set_ylabel('Número de Medalhas')
ax2.legend(title='Medalha')
ax2.grid(False)

plt.tight_layout()
 143:
plt.figure(figsize=(20, 10))
plt.tight_layout()
sns.countplot(x=menores_quinze_anos, hue=menores_quinze_anos, legend=False, palette='Set2')
plt.title('Medalhas de Ouro por modalidade com atletas menores de 16 anos', fontsize=15)
plt.ylabel('Medalhas de ouro')
plt.xlabel('Modalidade')
 144:
plt.figure(figsize=(20, 10))
plt.tight_layout()
sns.countplot(x=menores_quinze_anos, hue=menores_quinze_anos, legend=False, palette='Set2')
plt.title('Medalhas de Ouro por modalidade com atletas menores de 16 anos', fontsize=15, fontweight="bold")
plt.ylabel('Medalhas de ouro')
plt.xlabel('Modalidade')
 145:
medalhas = mesclado.groupby(['region', 'Medal'])['Medal'].value_counts().unstack().fillna(0).astype(int)
medalhas['Total'] = medalhas['Bronze'] + medalhas['Silver'] + medalhas['Gold']
medals = medalhas[['Bronze','Silver','Gold','Total']].sort_values(by='Total', ascending=False)
medals.iloc[:20].style.set_caption('Medalhas por países [Top 20]')\
.bar(subset=['Gold'], color=cores_medalhas.Gold)\
.bar(subset=['Silver'], color=cores_medalhas.Silver)\
.bar(subset=['Bronze'], color=cores_medalhas.Bronze)
 146:
medalhas = mesclado.groupby(['region', 'Medal'])['Medal'].value_counts().unstack().fillna(0).astype(int)
medalhas['Total'] = medalhas['Bronze'] + medalhas['Silver'] + medalhas['Gold']
medals = medalhas[['Bronze','Silver','Gold','Total']].sort_values(by='Total', ascending=False)
medals.iloc[:20].style.set_caption('Medalhas por países [Top 20]')\
.bar(subset=['Gold'], color=cores_medalhas.get('Gold'))\
.bar(subset=['Silver'], color=cores_medalhas.get('Silver'))\
.bar(subset=['Bronze'], color=cores_medalhas.get('Bronze'))
 147:
plt.figure(figsize=(20,10))
plt.tight_layout()
sns.countplot(x=medalhas_ouro['Age'],hue=medalhas_ouro['Age'], legend=False, data=medalhas_ouro, palette='Set2')
plt.title('Distribuição de medalhas de ouro por idade', fontsize=15, fontweight="bold")
plt.ylabel('Medalhas de ouro')
plt.xlabel('Idade')
 148:
mais_cinquenta_anos = medalhas_ouro['Sport'][medalhas_ouro['Age']>50]
contagem = mais_cinquenta_anos.value_counts()

plt.figure(figsize=(20, 10))
plt.tight_layout()
sns.countplot(x=mais_cinquenta_anos, hue=mais_cinquenta_anos, legend=False, order=contagem.index, palette='Set2')
plt.title('Medalhas de Ouro por modalidade para atletas com mais de 50 anos')
plt.ylabel('Medalhas de ouro')
plt.xlabel('Modalidade')
 149:
mais_cinquenta_anos = medalhas_ouro['Sport'][medalhas_ouro['Age']>50]
contagem = mais_cinquenta_anos.value_counts()

plt.figure(figsize=(20, 10))
plt.tight_layout()
sns.countplot(x=mais_cinquenta_anos, hue=mais_cinquenta_anos, legend=False, order=contagem.index, palette='Set2')
plt.title('Medalhas de Ouro por modalidade para atletas com mais de 50 anos', fontsize=15, fontweight="bold")
plt.ylabel('Medalhas de ouro')
plt.xlabel('Modalidade')
 150:
mais_cinquenta_anos = medalhas_ouro['Sport'][medalhas_ouro['Age']>50]
contagem = mais_cinquenta_anos.value_counts()

plt.figure(figsize=(20, 10))
plt.tight_layout()
sns.countplot(x=mais_cinquenta_anos, hue=mais_cinquenta_anos, legend=False, order=contagem.index, palette='Set2')
plt.title('Medalhas de Ouro por modalidade (> 50 anos)', fontsize=15, fontweight="bold")
plt.ylabel('Medalhas de ouro')
plt.xlabel('Modalidade')
 151:
plt.figure(figsize=(20,10))
plt.tight_layout()
sns.countplot(x=medalhas_ouro['Age'],hue=medalhas_ouro['Age'], legend=False, data=medalhas_ouro, palette='Set2')
plt.title('Distribuição de medalhas de ouro por idade', fontsize=15, fontweight="bold")
plt.ylabel('Medalhas de ouro')
plt.xlabel('')
 152:

menores_quinze_anos = medalhas_ouro.query('Age <= 15').value_counts()

plt.figure(figsize=(20, 10))
plt.tight_layout()
sns.countplot(x=menores_quinze_anos, hue=menores_quinze_anos, legend=False, palette='Set2')
plt.title('Medalhas de Ouro por modalidade com atletas menores de 16 anos', fontsize=15, fontweight="bold")
plt.ylabel('Medalhas de ouro')
plt.xlabel('Modalidade')
 153:

menores_quinze_anos = medalhas_ouro.query('Age <= 15').value_counts()

menores_quinze_anos
 154:

menores_quinze_anos = medalhas_ouro.query('Age <= 15').value_counts()

plt.figure(figsize=(20, 10))
plt.tight_layout()
sns.countplot(x=menores_quinze_anos, hue=menores_quinze_anos, legend=False, palette='Set2')
plt.title('Medalhas de Ouro por modalidade com atletas menores de 16 anos', fontsize=15, fontweight="bold")
plt.ylabel('Medalhas de ouro')
plt.xlabel('Modalidade')
 155:

menores_quinze_anos = medalhas_ouro.query('Age <= 15').value_counts()

plt.figure(figsize=(20, 10))
plt.tight_layout()
sns.countplot(x=menores_quinze_anos.index, hue=menores_quinze_anos, legend=False, palette='Set2')
plt.title('Medalhas de Ouro por modalidade com atletas menores de 16 anos', fontsize=15, fontweight="bold")
plt.ylabel('Medalhas de ouro')
plt.xlabel('Modalidade')
 156:

menores_quinze_anos = medalhas_ouro.query('Age <= 15').value_counts()

plt.figure(figsize=(20, 10))
plt.tight_layout()
sns.countplot(y=menores_quinze_anos.values ,x=menores_quinze_anos.index, hue=menores_quinze_anos, legend=False, palette='Set2')
plt.title('Medalhas de Ouro por modalidade com atletas menores de 16 anos', fontsize=15, fontweight="bold")
plt.ylabel('Medalhas de ouro')
plt.xlabel('Modalidade')
 157:

menores_quinze_anos = medalhas_ouro.query('Age <= 15').value_counts()

plt.figure(figsize=(20, 10))
plt.tight_layout()
sns.countplot(data=menores_quinze_anos)
plt.title('Medalhas de Ouro por modalidade com atletas menores de 16 anos', fontsize=15, fontweight="bold")
plt.ylabel('Medalhas de ouro')
plt.xlabel('Modalidade')
 158:

menores_quinze_anos = medalhas_ouro.query('Age <= 15').value_counts()

menores_quinze_anos
 159:

menores_quinze_anos = medalhas_ouro.query('Age <= "15"').value_counts()

menores_quinze_anos
 160:

menores_quinze_anos = medalhas_ouro.query('Age <= 15').value_counts()

menores_quinze_anos
 161:

menores_quinze_anos = medalhas_ouro.query('Age <= 15')['Sport'].value_counts()


plt.figure(figsize=(20, 10))
plt.tight_layout()
sns.countplot(data=menores_quinze_anos)
plt.title('Medalhas de Ouro por modalidade com atletas menores de 16 anos', fontsize=15, fontweight="bold")
plt.ylabel('Medalhas de ouro')
plt.xlabel('Modalidade')
 162:

menores_quinze_anos = medalhas_ouro.query('Age <= 15')['Sport'].value_counts()
menores_quinze_anos
 163:

menores_quinze_anos = medalhas_ouro.query('Age <= 15')['Sport'].value_counts()


plt.figure(figsize=(20, 10))
plt.tight_layout()
sns.countplot(data=menores_quinze_anos)
plt.title('Medalhas de Ouro por modalidade com atletas menores de 16 anos', fontsize=15, fontweight="bold")
plt.ylabel('Medalhas de ouro')
plt.xlabel('Modalidade')
 164:

menores_quinze_anos = medalhas_ouro.query('Age <= 15')['Sport'].value_counts()


plt.figure(figsize=(20, 10))
plt.tight_layout()
sns.countplot(x=menores_quinze_anos.index, data=menores_quinze_anos)
plt.title('Medalhas de Ouro por modalidade com atletas menores de 16 anos', fontsize=15, fontweight="bold")
plt.ylabel('Medalhas de ouro')
plt.xlabel('Modalidade')
 165:

menores_quinze_anos = medalhas_ouro.query('Age <= 15')['Sport'].value_counts()

menores_quinze_anos_pd = pd.DataFrame(columns=menores_quinze_anos.index, data=menores_quinze_anos.values)

menores_quinze_anos_pd.head()
 166:

menores_quinze_anos = medalhas_ouro.query('Age <= 15')

menores_quinze_anos
 167:

menores_quinze_anos = medalhas_ouro.query('Age <= 15')

plt.figure(figsize=(20, 10))
plt.tight_layout(x='Sport', data=menores_quinze_anos)
sns.countplot()
plt.title('Medalhas de Ouro por modalidade com atletas menores de 16 anos', fontsize=15, fontweight="bold")
plt.ylabel('Medalhas de ouro')
plt.xlabel('Modalidade')
 168:

menores_quinze_anos = medalhas_ouro.query('Age <= 15')

plt.figure(figsize=(20, 10))
plt.tight_layout()
sns.countplot(x='Sport', data=menores_quinze_anos)
plt.title('Medalhas de Ouro por modalidade com atletas menores de 16 anos', fontsize=15, fontweight="bold")
plt.ylabel('Medalhas de ouro')
plt.xlabel('Modalidade')
 169:

menores_quinze_anos = medalhas_ouro.query('Age <= 15')

menores_quinze_anos.sort_values()

plt.figure(figsize=(20, 10))
plt.tight_layout()
sns.countplot(x='Sport', data=menores_quinze_anos)
plt.title('Medalhas de Ouro por modalidade com atletas menores de 16 anos', fontsize=15, fontweight="bold")
plt.ylabel('Medalhas de ouro')
plt.xlabel('Modalidade')
 170:

menores_quinze_anos = medalhas_ouro.query('Age <= 15')

menores_quinze_anos.sort_values(by=menores_quinze_anos['Medals'])

plt.figure(figsize=(20, 10))
plt.tight_layout()
sns.countplot(x='Sport', data=menores_quinze_anos)
plt.title('Medalhas de Ouro por modalidade com atletas menores de 16 anos', fontsize=15, fontweight="bold")
plt.ylabel('Medalhas de ouro')
plt.xlabel('Modalidade')
 171:

menores_quinze_anos = medalhas_ouro.query('Age <= 15')

menores_quinze_anos.sort_values(by=menores_quinze_anos['Medal'])

plt.figure(figsize=(20, 10))
plt.tight_layout()
sns.countplot(x='Sport', data=menores_quinze_anos)
plt.title('Medalhas de Ouro por modalidade com atletas menores de 16 anos', fontsize=15, fontweight="bold")
plt.ylabel('Medalhas de ouro')
plt.xlabel('Modalidade')
 172:

menores_quinze_anos = medalhas_ouro.query('Age <= 15')

menores_quinze_anos.sort_values(ascending=True)

plt.figure(figsize=(20, 10))
plt.tight_layout()
sns.countplot(x='Sport', data=menores_quinze_anos)
plt.title('Medalhas de Ouro por modalidade com atletas menores de 16 anos', fontsize=15, fontweight="bold")
plt.ylabel('Medalhas de ouro')
plt.xlabel('Modalidade')
 173:

menores_quinze_anos = medalhas_ouro.query('Age <= 15')



plt.figure(figsize=(20, 10))
plt.tight_layout()
sns.countplot(x='Sport', data=menores_quinze_anos)
plt.title('Medalhas de Ouro por modalidade com atletas menores de 16 anos', fontsize=15, fontweight="bold")
plt.ylabel('Medalhas de ouro')
plt.xlabel('Modalidade')
 174:

menores_quinze_anos = medalhas_ouro.query('Age <= 15')

menores_quinze_contagem = menores_quinze_anos['Sport'].value_counts().sort_values(ascending=True)



plt.figure(figsize=(20, 10))
plt.tight_layout()
sns.countplot(x='Sport', data=menores_quinze_anos, order=menores_quinze_contagem.index)
plt.title('Medalhas de Ouro por modalidade com atletas menores de 16 anos', fontsize=15, fontweight="bold")
plt.ylabel('Medalhas de ouro')
plt.xlabel('Modalidade')
 175:

menores_quinze_anos = medalhas_ouro.query('Age <= 15')

menores_quinze_contagem = menores_quinze_anos['Sport'].value_counts().sort_values(ascending=False)



plt.figure(figsize=(20, 10))
plt.tight_layout()
sns.countplot(x='Sport', data=menores_quinze_anos, order=menores_quinze_contagem.index)
plt.title('Medalhas de Ouro por modalidade com atletas menores de 16 anos', fontsize=15, fontweight="bold")
plt.ylabel('Medalhas de ouro')
plt.xlabel('Modalidade')
 176:

menores_quinze_anos = medalhas_ouro.query('Age <= 15')

menores_quinze_contagem = menores_quinze_anos['Sport'].value_counts().sort_values(ascending=False)



plt.figure(figsize=(20, 10))
plt.tight_layout()
sns.countplot(x='Sport', data=menores_quinze_anos, order=menores_quinze_contagem.index, palette='Set2')
plt.title('Medalhas de Ouro por modalidade com atletas menores de 16 anos', fontsize=15, fontweight="bold")
plt.ylabel('Medalhas de ouro')
plt.xlabel('Modalidade')
 177:
mais_cinquenta_anos = medalhas_ouro.query('Age > 50')
mais_cinquenta_contagem = menores_quinze_anos['Sport'].value_counts().sort_values(ascending=False)

plt.figure(figsize=(20, 10))
plt.tight_layout()
sns.countplot(x=mais_cinquenta_anos, hue=mais_cinquenta_anos, legend=False, order=mais_cinquenta_contagem.index, palette='Set2')
plt.title('Medalhas de Ouro por modalidade (> 50 anos)', fontsize=15, fontweight="bold")
plt.ylabel('Medalhas de ouro')
plt.xlabel('Modalidade')
 178:
mais_cinquenta_anos = medalhas_ouro.query('Age > 50')
mais_cinquenta_contagem = menores_quinze_anos['Sport'].value_counts().sort_values(ascending=False)

plt.figure(figsize=(20, 10))
plt.tight_layout()
sns.countplot(x='Sport', hue=mais_cinquenta_anos, legend=False, order=mais_cinquenta_contagem.index, palette='Set2')
plt.title('Medalhas de Ouro por modalidade (> 50 anos)', fontsize=15, fontweight="bold")
plt.ylabel('Medalhas de ouro')
plt.xlabel('Modalidade')
 179:
mais_cinquenta_anos = medalhas_ouro.query('Age > 50')
mais_cinquenta_contagem = menores_quinze_anos['Sport'].value_counts().sort_values(ascending=False)

plt.figure(figsize=(20, 10))
plt.tight_layout()
sns.countplot(x='Sport', legend=False, order=mais_cinquenta_contagem.index, palette='Set2')
plt.title('Medalhas de Ouro por modalidade (> 50 anos)', fontsize=15, fontweight="bold")
plt.ylabel('Medalhas de ouro')
plt.xlabel('Modalidade')
 180:
mais_cinquenta_anos = medalhas_ouro.query('Age > 50')
mais_cinquenta_contagem = menores_quinze_anos['Sport'].value_counts().sort_values(ascending=False)

plt.figure(figsize=(20, 10))
plt.tight_layout()
sns.countplot(x='Sport',data=mais_cinquenta_anos, legend=False, order=mais_cinquenta_contagem.index, palette='Set2')
plt.title('Medalhas de Ouro por modalidade (> 50 anos)', fontsize=15, fontweight="bold")
plt.ylabel('Medalhas de ouro')
plt.xlabel('Modalidade')
 181:
mais_cinquenta_anos = medalhas_ouro.query('Age > 50')
mais_cinquenta_contagem = menores_quinze_anos['Sport'].value_counts().sort_values(ascending=False)

mais_cinquenta_contagem
 182:
mais_cinquenta_anos = medalhas_ouro.query('Age > 50')
mais_cinquenta_contagem = mais_cinquenta_anos['Sport'].value_counts().sort_values(ascending=False)

plt.figure(figsize=(20, 10))
plt.tight_layout()
sns.countplot(x='Sport',data=mais_cinquenta_anos, legend=False, order=mais_cinquenta_contagem.index, palette='Set2')
plt.title('Medalhas de Ouro por modalidade (> 50 anos)', fontsize=15, fontweight="bold")
plt.ylabel('Medalhas de ouro')
plt.xlabel('Modalidade')
 183:
mais_cinquenta_anos = medalhas_ouro.query('Age > 50')
mais_cinquenta_contagem = mais_cinquenta_anos['Sport'].value_counts().sort_values(ascending=False)

plt.figure(figsize=(20, 10))
plt.tight_layout()
sns.countplot(x='Sport',data=mais_cinquenta_anos, order=mais_cinquenta_contagem.index, palette='Set2')
plt.title('Medalhas de Ouro por modalidade (> 50 anos)', fontsize=15, fontweight="bold")
plt.ylabel('Medalhas de ouro')
plt.xlabel('Modalidade')
 184:
ouro_paises = medalhas_ouro['region'].value_counts().head(10)
ouro_paises = ouro_paises.sort_values(ascending=True)
y = ouro_paises.index
x = ouro_paises.values

plt.figure(figsize=(20,10))

plt.barh(y=y, data=ouro_paises, width=x, color=cores_medalhas.get('Gold'))
plt.xlabel('Número de Medalhas de Ouro')
plt.title('Top 10 Países com Mais Medalhas de Ouro')
 185:
ouro_paises = medalhas_ouro['region'].value_counts().head(10)
ouro_paises = ouro_paises.sort_values(ascending=True)
y = ouro_paises.index
x = ouro_paises.values

plt.figure(figsize=(20,10))

plt.barh(y=y, data=ouro_paises, width=x, color=cores_medalhas.get('Gold'))
plt.xlabel('Número de Medalhas de Ouro')
plt.title('Top 10 Países com Mais Medalhas de Ouro', fontsize=15, fontweight="bold")
 186:
ouro_paises = medalhas_ouro['Event'].value_counts().head(10)
ouro_paises = ouro_paises.sort_values(ascending=True)
y = ouro_paises.index
x = ouro_paises.values

plt.figure(figsize=(20,10))

plt.barh(y=y, data=ouro_paises, width=x, color='#A2C865')
plt.xlabel('Número de Medalhas de Ouro')
plt.title('Top 10 Países com Mais Medalhas de Ouro', fontsize=15, fontweight="bold")
 187:
ouro_paises = medalhas_ouro['Event'].value_counts().head(10)
ouro_paises = ouro_paises.sort_values(ascending=True)
y = ouro_paises.index
x = ouro_paises.values

plt.figure(figsize=(20,10))

plt.barh(y=y, data=ouro_paises, width=x, color='#A2C865')
plt.xlabel('Número de Medalhas de Ouro')
plt.title('Top 10 Equipes com Mais Medalhas de Ouro', fontsize=15, fontweight="bold")
 188: medalhas_ouro.groupby(['Year'])
 189: medalhas_ouro.groupby(['Year']).first()
 190:
edicoes = medalhas_ouro.groupby(['Year']).first()
edicoes['ID'].count()
 191: edicoes = medalhas_ouro.groupby(['Year']).first()
 192:
edicoes = medalhas_ouro.groupby(['Year']).first()
edicoes
 193:
edicoes = medalhas_ouro.groupby(['Year']).first()
ouro_times = edicoes['Event'].value_counts()
ouro_times
 194:
edicoes = medalhas_ouro.groupby(['Year']).first()
edicoes
 195: medalhas_por_evento = ouro.groupby(['Year', 'Event']).size().reset_index(name='Medalhas_de_Ouro')
 196: medalhas_por_evento = medalhas_ouro.groupby(['Year', 'Event']).size().reset_index(name='Medalhas_de_Ouro')
 197:
medalhas_por_evento = medalhas_ouro.groupby(['Year', 'Event']).size().reset_index(name='Medalhas_de_Ouro')
medalhas_por_evento
 198:
medalhas_por_evento = medalhas_ouro.groupby(['Year', 'Event']).size().reset_index(name='Medalhas_de_Ouro')
max_medalhas_por_evento = medalhas_por_evento.loc[medalhas_por_evento.groupby('Year')['Medalhas_de_Ouro'].idxmax()]

max_medalhas_por_evento
 199:
medalhas_por_evento = medalhas_ouro.groupby(['Year', 'Event']).size().reset_index(name='Medalhas_de_Ouro')

medalhas_por_evento
 200:
medalhas_por_evento = medalhas_ouro.groupby(['Year', 'Event']).size().reset_index(name='Medalhas_de_Ouro').sort_index(ascending=False)

medalhas_por_evento
 201:
medalhas_por_evento = medalhas_ouro.groupby(['Year', 'Event']).size().reset_index(name='Ouro')

medalhas_por_evento
 202:
medalhas_por_evento = medalhas_ouro.groupby(['Year', 'Event']).first()

medalhas_por_evento
 203:
medalhas_por_evento = medalhas_ouro.groupby(['Year', 'Event']).first().reset_index()

medalhas_por_evento
 204:
medalhas_por_evento = medalhas_ouro.groupby(['Year', 'Event']).first()

medalhas_por_evento
 205:
medalhas_por_evento = medalhas_ouro.groupby(['Year', 'Event']).first()
contagem_eventos = medalhas_por_evento.groupby(['Year', 'Event']).size().reset_index(name='Count')


contagem_eventos
 206:
medalhas_por_evento = medalhas_ouro.groupby(['Year', 'Event']).first()
contagem_eventos = medalhas_por_evento.groupby(['Year', 'Event']).size().reset_index(name='Count')
max_medalhas_por_evento = contagem_eventos.loc[contagem_eventos.groupby('Year')['Count'].idxmax()]

max_medalhas_por_evento
 207: medalhas_por_evento = medalhas_ouro.groupby(['Year', 'Event']).first()
 208:
medalhas_por_evento = medalhas_ouro.groupby(['Year', 'Event']).first()

medalhas_por_evento
 209:
medalhas_por_evento = medalhas_ouro.groupby(['Year', 'Event']).first()

contagem = medalhas_por_evento['Event'].value_counts()
contagem
 210:
medalhas_por_evento = medalhas_ouro.groupby(['Year', 'Event']).first()

medalhas_por_evento
 211:
medalhas_por_evento = medalhas_ouro.groupby(['Year', 'Event']).first()

medalhas_por_evento.index
 212:
medalhas_por_evento = medalhas_ouro.groupby(['Year', 'Event']).first()
contagem_eventos = medalhas_por_evento.groupby(['Event']).size()

contagem_eventos
 213:
medalhas_por_evento = medalhas_ouro.groupby(['Year', 'Event']).first()
contagem_eventos = medalhas_por_evento.groupby(['Event']).size().sort_values()

contagem_eventos
 214:
medalhas_por_evento = medalhas_ouro.groupby(['Year', 'Event']).first()
contagem_eventos = medalhas_por_evento.groupby(['Event']).size().sort_values(ascending=False)

contagem_eventos
 215:
medalhas_por_evento = medalhas_ouro.query('NOC == "USA"').groupby(['Year', 'Event']).first()
contagem_eventos = medalhas_por_evento.groupby(['Event']).size().sort_values(ascending=False)

contagem_eventos
 216:
medalhas_por_evento = medalhas_ouro.query('NOC == "USA"').groupby(['Year', 'Event']).first()
contagem_eventos = medalhas_por_evento.groupby(['Event']).size().sort_values(ascending=False)

plt.barh(y=y, data=contagem_eventos.head(10), width=x, color='#A2C865')
 217:
medalhas_por_evento = medalhas_ouro.query('NOC == "USA"').groupby(['Year', 'Event']).first()
contagem_eventos = medalhas_por_evento.groupby(['Event']).size().sort_values(ascending=False)

contagem_eventos
 218:
medalhas_por_evento = medalhas_ouro.query('NOC == "USA"').groupby(['Year', 'Event']).first()
contagem_eventos = medalhas_por_evento.groupby(['Event']).size().sort_values(ascending=False)

contagem_eventos.plot()
 219:
medalhas_por_evento = medalhas_ouro.query('NOC == "USA"').groupby(['Year', 'Event']).first()
contagem_eventos = medalhas_por_evento.groupby(['Event']).size().sort_values(ascending=False)

contagem_eventos.hist()
 220:
medalhas_por_evento = medalhas_ouro.query('NOC == "USA"').groupby(['Year', 'Event']).first()
contagem_eventos = medalhas_por_evento.groupby(['Event']).size().sort_values(ascending=False)

contagem_eventos.plot(kind='barh')
 221:
medalhas_por_evento = medalhas_ouro.query('NOC == "USA"').groupby(['Year', 'Event']).first()
contagem_eventos = medalhas_por_evento.groupby(['Event']).size().sort_values(ascending=False)

contagem_eventos.plot(kind='barh', data=contagem_eventos.values)
 222:
medalhas_por_evento = medalhas_ouro.query('NOC == "USA"').groupby(['Year', 'Event']).first()
contagem_eventos = medalhas_por_evento.groupby(['Event']).size().sort_values(ascending=False)

max_medalhas_por_evento = contagem_eventos.loc[contagem_eventos.groupby('Year')['Count'].idxmax()]

max_medalhas_por_evento
 223:
medalhas_por_evento = medalhas_ouro.query('NOC == "USA"').groupby(['Year', 'Event']).first()
contagem_eventos = medalhas_por_evento.groupby(['Event']).size().sort_values(ascending=False)
 224:
medalhas_por_evento = medalhas_ouro.query('NOC == "USA"').groupby(['Year', 'Event']).first()
contagem_eventos = medalhas_por_evento.groupby(['Event']).size().sort_values(ascending=False)

contagem_eventos
 225:
medalhas_por_evento = medalhas_ouro.query('NOC == "USA"').groupby(['Year', 'Event']).first()
contagem_eventos = medalhas_por_evento.groupby(['Event']).size().sort_values(ascending=False)

contagem_eventos.values
 226:
medalhas_por_evento = medalhas_ouro.query('NOC == "USA"').groupby(['Year', 'Event']).first()
contagem_eventos = medalhas_por_evento.groupby(['Event']).size().sort_values(ascending=False)

contagem_eventos
 227:
medalhas_por_evento = medalhas_ouro.groupby(['Year', 'Event']).first()
contagem_eventos = medalhas_por_evento.groupby(['Event']).size().sort_values(ascending=False)

contagem_eventos
 228:
medalhas_por_evento = medalhas_ouro.groupby(['Year', 'Event']).first()
contagem_eventos = medalhas_por_evento.groupby(['Event']).size().sort_values(ascending=False)

contagem_eventos.plot(kind='barh', color='skyblue')
 229:
medalhas_por_evento = medalhas_ouro.groupby(['Year', 'Event']).first()
contagem_eventos = medalhas_por_evento.groupby(['Event']).size().sort_values(ascending=False).head(10)

contagem_eventos.plot(kind='barh', color='skyblue')
 230:
medalhas_por_evento = medalhas_ouro.groupby(['Year', 'Event']).first()
contagem_eventos = medalhas_por_evento.groupby(['Event']).size().sort_values(ascending=False).head(20)

contagem_eventos.plot(kind='barh', color='skyblue')
 231:
medalhas_por_evento = medalhas_ouro.groupby(['Year', 'Event']).first()
contagem_eventos = medalhas_por_evento.groupby(['Event']).size().sort_values(ascending=True).head(20)

contagem_eventos.plot(kind='barh', color='skyblue')
 232:
medalhas_por_evento = medalhas_ouro.groupby(['Year', 'Event']).first()
contagem_eventos = medalhas_por_evento.groupby(['Event']).size().sort_values(ascending=False).head(20)

contagem_eventos.plot(kind='barh', color='skyblue')
 233:
medalhas_por_evento = medalhas_ouro.groupby(['Year', 'Event']).first()
contagem_eventos = medalhas_por_evento.groupby(['Event']).size().sort_values(ascending=False).head(20)

contagem_eventos.plot(kind='barh', color='skyblue', order=contagem_eventos.values)
 234:
medalhas_por_evento = medalhas_ouro.groupby(['Year', 'Event']).first()
contagem_eventos = medalhas_por_evento.groupby(['Event']).size().sort_values(ascending=False).head(20)

contagem_eventos.plot(kind='barh', color='skyblue')
 235:
medalhas_por_evento = medalhas_ouro.groupby(['Year', 'Event']).first()
contagem_eventos = medalhas_por_evento.groupby(['Event']).size().sort_values(ascending=False).head(15)

contagem_eventos.plot(kind='barh', color='skyblue')
 236:
medalhas_por_evento = medalhas_ouro.groupby(['Year', 'Event']).first()
contagem_eventos = medalhas_por_evento.groupby(['Event']).size().sort_values(ascending=False).head(15)

plt.figure(figsize=(20,10))
contagem_eventos.plot(kind='barh', color='skyblue')
plt.gca().invert_yaxis()
 237:
medalhas_por_evento = medalhas_ouro.groupby(['Year', 'Event']).first()
contagem_eventos = medalhas_por_evento.groupby(['Event']).size().sort_values(ascending=False).head(15)

plt.figure(figsize=(20,10))
contagem_eventos.plot(kind='barh', color='skyblue')
plt.xlabel('Número de Medalhas de Ouro')
plt.ylabel('Evento')
plt.title('Número de Medalhas de Ouro por Evento (USA)', fontsize=15, fontweight="bold")
plt.gca().invert_yaxis()
 238:
medalhas_por_evento = medalhas_ouro.groupby(['Year', 'Event']).first()
contagem_eventos = medalhas_por_evento.groupby(['Event']).size().sort_values(ascending=False).head(15)

plt.figure(figsize=(20,10))
contagem_eventos.plot(kind='barh', color='skyblue')
plt.xlabel('Número de Medalhas de Ouro')
plt.ylabel('Evento')
plt.title('Número de Medalhas de Ouro por Evento', fontsize=15, fontweight="bold")
plt.gca().invert_yaxis()
 239:
medalhas_por_evento = medalhas_ouro.groupby(['Year', 'Event']).first()
contagem_eventos = medalhas_por_evento.groupby(['Event']).size().sort_values(ascending=False).head(15)

plt.figure(figsize=(20,10))
contagem_eventos.plot(kind='barh', color=cores_medalhas.get('Gold'))
plt.xlabel('Número de Medalhas de Ouro')
plt.ylabel('Evento')
plt.title('Número de Medalhas de Ouro por Evento', fontsize=15, fontweight="bold")
plt.gca().invert_yaxis()
 240:
ouro_paises = medalhas_ouro['Event'].value_counts().head(15)
ouro_paises = ouro_paises.sort_values(ascending=True)
y = ouro_paises.index
x = ouro_paises.values

plt.figure(figsize=(20,10))

plt.barh(y=y, data=ouro_paises, width=x, color='#A2C865')
plt.xlabel('Número de Medalhas de Ouro')
plt.title('Top 10 Equipes com Mais Medalhas de Ouro', fontsize=15, fontweight="bold")
 241:
medalhas_por_evento = medalhas_ouro.groupby(['Year', 'Event']).first()
contagem_eventos = medalhas_por_evento.groupby(['Event']).size().sort_values(ascending=False).head(15)

plt.figure(figsize=(20,10))
contagem_eventos.plot(kind='barh', color=cores_medalhas.get('Gold'))
plt.xlabel('Número de Medalhas de Ouro')
plt.ylabel('')
plt.title('Número de Medalhas de Ouro por Evento', fontsize=15, fontweight="bold")
plt.gca().invert_yaxis()
 242:
medalhas_por_evento = medalhas_ouro.groupby(['Year', 'Event']).first()
contagem_eventos = medalhas_por_evento.groupby(['Event']).size().sort_values(ascending=False).head(15)

plt.figure(figsize=(20,10))
contagem_eventos.plot(kind='barh', color=cores_medalhas.get('Gold'))
plt.xlabel('Número de Medalhas de Ouro')
plt.ylabel('')
plt.title('Número de Medalhas de Ouro por Evento', fontsize=15, fontweight="bold")
plt.gca().invert_yaxis()
plt.xlim(left=20)
 243:
medalhas_por_evento = medalhas_ouro.groupby(['Year', 'Event']).first()
contagem_eventos = medalhas_por_evento.groupby(['Event']).size().sort_values(ascending=False).head(15)

plt.figure(figsize=(20,10))
contagem_eventos.plot(kind='barh', color=cores_medalhas.get('Gold'))
plt.xlabel('Número de Medalhas de Ouro')
plt.ylabel('')
plt.title('Número de Medalhas de Ouro por Evento', fontsize=15, fontweight="bold")
plt.gca().invert_yaxis()
plt.xlim(left=25)
 244:
medalhas_por_evento = medalhas_ouro.groupby(['Year', 'Event']).first()
contagem_eventos = medalhas_por_evento.groupby(['Event']).size().sort_values(ascending=False).head(15)

plt.figure(figsize=(20,10))
contagem_eventos.plot(kind='barh', color=cores_medalhas.get('Gold'))
plt.xlabel('Número de Medalhas de Ouro')
plt.ylabel('')
plt.title('Número de Medalhas de Ouro por Evento', fontsize=15, fontweight="bold")
plt.gca().invert_yaxis()
plt.xlim(left=25)
plt.xlim(right=30)
 245:
medalhas_por_evento = medalhas_ouro.groupby(['Year', 'Event']).first()
contagem_eventos = medalhas_por_evento.groupby(['Event']).size().sort_values(ascending=False).head(15)

plt.figure(figsize=(20,10))
contagem_eventos.plot(kind='barh', color=cores_medalhas.get('Gold'))
plt.xlabel('Número de Medalhas de Ouro')
plt.ylabel('')
plt.title('Número de Medalhas de Ouro por Evento', fontsize=15, fontweight="bold")
plt.gca().invert_yaxis()
plt.xlim(left=27)
plt.xlim(right=30)
 246:
medalhas_por_evento = medalhas_ouro.groupby(['Year', 'Event']).first()
contagem_eventos = medalhas_por_evento.groupby(['Event']).size().sort_values(ascending=False).head(15)

plt.figure(figsize=(20,10))
contagem_eventos.plot(kind='barh', color=cores_medalhas.get('Gold'))
plt.xlabel('Número de Medalhas de Ouro')
plt.ylabel('')
plt.title('Número de Medalhas de Ouro por Evento', fontsize=15, fontweight="bold")
plt.gca().invert_yaxis()
plt.xlim(left=27)
plt.xlim(right=29)
 247:
medalhas_por_evento = medalhas_ouro.groupby(['Year', 'Event']).first()
contagem_eventos = medalhas_por_evento.groupby(['Event']).size().sort_values(ascending=False).head(15)

plt.figure(figsize=(20,10))
contagem_eventos.plot(kind='barh', color=cores_medalhas.get('Gold'))
plt.xlabel('Número de Medalhas de Ouro')
plt.ylabel('')
plt.title('Número de Medalhas de Ouro por Evento', fontsize=15, fontweight="bold")
plt.gca().invert_yaxis()
plt.xlim(left=27)
plt.xlim(right=29.5)
 248:
mulheres_verao = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Summer")]
mulhes_inverno = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Winter")]

plt.figure(figsize=(20,10))
plt.tight_layout()
sns.countplot(x=mulheres_verao['Year'], hue=mulheres_verao['Year'], legend=False, data=mulheres_verao, palette='Set2')
plt.title('Distribuição de medalhas por ano - Verão')
plt.ylabel('Medalhas')
plt.xlabel('Ano')

plt.figure(figsize=(20,10))
plt.tight_layout()
sns.countplot(x=mulhes_inverno['Year'],hue=mulhes_inverno['Year'], legend=False, data=mulhes_inverno, palette='Set2')
plt.title('Distribuição de medalhas por ano - Inverno')
plt.ylabel('Medalhas')
plt.xlabel('Ano')
 249:
mulheres_verao = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Summer")]
mulhes_inverno = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Winter")]

fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(14, 16))

fig.patch.set_facecolor('white')
ax1.set_facecolor('white')
ax2.set_facecolor('white')

plt.tight_layout()
sns.countplot(x=mulheres_verao['Year'], hue=mulheres_verao['Year'], legend=False, data=mulheres_verao, palette='Set2', ax=ax1)
ax1.set_title('Distribuição de medalhas por ano - Verão')
ax1.set_ylabel('Medalhas')
ax1.set_xlabel('')

plt.tight_layout()
sns.countplot(x=mulhes_inverno['Year'],hue=mulhes_inverno['Year'], legend=False, data=mulhes_inverno, palette='Set2', ax=ax2)
plt.title('Distribuição de medalhas por ano - Inverno')
plt.set_ylabel('Medalhas')
plt.set_xlabel('')
 250:
mulheres_verao = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Summer")]
mulhes_inverno = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Winter")]

fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(14, 16))

fig.patch.set_facecolor('white')
ax1.set_facecolor('white')
ax2.set_facecolor('white')

plt.tight_layout()
sns.countplot(x=mulheres_verao['Year'], hue=mulheres_verao['Year'], legend=False, data=mulheres_verao, palette='Set2', ax=ax1)
ax1.set_title('Distribuição de medalhas por ano - Verão')
ax1.set_ylabel('Medalhas')
ax1.set_xlabel('')

sns.countplot(x=mulhes_inverno['Year'],hue=mulhes_inverno['Year'], legend=False, data=mulhes_inverno, palette='Set2', ax=ax2)
ax2.title('Distribuição de medalhas por ano - Inverno')
ax2.set_ylabel('Medalhas')
ax2.set_xlabel('')
 251:
mulheres_verao = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Summer")]
mulhes_inverno = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Winter")]

fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(14, 16))

fig.patch.set_facecolor('white')
ax1.set_facecolor('white')
ax2.set_facecolor('white')

plt.tight_layout()
sns.countplot(x=mulheres_verao['Year'], hue=mulheres_verao['Year'], legend=False, data=mulheres_verao, palette='Set2', ax=ax1)
ax1.set_title('Distribuição de medalhas por ano - Verão')
ax1.set_ylabel('Medalhas')
ax1.set_xlabel('')

sns.countplot(x=mulhes_inverno['Year'],hue=mulhes_inverno['Year'], legend=False, data=mulhes_inverno, palette='Set2', ax=ax2)
ax2.set_title('Distribuição de medalhas por ano - Inverno')
ax2.set_ylabel('Medalhas')
ax2.set_xlabel('')
 252:
mulheres_verao = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Summer")]
mulhes_inverno = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Winter")]

fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(14, 16))

fig.patch.set_facecolor('white')
ax1.set_facecolor('white')
ax2.set_facecolor('white')

plt.tight_layout()
sns.countplot(x=mulheres_verao['Year'], hue=mulheres_verao['Year'], legend=False, data=mulheres_verao, palette='Set2', ax=ax1)
ax1.set_title('Distribuição de medalhas por ano - Verão')
ax1.set_ylabel('Medalhas')
ax1.set_xlabel('Ano')

sns.countplot(x=mulhes_inverno['Year'],hue=mulhes_inverno['Year'], legend=False, data=mulhes_inverno, palette='Set2', ax=ax2)
ax2.set_title('Distribuição de medalhas por ano - Inverno')
ax2.set_ylabel('Medalhas')
ax2.set_xlabel('')
 253:
mulheres_verao = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Summer")]
mulhes_inverno = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Winter")]

fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(14, 16))

fig.patch.set_facecolor('white')
ax1.set_facecolor('white')
ax2.set_facecolor('white')

sns.countplot(x=mulheres_verao['Year'], hue=mulheres_verao['Year'], legend=False, data=mulheres_verao, palette='Set2', ax=ax1)
ax1.set_title('Distribuição de medalhas por ano - Verão')
ax1.set_ylabel('Medalhas')
ax1.set_xlabel('Ano')

sns.countplot(x=mulhes_inverno['Year'],hue=mulhes_inverno['Year'], legend=False, data=mulhes_inverno, palette='Set2', ax=ax2)
ax2.set_title('Distribuição de medalhas por ano - Inverno')
ax2.set_ylabel('Medalhas')
ax2.set_xlabel('')
 254:
mulheres_verao = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Summer")]
mulhes_inverno = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Winter")]

fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(14, 16))

fig.patch.set_facecolor('white')
ax1.set_facecolor('white')
ax2.set_facecolor('white')

sns.countplot(x=mulheres_verao['Year'], hue=mulheres_verao['Year'], legend=False, data=mulheres_verao, palette='Set2', ax=ax1)
ax1.set_title('Distribuição de medalhas por ano - Verão')
ax1.set_ylabel('Medalhas')
ax1.set_xlabel('')

sns.countplot(x=mulhes_inverno['Year'],hue=mulhes_inverno['Year'], legend=False, data=mulhes_inverno, palette='Set2', ax=ax2)
ax2.set_title('Distribuição de medalhas por ano - Inverno')
ax2.set_ylabel('Medalhas')
ax2.set_xlabel('')
 255:
mulheres_verao = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Summer")]

participacao_mulheres = mulheres.groupby('Year').size().reset_index(name='Número de Participantes Femininas')

participacao_mulheres
 256:
mulheres_verao = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Summer")]

participacao_mulheres = mulheres_verao.groupby('Year').size().reset_index(name='Número de Participantes Femininas')

participacao_mulheres
 257:
mulheres_verao = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Summer")]

participacao_mulheres = mulheres_verao.groupby('Year').size().reset_index(name='Número de Participantes Femininas')

mulheres_verao
 258:
mulheres_verao = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Summer")]

participacao_mulheres = mulheres_verao.groupby('Year').size().reset_index(name='Número de Participantes Femininas')

mulheres_verao[mulheres_verao['Year']==1900]
 259:
mulheres_verao = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Summer")]

participacao_mulheres = mulheres_verao.groupby('Year').size().reset_index(name='Número de Participantes Femininas')

mulheres_verao[mulheres_verao['Year']==1900].count()
 260:
mulheres_verao = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Summer")]

participacao_mulheres = mulheres_verao.groupby('Year').size().reset_index(name='Número de Participantes Femininas')

mulheres_verao[mulheres_verao['Year']==1900]
 261:
mulheres_verao = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Summer")]

participacao_mulheres = mulheres_verao.groupby('Year').size().reset_index(name='Número de Participantes Femininas')

mulheres_verao
 262:
mulheres_verao = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Summer")]

participacao_mulheres = mulheres_verao.groupby('Year').size().reset_index(name='Número de Participantes Femininas')

mulheres_verao.groupby('Year').first()
 263:
mulheres_verao = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Summer")]

participacao_mulheres = mulheres_verao.groupby('Year').size().reset_index(name='Número de Participantes Femininas')

mulheres_verao.groupby(['Year', 'ID']).first()
 264:
mulheres_verao = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Summer")]

participacao_mulheres = mulheres_verao.groupby('Year').size().reset_index(name='Número de Participantes Femininas')

mulheres_verao.groupby(['Year', 'ID']).first()
participacao_mulheres
 265:
mulheres_verao = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Summer")]

participacao_mulheres = mulheres_verao.groupby('Year').size().reset_index(name='Número de Participantes Femininas')

mulheres_verao.groupby(['Year', 'ID']).first()
 266:
mulheres_verao = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Summer")]

participacao_mulheres = mulheres_verao.groupby('Year').size().reset_index(name='Número de Participantes Femininas')

mulheres_verao.groupby(['Year', 'ID']).first()
mulheres_verao[mulheres_verao['Year']==1900]
 267:
mulheres_verao = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Summer")]

participacao_mulheres = mulheres_verao.groupby('Year').size().reset_index(name='Número de Participantes Femininas')

mulheres_verao.groupby(['Year', 'ID']).first()
mulheres_verao[mulheres_verao['Year']==1900]
participacao_mulheres
 268:
mulheres_verao = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Summer")]

mulheres_unicas = mulheres_verao.drop_duplicates(subset=['ID', 'Year'])

participacao_mulheres = mulheres_unicas.groupby('Year').size().reset_index(name='Número de Participantes Femininas')

mulheres_verao.groupby(['Year', 'ID']).first()
mulheres_verao[mulheres_verao['Year']==1900]
participacao_mulheres
 269:
mulheres_verao = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Summer")]
mulhes_inverno = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Winter")]

mulheres_unicas_verao = mulheres_verao.drop_duplicates(subset=['ID', 'Year'])
mulheres_unicas_inverno = mulhes_inverno.drop_duplicates(subset=['ID', 'Year'])

fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(14, 16))

fig.patch.set_facecolor('white')
ax1.set_facecolor('white')
ax2.set_facecolor('white')

sns.countplot(x=mulheres_unicas_verao['Year'], hue=mulheres_unicas_verao['Year'], legend=False, data=mulheres_unicas_verao, palette='Set2', ax=ax1)
ax1.set_title('Distribuição de medalhas por ano - Verão')
ax1.set_ylabel('Medalhas')
ax1.set_xlabel('')

sns.countplot(x=mulheres_unicas_inverno['Year'],hue=mulheres_unicas_inverno['Year'], legend=False, data=mulheres_unicas_inverno, palette='Set2', ax=ax2)
ax2.set_title('Distribuição de medalhas por ano - Inverno')
ax2.set_ylabel('Medalhas')
ax2.set_xlabel('')
 270:
top_10_medalhas_ouro = mesclado['region'][mesclado['Medal']=='Gold'].value_counts().head(10)

top_10_medalhas_ouro.plot(kind='bar', figsize=(10,7), color='#f0e68c')
plt.title('Top 10 Países por Número de Medalhas de Ouro')
plt.xlabel('País')
plt.ylabel('Número de Medalhas')
plt.xticks(rotation=45)
plt.tight_layout()
 271:
top_10_medalhas_ouro = mesclado['region'][mesclado['Medal']=='Gold'].value_counts().head(10)

top_10_medalhas_ouro.plot(kind='bar', figsize=(10,7), color=cores_douradas.get('Gold'))
plt.title('Top 10 Países por Número de Medalhas de Ouro')
plt.xlabel('País')
plt.ylabel('Número de Medalhas')
plt.xticks(rotation=45)
plt.tight_layout()
 272:
top_10_medalhas_ouro = mesclado['region'][mesclado['Medal']=='Gold'].value_counts().head(10)

top_10_medalhas_ouro.plot(kind='bar', figsize=(10,7), color=cores_medalhas.get('Gold'))
plt.title('Top 10 Países por Número de Medalhas de Ouro')
plt.xlabel('País')
plt.ylabel('Número de Medalhas')
plt.xticks(rotation=45)
plt.tight_layout()
 273:
mulheres_verao = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Summer")]
mulhes_inverno = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Winter")]

mulheres_unicas_verao = mulheres_verao.drop_duplicates(subset=['ID', 'Year'])
mulheres_unicas_inverno = mulhes_inverno.drop_duplicates(subset=['ID', 'Year'])

fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(14, 16))

fig.patch.set_facecolor('white')
ax1.set_facecolor('white')
ax2.set_facecolor('white')

sns.countplot(x=mulheres_unicas_verao['Year'], hue=mulheres_unicas_verao['Year'], legend=False, data=mulheres_unicas_verao, palette='Set2', ax=ax1)
ax1.set_title('Distribuição de medalhas por ano - Verão', fontsize=15, fontweight="bold")
ax1.set_ylabel('Medalhas')
ax1.set_xlabel('')

sns.countplot(x=mulheres_unicas_inverno['Year'],hue=mulheres_unicas_inverno['Year'], legend=False, data=mulheres_unicas_inverno, palette='Set2', ax=ax2)
ax2.set_title('Distribuição de medalhas por ano - Inverno', fontsize=15, fontweight="bold")
ax2.set_ylabel('Medalhas')
ax2.set_xlabel('')
 274:
top_10_medalhas_ouro = mesclado['region'][mesclado['Medal']=='Gold'].value_counts().head(10)

top_10_medalhas_ouro.plot(kind='bar', figsize=(10,7), color=cores_medalhas.get('Gold'))
plt.title('Top 10 Países por Número de Medalhas de Ouro', fontsize=15, fontweight="bold")
plt.xlabel('País')
plt.ylabel('Número de Medalhas')
plt.xticks(rotation=45)
plt.tight_layout()
 275:
top_10_medalhas_ouro = mesclado['region'][mesclado['Medal']=='Gold'].value_counts().head(10)

top_10_medalhas_ouro.plot(kind='bar', figsize=(10,7), color=cores_medalhas.get('Gold'))
plt.title('Medalhas de Ouro distribuídas por País (Top 10)', fontsize=15, fontweight="bold")
plt.xlabel('')
plt.ylabel('Número de Medalhas')
plt.xticks(rotation=45)
plt.tight_layout()
 276:
top_10_medalhas_ouro = mesclado['region'][mesclado['Medal']=='Gold'].value_counts().head(10)

top_10_medalhas_ouro.plot(kind='bar', figsize=(10,7), color=cores_medalhas.get('Gold'))

plt.figure(figsize=(20,10))
plt.title('Medalhas de Ouro distribuídas por País (Top 10)', fontsize=15, fontweight="bold")
plt.xlabel('')
plt.ylabel('Número de Medalhas')
plt.xticks(rotation=45)
plt.tight_layout()
 277:
top_10_medalhas_ouro = mesclado['region'][mesclado['Medal']=='Gold'].value_counts().head(10)

plt.figure(figsize=(20,10))
top_10_medalhas_ouro.plot(kind='bar', figsize=(10,7), color=cores_medalhas.get('Gold'))

plt.title('Medalhas de Ouro distribuídas por País (Top 10)', fontsize=15, fontweight="bold")
plt.xlabel('')
plt.ylabel('Número de Medalhas')
plt.xticks(rotation=45)
plt.tight_layout()
 278:
top_10_medalhas_ouro = mesclado['region'][mesclado['Medal']=='Gold'].value_counts().head(10)

plt.figure(figsize=(20,20))

top_10_medalhas_ouro.plot(kind='bar', figsize=(10,7), color=cores_medalhas.get('Gold'))

plt.title('Medalhas de Ouro distribuídas por País (Top 10)', fontsize=15, fontweight="bold")
plt.xlabel('')
plt.ylabel('Número de Medalhas')
plt.xticks(rotation=45)
plt.tight_layout()
 279:
top_10_medalhas_ouro = mesclado['region'][mesclado['Medal']=='Gold'].value_counts().head(10)

plt.figure(figsize=(20,10))

top_10_medalhas_ouro.plot(kind='bar', figsize=(10,7), color=cores_medalhas.get('Gold'))

plt.title('Medalhas de Ouro distribuídas por País (Top 10)', fontsize=15, fontweight="bold")
plt.xlabel('')
plt.ylabel('Número de Medalhas')
plt.xticks(rotation=45)
plt.tight_layout()
 280:
top_10_medalhas_ouro = mesclado['region'][mesclado['Medal']=='Gold'].value_counts().head(10)

plt.figure(figsize=(20,10))

top_10_medalhas_ouro.plot(kind='bar', figsize=(10,7), color=cores_medalhas.get('Gold'))

plt.title('Medalhas de Ouro distribuídas por País (Top 10)', fontsize=15, fontweight="bold")
plt.xlabel('')
plt.ylabel('Número de Medalhas')
plt.xticks(rotation=45)
 281:
top_10_medalhas_ouro = mesclado['region'][mesclado['Medal']=='Gold'].value_counts().head(10)

plt.figure(figsize=(20,10))

top_10_medalhas_ouro.plot(kind='bar', figsize=(10,7), color=cores_medalhas.get('Gold'))

plt.title('Medalhas de Ouro distribuídas por País (Top 10)', fontsize=15, fontweight="bold")
plt.xlabel('')
plt.ylabel('Número de Medalhas')
plt.xticks(rotation=45)
plt.tight_layout()
 282:
top_10_medalhas_ouro = mesclado['region'][mesclado['Medal']=='Gold'].value_counts().head(10)
top_10_medalhas_prata = mesclado['region'][mesclado['Medal']=='Silver'].value_counts().head(10)
top_10_medalhas_bronze = mesclado['region'][mesclado['Medal']=='Bronze'].value_counts().head(10)

fig, (ax1, ax2, ax3) = plt.subplots(nrows=3, ncols=1, figsize=(20,10))

fig.patch.set_facecolor('white')
ax1.set_facecolor('white')
ax2.set_facecolor('white')
ax3.set_facecolor('white')

top_10_medalhas_ouro.plot(kind='bar', figsize=(10,7), color=cores_medalhas.get('Gold'), ax=ax1)
top_10_medalhas_prata.plot(kind='bar', figsize=(10,7), color=cores_medalhas.get('Silver'), ax=ax2)
top_10_medalhas_bronze.plot(kind='bar', figsize=(10,7), color=cores_medalhas.get('Bronze'), ax=ax3)

ax1.set_title('Medalhas de Ouro distribuídas por País (Top 10)', fontsize=15, fontweight="bold")
ax1.set_ylabel('Medalhas')
ax1.set_xlabel('')

ax2.set_title('Medalhas de Prata distribuídas por País (Top 10)', fontsize=15, fontweight="bold")
ax2.set_ylabel('Medalhas')
ax2.set_xlabel('')

ax3.set_title('Medalhas de Bronze distribuídas por País (Top 10)', fontsize=15, fontweight="bold")
ax3.set_ylabel('Medalhas')
ax3.set_xlabel('')
 283:
top_10_medalhas_ouro = mesclado['region'][mesclado['Medal']=='Gold'].value_counts().head(10)
top_10_medalhas_prata = mesclado['region'][mesclado['Medal']=='Silver'].value_counts().head(10)
top_10_medalhas_bronze = mesclado['region'][mesclado['Medal']=='Bronze'].value_counts().head(10)

fig, (ax1, ax2, ax3) = plt.subplots(nrows=3, ncols=1, figsize=(20,10))

fig.patch.set_facecolor('white')
ax1.set_facecolor('white')
ax2.set_facecolor('white')
ax3.set_facecolor('white')

top_10_medalhas_ouro.plot(kind='bar', figsize=(10,7), color=cores_medalhas.get('Gold'), ax=ax1)
top_10_medalhas_prata.plot(kind='bar', figsize=(10,7), color=cores_medalhas.get('Silver'), ax=ax2)
top_10_medalhas_bronze.plot(kind='bar', figsize=(10,7), color=cores_medalhas.get('Bronze'), ax=ax3)

ax1.set_title('Medalhas de Ouro distribuídas por País (Top 10)', fontsize=15, fontweight="bold")
ax1.set_ylabel('Medalhas')
ax1.set_xlabel('')

ax2.set_title('Medalhas de Prata distribuídas por País (Top 10)', fontsize=15, fontweight="bold")
ax2.set_ylabel('Medalhas')
ax2.set_xlabel('')

ax3.set_title('Medalhas de Bronze distribuídas por País (Top 10)', fontsize=15, fontweight="bold")
ax3.set_ylabel('Medalhas')
ax3.set_xlabel('')

plt.tight_layout()
 284:
top_10_medalhas_ouro = mesclado['region'][mesclado['Medal']=='Gold'].value_counts().head(10)
top_10_medalhas_prata = mesclado['region'][mesclado['Medal']=='Silver'].value_counts().head(10)
top_10_medalhas_bronze = mesclado['region'][mesclado['Medal']=='Bronze'].value_counts().head(10)

fig, (ax1, ax2, ax3) = plt.subplots(nrows=3, ncols=1, figsize=(20,10))

fig.patch.set_facecolor('white')
ax1.set_facecolor('white')
ax2.set_facecolor('white')
ax3.set_facecolor('white')

top_10_medalhas_ouro.plot(kind='bar', figsize=(10,7), color=cores_medalhas.get('Gold'), ax=ax1)
top_10_medalhas_prata.plot(kind='bar', figsize=(10,7), color=cores_medalhas.get('Silver'), ax=ax2)
top_10_medalhas_bronze.plot(kind='bar', figsize=(10,7), color=cores_medalhas.get('Bronze'), ax=ax3)

ax1.set_title('Medalhas de Ouro distribuídas por País (Top 10)', fontsize=15, fontweight="bold")
ax1.set_ylabel('Medalhas')
ax1.set_xlabel('')

ax2.set_title('Medalhas de Prata distribuídas por País (Top 10)', fontsize=15, fontweight="bold")
ax2.set_ylabel('Medalhas')
ax2.set_xlabel('')

ax3.set_title('Medalhas de Bronze distribuídas por País (Top 10)', fontsize=15, fontweight="bold")
ax3.set_ylabel('Medalhas')
ax3.set_xlabel('')

plt.tight_layout()
plt.xticks(rotation=45)
 285:
top_10_medalhas_ouro = mesclado['region'][mesclado['Medal']=='Gold'].value_counts().head(10)
top_10_medalhas_prata = mesclado['region'][mesclado['Medal']=='Silver'].value_counts().head(10)
top_10_medalhas_bronze = mesclado['region'][mesclado['Medal']=='Bronze'].value_counts().head(10)

fig, (ax1, ax2, ax3) = plt.subplots(nrows=3, ncols=1, figsize=(20,10))

fig.patch.set_facecolor('white')
ax1.set_facecolor('white')
ax2.set_facecolor('white')
ax3.set_facecolor('white')

top_10_medalhas_ouro.plot(kind='bar', figsize=(10,7), color=cores_medalhas.get('Gold'), ax=ax1)
top_10_medalhas_prata.plot(kind='bar', figsize=(10,7), color=cores_medalhas.get('Silver'), ax=ax2)
top_10_medalhas_bronze.plot(kind='bar', figsize=(10,7), color=cores_medalhas.get('Bronze'), ax=ax3)

ax1.set_title('Medalhas de Ouro distribuídas por País (Top 10)', fontsize=15, fontweight="bold")
ax1.set_ylabel('Medalhas')
ax1.set_xlabel('')

ax2.set_title('Medalhas de Prata distribuídas por País (Top 10)', fontsize=15, fontweight="bold")
ax2.set_ylabel('Medalhas')
ax2.set_xlabel('')

ax3.set_title('Medalhas de Bronze distribuídas por País (Top 10)', fontsize=15, fontweight="bold")
ax3.set_ylabel('Medalhas')
ax3.set_xlabel('')

plt.tight_layout()
ax1.xticks(rotation=45)
 286:
top_10_medalhas_ouro = mesclado['region'][mesclado['Medal']=='Gold'].value_counts().head(10)
top_10_medalhas_prata = mesclado['region'][mesclado['Medal']=='Silver'].value_counts().head(10)
top_10_medalhas_bronze = mesclado['region'][mesclado['Medal']=='Bronze'].value_counts().head(10)

fig, (ax1, ax2, ax3) = plt.subplots(nrows=3, ncols=1, figsize=(20,10))

fig.patch.set_facecolor('white')
ax1.set_facecolor('white')
ax2.set_facecolor('white')
ax3.set_facecolor('white')

top_10_medalhas_ouro.plot(kind='bar', figsize=(10,7), color=cores_medalhas.get('Gold'), ax=ax1)
top_10_medalhas_prata.plot(kind='bar', figsize=(10,7), color=cores_medalhas.get('Silver'), ax=ax2)
top_10_medalhas_bronze.plot(kind='bar', figsize=(10,7), color=cores_medalhas.get('Bronze'), ax=ax3)

ax1.set_title('Medalhas de Ouro distribuídas por País (Top 10)', fontsize=15, fontweight="bold")
ax1.set_ylabel('Medalhas')
ax1.set_xlabel('')

ax2.set_title('Medalhas de Prata distribuídas por País (Top 10)', fontsize=15, fontweight="bold")
ax2.set_ylabel('Medalhas')
ax2.set_xlabel('')

ax3.set_title('Medalhas de Bronze distribuídas por País (Top 10)', fontsize=15, fontweight="bold")
ax3.set_ylabel('Medalhas')
ax3.set_xlabel('')

plt.tight_layout()
ax1.set_xticks(rotation=45)
 287:
top_10_medalhas_ouro = mesclado['region'][mesclado['Medal']=='Gold'].value_counts().head(10)
top_10_medalhas_prata = mesclado['region'][mesclado['Medal']=='Silver'].value_counts().head(10)
top_10_medalhas_bronze = mesclado['region'][mesclado['Medal']=='Bronze'].value_counts().head(10)

fig, (ax1, ax2, ax3) = plt.subplots(nrows=3, ncols=1, figsize=(20,10))

fig.patch.set_facecolor('white')
ax1.set_facecolor('white')
ax2.set_facecolor('white')
ax3.set_facecolor('white')

top_10_medalhas_ouro.plot(kind='bar', figsize=(10,7), color=cores_medalhas.get('Gold'), ax=ax1)
top_10_medalhas_prata.plot(kind='bar', figsize=(10,7), color=cores_medalhas.get('Silver'), ax=ax2)
top_10_medalhas_bronze.plot(kind='bar', figsize=(10,7), color=cores_medalhas.get('Bronze'), ax=ax3)

ax1.set_title('Medalhas de Ouro distribuídas por País (Top 10)', fontsize=15, fontweight="bold")
ax1.set_ylabel('Medalhas')
ax1.set_xlabel('')

ax2.set_title('Medalhas de Prata distribuídas por País (Top 10)', fontsize=15, fontweight="bold")
ax2.set_ylabel('Medalhas')
ax2.set_xlabel('')

ax3.set_title('Medalhas de Bronze distribuídas por País (Top 10)', fontsize=15, fontweight="bold")
ax3.set_ylabel('Medalhas')
ax3.set_xlabel('')

plt.tight_layout()
 288:
top_10_medalhas_ouro = mesclado['region'][mesclado['Medal']=='Gold'].value_counts().head(10)
top_10_medalhas_prata = mesclado['region'][mesclado['Medal']=='Silver'].value_counts().head(10)
top_10_medalhas_bronze = mesclado['region'][mesclado['Medal']=='Bronze'].value_counts().head(10)

fig, (ax1, ax2, ax3) = plt.subplots(nrows=3, ncols=1, figsize=(20,10))

fig.patch.set_facecolor('white')
ax1.set_facecolor('white')
ax2.set_facecolor('white')
ax3.set_facecolor('white')

top_10_medalhas_ouro.plot(kind='bar', figsize=(10,7), color=cores_medalhas.get('Gold'), ax=ax1)
top_10_medalhas_prata.plot(kind='bar', figsize=(10,7), color=cores_medalhas.get('Silver'), ax=ax2)
top_10_medalhas_bronze.plot(kind='bar', figsize=(10,7), color=cores_medalhas.get('Bronze'), ax=ax3)

ax1.set_title('Medalhas de Ouro distribuídas por País (Top 10)', fontsize=15, fontweight="bold")
ax1.set_ylabel('Medalhas')
ax1.set_xlabel('')

ax2.set_title('Medalhas de Prata distribuídas por País (Top 10)', fontsize=15, fontweight="bold")
ax2.set_ylabel('Medalhas')
ax2.set_xlabel('')

ax3.set_title('Medalhas de Bronze distribuídas por País (Top 10)', fontsize=15, fontweight="bold")
ax3.set_ylabel('Medalhas')
ax3.set_xlabel('')

plt.tight_layout()
 289:
top_10_medalhas_ouro = mesclado['region'][mesclado['Medal']=='Gold'].value_counts().head(10)
top_10_medalhas_prata = mesclado['region'][mesclado['Medal']=='Silver'].value_counts().head(10)
top_10_medalhas_bronze = mesclado['region'][mesclado['Medal']=='Bronze'].value_counts().head(10)

fig, (ax1, ax2, ax3) = plt.subplots(nrows=3, ncols=1, figsize=(20,10))

fig.patch.set_facecolor('white')
ax1.set_facecolor('white')
ax2.set_facecolor('white')
ax3.set_facecolor('white')

top_10_medalhas_ouro.plot(kind='bar', color=cores_medalhas.get('Gold'), ax=ax1)
top_10_medalhas_prata.plot(kind='bar', color=cores_medalhas.get('Silver'), ax=ax2)
top_10_medalhas_bronze.plot(kind='bar', color=cores_medalhas.get('Bronze'), ax=ax3)

ax1.set_title('Medalhas de Ouro distribuídas por País (Top 10)', fontsize=15, fontweight="bold")
ax1.set_ylabel('Medalhas')
ax1.set_xlabel('')

ax2.set_title('Medalhas de Prata distribuídas por País (Top 10)', fontsize=15, fontweight="bold")
ax2.set_ylabel('Medalhas')
ax2.set_xlabel('')

ax3.set_title('Medalhas de Bronze distribuídas por País (Top 10)', fontsize=15, fontweight="bold")
ax3.set_ylabel('Medalhas')
ax3.set_xlabel('')

plt.tight_layout()
 290:
top_10_medalhas_ouro = mesclado['region'][mesclado['Medal']=='Gold'].value_counts().head(10)
top_10_medalhas_prata = mesclado['region'][mesclado['Medal']=='Silver'].value_counts().head(10)
top_10_medalhas_bronze = mesclado['region'][mesclado['Medal']=='Bronze'].value_counts().head(10)

fig, (ax1, ax2, ax3) = plt.subplots(nrows=3, ncols=1, figsize=(20,10))

fig.patch.set_facecolor('white')
ax1.set_facecolor('white')
ax2.set_facecolor('white')
ax3.set_facecolor('white')

top_10_medalhas_ouro.plot(kind='bar', color=cores_medalhas.get('Gold'), ax=ax1)
top_10_medalhas_prata.plot(kind='bar', color=cores_medalhas.get('Silver'), ax=ax2)
top_10_medalhas_bronze.plot(kind='bar', color=cores_medalhas.get('Bronze'), ax=ax3)

ax1.set_title('Medalhas de Ouro distribuídas por País (Top 10)', fontsize=15, fontweight="bold")
ax1.set_ylabel('Medalhas')
ax1.set_xlabel('')

ax2.set_title('Medalhas de Prata distribuídas por País (Top 10)', fontsize=15, fontweight="bold")
ax2.set_ylabel('Medalhas')
ax2.set_xlabel('')
ax2.set_xticklabels(rotation=0)

ax3.set_title('Medalhas de Bronze distribuídas por País (Top 10)', fontsize=15, fontweight="bold")
ax3.set_ylabel('Medalhas')
ax3.set_xlabel('')

plt.tight_layout()
 291:
top_10_medalhas_ouro = mesclado['region'][mesclado['Medal']=='Gold'].value_counts().head(10)
top_10_medalhas_prata = mesclado['region'][mesclado['Medal']=='Silver'].value_counts().head(10)
top_10_medalhas_bronze = mesclado['region'][mesclado['Medal']=='Bronze'].value_counts().head(10)

fig, (ax1, ax2, ax3) = plt.subplots(nrows=3, ncols=1, figsize=(20,10))

fig.patch.set_facecolor('white')
ax1.set_facecolor('white')
ax2.set_facecolor('white')
ax3.set_facecolor('white')

top_10_medalhas_ouro.plot(kind='bar', color=cores_medalhas.get('Gold'), ax=ax1)
top_10_medalhas_prata.plot(kind='bar', color=cores_medalhas.get('Silver'), ax=ax2)
top_10_medalhas_bronze.plot(kind='bar', color=cores_medalhas.get('Bronze'), ax=ax3)

ax1.set_title('Medalhas de Ouro distribuídas por País (Top 10)', fontsize=15, fontweight="bold")
ax1.set_ylabel('Medalhas')
ax1.set_xlabel('')

ax2.set_title('Medalhas de Prata distribuídas por País (Top 10)', fontsize=15, fontweight="bold")
ax2.set_ylabel('Medalhas')
ax2.set_xlabel('')
ax2.set_xticklabels(top_10_medalhas_prata['Country'], rotation=0)

ax3.set_title('Medalhas de Bronze distribuídas por País (Top 10)', fontsize=15, fontweight="bold")
ax3.set_ylabel('Medalhas')
ax3.set_xlabel('')

plt.tight_layout()
 292:
top_10_medalhas_ouro = mesclado['region'][mesclado['Medal']=='Gold'].value_counts().head(10)
top_10_medalhas_prata = mesclado['region'][mesclado['Medal']=='Silver'].value_counts().head(10)
top_10_medalhas_bronze = mesclado['region'][mesclado['Medal']=='Bronze'].value_counts().head(10)

fig, (ax1, ax2, ax3) = plt.subplots(nrows=3, ncols=1, figsize=(20,10))

fig.patch.set_facecolor('white')
ax1.set_facecolor('white')
ax2.set_facecolor('white')
ax3.set_facecolor('white')

top_10_medalhas_ouro.plot(kind='bar', color=cores_medalhas.get('Gold'), ax=ax1)
top_10_medalhas_prata.plot(kind='bar', color=cores_medalhas.get('Silver'), ax=ax2)
top_10_medalhas_bronze.plot(kind='bar', color=cores_medalhas.get('Bronze'), ax=ax3)

ax1.set_title('Medalhas de Ouro distribuídas por País (Top 10)', fontsize=15, fontweight="bold")
ax1.set_ylabel('Medalhas')
ax1.set_xlabel('')

ax2.set_title('Medalhas de Prata distribuídas por País (Top 10)', fontsize=15, fontweight="bold")
ax2.set_ylabel('Medalhas')
ax2.set_xlabel('')
ax2.set_xticklabels(top_10_medalhas_prata['region'], rotation=0)

ax3.set_title('Medalhas de Bronze distribuídas por País (Top 10)', fontsize=15, fontweight="bold")
ax3.set_ylabel('Medalhas')
ax3.set_xlabel('')

plt.tight_layout()
 293:
top_10_medalhas_ouro = mesclado['region'][mesclado['Medal']=='Gold'].value_counts().head(10)
top_10_medalhas_prata = mesclado['region'][mesclado['Medal']=='Silver'].value_counts().head(10)
top_10_medalhas_bronze = mesclado['region'][mesclado['Medal']=='Bronze'].value_counts().head(10)

fig, (ax1, ax2, ax3) = plt.subplots(nrows=3, ncols=1, figsize=(20,10))

fig.patch.set_facecolor('white')
ax1.set_facecolor('white')
ax2.set_facecolor('white')
ax3.set_facecolor('white')

top_10_medalhas_ouro.plot(kind='bar', color=cores_medalhas.get('Gold'), ax=ax1)
top_10_medalhas_prata.plot(kind='bar', color=cores_medalhas.get('Silver'), ax=ax2)
top_10_medalhas_bronze.plot(kind='bar', color=cores_medalhas.get('Bronze'), ax=ax3)

ax1.set_title('Medalhas de Ouro distribuídas por País (Top 10)', fontsize=15, fontweight="bold")
ax1.set_ylabel('Medalhas')
ax1.set_xlabel('')

ax2.set_title('Medalhas de Prata distribuídas por País (Top 10)', fontsize=15, fontweight="bold")
ax2.set_ylabel('Medalhas')
ax2.set_xlabel('')
ax2.set_xticklabels(top_10_medalhas_prata['NOC'], rotation=0)

ax3.set_title('Medalhas de Bronze distribuídas por País (Top 10)', fontsize=15, fontweight="bold")
ax3.set_ylabel('Medalhas')
ax3.set_xlabel('')

plt.tight_layout()
 294:
top_10_medalhas_ouro = mesclado['region'][mesclado['Medal']=='Gold'].value_counts().head(10)
top_10_medalhas_prata = mesclado['region'][mesclado['Medal']=='Silver'].value_counts().head(10)
top_10_medalhas_bronze = mesclado['region'][mesclado['Medal']=='Bronze'].value_counts().head(10)

fig, (ax1, ax2, ax3) = plt.subplots(nrows=3, ncols=1, figsize=(20,10))

fig.patch.set_facecolor('white')
ax1.set_facecolor('white')
ax2.set_facecolor('white')
ax3.set_facecolor('white')

top_10_medalhas_ouro.plot(kind='bar', color=cores_medalhas.get('Gold'), ax=ax1)
top_10_medalhas_prata.plot(kind='bar', color=cores_medalhas.get('Silver'), ax=ax2)
top_10_medalhas_bronze.plot(kind='bar', color=cores_medalhas.get('Bronze'), ax=ax3)

ax1.set_title('Medalhas de Ouro distribuídas por País (Top 10)', fontsize=15, fontweight="bold")
ax1.set_ylabel('Medalhas')
ax1.set_xlabel('')

ax2.set_title('Medalhas de Prata distribuídas por País (Top 10)', fontsize=15, fontweight="bold")
ax2.set_ylabel('Medalhas')
ax2.set_xlabel('')
ax2.set_xticklabels(top_10_medalhas_prata.index, rotation=0)

ax3.set_title('Medalhas de Bronze distribuídas por País (Top 10)', fontsize=15, fontweight="bold")
ax3.set_ylabel('Medalhas')
ax3.set_xlabel('')

plt.tight_layout()
 295:
top_10_medalhas_ouro = mesclado['region'][mesclado['Medal']=='Gold'].value_counts().head(10)
top_10_medalhas_prata = mesclado['region'][mesclado['Medal']=='Silver'].value_counts().head(10)
top_10_medalhas_bronze = mesclado['region'][mesclado['Medal']=='Bronze'].value_counts().head(10)

fig, (ax1, ax2, ax3) = plt.subplots(nrows=3, ncols=1, figsize=(20,10))

fig.patch.set_facecolor('white')
ax1.set_facecolor('white')
ax2.set_facecolor('white')
ax3.set_facecolor('white')

top_10_medalhas_ouro.plot(kind='bar', color=cores_medalhas.get('Gold'), ax=ax1)
top_10_medalhas_prata.plot(kind='bar', color=cores_medalhas.get('Silver'), ax=ax2)
top_10_medalhas_bronze.plot(kind='bar', color=cores_medalhas.get('Bronze'), ax=ax3)

ax1.set_title('Medalhas de Ouro distribuídas por País (Top 10)', fontsize=15, fontweight="bold")
ax1.set_ylabel('Medalhas')
ax1.set_xlabel('')
ax1.set_xticklabels(top_10_medalhas_ouro.index, rotation=0)


ax2.set_title('Medalhas de Prata distribuídas por País (Top 10)', fontsize=15, fontweight="bold")
ax2.set_ylabel('Medalhas')
ax2.set_xlabel('')
ax2.set_xticklabels(top_10_medalhas_prata.index, rotation=0)

ax3.set_title('Medalhas de Bronze distribuídas por País (Top 10)', fontsize=15, fontweight="bold")
ax3.set_ylabel('Medalhas')
ax3.set_xlabel('')
ax3.set_xticklabels(top_10_medalhas_bronze.index, rotation=0)
 296:
top_10_medalhas_ouro = mesclado['region'][mesclado['Medal']=='Gold'].value_counts().head(10)
top_10_medalhas_prata = mesclado['region'][mesclado['Medal']=='Silver'].value_counts().head(10)
top_10_medalhas_bronze = mesclado['region'][mesclado['Medal']=='Bronze'].value_counts().head(10)

fig, (ax1, ax2, ax3) = plt.subplots(nrows=3, ncols=1, figsize=(20,10))

fig.patch.set_facecolor('white')
ax1.set_facecolor('white')
ax2.set_facecolor('white')
ax3.set_facecolor('white')

top_10_medalhas_ouro.plot(kind='bar', color=cores_medalhas.get('Gold'), ax=ax1)
top_10_medalhas_prata.plot(kind='bar', color=cores_medalhas.get('Silver'), ax=ax2)
top_10_medalhas_bronze.plot(kind='bar', color=cores_medalhas.get('Bronze'), ax=ax3)

ax1.set_title('Medalhas de Ouro distribuídas por País (Top 10)', fontsize=15, fontweight="bold")
ax1.set_ylabel('Medalhas')
ax1.set_xlabel('')
ax1.set_xticklabels(top_10_medalhas_ouro.index, rotation=0)


ax2.set_title('Medalhas de Prata distribuídas por País (Top 10)', fontsize=15, fontweight="bold")
ax2.set_ylabel('Medalhas')
ax2.set_xlabel('')
ax2.set_xticklabels(top_10_medalhas_prata.index, rotation=0)

ax3.set_title('Medalhas de Bronze distribuídas por País (Top 10)', fontsize=15, fontweight="bold")
ax3.set_ylabel('Medalhas')
ax3.set_xlabel('')
ax3.set_xticklabels(top_10_medalhas_bronze.index, rotation=0)


plt.tight_layout()
 297:

participacoes_paises = mesclado.drop_duplicates(subset=['ID', 'Year'])
 298:

participacoes_paises = mesclado.drop_duplicates(subset=['ID', 'Year'])
participacoes_paises
 299:

participacoes_paises = mesclado.drop_duplicates(subset=['ID', 'Year'])


fig, ax= plt.subplot(figsize=(14, 16))

fig.patch.set_facecolor('white')
ax1.set_facecolor('white')
ax2.set_facecolor('white')

sns.countplot(x=participacoes_paises['Year'], hue=participacoes_paises['Year'], legend=False, data=participacoes_paises, palette='Set2')
ax1.set_title('Distribuição de medalhas por ano - Verão', fontsize=15, fontweight="bold")
ax1.set_ylabel('Medalhas')
ax1.set_xlabel('')
 300:

participacoes_paises = mesclado.drop_duplicates(subset=['ID', 'Year'])


fig, ax= plt.subplot(1,1, figsize=(14, 16))

fig.patch.set_facecolor('white')
ax1.set_facecolor('white')
ax2.set_facecolor('white')

sns.countplot(x=participacoes_paises['Year'], hue=participacoes_paises['Year'], legend=False, data=participacoes_paises, palette='Set2')
ax1.set_title('Distribuição de medalhas por ano - Verão', fontsize=15, fontweight="bold")
ax1.set_ylabel('Medalhas')
ax1.set_xlabel('')
 301:

participacoes_paises = mesclado.drop_duplicates(subset=['ID', 'Year'])


fig, ax = plt.figure(figsize=(14, 16))

fig.patch.set_facecolor('white')
ax.set_facecolor('white')

sns.countplot(x=participacoes_paises['Year'], hue=participacoes_paises['Year'], legend=False, data=participacoes_paises, palette='Set2')
ax.set_title('Distribuição de medalhas por ano - Verão', fontsize=15, fontweight="bold")
ax.set_ylabel('Medalhas')
ax.set_xlabel('')
 302:

participacoes_paises = mesclado.drop_duplicates(subset=['ID', 'Year'])


plt.figure(figsize=(14, 16))

fig.patch.set_facecolor('white')


ax = sns.countplot(x=participacoes_paises['Year'], hue=participacoes_paises['Year'], legend=False, data=participacoes_paises, palette='Set2')
ax.set_facecolor('white')
ax.set_title('Distribuição de medalhas por ano - Verão', fontsize=15, fontweight="bold")
ax.set_ylabel('Medalhas')
ax.set_xlabel('')
 303:

participacoes_paises = mesclado.drop_duplicates(subset=['ID', 'Year'])[10]


plt.figure(figsize=(14, 16))

fig.patch.set_facecolor('white')


ax = sns.countplot(x=participacoes_paises['Year'], hue=participacoes_paises['Year'], legend=False, data=participacoes_paises, palette='Set2')
ax.set_facecolor('white')
ax.set_title('Distribuição de medalhas por ano - Verão', fontsize=15, fontweight="bold")
ax.set_ylabel('Medalhas')
ax.set_xlabel('')
 304:

participacoes_paises = mesclado.drop_duplicates(subset=['ID', 'Year'])


plt.figure(figsize=(14, 16))

fig.patch.set_facecolor('white')


ax = sns.countplot(x=participacoes_paises['region'], hue=participacoes_paises['region'], legend=False, data=participacoes_paises, palette='Set2')
ax.set_facecolor('white')
ax.set_title('Distribuição de medalhas por ano - Verão', fontsize=15, fontweight="bold")
ax.set_ylabel('Medalhas')
ax.set_xlabel('')
 305:

participacoes_paises = mesclado.drop_duplicates(subset=['ID', 'Year'])
participacoes_paises = participacoes_paises.groupby('NOC').size().reset_index(name='Participacoes')

participacoes_paises
'''
plt.figure(figsize=(14, 16))

fig.patch.set_facecolor('white')


ax = sns.countplot(x=participacoes_paises['region'], hue=participacoes_paises['region'], legend=False, data=participacoes_paises, palette='Set2')
ax.set_facecolor('white')
ax.set_title('Distribuição de medalhas por ano - Verão', fontsize=15, fontweight="bold")
ax.set_ylabel('Medalhas')
ax.set_xlabel('')'''
 306:

participacoes_paises = mesclado.drop_duplicates(subset=['ID', 'Year'])
participacoes_paises = participacoes_paises.groupby('NOC').size()

participacoes_paises
'''
plt.figure(figsize=(14, 16))

fig.patch.set_facecolor('white')


ax = sns.countplot(x=participacoes_paises['region'], hue=participacoes_paises['region'], legend=False, data=participacoes_paises, palette='Set2')
ax.set_facecolor('white')
ax.set_title('Distribuição de medalhas por ano - Verão', fontsize=15, fontweight="bold")
ax.set_ylabel('Medalhas')
ax.set_xlabel('')'''
 307:

participacoes_paises = mesclado.drop_duplicates(subset=['ID', 'Year'])
participacoes_paises = participacoes_paises.groupby('NOC').size()

participacoes_paises
 308:

participacoes_paises = mesclado.drop_duplicates(subset=['ID', 'Year'])
participacoes_paises = participacoes_paises.groupby('NOC').size().sort_values()

participacoes_paises
 309:

participacoes_paises = mesclado.drop_duplicates(subset=['ID', 'Year'])
participacoes_paises = participacoes_paises.groupby('NOC').size().sort_values(ascending=False)

participacoes_paises
 310:

participacoes_paises = mesclado.drop_duplicates(subset=['ID', 'Year'])


participacoes_paises
 311:

participacoes_paises = mesclado.drop_duplicates(subset=['ID', 'Year'])
contagem  = participacoes_paises['region'].value_counts()

contagem
 312:

participacoes_paises = mesclado.drop_duplicates(subset=['ID', 'Year'])
contagem  = participacoes_paises.groupby(['Year', 'region'])

contagem
 313:

participacoes_paises = mesclado.drop_duplicates(subset=['ID', 'Year'])
contagem  = participacoes_paises.groupby(['Year', 'region']).head()

contagem
 314:

participacoes_paises = mesclado.drop_duplicates(subset=['ID', 'Year'])
contagem  = participacoes_paises.groupby(['Year', 'region']).first()

contagem
 315:

participacoes_paises = mesclado.drop_duplicates(subset=['ID', 'Year'])
agrupado = participacoes_paises.groupby(['Year', 'region']).first()

contagem = agrupado['region'].value_counts()

contagem
 316:

participacoes_paises = mesclado.drop_duplicates(subset=['ID', 'Year'])
agrupado = participacoes_paises.groupby(['Year', 'region']).first().unstack()

agrupado
 317:

participacoes_paises = mesclado.drop_duplicates(subset=['ID', 'Year'])
agrupado = participacoes_paises.groupby(['Year', 'region']).first()

agrupado
 318:

participacoes_paises = mesclado.drop_duplicates(subset=['ID', 'Year'])
agrupado = participacoes_paises.groupby(['Year', 'region']).first().reset_index()

agrupado
 319:

participacoes_paises = mesclado.drop_duplicates(subset=['ID', 'Year'])
agrupado = participacoes_paises.groupby(['Year', 'region']).first().reset_index()

agrupado['region'].value_counts()
 320:

participacoes_paises = mesclado.drop_duplicates(subset=['ID', 'Year'])
paises_agrupado = participacoes_paises.groupby(['Year', 'region']).first().reset_index()


ax1 = sns.countplot(x=paises_agrupado['region'], hue=paises_agrupado['region'], legend=False, data=paises_agrupado, palette='Set2')
ax1.set_facecolor('white')
ax1.set_title('Distribuição de medalhas por ano - Verão', fontsize=15, fontweight="bold")
ax1.set_ylabel('Medalhas')
ax1.set_xlabel('')
 321:

participacoes_paises = mesclado.drop_duplicates(subset=['ID', 'Year'])
paises_agrupado = participacoes_paises.groupby(['Year', 'region']).first().reset_index().head(10)


ax1 = sns.countplot(x=paises_agrupado['region'], hue=paises_agrupado['region'], legend=False, data=paises_agrupado, palette='Set2')
ax1.set_facecolor('white')
ax1.set_title('Distribuição de medalhas por ano - Verão', fontsize=15, fontweight="bold")
ax1.set_ylabel('Medalhas')
ax1.set_xlabel('')
 322:

participacoes_paises = mesclado.drop_duplicates(subset=['ID', 'Year'])
paises_agrupado = participacoes_paises.groupby(['Year', 'region']).first().reset_index().head(20)


ax1 = sns.countplot(x=paises_agrupado['region'], hue=paises_agrupado['region'], legend=False, data=paises_agrupado, palette='Set2')
ax1.set_facecolor('white')
ax1.set_title('Distribuição de medalhas por ano - Verão', fontsize=15, fontweight="bold")
ax1.set_ylabel('Medalhas')
ax1.set_xlabel('')
 323:

participacoes_paises = mesclado.drop_duplicates(subset=['ID', 'Year'])
paises_agrupado = participacoes_paises.groupby(['Year', 'region']).first().reset_index()

contagem = paises_agrupado['region'].value_counts().sort_values(ascending=False)

contagem.plot(kind='bar')
 324:

participacoes_paises = mesclado.drop_duplicates(subset=['ID', 'Year'])
paises_agrupado = participacoes_paises.groupby(['Year', 'region']).first().reset_index().head(10)

contagem = paises_agrupado['region'].value_counts().sort_values(ascending=False)

contagem.plot(kind='bar')
 325:

participacoes_paises = mesclado.drop_duplicates(subset=['ID', 'Year'])
paises_agrupado = participacoes_paises.groupby(['Year', 'region']).first().reset_index().head(20)

contagem = paises_agrupado['region'].value_counts().sort_values(ascending=False)

contagem.plot(kind='bar')
 326:

participacoes_paises = mesclado.drop_duplicates(subset=['ID', 'Year'])
paises_agrupado = participacoes_paises.groupby(['Year', 'region']).first().reset_index()

contagem = paises_agrupado['region'].value_counts().sort_values(ascending=False)

contagem.plot(kind='bar')
 327:

participacoes_paises = mesclado.drop_duplicates(subset=['ID', 'Year'])
paises_agrupado = participacoes_paises.groupby(['Year', 'region']).first().reset_index()

contagem = paises_agrupado['region'].value_counts().sort_values(ascending=False)

contagem.plot(kind='bar')

paises_agrupado
 328:

participacoes_paises = mesclado.drop_duplicates(subset=['ID', 'Year'])
paises_agrupado = participacoes_paises.groupby(['Year', 'region']).first().reset_index()

contagem = paises_agrupado['region'].value_counts().sort_values(ascending=False)

contagem.plot(kind='bar')

contagem
 329:

participacoes_paises = mesclado.drop_duplicates(subset=['ID', 'Year'])
paises_agrupado = participacoes_paises.groupby(['Year', 'region']).first().reset_index()

contagem = paises_agrupado['region'].value_counts().sort_values(ascending=False)

contagem.head(20).plot(kind='bar')
 330:
comp_verao = mesclado[mesclado['Season']=='Summer']   
comp_inverno = mesclado[mesclado['Season']=='Winter']  

num_comp_verao = comp_verao['Year'].nunique()           
num_comp_inverno = comp_inverno['Year'].nunique()     

comp_verao = comp_verao[comp_verao['Medal'] != 'NA']
comp_inverno = comp_inverno[comp_inverno['Medal'] != 'NA']

num_medalhas_verao = comp_verao['Medal'].value_counts().sum()
num_medalhas_inverno = comp_inverno['Medal'].value_counts().sum()

media_medalha_comp_verao = (num_medalhas_verao)/(num_comp_verao)
media_medalha_comp_inverno = (num_medalhas_inverno)/(num_comp_inverno)

medalhas_por_ano_verao = mesclado.query('Season == "Summer"').groupby(['Year', 'Medal'])['Medal'].value_counts().unstack().fillna(0).astype(int)
medalhas_por_ano_inverno = mesclado.query('Season == "Winter"').groupby(['Year', 'Medal'])['Medal'].value_counts().unstack().fillna(0).astype(int)

texto = (f"Nesses últimos 120 anos tivemos {num_comp_verao} competições de verão e "
         f"{num_comp_inverno} competições de inverno.\nForam distribuídas "
         f"{num_medalhas_verao + num_medalhas_inverno} medalhas, sendo "
         f"{num_medalhas_verao} nas competições de verão e "
         f"{num_medalhas_inverno} nas competições de inverno.\nNa média, "
         f"são distribuídas {media_medalha_comp_verao:.0f} medalhas por competição no verão e "
         f"{media_medalha_comp_inverno:.0f} medalhas por competição no inverno.")

fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(14, 16))

fig.patch.set_facecolor('white')
ax1.set_facecolor('white')
ax2.set_facecolor('white')

medalhas_por_ano_verao.plot(kind='area', stacked=False, ax=ax1, color=[cores_medalhas[col] for col in medalhas_por_ano_verao.columns])
ax1.set_title('Competições de Verão', fontsize=15)
ax1.set_xlabel('')
ax1.set_ylabel('Número de Medalhas')
ax1.legend(title='Medalha')
ax1.grid(False)
ax1.text(0.5, 1.17, texto, fontsize=12, ha='center', va='top', bbox=dict(facecolor='white', alpha=0.5), transform=ax1.transAxes)

medalhas_por_ano_inverno.plot(kind='area', stacked=False, ax=ax2, color=[cores_medalhas[col] for col in medalhas_por_ano_verao.columns])
ax2.set_title('Competições de Inverno', fontsize=15)
ax2.set_xlabel('')
ax2.set_ylabel('Número de Medalhas')
ax2.legend(title='Medalha')
ax2.grid(False)

plt.tight_layout()

num_comp_verao
 331:
comp_verao = mesclado[mesclado['Season']=='Summer']   
comp_inverno = mesclado[mesclado['Season']=='Winter']  

num_comp_verao = comp_verao['Year'].nunique()           
num_comp_inverno = comp_inverno['Year'].nunique()     



num_comp_verao
 332:

participacoes_paises = mesclado.drop_duplicates(subset=['ID', 'Year'])
paises_agrupado = participacoes_paises.groupby(['Year', 'region']).first().reset_index()

contagem = paises_agrupado['region'].value_counts().sort_values(ascending=False)

plt.figure(figsize=(20,10))
contagem.head(20).plot(kind='bar')
 333:

participacoes_paises = mesclado.drop_duplicates(subset=['ID', 'Year'])
paises_agrupado = participacoes_paises.groupby(['Year', 'region']).first().reset_index()

contagem = paises_agrupado['region'].value_counts().sort_values(ascending=False)

plt.figure(figsize=(20,10))
ax = contagem.head(20).plot(kind='bar')
ax.set_facecolor('white')
 334:

participacoes_paises = mesclado.drop_duplicates(subset=['ID', 'Year'])
paises_agrupado = participacoes_paises.groupby(['Year', 'region']).first().reset_index()

contagem = paises_agrupado['region'].value_counts().sort_values(ascending=False)

plt.figure(figsize=(20,10))
ax = contagem.head(20).plot(kind='bar')
ax.set_facecolor('white')
ax.set_xlabel('')
ax.set_ylabel('Número de Participações')
 335:

participacoes_paises = mesclado.drop_duplicates(subset=['ID', 'Year'])
paises_agrupado = participacoes_paises.groupby(['Year', 'region']).first().reset_index()

contagem = paises_agrupado['region'].value_counts().sort_values(ascending=False)

plt.figure(figsize=(20,10))
ax = contagem.head(20).plot(kind='bar')
ax.set_facecolor('white')
ax.set_xlabel('')
ax.set_ylabel('Número de Participações')
ax1.set_title('Número de participações por País (top 20)', fontsize=15, fontweight="bold")

plt.tight_layout()
 336:

participacoes_paises = mesclado.drop_duplicates(subset=['ID', 'Year'])
paises_agrupado = participacoes_paises.groupby(['Year', 'region']).first().reset_index()

contagem = paises_agrupado['region'].value_counts().sort_values(ascending=False)

plt.figure(figsize=(20,10))
ax = contagem.head(20).plot(kind='bar')
ax.set_facecolor('white')
ax.set_xlabel('')
ax.set_ylabel('Número de Participações')
ax.set_title('Número de participações por País (top 20)', fontsize=15, fontweight="bold")

plt.tight_layout()
 337:

participacoes_paises = mesclado.drop_duplicates(subset=['ID', 'Year'])
paises_agrupado = participacoes_paises.groupby(['Year', 'region']).first().reset_index()

contagem = paises_agrupado['region'].value_counts().sort_values(ascending=False)

plt.figure(figsize=(12,7))
ax = contagem.head(20).plot(kind='bar')
ax.set_facecolor('white')
ax.set_xlabel('')
ax.set_ylabel('Número de Participações')
ax.set_title('Número de participações por País (top 20)', fontsize=15, fontweight="bold")

plt.tight_layout()
 338:

participacoes_paises = mesclado.drop_duplicates(subset=['ID', 'Year'])
paises_agrupado = participacoes_paises.groupby(['Year', 'region']).first().reset_index()

contagem = paises_agrupado['region'].value_counts().sort_values(ascending=False)

plt.figure(figsize=(10,5))
ax = contagem.head(20).plot(kind='bar')
ax.set_facecolor('white')
ax.set_xlabel('')
ax.set_ylabel('Número de Participações')
ax.set_title('Número de participações por País (top 20)', fontsize=15, fontweight="bold")

plt.tight_layout()
 339:

participacoes_paises = mesclado.drop_duplicates(subset=['ID', 'Year'])
paises_agrupado = participacoes_paises.groupby(['Year', 'region']).first().reset_index()

contagem = paises_agrupado['region'].value_counts().sort_values(ascending=False)

plt.figure(figsize=(10,7))
ax = contagem.head(20).plot(kind='bar')
ax.set_facecolor('white')
ax.set_xlabel('')
ax.set_ylabel('Número de Participações')
ax.set_title('Número de participações por País (top 20)', fontsize=15, fontweight="bold")

plt.tight_layout()
 340:

participacoes_paises = mesclado.drop_duplicates(subset=['ID', 'Year'])
paises_agrupado = participacoes_paises.groupby(['Year', 'region']).first().reset_index()

contagem = paises_agrupado['region'].value_counts().sort_values(ascending=False)

plt.figure(figsize=(12,5))
ax = contagem.head(20).plot(kind='bar')
ax.set_facecolor('white')
ax.set_xlabel('')
ax.set_ylabel('Número de Participações')
ax.set_title('Número de participações por País (top 20)', fontsize=15, fontweight="bold")

plt.tight_layout()
 341:

participacoes_paises = mesclado.drop_duplicates(subset=['ID', 'Year'])
paises_agrupado = participacoes_paises.groupby(['Year', 'region']).first().reset_index()

contagem = paises_agrupado['region'].value_counts().sort_values(ascending=False)

plt.figure(figsize=(15,5))
ax = contagem.head(20).plot(kind='bar')
ax.set_facecolor('white')
ax.set_xlabel('')
ax.set_ylabel('Número de Participações')
ax.set_title('Número de participações por País (top 20)', fontsize=15, fontweight="bold")

plt.tight_layout()
 342:
plt.figure(figsize=(12,10))
ax = sns.scatterplot(x="Height", y="Weight",hue='Sex', data=medalhas_ouro, palette='rocket')
ax.set_title('Altura vs Peso nos jogos olimpicos', fontsize=15, fontweight="bold")
ax.set_xlabel('Altura (cm)')
ax.set_ylabel('Peso (kg)')
 343:
plt.figure(figsize=(12,10))
ax = sns.scatterplot(x="Height", y="Weight",hue='Sex', data=medalhas_ouro, palette='rocket')
ax.set_title('Altura vs Peso nos jogos olimpicos', fontsize=15, fontweight="bold")
ax.set_xlabel('Altura (cm)')
ax.set_ylabel('Peso (kg)')

plt.tight_layout()
 344:
plt.figure(figsize=(12,10))
ax = sns.scatterplot(x="Height", y="Weight",hue='Sex', data=medalhas_ouro, palette='Set2')
ax.set_title('Altura vs Peso nos jogos olimpicos', fontsize=15, fontweight="bold")
ax.set_xlabel('Altura (cm)')
ax.set_ylabel('Peso (kg)')

plt.tight_layout()
 345:
plt.figure(figsize=(12,10))
ax = sns.scatterplot(x="Height", y="Weight",hue='Sex', data=medalhas_ouro, palette='Set2')
ax.set_title('Altura vs Peso nos jogos olimpicos', fontsize=15, fontweight="bold")
ax.set_xlabel('Altura (cm)')
ax.set_ylabel('Peso (kg)')
ax.set_facecolor('white')

plt.tight_layout()
 346:
plt.figure(figsize=(12,5))
ax = sns.scatterplot(x="Height", y="Weight",hue='Sex', data=medalhas_ouro, palette='Set2')
ax.set_title('Altura vs Peso nos jogos olimpicos', fontsize=15, fontweight="bold")
ax.set_xlabel('Altura (cm)')
ax.set_ylabel('Peso (kg)')
ax.set_facecolor('white')

plt.tight_layout()
 347:
plt.figure(figsize=(12,5))
ax = sns.scatterplot(x="Height", y="Weight",hue='Sex', data=medalhas_ouro, palette='Set2')
ax.set_title('Altura vs Peso nas Olimpíadas', fontsize=15, fontweight="bold")
ax.set_xlabel('Altura (cm)')
ax.set_ylabel('Peso (kg)')
ax.set_facecolor('white')

plt.tight_layout()
 348:
comp_verao = mesclado[mesclado['Season']=='Summer']   
comp_inverno = mesclado[mesclado['Season']=='Winter']  

num_comp_verao = comp_verao['Year'].nunique()           
num_comp_inverno = comp_inverno['Year'].nunique()     

comp_verao = comp_verao[comp_verao['Medal'] != 'NA']
comp_inverno = comp_inverno[comp_inverno['Medal'] != 'NA']

num_medalhas_verao = comp_verao['Medal'].value_counts().sum()
num_medalhas_inverno = comp_inverno['Medal'].value_counts().sum()

media_medalha_comp_verao = (num_medalhas_verao)/(num_comp_verao)
media_medalha_comp_inverno = (num_medalhas_inverno)/(num_comp_inverno)

medalhas_por_ano_verao = mesclado.query('Season == "Summer"').groupby(['Year', 'Medal'])['Medal'].value_counts().unstack().fillna(0).astype(int)
medalhas_por_ano_inverno = mesclado.query('Season == "Winter"').groupby(['Year', 'Medal'])['Medal'].value_counts().unstack().fillna(0).astype(int)

texto = (f"Nesses últimos 120 anos tivemos {num_comp_verao} competições de verão e "
         f"{num_comp_inverno} competições de inverno.\nForam distribuídas "
         f"{num_medalhas_verao + num_medalhas_inverno} medalhas, sendo "
         f"{num_medalhas_verao} nas competições de verão e "
         f"{num_medalhas_inverno} nas competições de inverno.\nNa média, "
         f"são distribuídas {media_medalha_comp_verao:.0f} medalhas por competição no verão e "
         f"{media_medalha_comp_inverno:.0f} medalhas por competição no inverno.")

fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(14, 16))

fig.patch.set_facecolor('white')
ax1.set_facecolor('white')
ax2.set_facecolor('white')

medalhas_por_ano_verao.plot(kind='area', stacked=False, ax=ax1, color=[cores_medalhas[col] for col in medalhas_por_ano_verao.columns])
ax1.set_title('Competições de Verão', fontsize=15)
ax1.set_xlabel('')
ax1.set_ylabel('Número de Medalhas')
ax1.legend(title='Medalha')
ax1.grid(False)
ax1.text(0.5, 1.17, texto, fontsize=12, ha='center', va='top', bbox=dict(facecolor='white', alpha=0.5), transform=ax1.transAxes)

medalhas_por_ano_inverno.plot(kind='area', stacked=False, ax=ax2, color=[cores_medalhas[col] for col in medalhas_por_ano_verao.columns])
ax2.set_title('Competições de Inverno', fontsize=15)
ax2.set_xlabel('')
ax2.set_ylabel('Número de Medalhas')
ax2.legend(title='Medalha')
ax2.grid(False)

plt.tight_layout()
 349:
comp_verao = mesclado[mesclado['Season']=='Summer']   
comp_inverno = mesclado[mesclado['Season']=='Winter']  

num_comp_verao = comp_verao['Year'].nunique() + 20         
num_comp_inverno = comp_inverno['Year'].nunique()     

comp_verao = comp_verao[comp_verao['Medal'] != 'NA']
comp_inverno = comp_inverno[comp_inverno['Medal'] != 'NA']

num_medalhas_verao = comp_verao['Medal'].value_counts().sum()
num_medalhas_inverno = comp_inverno['Medal'].value_counts().sum()

media_medalha_comp_verao = (num_medalhas_verao)/(num_comp_verao)
media_medalha_comp_inverno = (num_medalhas_inverno)/(num_comp_inverno)

medalhas_por_ano_verao = mesclado.query('Season == "Summer"').groupby(['Year', 'Medal'])['Medal'].value_counts().unstack().fillna(0).astype(int)
medalhas_por_ano_inverno = mesclado.query('Season == "Winter"').groupby(['Year', 'Medal'])['Medal'].value_counts().unstack().fillna(0).astype(int)

texto = (f"Nesses últimos 120 anos tivemos {num_comp_verao} competições de verão e "
         f"{num_comp_inverno} competições de inverno.\nForam distribuídas "
         f"{num_medalhas_verao + num_medalhas_inverno} medalhas, sendo "
         f"{num_medalhas_verao} nas competições de verão e "
         f"{num_medalhas_inverno} nas competições de inverno.\nNa média, "
         f"são distribuídas {media_medalha_comp_verao:.0f} medalhas por competição no verão e "
         f"{media_medalha_comp_inverno:.0f} medalhas por competição no inverno.")

fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(14, 16))

fig.patch.set_facecolor('white')
ax1.set_facecolor('white')
ax2.set_facecolor('white')

medalhas_por_ano_verao.plot(kind='area', stacked=False, ax=ax1, color=[cores_medalhas[col] for col in medalhas_por_ano_verao.columns])
ax1.set_title('Competições de Verão', fontsize=15)
ax1.set_xlabel('')
ax1.set_ylabel('Número de Medalhas')
ax1.legend(title='Medalha')
ax1.grid(False)
ax1.text(0.5, 1.17, texto, fontsize=12, ha='center', va='top', bbox=dict(facecolor='white', alpha=0.5), transform=ax1.transAxes)

medalhas_por_ano_inverno.plot(kind='area', stacked=False, ax=ax2, color=[cores_medalhas[col] for col in medalhas_por_ano_verao.columns])
ax2.set_title('Competições de Inverno', fontsize=15)
ax2.set_xlabel('')
ax2.set_ylabel('Número de Medalhas')
ax2.legend(title='Medalha')
ax2.grid(False)

plt.tight_layout()
 350:
comp_verao = mesclado[mesclado['Season']=='Summer']   
comp_inverno = mesclado[mesclado['Season']=='Winter']  

num_comp_verao = comp_verao['Year'].nunique()  
num_comp_inverno = comp_inverno['Year'].nunique()     

comp_verao = comp_verao[comp_verao['Medal'] != 'NA']
comp_inverno = comp_inverno[comp_inverno['Medal'] != 'NA']

num_medalhas_verao = comp_verao['Medal'].value_counts().sum()
num_medalhas_inverno = comp_inverno['Medal'].value_counts().sum()

media_medalha_comp_verao = (num_medalhas_verao)/(num_comp_verao)
media_medalha_comp_inverno = (num_medalhas_inverno)/(num_comp_inverno)

medalhas_por_ano_verao = mesclado.query('Season == "Summer"').groupby(['Year', 'Medal'])['Medal'].value_counts().unstack().fillna(0).astype(int)
medalhas_por_ano_inverno = mesclado.query('Season == "Winter"').groupby(['Year', 'Medal'])['Medal'].value_counts().unstack().fillna(0).astype(int)

texto = (f"Nesses últimos 120 anos tivemos {num_comp_verao} competições de verão e "
         f"{num_comp_inverno} competições de inverno.\nForam distribuídas "
         f"{num_medalhas_verao + num_medalhas_inverno} medalhas, sendo "
         f"{num_medalhas_verao} nas competições de verão e "
         f"{num_medalhas_inverno} nas competições de inverno.\nNa média, "
         f"são distribuídas {media_medalha_comp_verao:.0f} medalhas por competição no verão e "
         f"{media_medalha_comp_inverno:.0f} medalhas por competição no inverno.")

fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(14, 16))

fig.patch.set_facecolor('white')
ax1.set_facecolor('white')
ax2.set_facecolor('white')

medalhas_por_ano_verao.plot(kind='area', stacked=False, ax=ax1, color=[cores_medalhas[col] for col in medalhas_por_ano_verao.columns])
ax1.set_title('Competições de Verão', fontsize=15)
ax1.set_xlabel('')
ax1.set_ylabel('Número de Medalhas')
ax1.legend(title='Medalha')
ax1.grid(False)
ax1.text(0.5, 1.17, texto, fontsize=12, ha='center', va='top', bbox=dict(facecolor='white', alpha=0.5), transform=ax1.transAxes)

medalhas_por_ano_inverno.plot(kind='area', stacked=False, ax=ax2, color=[cores_medalhas[col] for col in medalhas_por_ano_verao.columns])
ax2.set_title('Competições de Inverno', fontsize=15)
ax2.set_xlabel('')
ax2.set_ylabel('Número de Medalhas')
ax2.legend(title='Medalha')
ax2.grid(False)

plt.tight_layout()
 351:
df_new = mesclado.groupby(['Year','region','Medal'])['Medal'].count().unstack().fillna(0).astype(int).reset_index()
df_new
 352:
df_new = mesclado.groupby(['Year','region','Medal'])['Medal'].count().unstack().fillna(0).astype(int).reset_index()
df_new['Total Medals'] = df_new['Bronze'] + df_new['Silver'] + df_new['Gold']
df_new
 353:
df_new = mesclado.groupby(['Year','region','Medal'])['Medal'].count().unstack().fillna(0).astype(int).reset_index()
df_new['Total Medals'] = df_new['Bronze'] + df_new['Silver'] + df_new['Gold']


stack_temp = df_new[['Year','Bronze','Silver','Gold']].set_index('Year')
stack_temp
 354:
df_new = mesclado.groupby(['Year','region','Medal'])['Medal'].count().unstack().fillna(0).astype(int).reset_index()
df_new['Total Medals'] = df_new['Bronze'] + df_new['Silver'] + df_new['Gold']


stack_temp = df_new[['Year','Bronze','Silver','Gold']].set_index('Year')
stack_temp = (stack_temp.T/stack_temp.sum(axis=1)).cumsum().T

stack_temp
 355:
df_new = mesclado.groupby(['Year','region','Medal'])['Medal'].count().unstack().fillna(0).astype(int).reset_index()
df_new['Total Medals'] = df_new['Bronze'] + df_new['Silver'] + df_new['Gold']


stack_temp = df_new[['Year','Bronze','Silver','Gold']].set_index('Year')
stack_temp = (stack_temp.T/stack_temp.sum(axis=1)).cumsum().T

fig, ax = plt.subplots(1,1, figsize=(18,5), facecolor='white')

color = ["#a97142", "lightgray", '#f0c05a']
medals_list = ['Bronze', 'Silver', 'Gold']

for i, medal in enumerate(medals_list[::-1]):
    sentims = stack_temp[medal]
    ax.bar(sentims.index, sentims, color=color[::1][i], label=medal, width=2.55, ec='black')

ax.set_facecolor('white')

for s in ['top', 'right']:
    ax.spines[s].set_visible(False)

Xstart, Xend = ax.get_xlim()
Ystart, Yend = ax.get_ylim()

ax.set_xlim(Xstart+3, Xend)
ax.grid(which='both', axis='x', zorder=5, color='gray', linestyle=':', dashes=(1,5))

ax.set_axisbelow(True)
ax.get_yaxis().set_visible(False)

ax.text(Xstart+3,Yend+0.13, 'Olympic Medals for the United Kingdom', fontsize=15,fontweight='bold',fontfamily='serif',color='#323232')
ax.text(Xstart+3,Yend+0.055, 'Hosting', fontsize=10,fontweight='bold',fontfamily='sansserif',color='gray')

stack_temp
 356:
df_new = mesclado.groupby(['Year','region','Medal'])['Medal'].count().unstack().fillna(0).astype(int).reset_index()
df_new['Total Medals'] = df_new['Bronze'] + df_new['Silver'] + df_new['Gold']


stack_temp = df_new[['Year','Bronze','Silver','Gold']].set_index('Year')
stack_temp = (stack_temp.T/stack_temp.sum(axis=1)).cumsum().T

fig, ax = plt.subplots(1,1, figsize=(18,5), facecolor='white')

color = ["#a97142", "lightgray", '#f0c05a']
medals_list = ['Bronze', 'Silver', 'Gold']

for i, medal in enumerate(medals_list[::-1]):
    sentims = stack_temp[medal]
    ax.bar(sentims.index, sentims, color=color[::1][i], label=medal, width=2.55, ec='black')

ax.set_facecolor('white')

for s in ['top', 'right']:
    ax.spines[s].set_visible(False)

Xstart, Xend = ax.get_xlim()
Ystart, Yend = ax.get_ylim()

ax.set_xlim(Xstart+3, Xend)
ax.grid(which='both', axis='x', zorder=5, color='gray', linestyle=':', dashes=(1,5))

ax.set_axisbelow(True)
ax.get_yaxis().set_visible(False)

ax.text(Xstart+3,Yend+0.13, 'Olympic Medals for the United Kingdom', fontsize=15,fontweight='bold',fontfamily='serif',color='#323232')
ax.text(Xstart+3,Yend+0.055, 'Hosting', fontsize=10,fontweight='bold',fontfamily='sansserif',color='gray')
 357:
df_new = mesclado.groupby(['Year','region','Medal'])['Medal'].count().unstack().fillna(0).astype(int).reset_index()
df_new['Total Medals'] = df_new['Bronze'] + df_new['Silver'] + df_new['Gold']


stack_temp = df_new[['Year','Bronze','Silver','Gold']].set_index('Year')
stack_temp = stack_temp.divide(stack_temp.sum(axis=1), axis=0)

stack_temp
 358:
df_new = mesclado.groupby(['Year','region','Medal'])['Medal'].count().unstack().fillna(0).astype(int).reset_index()
df_new['Total Medals'] = df_new['Bronze'] + df_new['Silver'] + df_new['Gold']


stack_temp = df_new[['Year','Bronze','Silver','Gold']].set_index('Year')
stack_temp = stack_temp.divide(stack_temp.sum(axis=1), axis=0)

fig, ax = plt.subplots(1,1, figsize=(18,5), facecolor='white')

color = ["#a97142", "lightgray", '#f0c05a']
medals_list = ['Bronze', 'Silver', 'Gold']

for i, medal in enumerate(medals_list[::-1]):
    sentims = stack_temp[medal]
    ax.bar(sentims.index, sentims, color=color[::1][i], label=medal, width=2.55, ec='black')

ax.set_facecolor('white')

for s in ['top', 'right']:
    ax.spines[s].set_visible(False)

Xstart, Xend = ax.get_xlim()
Ystart, Yend = ax.get_ylim()

ax.set_xlim(Xstart+3, Xend)
ax.grid(which='both', axis='x', zorder=5, color='gray', linestyle=':', dashes=(1,5))

ax.set_axisbelow(True)
ax.get_yaxis().set_visible(False)

ax.text(Xstart+3,Yend+0.13, 'Medalhas Olímpicas através do tempo', fontsize=15,fontweight='bold',fontfamily='serif',color='#323232')
 359:
df_new = mesclado.groupby(['Year','region','Medal'])['Medal'].count().unstack().fillna(0).astype(int).reset_index()
df_new['Total Medals'] = df_new['Bronze'] + df_new['Silver'] + df_new['Gold']


stack_temp = df_new[['Year','Bronze','Silver','Gold']].set_index('Year')
stack_temp = stack_temp.divide(stack_temp.sum(axis=1), axis=0)

fig, ax = plt.subplots(1,1, figsize=(18,5), facecolor='white')

color = ["#a97142", "lightgray", '#f0c05a']
medals_list = ['Bronze', 'Silver', 'Gold']

for i, medal in enumerate(medals_list[::-1]):
    sentims = stack_temp[medal]
    ax.bar(sentims.index, sentims, color=color[::-1][i], label=medal, width=2.55, ec='black')

ax.set_facecolor('white')

for s in ['top', 'right']:
    ax.spines[s].set_visible(False)

Xstart, Xend = ax.get_xlim()
Ystart, Yend = ax.get_ylim()

ax.set_xlim(Xstart+3, Xend)
ax.grid(which='both', axis='x', zorder=5, color='gray', linestyle=':', dashes=(1,5))

ax.set_axisbelow(True)
ax.get_yaxis().set_visible(False)

ax.text(Xstart+3,Yend+0.13, 'Medalhas Olímpicas através do tempo', fontsize=15,fontweight='bold',fontfamily='serif',color='#323232')
 360:
df_new = mesclado.groupby(['Year','region','Medal'])['Medal'].count().unstack().fillna(0).astype(int).reset_index()
df_new['Total Medals'] = df_new['Bronze'] + df_new['Silver'] + df_new['Gold']


stack_temp = df_new[['Year','Bronze','Silver','Gold']].set_index('Year')
stack_temp = stack_temp.divide(stack_temp.sum(axis=1), axis=0)

fig, ax = plt.subplots(1,1, figsize=(18,5), facecolor='white')

colors = ["#a97142", "lightgray", '#f0c05a']
medals_list = ['Bronze', 'Silver', 'Gold']

for i, medal in enumerate(medals_list):
    ax.bar(stack_temp.index, stack_temp[medal], color=colors[i], label=medal, width=2.55, edgecolor='black', bottom=stack_temp[medals_list[:i]].sum(axis=1) if i > 0 else None)


ax.set_facecolor('white')

for s in ['top', 'right']:
    ax.spines[s].set_visible(False)

Xstart, Xend = ax.get_xlim()
Ystart, Yend = ax.get_ylim()

ax.set_xlim(Xstart+3, Xend)
ax.grid(which='both', axis='x', zorder=5, color='gray', linestyle=':', dashes=(1,5))

ax.set_axisbelow(True)
ax.get_yaxis().set_visible(False)

ax.text(Xstart+3,Yend+0.13, 'Medalhas Olímpicas através do tempo', fontsize=15,fontweight='bold',fontfamily='serif',color='#323232')
 361:
df_new = mesclado.groupby(['Year','region','Medal'])['Medal'].count().unstack().fillna(0).astype(int).reset_index()
df_new['Total Medals'] = df_new['Bronze'] + df_new['Silver'] + df_new['Gold']


stack_temp = df_new[['Year','Bronze','Silver','Gold']].set_index('Year')
stack_temp = stack_temp.divide(stack_temp.sum(axis=1), axis=0)

fig, ax = plt.subplots(1,1, figsize=(18,5), facecolor='white')

colors = ["#a97142", "lightgray", '#f0c05a']
medals_list = ['Bronze', 'Silver', 'Gold']

for i, medal in enumerate(medals_list[::-1]):
    sentims = stack_temp[medal]
    ax.bar(sentims.index, sentims, color=colors[::-1][i], label=medal, width=2.25, ec='black')

ax.set_facecolor('white')

for s in ['top', 'right']:
    ax.spines[s].set_visible(False)

Xstart, Xend = ax.get_xlim()
Ystart, Yend = ax.get_ylim()

ax.set_xlim(Xstart+3, Xend)
ax.grid(which='both', axis='x', zorder=5, color='gray', linestyle=':', dashes=(1,5))

ax.set_axisbelow(True)
ax.get_yaxis().set_visible(False)

ax.text(Xstart+3,Yend+0.13, 'Medalhas Olímpicas através do tempo', fontsize=15,fontweight='bold',fontfamily='serif',color='#323232')
 362:
df_new = mesclado.groupby(['Year','region','Medal'])['Medal'].count().unstack().fillna(0).astype(int).reset_index()
df_new['Total Medals'] = df_new['Bronze'] + df_new['Silver'] + df_new['Gold']


stack_temp = df_new[['Year','Bronze','Silver','Gold']].set_index('Year')
stack_temp = stack_temp.divide(stack_temp.sum(axis=1), axis=0)

fig, ax = plt.subplots(1,1, figsize=(18,5), facecolor='white')

colors = ["#a97142", "lightgray", '#f0c05a']
medals_list = ['Bronze', 'Silver', 'Gold']

# Inicializar a base para as barras empilhadas
bottom = pd.Series([0] * len(stack_temp), index=stack_temp.index)

for medal, color in zip(medals_list, colors):
    ax.bar(stack_temp.index, stack_temp[medal], color=color, label=medal, width=2.55, edgecolor='black', bottom=bottom)
    bottom += stack_temp[medal]

ax.set_facecolor('white')

for s in ['top', 'right']:
    ax.spines[s].set_visible(False)

Xstart, Xend = ax.get_xlim()
Ystart, Yend = ax.get_ylim()

ax.set_xlim(Xstart+3, Xend)
ax.grid(which='both', axis='x', zorder=5, color='gray', linestyle=':', dashes=(1,5))

ax.set_axisbelow(True)
ax.get_yaxis().set_visible(False)

ax.text(Xstart+3,Yend+0.13, 'Medalhas Olímpicas através do tempo', fontsize=15,fontweight='bold',fontfamily='serif',color='#323232')
 363:
df_new = mesclado.groupby(['Year','region','Medal'])['Medal'].count().unstack().fillna(0).astype(int).reset_index()
df_new['Total Medals'] = df_new['Bronze'] + df_new['Silver'] + df_new['Gold']

stack_temp = df_new.query("region == 'United Kingdom' & Year > 1945")[['Year','Bronze','Silver','Gold']].set_index('Year')
# stack_temp = df_new[['Year','Bronze','Silver','Gold']].set_index('Year')
stack_temp = stack_temp.divide(stack_temp.sum(axis=1), axis=0)

fig, ax = plt.subplots(1,1, figsize=(18,5), facecolor='white')

colors = ["#a97142", "lightgray", '#f0c05a']
medals_list = ['Bronze', 'Silver', 'Gold']

for i, medal in enumerate(medals_list[::-1]):
    sentims = stack_temp[medal]
    ax.bar(sentims.index, sentims, color=colors[::-1][i], label=medal, width=2.25, ec='black')

ax.set_facecolor('white')

for s in ['top', 'right']:
    ax.spines[s].set_visible(False)

Xstart, Xend = ax.get_xlim()
Ystart, Yend = ax.get_ylim()

ax.set_xlim(Xstart+3, Xend)
ax.grid(which='both', axis='x', zorder=5, color='gray', linestyle=':', dashes=(1,5))

ax.set_axisbelow(True)
ax.get_yaxis().set_visible(False)

ax.text(Xstart+3,Yend+0.13, 'Medalhas Olímpicas através do tempo', fontsize=15,fontweight='bold',fontfamily='serif',color='#323232')
 364:
df_new = mesclado.groupby(['Year','region','Medal'])['Medal'].count().unstack().fillna(0).astype(int).reset_index()
df_new['Total Medals'] = df_new['Bronze'] + df_new['Silver'] + df_new['Gold']

stack_temp = df_new.query("region == 'United Kingdom' & Year > 1945")[['Year','Bronze','Silver','Gold']].set_index('Year')
# stack_temp = df_new[['Year','Bronze','Silver','Gold']].set_index('Year')
stack_temp = stack_temp.divide(stack_temp.sum(axis=1), axis=0)

fig, ax = plt.subplots(1,1, figsize=(18,5), facecolor='white')

colors = ["#a97142", "lightgray", '#f0c05a']
medals_list = ['Bronze', 'Silver', 'Gold']

for i, medal in enumerate(medals_list[::-1]):
    sentims = stack_temp[medal]
    ax.bar(sentims.index, sentims, color=colors[::-1][i], label=medal, width=2.25, ec='black')

ax.set_facecolor('white')

for s in ['top', 'right']:
    ax.spines[s].set_visible(False)

Xstart, Xend = ax.get_xlim()
Ystart, Yend = ax.get_ylim()

ax.set_xlim(Xstart+3, Xend)
ax.grid(which='both', axis='x', zorder=5, color='gray', linestyle=':', dashes=(1,5))

ax.set_axisbelow(True)
ax.get_yaxis().set_visible(False)

ax.text(Xstart+3,Yend+0.13, 'Medalhas Olímpicas através do tempo', fontsize=15,fontweight='bold',fontfamily='serif',color='#323232')
 365:
df_new = mesclado.groupby(['Year','region','Medal'])['Medal'].count().unstack().fillna(0).astype(int).reset_index()
df_new['Total Medals'] = df_new['Bronze'] + df_new['Silver'] + df_new['Gold']

stack_temp = mesclado.query("region == 'United Kingdom' & Year > 1945")[['Year','Bronze','Silver','Gold']].set_index('Year')
# stack_temp = df_new[['Year','Bronze','Silver','Gold']].set_index('Year')
stack_temp = stack_temp.divide(stack_temp.sum(axis=1), axis=0)

fig, ax = plt.subplots(1,1, figsize=(18,5), facecolor='white')

colors = ["#a97142", "lightgray", '#f0c05a']
medals_list = ['Bronze', 'Silver', 'Gold']

for i, medal in enumerate(medals_list[::-1]):
    sentims = stack_temp[medal]
    ax.bar(sentims.index, sentims, color=colors[::-1][i], label=medal, width=2.25, ec='black')

ax.set_facecolor('white')

for s in ['top', 'right']:
    ax.spines[s].set_visible(False)

Xstart, Xend = ax.get_xlim()
Ystart, Yend = ax.get_ylim()

ax.set_xlim(Xstart+3, Xend)
ax.grid(which='both', axis='x', zorder=5, color='gray', linestyle=':', dashes=(1,5))

ax.set_axisbelow(True)
ax.get_yaxis().set_visible(False)

ax.text(Xstart+3,Yend+0.13, 'Medalhas Olímpicas através do tempo', fontsize=15,fontweight='bold',fontfamily='serif',color='#323232')
 366:
df_new = mesclado.groupby(['Year','region','Medal'])['Medal'].count().unstack().fillna(0).astype(int).reset_index()
df_new['Total Medals'] = df_new['Bronze'] + df_new['Silver'] + df_new['Gold']

stack_temp = df_new.query("region == 'United Kingdom' & Year > 1945")[['Year','Bronze','Silver','Gold']].set_index('Year')
# stack_temp = df_new[['Year','Bronze','Silver','Gold']].set_index('Year')
stack_temp = stack_temp.divide(stack_temp.sum(axis=1), axis=0)

fig, ax = plt.subplots(1,1, figsize=(18,5), facecolor='white')

colors = ["#a97142", "lightgray", '#f0c05a']
medals_list = ['Bronze', 'Silver', 'Gold']

for i, medal in enumerate(medals_list[::-1]):
    sentims = stack_temp[medal]
    ax.bar(sentims.index, sentims, color=colors[::-1][i], label=medal, width=2.25, ec='black')

ax.set_facecolor('white')

for s in ['top', 'right']:
    ax.spines[s].set_visible(False)

Xstart, Xend = ax.get_xlim()
Ystart, Yend = ax.get_ylim()

ax.set_xlim(Xstart+3, Xend)
ax.grid(which='both', axis='x', zorder=5, color='gray', linestyle=':', dashes=(1,5))

ax.set_axisbelow(True)
ax.get_yaxis().set_visible(False)

ax.text(Xstart+3,Yend+0.13, 'Medalhas Olímpicas através do tempo', fontsize=15,fontweight='bold',fontfamily='serif',color='#323232')
 367:
df_new = mesclado.groupby(['Year','region','Medal'])['Medal'].count().unstack().fillna(0).astype(int).reset_index()
df_new['Total Medals'] = df_new['Bronze'] + df_new['Silver'] + df_new['Gold']

stack_temp = df_new.query("region == 'United Kingdom' & Year > 1945")[['Year','Bronze','Silver','Gold']].set_index('Year')
stack_temp
 368:
df_new = mesclado.groupby(['Year','NOC','Medal'])['Medal'].count().unstack().fillna(0).astype(int).reset_index()
df_new['Total Medals'] = df_new['Bronze'] + df_new['Silver'] + df_new['Gold']

stack_temp = df_new.query("region == 'UK' & Year > 1945")[['Year','Bronze','Silver','Gold']].set_index('Year')
stack_temp
 369:
df_new = mesclado.groupby(['Year','NOC','Medal'])['Medal'].count().unstack().fillna(0).astype(int).reset_index()
df_new['Total Medals'] = df_new['Bronze'] + df_new['Silver'] + df_new['Gold']

stack_temp = df_new.query("NOC == 'UK' & Year > 1945")[['Year','Bronze','Silver','Gold']].set_index('Year')
stack_temp
 370:
df_new = mesclado.groupby(['Year','NOC','Medal'])['Medal'].count().unstack().fillna(0).astype(int).reset_index()
df_new['Total Medals'] = df_new['Bronze'] + df_new['Silver'] + df_new['Gold']

stack_temp = df_new.query("NOC == 'BRA' & Year > 1945")[['Year','Bronze','Silver','Gold']].set_index('Year')
stack_temp
 371:
df_new = mesclado.groupby(['Year','NOC','Medal'])['Medal'].count().unstack().fillna(0).astype(int).reset_index()
df_new['Total Medals'] = df_new['Bronze'] + df_new['Silver'] + df_new['Gold']

stack_temp = df_new.query("NOC == 'BRA' & Year > 1945")[['Year','Bronze','Silver','Gold']].set_index('Year')
stack_temp = (stack_temp.T/stack_temp.sum(axis=1)).cumsum().T
 372:
df_new = mesclado.groupby(['Year','NOC','Medal'])['Medal'].count().unstack().fillna(0).astype(int).reset_index()
df_new['Total Medals'] = df_new['Bronze'] + df_new['Silver'] + df_new['Gold']

stack_temp = df_new.query("NOC == 'BRA' & Year > 1945")[['Year','Bronze','Silver','Gold']].set_index('Year')
stack_temp = (stack_temp.T/stack_temp.sum(axis=1)).cumsum().T

stack_temp
 373:
df_new = mesclado.groupby(['Year','NOC','Medal'])['Medal'].count().unstack().fillna(0).astype(int).reset_index()
df_new['Total Medals'] = df_new['Bronze'] + df_new['Silver'] + df_new['Gold']

stack_temp = df_new.query("NOC == 'BRA' & Year > 1945")[['Year','Bronze','Silver','Gold']].set_index('Year')
#stack_temp = (stack_temp.T/stack_temp.sum(axis=1)).cumsum().T

stack_temp
 374:
df_new = mesclado.groupby(['Year','NOC','Medal'])['Medal'].count().unstack().fillna(0).astype(int).reset_index()
df_new['Total Medals'] = df_new['Bronze'] + df_new['Silver'] + df_new['Gold']

stack_temp = df_new.query("NOC == 'BRA' & Year > 1945")[['Year','Bronze','Silver','Gold']].set_index('Year')
stack_temp = stack_temp.divide(stack_temp.sum(axis=1), axis=0)

stack_temp
 375:
df_new = mesclado.groupby(['Year','NOC','Medal'])['Medal'].count().unstack().fillna(0).astype(int).reset_index()
df_new['Total Medals'] = df_new['Bronze'] + df_new['Silver'] + df_new['Gold']

stack_temp = df_new.query("NOC == 'BRA' & Year > 1945")[['Year','Bronze','Silver','Gold']].set_index('Year')
stack_temp = stack_temp.divide(stack_temp.sum(axis=1), axis=0)

fig, ax = plt.subplots(1, 1, figsize=(18, 5), facecolor='white')

colors = ["#a97142", "lightgray", '#f0c05a']
medals_list = ['Bronze', 'Silver', 'Gold']


for i, medal in enumerate(medals_list):
    ax.bar(stack_temp.index, stack_temp[medal], color=colors[i], label=medal, width=2.55, edgecolor='black', bottom=stack_temp[medals_list[:i]].sum(axis=1) if i > 0 else None)

ax.set_facecolor('white')

for s in ['top', 'right']:
    ax.spines[s].set_visible(False)

Xstart, Xend = ax.get_xlim()
Ystart, Yend = ax.get_ylim()

ax.set_xlim(Xstart, Xend)
ax.grid(which='both', axis='x', zorder=5, color='gray', linestyle=':', dashes=(1, 5))

ax.set_axisbelow(True)
ax.get_yaxis().set_visible(False)

ax.text(Xstart + 3, Yend + 0.13, 'Olympic Medals for the United Kingdom', fontsize=15, fontweight='bold', fontfamily='serif', color='#323232')

plt.legend(loc='upper left', bbox_to_anchor=(1, 1), title='Medal Type')
 376:
df_new = mesclado.groupby(['Year','NOC','Medal'])['Medal'].count().unstack().fillna(0).astype(int).reset_index()
df_new['Total Medals'] = df_new['Bronze'] + df_new['Silver'] + df_new['Gold']

stack_temp = df_new[['Year','Bronze','Silver','Gold']].set_index('Year')
stack_temp = stack_temp.divide(stack_temp.sum(axis=1), axis=0)

fig, ax = plt.subplots(1, 1, figsize=(18, 5), facecolor='white')

colors = ["#a97142", "lightgray", '#f0c05a']
medals_list = ['Bronze', 'Silver', 'Gold']


for i, medal in enumerate(medals_list):
    ax.bar(stack_temp.index, stack_temp[medal], color=colors[i], label=medal, width=2.55, edgecolor='black', bottom=stack_temp[medals_list[:i]].sum(axis=1) if i > 0 else None)

ax.set_facecolor('white')

for s in ['top', 'right']:
    ax.spines[s].set_visible(False)

Xstart, Xend = ax.get_xlim()
Ystart, Yend = ax.get_ylim()

ax.set_xlim(Xstart, Xend)
ax.grid(which='both', axis='x', zorder=5, color='gray', linestyle=':', dashes=(1, 5))

ax.set_axisbelow(True)
ax.get_yaxis().set_visible(False)

ax.text(Xstart + 3, Yend + 0.13, 'Olympic Medals for the United Kingdom', fontsize=15, fontweight='bold', fontfamily='serif', color='#323232')

plt.legend(loc='upper left', bbox_to_anchor=(1, 1), title='Medal Type')
 377:
df_new = mesclado.groupby(['Year','NOC','Medal'])['Medal'].count().unstack().fillna(0).astype(int).reset_index()
df_new['Total Medals'] = df_new['Bronze'] + df_new['Silver'] + df_new['Gold']

stack_temp = df_new.query("NOC == 'BRA' & Year > 1945")[['Year','Bronze','Silver','Gold']].set_index('Year')
stack_temp = stack_temp.divide(stack_temp.sum(axis=1), axis=0)

fig, ax = plt.subplots(1, 1, figsize=(18, 5), facecolor='white')

colors = ["#a97142", "lightgray", '#f0c05a']
medals_list = ['Bronze', 'Silver', 'Gold']


for i, medal in enumerate(medals_list):
    ax.bar(stack_temp.index, stack_temp[medal], color=colors[i], label=medal, width=2.55, edgecolor='black', bottom=stack_temp[medals_list[:i]].sum(axis=1) if i > 0 else None)

ax.set_facecolor('white')

for s in ['top', 'right']:
    ax.spines[s].set_visible(False)

Xstart, Xend = ax.get_xlim()
Ystart, Yend = ax.get_ylim()

ax.set_xlim(Xstart, Xend)
ax.grid(which='both', axis='x', zorder=5, color='gray', linestyle=':', dashes=(1, 5))

ax.set_axisbelow(True)
ax.get_yaxis().set_visible(False)

ax.text(Xstart + 3, Yend + 0.13, 'Olympic Medals for the United Kingdom', fontsize=15, fontweight='bold', fontfamily='serif', color='#323232')

plt.legend(loc='upper left', bbox_to_anchor=(1, 1), title='Medal Type')
 378:
df_new = mesclado.groupby(['Year','NOC','Medal'])['Medal'].count().unstack().fillna(0).astype(int).reset_index()
df_new['Total Medals'] = df_new['Bronze'] + df_new['Silver'] + df_new['Gold']

stack_temp = df_new[['Year','Bronze','Silver','Gold']].set_index('Year')
stack_temp = stack_temp.groupby('Year')[['Bronze', 'Silver', 'Gold']].sum()
stack_temp
 379:
df_new = mesclado.groupby(['Year','NOC','Medal'])['Medal'].count().unstack().fillna(0).astype(int).reset_index()
df_new['Total Medals'] = df_new['Bronze'] + df_new['Silver'] + df_new['Gold']

stack_temp = df_new[['Year','Bronze','Silver','Gold']].set_index('Year')
stack_temp = stack_temp.groupby('Year')[['Bronze', 'Silver', 'Gold']].sum()
stack_temp = stack_temp.divide(stack_temp.sum(axis=1), axis=0)

fig, ax = plt.subplots(1, 1, figsize=(18, 5), facecolor='white')

colors = ["#a97142", "lightgray", '#f0c05a']
medals_list = ['Bronze', 'Silver', 'Gold']


for i, medal in enumerate(medals_list):
    ax.bar(stack_temp.index, stack_temp[medal], color=colors[i], label=medal, width=2.55, edgecolor='black', bottom=stack_temp[medals_list[:i]].sum(axis=1) if i > 0 else None)

ax.set_facecolor('white')

for s in ['top', 'right']:
    ax.spines[s].set_visible(False)

Xstart, Xend = ax.get_xlim()
Ystart, Yend = ax.get_ylim()

ax.set_xlim(Xstart, Xend)
ax.grid(which='both', axis='x', zorder=5, color='gray', linestyle=':', dashes=(1, 5))

ax.set_axisbelow(True)
ax.get_yaxis().set_visible(False)

ax.text(Xstart + 3, Yend + 0.13, 'Olympic Medals for the United Kingdom', fontsize=15, fontweight='bold', fontfamily='serif', color='#323232')

plt.legend(loc='upper left', bbox_to_anchor=(1, 1), title='Medal Type')
 380:
df_new = mesclado.query('Seasion == Summer').groupby(['Year','NOC','Medal'])['Medal'].count().unstack().fillna(0).astype(int).reset_index()
df_new['Total Medals'] = df_new['Bronze'] + df_new['Silver'] + df_new['Gold']

stack_temp = df_new[['Year','Bronze','Silver','Gold']].set_index('Year')
stack_temp = stack_temp.groupby('Year')[['Bronze', 'Silver', 'Gold']].sum()
stack_temp = stack_temp.divide(stack_temp.sum(axis=1), axis=0)

fig, ax = plt.subplots(1, 1, figsize=(18, 5), facecolor='white')

colors = ["#a97142", "lightgray", '#f0c05a']
medals_list = ['Bronze', 'Silver', 'Gold']


for i, medal in enumerate(medals_list):
    ax.bar(stack_temp.index, stack_temp[medal], color=colors[i], label=medal, width=2.55, edgecolor='black', bottom=stack_temp[medals_list[:i]].sum(axis=1) if i > 0 else None)

ax.set_facecolor('white')

for s in ['top', 'right']:
    ax.spines[s].set_visible(False)

Xstart, Xend = ax.get_xlim()
Ystart, Yend = ax.get_ylim()

ax.set_xlim(Xstart, Xend)
ax.grid(which='both', axis='x', zorder=5, color='gray', linestyle=':', dashes=(1, 5))

ax.set_axisbelow(True)
ax.get_yaxis().set_visible(False)

ax.text(Xstart + 3, Yend + 0.13, 'Olympic Medals for the United Kingdom', fontsize=15, fontweight='bold', fontfamily='serif', color='#323232')

plt.legend(loc='upper left', bbox_to_anchor=(1, 1), title='Medal Type')
 381:
df_new = mesclado.query("Seasion == 'Summer'").groupby(['Year','NOC','Medal'])['Medal'].count().unstack().fillna(0).astype(int).reset_index()
df_new['Total Medals'] = df_new['Bronze'] + df_new['Silver'] + df_new['Gold']

stack_temp = df_new[['Year','Bronze','Silver','Gold']].set_index('Year')
stack_temp = stack_temp.groupby('Year')[['Bronze', 'Silver', 'Gold']].sum()
stack_temp = stack_temp.divide(stack_temp.sum(axis=1), axis=0)

fig, ax = plt.subplots(1, 1, figsize=(18, 5), facecolor='white')

colors = ["#a97142", "lightgray", '#f0c05a']
medals_list = ['Bronze', 'Silver', 'Gold']


for i, medal in enumerate(medals_list):
    ax.bar(stack_temp.index, stack_temp[medal], color=colors[i], label=medal, width=2.55, edgecolor='black', bottom=stack_temp[medals_list[:i]].sum(axis=1) if i > 0 else None)

ax.set_facecolor('white')

for s in ['top', 'right']:
    ax.spines[s].set_visible(False)

Xstart, Xend = ax.get_xlim()
Ystart, Yend = ax.get_ylim()

ax.set_xlim(Xstart, Xend)
ax.grid(which='both', axis='x', zorder=5, color='gray', linestyle=':', dashes=(1, 5))

ax.set_axisbelow(True)
ax.get_yaxis().set_visible(False)

ax.text(Xstart + 3, Yend + 0.13, 'Olympic Medals for the United Kingdom', fontsize=15, fontweight='bold', fontfamily='serif', color='#323232')

plt.legend(loc='upper left', bbox_to_anchor=(1, 1), title='Medal Type')
 382:
df_new = mesclado.query("Season == 'Summer'").groupby(['Year','NOC','Medal'])['Medal'].count().unstack().fillna(0).astype(int).reset_index()
df_new['Total Medals'] = df_new['Bronze'] + df_new['Silver'] + df_new['Gold']

stack_temp = df_new[['Year','Bronze','Silver','Gold']].set_index('Year')
stack_temp = stack_temp.groupby('Year')[['Bronze', 'Silver', 'Gold']].sum()
stack_temp = stack_temp.divide(stack_temp.sum(axis=1), axis=0)

fig, ax = plt.subplots(1, 1, figsize=(18, 5), facecolor='white')

colors = ["#a97142", "lightgray", '#f0c05a']
medals_list = ['Bronze', 'Silver', 'Gold']


for i, medal in enumerate(medals_list):
    ax.bar(stack_temp.index, stack_temp[medal], color=colors[i], label=medal, width=2.55, edgecolor='black', bottom=stack_temp[medals_list[:i]].sum(axis=1) if i > 0 else None)

ax.set_facecolor('white')

for s in ['top', 'right']:
    ax.spines[s].set_visible(False)

Xstart, Xend = ax.get_xlim()
Ystart, Yend = ax.get_ylim()

ax.set_xlim(Xstart, Xend)
ax.grid(which='both', axis='x', zorder=5, color='gray', linestyle=':', dashes=(1, 5))

ax.set_axisbelow(True)
ax.get_yaxis().set_visible(False)

ax.text(Xstart + 3, Yend + 0.13, 'Olympic Medals for the United Kingdom', fontsize=15, fontweight='bold', fontfamily='serif', color='#323232')

plt.legend(loc='upper left', bbox_to_anchor=(1, 1), title='Medal Type')
 383:
df_new = mesclado.query("Season == 'Summer'").groupby(['Year','NOC','Medal'])['Medal'].count().unstack().fillna(0).astype(int).reset_index()

fig, ax = plt.subplots(1, 1, figsize=(18, 5), facecolor='white')

ax.set_facecolor('white')

color = ["#a97142", "lightgray", '#f0c05a']

medals_list = ['Bronze', 'Silver', 'Gold']
width = 0.75
for i, medal in enumerate(np.array(medals_list)):
    ax.bar(df_new['Year']+(width*(i-2)), df_new[medal], width, color=color[i], label=medal, ec='black')
    
for s in ['top', 'right']:
    ax.spines[s].set_visible(False)


Xstart, Xend = ax.get_xlim()
Ystart, Yend = ax.get_ylim()

ax.text(Xstart+3,Yend+10, 'Olympic Medals for the United Kingdom', fontsize=15,fontweight='bold',fontfamily='serif',color='#323232')
ax.text(Xstart+3,Yend+5, 'Hosting', fontsize=10,fontweight='bold',fontfamily='sansserif',color='gray')

ax.set_xlim(Xstart+3, Xend)

ax.grid(which='both', axis='x', zorder=5, color='gray', linestyle=':', dashes=(1,5))

ax.set_axisbelow(True)
 384:
df_new = mesclado.query("Season == 'Summer'").groupby(['Year','NOC','Medal'])['Medal'].count().unstack().fillna(0).astype(int).reset_index()

df_new
 385:
df_new = mesclado.query("Season == 'Summer'").groupby(['Year','NOC','Medal'])['Medal'].count().unstack().fillna(0).astype(int).reset_index()

temp = df_new[['Year','Medal']].groupby(['Year'])

temp
 386:
df_new = mesclado.query("Season == 'Summer'").groupby(['Year','NOC','Medal'])['Medal'].count().unstack().fillna(0).astype(int).reset_index()

temp = df_new[['Year','Bronze', 'Silver', 'Gold']].groupby(['Year'])

temp
 387:
df_new = mesclado.query("Season == 'Summer'").groupby(['Year','NOC','Medal'])['Medal'].count().unstack().fillna(0).astype(int).reset_index()

temp = df_new[['Year','Bronze', 'Silver', 'Gold']].groupby(['Year']).sum()

temp
 388:
df_new = mesclado.query("Season == 'Summer'").groupby(['Year','NOC','Medal'])['Medal'].count().unstack().fillna(0).astype(int).reset_index()

temp = df_new[['Year','Bronze', 'Silver', 'Gold']].groupby(['Year']).sum()


fig, ax = plt.subplots(1, 1, figsize=(18, 5), facecolor='white')

ax.set_facecolor('white')

color = ["#a97142", "lightgray", '#f0c05a']

medals_list = ['Bronze', 'Silver', 'Gold']
width = 0.75
for i, medal in enumerate(np.array(medals_list)):
    ax.bar(temp['Year']+(width*(i-2)), temp[medal], width, color=color[i], label=medal, ec='black')
    
for s in ['top', 'right']:
    ax.spines[s].set_visible(False)


Xstart, Xend = ax.get_xlim()
Ystart, Yend = ax.get_ylim()

ax.text(Xstart+3,Yend+10, 'Olympic Medals for the United Kingdom', fontsize=15,fontweight='bold',fontfamily='serif',color='#323232')
ax.text(Xstart+3,Yend+5, 'Hosting', fontsize=10,fontweight='bold',fontfamily='sansserif',color='gray')

ax.set_xlim(Xstart+3, Xend)

ax.grid(which='both', axis='x', zorder=5, color='gray', linestyle=':', dashes=(1,5))

ax.set_axisbelow(True)
 389:
df_new = mesclado.query("Season == 'Summer'").groupby(['Year','NOC','Medal'])['Medal'].count().unstack().fillna(0).astype(int).reset_index()

temp = df_new[['Year','Bronze', 'Silver', 'Gold']].groupby(['Year']).sum()

temp
 390:
df_new = mesclado.query("Season == 'Summer'").groupby(['Year','NOC','Medal'])['Medal'].count().unstack().fillna(0).astype(int).reset_index()

temp = df_new[['Year','Bronze', 'Silver', 'Gold']].groupby(['Year']).sum().reset_index()

temp
 391:
df_new = mesclado.query("Season == 'Summer'").groupby(['Year','NOC','Medal'])['Medal'].count().unstack().fillna(0).astype(int).reset_index()

temp = df_new[['Year','Bronze', 'Silver', 'Gold']].groupby(['Year']).sum().reset_index().drop('Medal')

temp
 392:
df_new = mesclado.query("Season == 'Summer'").groupby(['Year','NOC','Medal'])['Medal'].count().unstack().fillna(0).astype(int).reset_index()

temp = df_new[['Year','Bronze', 'Silver', 'Gold']].groupby(['Year']).sum().reset_index()

temp
 393:
df_new = mesclado.query("Season == 'Summer'").groupby(['Year','NOC','Medal'])['Medal'].count().unstack().fillna(0).astype(int).reset_index()

temp = df_new[['Year','Bronze', 'Silver', 'Gold']].groupby(['Year']).sum().reset_index()



fig, ax = plt.subplots(1, 1, figsize=(18, 5), facecolor='white')

ax.set_facecolor('white')

color = ["#a97142", "lightgray", '#f0c05a']

medals_list = ['Bronze', 'Silver', 'Gold']
width = 0.75
for i, medal in enumerate(np.array(medals_list)):
    ax.bar(temp['Year']+(width*(i-2)), temp[medal], width, color=color[i], label=medal, ec='black')
    
for s in ['top', 'right']:
    ax.spines[s].set_visible(False)


Xstart, Xend = ax.get_xlim()
Ystart, Yend = ax.get_ylim()

ax.text(Xstart+3,Yend+10, 'Olympic Medals for the United Kingdom', fontsize=15,fontweight='bold',fontfamily='serif',color='#323232')
ax.text(Xstart+3,Yend+5, 'Hosting', fontsize=10,fontweight='bold',fontfamily='sansserif',color='gray')

ax.set_xlim(Xstart+3, Xend)

ax.grid(which='both', axis='x', zorder=5, color='gray', linestyle=':', dashes=(1,5))

ax.set_axisbelow(True)
 394:
df_new = mesclado.query("Season == 'Summer'").groupby(['Year','NOC','Medal'])['Medal'].count().unstack().fillna(0).astype(int).reset_index()

temp = df_new[['Year','Bronze', 'Silver', 'Gold']].groupby(['Year']).sum().reset_index()



fig, ax = plt.subplots(1, 1, figsize=(18, 5), facecolor='white')

ax.set_facecolor('white')

color = ["#a97142", "lightgray", '#f0c05a']

medals_list = ['Bronze', 'Silver', 'Gold']
width = 0.75
for i, medal in enumerate(np.array(medals_list)):
    ax.bar(temp['Year']+(width*(i-2)), temp[medal], width, color=color[i], label=medal, ec='black')
    
for s in ['top', 'right']:
    ax.spines[s].set_visible(False)


Xstart, Xend = ax.get_xlim()
Ystart, Yend = ax.get_ylim()

ax.text(Xstart+3,Yend+10, 'Olympic Medals for the United Kingdom', fontsize=15,fontweight='bold',fontfamily='serif',color='#323232')

ax.set_xlim(Xstart+3, Xend)

ax.grid(which='both', axis='x', zorder=5, color='gray', linestyle=':', dashes=(1,5))

ax.set_axisbelow(True)
 395:
df_new = mesclado.query("Season == 'Summer'").groupby(['Year','NOC','Medal'])['Medal'].count().unstack().fillna(0).astype(int).reset_index()

temp = df_new[['Year','Bronze', 'Silver', 'Gold']].groupby(['Year']).sum().reset_index()



fig, ax = plt.subplots(1, 1, figsize=(18, 5), facecolor='white')

ax.set_facecolor('white')

color = ["#a97142", "lightgray", '#f0c05a']

medals_list = ['Bronze', 'Silver', 'Gold']
width = 0.75
for i, medal in enumerate(np.array(medals_list)):
    ax.bar(temp['Year']+(width*(i-2)), temp[medal], width, color=color[i], label=medal, ec='black')
    
for s in ['top', 'right']:
    ax.spines[s].set_visible(False)


Xstart, Xend = ax.get_xlim()
Ystart, Yend = ax.get_ylim()

ax.text(Xstart+3,Yend+50, 'Olympic Medals for the United Kingdom', fontsize=15,fontweight='bold',fontfamily='serif',color='#323232')

ax.set_xlim(Xstart+3, Xend)

ax.grid(which='both', axis='x', zorder=5, color='gray', linestyle=':', dashes=(1,5))

ax.set_axisbelow(True)
 396:
df_new = mesclado.query("Season == 'Summer'").groupby(['Year','NOC','Medal'])['Medal'].count().unstack().fillna(0).astype(int).reset_index()

temp = df_new[['Year','Bronze', 'Silver', 'Gold']].groupby(['Year']).sum().reset_index()



fig, ax = plt.subplots(1, 1, figsize=(18, 5), facecolor='white')

ax.set_facecolor('white')

color = ["#a97142", "lightgray", '#f0c05a']

medals_list = ['Bronze', 'Silver', 'Gold']
width = 0.75
for i, medal in enumerate(np.array(medals_list)):
    ax.bar(temp['Year']+(width*(i-2)), temp[medal], width, color=color[i], label=medal, ec='black')
    
for s in ['top', 'right']:
    ax.spines[s].set_visible(False)


Xstart, Xend = ax.get_xlim()
Ystart, Yend = ax.get_ylim()

ax.text(Xstart+3,Yend+50, 'Medalhas na competição de Verão distribuidas pelos anos', fontsize=15,fontweight='bold',fontfamily='serif',color='#323232')

ax.set_xlim(Xstart+3, Xend)

ax.grid(which='both', axis='x', zorder=5, color='gray', linestyle=':', dashes=(1,5))

ax.set_axisbelow(True)
 397:
df_new = mesclado.query("Season == 'Summer'").groupby(['Year','NOC','Medal'])['Medal'].count().unstack().fillna(0).astype(int).reset_index()

temp = df_new[['Year','Bronze', 'Silver', 'Gold']].groupby(['Year']).sum().reset_index()



fig, ax = plt.subplots(1, 1, figsize=(18, 5), facecolor='white')

ax.set_facecolor('white')

color = ["#a97142", "lightgray", '#f0c05a']

medals_list = ['Bronze', 'Silver', 'Gold']
width = 0.75
for i, medal in enumerate(np.array(medals_list)):
    ax.bar(temp['Year']+(width*(i-2)), temp[medal], width, color=color[i], label=medal, ec='black')
    
for s in ['top', 'right']:
    ax.spines[s].set_visible(False)


Xstart, Xend = ax.get_xlim()
Ystart, Yend = ax.get_ylim()

ax.text(Xstart+3,Yend+50, 'Medalhas na competição de Verão distribuídas pelos anos', fontsize=15,fontweight='bold',fontfamily='serif',color='#323232')

ax.set_xlim(Xstart+3, Xend)

ax.grid(which='both', axis='x', zorder=5, color='gray', linestyle=':', dashes=(1,5))

ax.set_axisbelow(True)
 398:
df_new = mesclado.query("Season == 'Summer'").groupby(['Year','NOC','Medal'])['Medal'].count().unstack().fillna(0).astype(int).reset_index()

temp = df_new[['Year','Bronze', 'Silver', 'Gold']].groupby(['Year']).sum().reset_index()

fig, ax = plt.subplots(1, 1, figsize=(18, 5), facecolor='white')

ax.set_facecolor('white')

color = ["#a97142", "lightgray", '#f0c05a']

medals_list = ['Bronze', 'Silver', 'Gold']
width = 0.75

for i, medal in enumerate(np.array(medals_list)):
    ax.bar(temp['Year']+(width*(i-2.5)), temp[medal], width, color=color[i], label=medal, ec='black')
    ax.bar()
    
for s in ['top', 'right']:
    ax.spines[s].set_visible(False)

Xstart, Xend = ax.get_xlim()
Ystart, Yend = ax.get_ylim()

ax.text(Xstart+3,Yend+50, 'Medalhas na competição de Verão distribuídas pelos anos', fontsize=15,fontweight='bold',fontfamily='serif',color='#323232')

ax.set_xlim(Xstart+3, Xend)

ax.grid(which='both', axis='x', zorder=5, color='gray', linestyle=':', dashes=(1,5))

ax.set_axisbelow(True)
 399:
df_new = mesclado.query("Season == 'Summer'").groupby(['Year','NOC','Medal'])['Medal'].count().unstack().fillna(0).astype(int).reset_index()

temp = df_new[['Year','Bronze', 'Silver', 'Gold']].groupby(['Year']).sum().reset_index()

fig, ax = plt.subplots(1, 1, figsize=(18, 5), facecolor='white')

ax.set_facecolor('white')

color = ["#a97142", "lightgray", '#f0c05a']

medals_list = ['Bronze', 'Silver', 'Gold']
width = 0.75

for i, medal in enumerate(np.array(medals_list)):
    ax.bar(temp['Year']+(width*(i-2)), temp[medal], width, color=color[i], label=medal, ec='black')
    ax.bar()
    
for s in ['top', 'right']:
    ax.spines[s].set_visible(False)

Xstart, Xend = ax.get_xlim()
Ystart, Yend = ax.get_ylim()

ax.text(Xstart+3,Yend+50, 'Medalhas na competição de Verão distribuídas pelos anos', fontsize=15,fontweight='bold',fontfamily='serif',color='#323232')

ax.set_xlim(Xstart+3, Xend)

ax.grid(which='both', axis='x', zorder=5, color='gray', linestyle=':', dashes=(1,5))

ax.set_axisbelow(True)
 400:
df_new = mesclado.query("Season == 'Summer'").groupby(['Year','NOC','Medal'])['Medal'].count().unstack().fillna(0).astype(int).reset_index()

temp = df_new[['Year','Bronze', 'Silver', 'Gold']].groupby(['Year']).sum().reset_index()

fig, ax = plt.subplots(1, 1, figsize=(18, 5), facecolor='white')

ax.set_facecolor('white')

color = ["#a97142", "lightgray", '#f0c05a']

medals_list = ['Bronze', 'Silver', 'Gold']
width = 0.75

for i, medal in enumerate(np.array(medals_list)):
    ax.bar(temp['Year']+(width*(i-2.5)), temp[medal], width, color=color[i], label=medal, ec='black')
    
    
for s in ['top', 'right']:
    ax.spines[s].set_visible(False)

Xstart, Xend = ax.get_xlim()
Ystart, Yend = ax.get_ylim()

ax.text(Xstart+3,Yend+50, 'Medalhas na competição de Verão distribuídas pelos anos', fontsize=15,fontweight='bold',fontfamily='serif',color='#323232')

ax.set_xlim(Xstart+3, Xend)

ax.grid(which='both', axis='x', zorder=5, color='gray', linestyle=':', dashes=(1,5))

ax.set_axisbelow(True)
 401:
df_new = mesclado.query("Season == 'Summer'").groupby(['Year','NOC','Medal'])['Medal'].count().unstack().fillna(0).astype(int).reset_index()

temp = df_new[['Year','Bronze', 'Silver', 'Gold']].groupby(['Year']).sum().reset_index()

fig, ax = plt.subplots(1, 1, figsize=(18, 5), facecolor='white')

ax.set_facecolor('white')

color = ["#a97142", "lightgray", '#f0c05a']

medals_list = ['Bronze', 'Silver', 'Gold']
width = 0.75

for i, medal in enumerate(np.array(medals_list)):
    ax.bar(temp['Year']+(width*(i-1.5)), temp[medal], width, color=color[i], label=medal, ec='black')
    
    
for s in ['top', 'right']:
    ax.spines[s].set_visible(False)

Xstart, Xend = ax.get_xlim()
Ystart, Yend = ax.get_ylim()

ax.text(Xstart+3,Yend+50, 'Medalhas na competição de Verão distribuídas pelos anos', fontsize=15,fontweight='bold',fontfamily='serif',color='#323232')

ax.set_xlim(Xstart+3, Xend)

ax.grid(which='both', axis='x', zorder=5, color='gray', linestyle=':', dashes=(1,5))

ax.set_axisbelow(True)
 402:
df_new = mesclado.query("Season == 'Summer'").groupby(['Year','NOC','Medal'])['Medal'].count().unstack().fillna(0).astype(int).reset_index()

temp = df_new[['Year','Bronze', 'Silver', 'Gold']].groupby(['Year']).sum().reset_index()

fig, ax = plt.subplots(1, 1, figsize=(18, 5), facecolor='white')

ax.set_facecolor('white')

color = ["#a97142", "lightgray", '#f0c05a']

medals_list = ['Bronze', 'Silver', 'Gold']
width = 0.75

for i, medal in enumerate(np.array(medals_list)):
    ax.bar(temp['Year']+(width*(i-1.5)), temp[medal], width, color=color[i], label=medal, ec='black')
    
    
for s in ['top', 'right']:
    ax.spines[s].set_visible(False)

Xstart, Xend = ax.get_xlim()
Ystart, Yend = ax.get_ylim()

ax.text(Yend+50, 'Medalhas na competição de Verão distribuídas pelos anos', fontsize=15,fontweight='bold',fontfamily='serif',color='#323232')

ax.set_xlim(Xstart+3, Xend)

ax.grid(which='both', axis='x', zorder=5, color='gray', linestyle=':', dashes=(1,5))

ax.set_axisbelow(True)
 403:
df_new = mesclado.query("Season == 'Summer'").groupby(['Year','NOC','Medal'])['Medal'].count().unstack().fillna(0).astype(int).reset_index()

temp = df_new[['Year','Bronze', 'Silver', 'Gold']].groupby(['Year']).sum().reset_index()

fig, ax = plt.subplots(1, 1, figsize=(18, 5), facecolor='white')

ax.set_facecolor('white')

color = ["#a97142", "lightgray", '#f0c05a']

medals_list = ['Bronze', 'Silver', 'Gold']
width = 0.75

for i, medal in enumerate(np.array(medals_list)):
    ax.bar(temp['Year']+(width*(i-1.5)), temp[medal], width, color=color[i], label=medal, ec='black')
    
    
for s in ['top', 'right']:
    ax.spines[s].set_visible(False)

Xstart, Xend = ax.get_xlim()
Ystart, Yend = ax.get_ylim()

ax.text(Xstart+3,Yend+50, 'Medalhas na competição de Verão distribuídas pelos anos', fontsize=15,fontweight='bold',fontfamily='serif',color='#323232')

ax.set_xlim(Xstart+3, Xend)

ax.grid(which='both', axis='x', zorder=5, color='gray', linestyle=':', dashes=(1,5))

ax.set_axisbelow(True)
 404:
cores_douradas = ["#d4af37", "#ffd700", "#f0e68c"]
cor_medalhas_array = ["#a97142", "lightgray", '#f0c05a']
cores_medalhas = {'Gold': '#f0c05a', 'Silver': 'Lightgray', 'Bronze': '#a97142'}
cores_olimpicas = ["#4A90D9", "#F0E4A1", "#6D6E71", "#8BCC8C", "#FF5E5E", "#3A78C2", "#F7E5A5", "#8C8C8C", "#7ABF7A", "#FF4D4D", "#5D8AB4", "#F5D787", "#6D6E6E", "#9BCC9B", "#FF4C4C", "#3C8CC2", "#F7E7A2", "#7F7F7F", "#7EBF7E", "#FF6D6D"]


mapa_dourado = LinearSegmentedColormap.from_list("golden", cores_douradas, N=100)
mapa_olimpico = LinearSegmentedColormap.from_list("olimpic", cores_olimpicas, N=100)
 405:
filtrado = mesclado.query("Season == 'Summer'").groupby(['Year','NOC','Medal'])['Medal'].count().unstack().fillna(0).astype(int).reset_index()

compt_verao = filtrado[['Year','Bronze', 'Silver', 'Gold']].groupby(['Year']).sum().reset_index()

fig, ax = plt.subplots(1, 1, figsize=(18, 5), facecolor='white')

ax.set_facecolor('white')

medals_list = ['Bronze', 'Silver', 'Gold']
width = 0.75

for i, medal in enumerate(np.array(medals_list)):
    ax.bar(compt_verao['Year']+(width*(i-1.5)), compt_verao[medal], width, color=cor_medalhas_array[i], label=medal, ec='black')
    
for s in ['top', 'right']:
    ax.spines[s].set_visible(False)

Xstart, Xend = ax.get_xlim()
Ystart, Yend = ax.get_ylim()

ax.text(Xstart+3,Yend+50, 'Medalhas na competição de Verão distribuídas pelos anos', fontsize=15,fontweight='bold',fontfamily='serif',color='#323232')
ax.set_xlim(Xstart+3, Xend)
ax.grid(which='both', axis='x', zorder=5, color='gray', linestyle=':', dashes=(1,5))
ax.set_axisbelow(True)
 406:
filtrado = mesclado.query("Season == 'Summer'").groupby(['Year','NOC','Medal'])['Medal'].count().unstack().fillna(0).astype(int).reset_index()

compt_verao = filtrado[['Year','Bronze', 'Silver', 'Gold']].groupby(['Year']).sum().reset_index()

fig, ax = plt.subplots(1, 1, figsize=(18, 5), facecolor='white')

ax.set_facecolor('white')

medals_list = ['Bronze', 'Silver', 'Gold']
width = 0.75

for i, medal in enumerate(np.array(medals_list)):
    ax.bar(compt_verao['Year']+(width*(i-1.5)), compt_verao[medal], width, color=cor_medalhas_array[i], label=medal, ec='black')
    
for s in ['top', 'right']:
    ax.spines[s].set_visible(False)

Xstart, Xend = ax.get_xlim()
Ystart, Yend = ax.get_ylim()

ax.text(Xstart+3,Yend+50, 'Medalhas na competição de Verão distribuídas pelos anos', fontsize=15,fontweight='bold',fontfamily='serif',color='#323232')
ax.set_xlim(Xstart+3, Xend)
ax.grid(which='both', axis='x', zorder=5, color='gray', linestyle=':', dashes=(1,5))
ax.set_axisbelow(True)

ax.set_label(medals_list)
 407:
filtrado = mesclado.query("Season == 'Summer'").groupby(['Year','NOC','Medal'])['Medal'].count().unstack().fillna(0).astype(int).reset_index()

compt_verao = filtrado[['Year','Bronze', 'Silver', 'Gold']].groupby(['Year']).sum().reset_index()

fig, ax = plt.subplots(1, 1, figsize=(18, 5), facecolor='white')

ax.set_facecolor('white')

medals_list = ['Bronze', 'Silver', 'Gold']
width = 0.75

for i, medal in enumerate(np.array(medals_list)):
    ax.bar(compt_verao['Year']+(width*(i-1.5)), compt_verao[medal], width, color=cor_medalhas_array[i], label=medal, ec='black')
    
for s in ['top', 'right']:
    ax.spines[s].set_visible(False)

Xstart, Xend = ax.get_xlim()
Ystart, Yend = ax.get_ylim()

ax.text(Xstart+3,Yend+50, 'Medalhas na competição de Verão distribuídas pelos anos', fontsize=15,fontweight='bold',fontfamily='serif',color='#323232')
ax.set_xlim(Xstart+3, Xend)
ax.grid(which='both', axis='x', zorder=5, color='gray', linestyle=':', dashes=(1,5))
ax.set_axisbelow(True)

ax.set_label()
 408:
filtrado = mesclado.query("Season == 'Summer'").groupby(['Year','NOC','Medal'])['Medal'].count().unstack().fillna(0).astype(int).reset_index()

compt_verao = filtrado[['Year','Bronze', 'Silver', 'Gold']].groupby(['Year']).sum().reset_index()

fig, ax = plt.subplots(1, 1, figsize=(18, 5), facecolor='white')

ax.set_facecolor('white')

medals_list = ['Bronze', 'Silver', 'Gold']
width = 0.75

for i, medal in enumerate(np.array(medals_list)):
    ax.bar(compt_verao['Year']+(width*(i-1.5)), compt_verao[medal], width, color=cor_medalhas_array[i], label=medal, ec='black')
    
for s in ['top', 'right']:
    ax.spines[s].set_visible(False)

Xstart, Xend = ax.get_xlim()
Ystart, Yend = ax.get_ylim()

ax.text(Xstart+3,Yend+50, 'Medalhas na competição de Verão distribuídas pelos anos', fontsize=15,fontweight='bold',fontfamily='serif',color='#323232')
ax.set_xlim(Xstart+3, Xend)
ax.grid(which='both', axis='x', zorder=5, color='gray', linestyle=':', dashes=(1,5))
ax.set_axisbelow(True)
 409:
filtrado = mesclado.query("Season == 'Winter'").groupby(['Year','NOC','Medal'])['Medal'].count().unstack().fillna(0).astype(int).reset_index()

compt_inverno = filtrado[['Year','Bronze', 'Silver', 'Gold']].groupby(['Year']).sum().reset_index()

fig, ax = plt.subplots(1, 1, figsize=(18, 5), facecolor='white')

ax.set_facecolor('white')

medals_list = ['Bronze', 'Silver', 'Gold']
width = 0.75

for i, medal in enumerate(np.array(medals_list)):
    ax.bar(compt_inverno['Year']+(width*(i-1.5)), compt_inverno[medal], width, color=cor_medalhas_array[i], label=medal, ec='black')
    
for s in ['top', 'right']:
    ax.spines[s].set_visible(False)

Xstart, Xend = ax.get_xlim()
Ystart, Yend = ax.get_ylim()

ax.text(Xstart+3,Yend+50, 'Medalhas na competição de Verão distribuídas pelos anos', fontsize=15,fontweight='bold',fontfamily='serif',color='#323232')
ax.set_xlim(Xstart+3, Xend)
ax.grid(which='both', axis='x', zorder=5, color='gray', linestyle=':', dashes=(1,5))
ax.set_axisbelow(True)
 410:
filtrado = mesclado.query("Season == 'Winter'").groupby(['Year','NOC','Medal'])['Medal'].count().unstack().fillna(0).astype(int).reset_index()

compt_inverno = filtrado[['Year','Bronze', 'Silver', 'Gold']].groupby(['Year']).sum().reset_index()

fig, ax = plt.subplots(1, 1, figsize=(18, 5), facecolor='white')

ax.set_facecolor('white')

medals_list = ['Bronze', 'Silver', 'Gold']
width = 0.75

for i, medal in enumerate(np.array(medals_list)):
    ax.bar(compt_inverno['Year']+(width*(i-1.5)), compt_inverno[medal], width, color=cor_medalhas_array[i], label=medal, ec='black')
    
for s in ['top', 'right']:
    ax.spines[s].set_visible(False)

Xstart, Xend = ax.get_xlim()
Ystart, Yend = ax.get_ylim()

ax.text(Xstart+3,Yend+50, 'Medalhas na competição de Inverno distribuídas pelos anos', fontsize=15,fontweight='bold',fontfamily='serif',color='#323232')
ax.set_xlim(Xstart+3, Xend)
ax.grid(which='both', axis='x', zorder=5, color='gray', linestyle=':', dashes=(1,5))
ax.set_axisbelow(True)
 411:
filtrado = mesclado.query("Season == 'Summer'").groupby(['Year','NOC','Medal'])['Medal'].count().unstack().fillna(0).astype(int).reset_index()

compt_verao = filtrado[['Year','Bronze', 'Silver', 'Gold']].groupby(['Year']).sum().reset_index()

fig, ax = plt.subplots(1, 1, figsize=(18, 5), facecolor='white')

ax.set_facecolor('white')

medals_list = ['Bronze', 'Silver', 'Gold']
width = 0.75

for i, medal in enumerate(np.array(medals_list)):
    ax.bar(compt_verao['Year']+(width*(i-1.5)), compt_verao[medal], width, color=cor_medalhas_array[i], label=medal, ec='black')
    
for s in ['top', 'right']:
    ax.spines[s].set_visible(False)

Xstart, Xend = ax.get_xlim()
Ystart, Yend = ax.get_ylim()

ax.text(Xstart+3,Yend+50, 'Medalhas na competição de Verão distribuídas pelos anos', fontsize=15,fontweight='bold',fontfamily='serif',color='#323232')
ax.set_xlim(Xstart+3, Xend)
ax.grid(which='both', axis='x', zorder=5, color='gray', linestyle=':', dashes=(1,5))
ax.set_axisbelow(True)
ax.legend('Medalhas')
 412:
filtrado = mesclado.query("Season == 'Summer'").groupby(['Year','NOC','Medal'])['Medal'].count().unstack().fillna(0).astype(int).reset_index()

compt_verao = filtrado[['Year','Bronze', 'Silver', 'Gold']].groupby(['Year']).sum().reset_index()

fig, ax = plt.subplots(1, 1, figsize=(18, 5), facecolor='white')

ax.set_facecolor('white')

medals_list = ['Bronze', 'Silver', 'Gold']
width = 0.75

for i, medal in enumerate(np.array(medals_list)):
    ax.bar(compt_verao['Year']+(width*(i-1.5)), compt_verao[medal], width, color=cor_medalhas_array[i], label=medal, ec='black')
    
for s in ['top', 'right']:
    ax.spines[s].set_visible(False)

Xstart, Xend = ax.get_xlim()
Ystart, Yend = ax.get_ylim()

ax.text(Xstart+3,Yend+50, 'Medalhas na competição de Verão distribuídas pelos anos', fontsize=15,fontweight='bold',fontfamily='serif',color='#323232')
ax.set_xlim(Xstart+3, Xend)
ax.grid(which='both', axis='x', zorder=5, color='gray', linestyle=':', dashes=(1,5))
ax.set_axisbelow(True)
ax.legend()
 413:
filtrado = mesclado.query("Season == 'Summer'").groupby(['Year','NOC','Medal'])['Medal'].count().unstack().fillna(0).astype(int).reset_index()

compt_verao = filtrado[['Year','Bronze', 'Silver', 'Gold']].groupby(['Year']).sum().reset_index()

fig, ax = plt.subplots(1, 1, figsize=(18, 5), facecolor='white')

ax.set_facecolor('white')

medals_list = ['Bronze', 'Silver', 'Gold']
width = 0.75

for i, medal in enumerate(np.array(medals_list)):
    ax.bar(compt_verao['Year']+(width*(i-1.5)), compt_verao[medal], width, color=cor_medalhas_array[i], label=medal, ec='black')
    
for s in ['top', 'right']:
    ax.spines[s].set_visible(False)

Xstart, Xend = ax.get_xlim()
Ystart, Yend = ax.get_ylim()

ax.text(Xstart+3,Yend+50, 'Medalhas na competição de Verão distribuídas pelos anos', fontsize=15,fontweight='bold',fontfamily='serif',color='#323232')
ax.set_xlim(Xstart+3, Xend)
ax.grid(which='both', axis='x', zorder=5, color='gray', linestyle=':', dashes=(1,5))
ax.set_axisbelow(True)
ax.legend(color='white')
 414:
filtrado = mesclado.query("Season == 'Summer'").groupby(['Year','NOC','Medal'])['Medal'].count().unstack().fillna(0).astype(int).reset_index()

compt_verao = filtrado[['Year','Bronze', 'Silver', 'Gold']].groupby(['Year']).sum().reset_index()

fig, ax = plt.subplots(1, 1, figsize=(18, 5), facecolor='white')

ax.set_facecolor('white')

medals_list = ['Bronze', 'Silver', 'Gold']
width = 0.75

for i, medal in enumerate(np.array(medals_list)):
    ax.bar(compt_verao['Year']+(width*(i-1.5)), compt_verao[medal], width, color=cor_medalhas_array[i], label=medal, ec='black')
    
for s in ['top', 'right']:
    ax.spines[s].set_visible(False)

Xstart, Xend = ax.get_xlim()
Ystart, Yend = ax.get_ylim()

ax.text(Xstart+3,Yend+50, 'Medalhas na competição de Verão distribuídas pelos anos', fontsize=15,fontweight='bold',fontfamily='serif',color='#323232')
ax.set_xlim(Xstart+3, Xend)
ax.grid(which='both', axis='x', zorder=5, color='gray', linestyle=':', dashes=(1,5))
ax.set_axisbelow(True)
ax.legend()
 415:
filtrado = mesclado.query("Season == 'Summer'").groupby(['Year','NOC','Medal'])['Medal'].count().unstack().fillna(0).astype(int).reset_index()

compt_verao = filtrado[['Year','Bronze', 'Silver', 'Gold']].groupby(['Year']).sum().reset_index()

fig, ax = plt.subplots(1, 1, figsize=(18, 5), facecolor='white')

ax.set_facecolor('white')

medals_list = ['Bronze', 'Silver', 'Gold']
width = 0.75

for i, medal in enumerate(np.array(medals_list)):
    ax.bar(compt_verao['Year']+(width*(i-1.5)), compt_verao[medal], width, color=cor_medalhas_array[i], label=medal, ec='black')
    
for s in ['top', 'right']:
    ax.spines[s].set_visible(False)

Xstart, Xend = ax.get_xlim()
Ystart, Yend = ax.get_ylim()

ax.text(Xstart+3,Yend+50, 'Medalhas na competição de Verão distribuídas pelos anos', fontsize=15,fontweight='bold',fontfamily='serif',color='#323232')
ax.set_xlim(Xstart+3, Xend)
ax.grid(which='both', axis='x', zorder=5, color='gray', linestyle=':', dashes=(1,5))
ax.set_axisbelow(True)
ax.legend(facecolor='white')
 416:
filtrado = mesclado.query("Season == 'Winter'").groupby(['Year','NOC','Medal'])['Medal'].count().unstack().fillna(0).astype(int).reset_index()

compt_inverno = filtrado[['Year','Bronze', 'Silver', 'Gold']].groupby(['Year']).sum().reset_index()

fig, ax = plt.subplots(1, 1, figsize=(18, 5), facecolor='white')

ax.set_facecolor('white')

medals_list = ['Bronze', 'Silver', 'Gold']
width = 0.75

for i, medal in enumerate(np.array(medals_list)):
    ax.bar(compt_inverno['Year']+(width*(i-1.5)), compt_inverno[medal], width, color=cor_medalhas_array[i], label=medal, ec='black')
    
for s in ['top', 'right']:
    ax.spines[s].set_visible(False)

Xstart, Xend = ax.get_xlim()
Ystart, Yend = ax.get_ylim()

ax.text(Xstart+3,Yend+50, 'Medalhas na competição de Inverno distribuídas pelos anos', fontsize=15,fontweight='bold',fontfamily='serif',color='#323232')
ax.set_xlim(Xstart+3, Xend)
ax.grid(which='both', axis='x', zorder=5, color='gray', linestyle=':', dashes=(1,5))
ax.set_axisbelow(True)
ax.legend(facecolor='white')
 417:
filtrado = mesclado.query("Season == 'Summer'").groupby(['Year','NOC','Medal'])['Medal'].count().unstack().fillna(0).astype(int).reset_index()

compt_verao = filtrado[['Year','Bronze', 'Silver', 'Gold']].groupby(['Year']).sum().reset_index()

fig, ax = plt.subplots(1, 1, figsize=(18, 5), facecolor='white')

ax.set_facecolor('white')

medals_list = ['Bronze', 'Silver', 'Gold']
width = 0.75

for i, medal in enumerate(np.array(medals_list)):
    ax.bar(compt_verao['Year']+(width*(i-1.5)), compt_verao[medal], width, color=cor_medalhas_array[i], label=medal, ec='black')
    
for s in ['top', 'right']:
    ax.spines[s].set_visible(False)

Xstart, Xend = ax.get_xlim()
Ystart, Yend = ax.get_ylim()

ax.text(Xstart+3,Yend+50, 'Medalhas na competição de Verão distribuídas pelos anos', fontsize=15,fontweight='bold',fontfamily='serif',color='#323232')
ax.set_xlim(Xstart+3, Xend)
ax.grid(which='both', axis='x', zorder=5, color='gray', linestyle=':', dashes=(1,5))
ax.set_axisbelow(True)
ax.legend(facecolor='white')
 418: cor_dourada_clara = '#FFD700'
 419:
cor_dourada_clara = '#FFD700'
cor_dourada = cores_medalhas.get('Gold')
 420:

max_age = medalhas_ouro['Age'].value_counts().idxmax()
 421:

max_age = medalhas_ouro['Age'].value_counts().idxmax()

max_age
 422:

max_age = medalhas_ouro['Age'].value_counts().idxmax()

cor_dourada_clara = '#FFD700'
cor_dourada = cores_medalhas.get('Gold')
palette = [cor_dourada_clara if age != max_age else color_gold for age in sorted(medalhas_ouro['Age'].unique())]
 423:

max_age = medalhas_ouro['Age'].value_counts().idxmax()

cor_dourada_clara = '#FFD700'
cor_dourada = cores_medalhas.get('Gold')
palette = [cor_dourada_clara if age != max_age else cor_dourada for age in sorted(medalhas_ouro['Age'].unique())]
 424:

max_age = medalhas_ouro['Age'].value_counts().idxmax()

cor_dourada_clara = '#FFD700'
cor_dourada = cores_medalhas.get('Gold')
palette = [cor_dourada_clara if age != max_age else cor_dourada for age in sorted(medalhas_ouro['Age'].unique())]

plt.figure(figsize=(20, 10))
plt.tight_layout()
sns.countplot(x='Age', data=medalhas_ouro, palette=palette)
plt.title('Distribuição de medalhas de ouro por idade', fontsize=15, fontweight="bold")
plt.ylabel('Medalhas de ouro')
plt.xlabel('')
 425:

max_age = medalhas_ouro['Age'].value_counts().idxmax()

cor_dourada_clara = '#fff3b1'
cor_dourada = cores_medalhas.get('Gold')
palette = [cor_dourada_clara if age != max_age else cor_dourada for age in sorted(medalhas_ouro['Age'].unique())]

plt.figure(figsize=(20, 10))
plt.tight_layout()
sns.countplot(x='Age', data=medalhas_ouro, palette=palette)
plt.title('Distribuição de medalhas de ouro por idade', fontsize=15, fontweight="bold")
plt.ylabel('Medalhas de ouro')
plt.xlabel('')
 426:

max_age = medalhas_ouro['Age'].value_counts().idxmax()

cor_dourada_clara = '#FFE976'
cor_dourada = cores_medalhas.get('Gold')
palette = [cor_dourada_clara if age != max_age else cor_dourada for age in sorted(medalhas_ouro['Age'].unique())]

plt.figure(figsize=(20, 10))
plt.tight_layout()
sns.countplot(x='Age', data=medalhas_ouro, palette=palette)
plt.title('Distribuição de medalhas de ouro por idade', fontsize=15, fontweight="bold")
plt.ylabel('Medalhas de ouro')
plt.xlabel('')
 427:

max_age = medalhas_ouro['Age'].value_counts().idxmax()

cor_dourada_clara = '#FFE976'
cor_dourada = cores_medalhas.get('Gold')
palette = [cor_dourada_clara if age != max_age else cor_dourada for age in sorted(medalhas_ouro['Age'].unique())]

plt.figure(figsize=(20, 10))
plt.tight_layout()
sns.countplot(x='Age', data=medalhas_ouro, palette=palette)
plt.title('Distribuição de medalhas de ouro por idade', fontsize=15,fontweight='bold',fontfamily='serif',color='#323232')
plt.ylabel('Medalhas de ouro')
plt.xlabel('')
 428:

max_age = medalhas_ouro['Age'].value_counts().idxmax()

cor_dourada_clara = '#FFE976'
cor_dourada = cores_medalhas.get('Gold')
palette = [cor_dourada_clara if age != max_age else cor_dourada for age in sorted(medalhas_ouro['Age'].unique())]

plt.figure(figsize=(20, 10), facecolor='#FFFCEB')
plt.tight_layout()
sns.countplot(x='Age', data=medalhas_ouro, palette=palette)
plt.title('Distribuição de medalhas de ouro por idade', fontsize=15,fontweight='bold',fontfamily='serif',color='#323232')
plt.ylabel('Medalhas de ouro')
plt.xlabel('')
 429:

max_age = medalhas_ouro['Age'].value_counts().idxmax()

cor_dourada_clara = '#FFE976'
cor_dourada = cores_medalhas.get('Gold')
palette = [cor_dourada_clara if age != max_age else cor_dourada for age in sorted(medalhas_ouro['Age'].unique())]

plt.figure(figsize=(20, 10), facecolor='#FFFCEB')
plt.tight_layout()
ax = sns.countplot(x='Age', data=medalhas_ouro, palette=palette)
ax.set_facecolor('#FFFCEB')
plt.title('Distribuição de medalhas de ouro por idade', fontsize=15,fontweight='bold',fontfamily='serif',color='#323232')
plt.ylabel('Medalhas de ouro')
plt.xlabel('')
 430:

max_age = medalhas_ouro['Age'].value_counts().idxmax()

cor_dourada_clara = '#FFE976'
cor_dourada = '#F0C05A'
palette = [cor_dourada_clara if age != max_age else cor_dourada for age in sorted(medalhas_ouro['Age'].unique())]

plt.figure(figsize=(20, 10), facecolor='#FFFCEB')
plt.tight_layout()
ax = sns.countplot(x='Age', data=medalhas_ouro, palette=palette)
ax.set_facecolor('#FFFCEB')
plt.title('Distribuição de medalhas de ouro por idade', fontsize=15,fontweight='bold',fontfamily='serif',color='#323232')
plt.ylabel('Medalhas de ouro')
plt.xlabel('')
 431:

max_age = medalhas_ouro['Age'].value_counts().idxmax()

cor_dourada_clara = '#FFE976'
cor_dourada = '#F0C05A'
palette = [cor_dourada_clara if age != max_age else cor_dourada for age in sorted(medalhas_ouro['Age'].unique())]

plt.figure(figsize=(20, 10), facecolor='#FFFCEB')
plt.tight_layout()
ax = sns.countplot(x='Age', data=medalhas_ouro, palette=palette)
ax.set_facecolor('#FFFCEB')
plt.title('Distribuição de medalhas de ouro por idade', fontsize=15,fontweight='bold',fontfamily='serif',color='#323232')
plt.ylabel('')
plt.xlabel('')
 432:

max_age = medalhas_ouro['Age'].value_counts().idxmax()

cor_dourada_clara = '#FFE976'
cor_dourada = '#F0C05A'
palette = [cor_dourada_clara if age != max_age else cor_dourada for age in sorted(medalhas_ouro['Age'].unique())]

plt.figure(figsize=(20, 10), facecolor='#FFFCEB')
ax = sns.countplot(x='Age', data=medalhas_ouro, palette=palette)
ax.set_facecolor('#FFFCEB')
plt.title('Distribuição de medalhas de ouro por idade', fontsize=15,fontweight='bold',fontfamily='serif',color='#323232')
plt.tight_layout()
plt.ylabel('')
plt.xlabel('')
 433:

max_age = medalhas_ouro['Age'].value_counts().idxmax()

cor_dourada_clara = '#FFE976'
cor_dourada = '#F0C05A'
palette = [cor_dourada_clara if age != max_age else cor_dourada for age in sorted(medalhas_ouro['Age'].unique())]

plt.figure(figsize=(20, 10), facecolor='#fcfbf2')
ax = sns.countplot(x='Age', data=medalhas_ouro, palette=palette)
ax.set_facecolor('#fcfbf2')
plt.title('Distribuição de medalhas de ouro por idade', fontsize=15,fontweight='bold',fontfamily='serif',color='#323232')
plt.tight_layout()
plt.ylabel('')
plt.xlabel('')
 434:

max_age = medalhas_ouro['Age'].value_counts().idxmax()

cor_dourada_clara = '#FFE976'
cor_dourada = '#F0C05A'
palette = [cor_dourada_clara if age != max_age else cor_dourada for age in sorted(medalhas_ouro['Age'].unique())]

plt.figure(figsize=(20, 10), facecolor='#fcfcf7')
ax = sns.countplot(x='Age', data=medalhas_ouro, palette=palette)
ax.set_facecolor('#fcfcf7')
plt.title('Distribuição de medalhas de ouro por idade', fontsize=15,fontweight='bold',fontfamily='serif',color='#323232')
plt.tight_layout()
plt.ylabel('')
plt.xlabel('')
 435:
filtrado = mesclado.query("Season == 'Summer'").groupby(['Year','NOC','Medal'])['Medal'].count().unstack().fillna(0).astype(int).reset_index()

compt_verao = filtrado[['Year','Bronze', 'Silver', 'Gold']].groupby(['Year']).sum().reset_index()

fig, ax = plt.subplots(1, 1, figsize=(18, 5), facecolor='#FCF6F6')

ax.set_facecolor('#FCF6F6')

medals_list = ['Bronze', 'Silver', 'Gold']
width = 0.75

for i, medal in enumerate(np.array(medals_list)):
    ax.bar(compt_verao['Year']+(width*(i-1.5)), compt_verao[medal], width, color=cor_medalhas_array[i], label=medal, ec='black')
    
for s in ['top', 'right']:
    ax.spines[s].set_visible(False)

Xstart, Xend = ax.get_xlim()
Ystart, Yend = ax.get_ylim()

ax.text(Xstart+3,Yend+50, 'Medalhas na competição de Verão distribuídas pelos anos', fontsize=15,fontweight='bold',fontfamily='serif',color='#323232')
ax.set_xlim(Xstart+3, Xend)
ax.grid(which='both', axis='x', zorder=5, color='gray', linestyle=':', dashes=(1,5))
ax.set_axisbelow(True)
ax.legend(facecolor='white')
 436:
filtrado = mesclado.query("Season == 'Summer'").groupby(['Year','NOC','Medal'])['Medal'].count().unstack().fillna(0).astype(int).reset_index()

compt_verao = filtrado[['Year','Bronze', 'Silver', 'Gold']].groupby(['Year']).sum().reset_index()

fig, ax = plt.subplots(1, 1, figsize=(18, 5), facecolor='#F9F9F9')

ax.set_facecolor('#F9F9F9')

medals_list = ['Bronze', 'Silver', 'Gold']
width = 0.75

for i, medal in enumerate(np.array(medals_list)):
    ax.bar(compt_verao['Year']+(width*(i-1.5)), compt_verao[medal], width, color=cor_medalhas_array[i], label=medal, ec='black')
    
for s in ['top', 'right']:
    ax.spines[s].set_visible(False)

Xstart, Xend = ax.get_xlim()
Ystart, Yend = ax.get_ylim()

ax.text(Xstart+3,Yend+50, 'Medalhas na competição de Verão distribuídas pelos anos', fontsize=15,fontweight='bold',fontfamily='serif',color='#323232')
ax.set_xlim(Xstart+3, Xend)
ax.grid(which='both', axis='x', zorder=5, color='gray', linestyle=':', dashes=(1,5))
ax.set_axisbelow(True)
ax.legend(facecolor='white')
 437:
filtrado = mesclado.query("Season == 'Summer'").groupby(['Year','NOC','Medal'])['Medal'].count().unstack().fillna(0).astype(int).reset_index()

compt_verao = filtrado[['Year','Bronze', 'Silver', 'Gold']].groupby(['Year']).sum().reset_index()

fig, ax = plt.subplots(1, 1, figsize=(18, 5), facecolor='#F9F9F9')

ax.set_facecolor('#F9F9F9')

medals_list = ['Bronze', 'Silver', 'Gold']
width = 0.75

for i, medal in enumerate(np.array(medals_list)):
    ax.bar(compt_verao['Year']+(width*(i-1.5)), compt_verao[medal], width, color=cor_medalhas_array[i], label=medal, ec='black')
    
for s in ['top', 'right']:
    ax.spines[s].set_visible(False)

Xstart, Xend = ax.get_xlim()
Ystart, Yend = ax.get_ylim()

ax.text(Xstart+3,Yend+50, 'Medalhas na competição de Verão distribuídas pelos anos', fontsize=15,fontweight='bold',fontfamily='serif',color='#323232')
ax.set_xlim(Xstart+3, Xend)
ax.grid(which='both', axis='x', zorder=5, color='gray', linestyle=':', dashes=(1,5))
ax.set_axisbelow(True)
ax.legend(facecolor='white')
 438:
filtrado = mesclado.query("Season == 'Summer'").groupby(['Year','NOC','Medal'])['Medal'].count().unstack().fillna(0).astype(int).reset_index()

compt_verao = filtrado[['Year','Bronze', 'Silver', 'Gold']].groupby(['Year']).sum().reset_index()

fig, ax = plt.subplots(1, 1, figsize=(18, 5), facecolor=cor_fundo_padrao)

ax.set_facecolor(cor_fundo_padrao)

medals_list = ['Bronze', 'Silver', 'Gold']
width = 0.75

for i, medal in enumerate(np.array(medals_list)):
    ax.bar(compt_verao['Year']+(width*(i-1.5)), compt_verao[medal], width, color=cor_medalhas_array[i], label=medal, ec='black')
    
for s in ['top', 'right']:
    ax.spines[s].set_visible(False)

Xstart, Xend = ax.get_xlim()
Ystart, Yend = ax.get_ylim()

ax.text(Xstart+3,Yend+50, 'Medalhas na competição de Verão distribuídas pelos anos', fontsize=15,fontweight='bold',fontfamily='serif',color='#323232')
ax.set_xlim(Xstart+3, Xend)
ax.grid(which='both', axis='x', zorder=5, color='gray', linestyle=':', dashes=(1,5))
ax.set_axisbelow(True)
ax.legend(facecolor='white')
 439:
cores_douradas = ["#d4af37", "#ffd700", "#f0e68c"]
cor_medalhas_array = ["#a97142", "lightgray", '#f0c05a']
cores_medalhas = {'Gold': '#f0c05a', 'Silver': 'Lightgray', 'Bronze': '#a97142'}
cores_olimpicas = ["#4A90D9", "#F0E4A1", "#6D6E71", "#8BCC8C", "#FF5E5E", "#3A78C2", "#F7E5A5", "#8C8C8C", "#7ABF7A", "#FF4D4D", "#5D8AB4", "#F5D787", "#6D6E6E", "#9BCC9B", "#FF4C4C", "#3C8CC2", "#F7E7A2", "#7F7F7F", "#7EBF7E", "#FF6D6D"]

cor_fundo_padrao = '#F9F9F9'

mapa_dourado = LinearSegmentedColormap.from_list("golden", cores_douradas, N=100)
mapa_olimpico = LinearSegmentedColormap.from_list("olimpic", cores_olimpicas, N=100)
 440:
filtrado = mesclado.query("Season == 'Summer'").groupby(['Year','NOC','Medal'])['Medal'].count().unstack().fillna(0).astype(int).reset_index()

compt_verao = filtrado[['Year','Bronze', 'Silver', 'Gold']].groupby(['Year']).sum().reset_index()

fig, ax = plt.subplots(1, 1, figsize=(18, 5), facecolor=cor_fundo_padrao)

ax.set_facecolor(cor_fundo_padrao)

medals_list = ['Bronze', 'Silver', 'Gold']
width = 0.75

for i, medal in enumerate(np.array(medals_list)):
    ax.bar(compt_verao['Year']+(width*(i-1.5)), compt_verao[medal], width, color=cor_medalhas_array[i], label=medal, ec='black')
    
for s in ['top', 'right']:
    ax.spines[s].set_visible(False)

Xstart, Xend = ax.get_xlim()
Ystart, Yend = ax.get_ylim()

ax.text(Xstart+3,Yend+50, 'Medalhas na competição de Verão distribuídas pelos anos', fontsize=15,fontweight='bold',fontfamily='serif',color='#323232')
ax.set_xlim(Xstart+3, Xend)
ax.grid(which='both', axis='x', zorder=5, color='gray', linestyle=':', dashes=(1,5))
ax.set_axisbelow(True)
ax.legend(facecolor='white')
 441:
filtrado = mesclado.query("Season == 'Winter'").groupby(['Year','NOC','Medal'])['Medal'].count().unstack().fillna(0).astype(int).reset_index()

compt_inverno = filtrado[['Year','Bronze', 'Silver', 'Gold']].groupby(['Year']).sum().reset_index()

fig, ax = plt.subplots(1, 1, figsize=(18, 5), facecolor=cor_fundo_padrao)

ax.set_facecolor(cor_fundo_padrao)

medals_list = ['Bronze', 'Silver', 'Gold']
width = 0.75

for i, medal in enumerate(np.array(medals_list)):
    ax.bar(compt_inverno['Year']+(width*(i-1.5)), compt_inverno[medal], width, color=cor_medalhas_array[i], label=medal, ec='black')
    
for s in ['top', 'right']:
    ax.spines[s].set_visible(False)

Xstart, Xend = ax.get_xlim()
Ystart, Yend = ax.get_ylim()

ax.text(Xstart+3,Yend+50, 'Medalhas na competição de Inverno distribuídas pelos anos', fontsize=15,fontweight='bold',fontfamily='serif',color='#323232')
ax.set_xlim(Xstart+3, Xend)
ax.grid(which='both', axis='x', zorder=5, color='gray', linestyle=':', dashes=(1,5))
ax.set_axisbelow(True)
ax.legend(facecolor='white')
 442:

max_age = medalhas_ouro['Age'].value_counts().idxmax()

cor_dourada_clara = '#FFE976'
cor_dourada = '#F0C05A'
palette = [cor_dourada_clara if age != max_age else cor_dourada for age in sorted(medalhas_ouro['Age'].unique())]

plt.figure(figsize=(20, 10), facecolor='#fcfcf7')
ax = sns.countplot(x='Age', data=medalhas_ouro, palette=palette, ec='black')
ax.set_facecolor('#fcfcf7')
plt.title('Distribuição de medalhas de ouro por idade', fontsize=15,fontweight='bold',fontfamily='serif',color='#323232')
plt.tight_layout()
plt.ylabel('')
plt.xlabel('')
 443:

max_age = medalhas_ouro['Age'].value_counts().idxmax()

cor_dourada_clara = '#FFE976'
cor_dourada = '#F0C05A'
palette = [cor_dourada_clara if age != max_age else cor_dourada for age in sorted(medalhas_ouro['Age'].unique())]

plt.figure(figsize=(20, 10), facecolor='#FFFEF9')
ax = sns.countplot(x='Age', data=medalhas_ouro, palette=palette, ec='black')
ax.set_facecolor('#FFFEF9')
plt.title('Distribuição de medalhas de ouro por idade', fontsize=15,fontweight='bold',fontfamily='serif',color='#323232')
plt.tight_layout()
plt.ylabel('')
plt.xlabel('')
 444:
cores_douradas = ["#d4af37", "#ffd700", "#f0e68c"]
cor_medalhas_array = ["#a97142", "lightgray", '#f0c05a']
cores_medalhas = {'Gold': '#f0c05a', 'Silver': 'Lightgray', 'Bronze': '#a97142'}
cores_olimpicas = ["#4A90D9", "#F0E4A1", "#6D6E71", "#8BCC8C", "#FF5E5E", "#3A78C2", "#F7E5A5", "#8C8C8C", "#7ABF7A", "#FF4D4D", "#5D8AB4", "#F5D787", "#6D6E6E", "#9BCC9B", "#FF4C4C", "#3C8CC2", "#F7E7A2", "#7F7F7F", "#7EBF7E", "#FF6D6D"]

cor_fundo_padrao = '#F9F9F9'
cor_fundo_gold = '#FFFEF9'

mapa_dourado = LinearSegmentedColormap.from_list("golden", cores_douradas, N=100)
mapa_olimpico = LinearSegmentedColormap.from_list("olimpic", cores_olimpicas, N=100)
 445:

max_age = medalhas_ouro['Age'].value_counts().idxmax()

cor_dourada_clara = '#FFE976'
cor_dourada = '#F0C05A'
palette = [cor_dourada_clara if age != max_age else cor_dourada for age in sorted(medalhas_ouro['Age'].unique())]

plt.figure(figsize=(20, 10), facecolor=cor_fundo_gold)

ax = sns.countplot(x='Age', data=medalhas_ouro, palette=palette, ec='black')
ax.set_facecolor(cor_fundo_gold)
plt.title('Distribuição de medalhas de ouro por idade', fontsize=15,fontweight='bold',fontfamily='serif',color='#323232')
plt.tight_layout()
plt.ylabel('')
plt.xlabel('')
 446:

max_age = medalhas_ouro['Age'].value_counts().idxmax()

cor_dourada_clara = '#FFE976'
cor_dourada = '#F0C05A'
palette = [cor_dourada_clara if age != max_age else cor_dourada for age in sorted(medalhas_ouro['Age'].unique())]

plt.figure(figsize=(20, 10), facecolor=cor_fundo_gold)

ax = sns.countplot(x='Age', data=medalhas_ouro, palette=palette, ec='black')
ax.set_facecolor(cor_fundo_gold)
plt.title('Distribuição de medalhas de ouro por idade', fontsize=15,fontweight='bold',fontfamily='serif',color='#323232')
plt.tight_layout()
plt.ylabel('')
plt.xlabel('')
plt.tight_layout()
 447:
filtrado = medalhas_ouro.query("Season == 'Winter'").groupby(['Year','NOC','Medal'])['Medal'].count().unstack().fillna(0).astype(int).reset_index()
filtrado
 448:
filtrado = medalhas_ouro.query("Season == 'Winter'").groupby(['Year','NOC','Medal'])['Medal'].count().unstack().fillna(0).astype(int).reset_index().sort_values()
filtrado

my_range=range(1,len(filtrado[:15]['NOC'])+1)
 449:
filtrado = medalhas_ouro.query("Season == 'Winter'").groupby(['Year','NOC','Medal'])['Medal'].count().unstack().fillna(0).astype(int).reset_index().sort_values()
filtrado
 450:
filtrado = medalhas_ouro.query("Season == 'Winter'").groupby(['Year','NOC','Medal'])['Medal'].count().unstack().fillna(0).astype(int).reset_index().sort_values(by='Gold')
filtrado
 451:
filtrado = medalhas_ouro.query("Season == 'Winter'").groupby(['Year','NOC','Medal'])['Medal'].count().unstack().fillna(0).astype(int).reset_index().sort_values(ascending=False)
filtrado
 452:
filtrado = medalhas_ouro.query("Season == 'Winter'").groupby(['Year','NOC','Medal'])['Medal'].count().unstack().fillna(0).astype(int).reset_index().sort_values(by='Gold', ascending=False)
filtrado
 453:
filtrado = medalhas_ouro.query('Age <= 15').groupby(['Year','NOC','Medal'])['Medal'].count().unstack().fillna(0).astype(int).reset_index().sort_values(by='Gold', ascending=False)
filtrado
 454:
filtrado = medalhas_ouro.query('Age <= 15').groupby(['Year','NOC','Medal'])['Medal'].count().unstack().fillna(0).astype(int).reset_index().sort_values(by='Gold', ascending=False)
my_range=range(1,len(filtrado[:15]['NOC'])+1)
my_range
 455:
filtrado = medalhas_ouro.query('Age <= 15').groupby(['Year','NOC','Medal'])['Medal'].count().unstack().fillna(0).astype(int).reset_index().sort_values(by='Gold', ascending=False)
my_range=range(1,len(filtrado[:15]['NOC'])+1)
 456:
filtrado = medalhas_ouro.query('Age <= 15').groupby(['Year','NOC','Medal'])['Medal'].count().unstack().fillna(0).astype(int).reset_index().sort_values(by='Gold', ascending=False)

temp = filtrado[:15].sort_values(by='Gold')
temp
 457:
filtrado = medalhas_ouro.query('Age <= 15').groupby(['Year','Sport','Medal'])['Medal'].count().unstack().fillna(0).astype(int).reset_index().sort_values(by='Gold', ascending=False)

filtrado
 458:
filtrado = medalhas_ouro.query('Age <= 15').groupby(['Year','Sport','Medal'])['Medal'].count().unstack().fillna(0).astype(int).reset_index().sort_values(by='Gold', ascending=False)

temp = filtrado[:15].sort_values(by='Gold')
temp
 459:
filtrado = medalhas_ouro.query('Age <= 15').groupby(['Year','Sport','Medal'])['Medal'].count().unstack().fillna(0).astype(int).reset_index().sort_values(by='Gold', ascending=False)

filtrado
 460:
filtrado = medalhas_ouro.query('Age <= 15').groupby(['Sport','Medal'])['Medal'].count().unstack().fillna(0).astype(int).reset_index().sort_values(by='Gold', ascending=False)

filtrado
 461:
filtrado = medalhas_ouro.query('Age <= 15').groupby(['Sport','Medal'])['Medal'].count().unstack().fillna(0).astype(int).reset_index().sort_values(by='Gold', ascending=False)

my_range=range(1,len(filtrado[:15]['Sport'])+1)
 462:
filtrado = medalhas_ouro.query('Age <= 15').groupby(['Sport','Medal'])['Medal'].count().unstack().fillna(0).astype(int).reset_index().sort_values(by='Gold', ascending=False)

my_range=range(1,len(filtrado[:15]['Sport'])+1)

my_range
 463:
filtrado = medalhas_ouro.query('Age <= 15').groupby(['Sport','Medal'])['Medal'].count().unstack().fillna(0).astype(int).reset_index().sort_values(by='Gold', ascending=False)

my_range=range(1,len(filtrado[:15]['Sport'])+1)

ax.set_facecolor(cor_fundo_gold)

plt.hlines(y=my_range, xmin=0, xmax=filtrado['Gold'], color='gray')
 464:
filtrado = medalhas_ouro.query('Age <= 15').groupby(['Sport','Medal'])['Medal'].count().unstack().fillna(0).astype(int).reset_index().sort_values(by='Gold', ascending=False)

my_range=range(1,len(filtrado[:15]['Sport'])+1)

ax.set_facecolor(cor_fundo_gold)

plt.hlines(y=filtrado['Sport'], xmin=0, xmax=filtrado['Gold'], color='gray')
 465:
filtrado = medalhas_ouro.query('Age <= 15').groupby(['Sport','Medal'])['Medal'].count().unstack().fillna(0).astype(int).reset_index().sort_values(by='Gold', ascending=False)

my_range=range(1,len(filtrado[:15]['Sport'])+1)

ax.set_facecolor(cor_fundo_gold)

plt.hlines(y=filtrado['Sport'], xmin=0, xmax=filtrado['Gold'], color='gray')
plt.plot(filtrado['Gold'], my_range, "o",markersize=10, color='#244747')
 466:
filtrado = medalhas_ouro.query('Age <= 15').groupby(['Sport','Medal'])['Medal'].count().unstack().fillna(0).astype(int).reset_index().sort_values(by='Gold', ascending=False)

my_range=range(1,len(filtrado[:15]['Sport'])+1)

ax.set_facecolor(cor_fundo_gold)

plt.hlines(y=filtrado['Sport'], xmin=0, xmax=filtrado['Gold'], color='gray')
plt.plot(filtrado['Gold'], filtrado['Sport'], "o",markersize=10, color='#244747')
 467:
filtrado = medalhas_ouro.query('Age <= 15').groupby(['Sport','Medal'])['Medal'].count().unstack().fillna(0).astype(int).reset_index().sort_values(by='Gold', ascending=False)

my_range=range(1,len(filtrado[:15]['Sport'])+1)

ax.set_facecolor(cor_fundo_gold)

plt.hlines(y=filtrado['Sport'], xmin=0, xmax=filtrado['Gold'], color='gray')
plt.plot(filtrado['Gold'], filtrado['Sport'], "o",markersize=10, color='#244747')
plt.plot(filtrado['Gold'][2], my_range[10], "o",markersize=20,color='#B73832')
 468:
filtrado = medalhas_ouro.query('Age <= 15').groupby(['Sport','Medal'])['Medal'].count().unstack().fillna(0).astype(int).reset_index().sort_values(by='Gold', ascending=False)

my_range=range(1,len(filtrado[:15]['Sport'])+1)

my_range
 469:
filtrado = medalhas_ouro.query('Age <= 15').groupby(['Sport','Medal'])['Medal'].count().unstack().fillna(0).astype(int).reset_index().sort_values(by='Gold', ascending=False)

my_range=range(1,len(filtrado[:15]['Sport'])+1)

ax.set_facecolor(cor_fundo_gold)

plt.hlines(y=filtrado['Sport'], xmin=0, xmax=filtrado['Gold'], color='gray')
plt.plot(filtrado['Gold'], filtrado['Sport'], "o",markersize=10, color='#244747')
plt.plot(filtrado['Gold'][2], my_range[10], "o",markersize=20,color='#B73832')
 470:
filtrado = medalhas_ouro.query('Age <= 15').groupby(['Sport','Medal'])['Medal'].count().unstack().fillna(0).astype(int).reset_index().sort_values(by='Gold', ascending=False)

my_range=range(1,len(filtrado[:15]['Sport'])+1)

ax.set_facecolor(cor_fundo_gold)

plt.hlines(y=filtrado['Sport'], xmin=0, xmax=filtrado['Gold'], color='gray')
plt.plot(filtrado['Gold'], filtrado['Sport'], "o",markersize=10, color='#244747')
plt.plot(filtrado['Gold'][2], filtrado['Sport'][0], "o",markersize=20,color='#B73832')
 471:
filtrado = medalhas_ouro.query('Age <= 15').groupby(['Sport','Medal'])['Medal'].count().unstack().fillna(0).astype(int).reset_index().sort_values(by='Gold', ascending=False)

my_range=range(1,len(filtrado[:15]['Sport'])+1)

ax.set_facecolor(cor_fundo_gold)

plt.hlines(y=filtrado['Sport'], xmin=0, xmax=filtrado['Gold'], color='gray')
plt.plot(filtrado['Gold'], filtrado['Sport'], "o",markersize=10, color='#244747')
plt.plot(filtrado['Gold'][2], filtrado['Sport'][-1], "o",markersize=20,color='#B73832')
 472:
filtrado = medalhas_ouro.query('Age <= 15').groupby(['Sport','Medal'])['Medal'].count().unstack().fillna(0).astype(int).reset_index().sort_values(by='Gold', ascending=False)

my_range=range(1,len(filtrado[:15]['Sport'])+1)

ax.set_facecolor(cor_fundo_gold)

plt.hlines(y=filtrado['Sport'], xmin=0, xmax=filtrado['Gold'], color='gray')
plt.plot(filtrado['Gold'], filtrado['Sport'], "o",markersize=10, color='#244747')
plt.plot(filtrado['Gold'][2], filtrado['Sport'][:-1], "o",markersize=20,color='#B73832')
 473:
filtrado = medalhas_ouro.query('Age <= 15').groupby(['Sport','Medal'])['Medal'].count().unstack().fillna(0).astype(int).reset_index().sort_values(by='Gold', ascending=False)

my_range=range(1,len(filtrado[:15]['Sport'])+1)

ax.set_facecolor(cor_fundo_gold)

plt.hlines(y=filtrado['Sport'], xmin=0, xmax=filtrado['Gold'], color='gray')
plt.plot(filtrado['Gold'], filtrado['Sport'], "o",markersize=10, color='#244747')
plt.plot(filtrado['Gold'][2], filtrado['Sport'][-1:], "o",markersize=20,color='#B73832')
 474:
filtrado = medalhas_ouro.query('Age <= 15').groupby(['Sport','Medal'])['Medal'].count().unstack().fillna(0).astype(int).reset_index().sort_values(by='Gold', ascending=False)

my_range=range(1,len(filtrado[:15]['Sport'])+1)

ax.set_facecolor(cor_fundo_gold)

plt.hlines(y=filtrado['Sport'], xmin=0, xmax=filtrado['Gold'], color='gray')
plt.plot(filtrado['Gold'], filtrado['Sport'], "o",markersize=10, color='#244747')
plt.plot(filtrado['Gold'][2], filtrado['Sport'][-10:], "o",markersize=20,color='#B73832')
 475:
filtrado = medalhas_ouro.query('Age <= 15').groupby(['Sport','Medal'])['Medal'].count().unstack().fillna(0).astype(int).reset_index().sort_values(by='Gold', ascending=False)

my_range=range(1,len(filtrado[:15]['Sport'])+1)

ax.set_facecolor(cor_fundo_gold)

plt.hlines(y=filtrado['Sport'], xmin=0, xmax=filtrado['Gold'], color='gray')
plt.plot(filtrado['Gold'], filtrado['Sport'], "o",markersize=10, color='#244747')
plt.plot(filtrado['Gold'][2], filtrado['Sport'][9], "o",markersize=20,color='#B73832')
 476:
filtrado = medalhas_ouro.query('Age <= 15').groupby(['Sport','Medal'])['Medal'].count().unstack().fillna(0).astype(int).reset_index().sort_values(by='Gold', ascending=False)

my_range=range(1,len(filtrado[:15]['Sport'])+1)

ax.set_facecolor(cor_fundo_gold)

plt.hlines(y=filtrado['Sport'], xmin=0, xmax=filtrado['Gold'], color='gray')
plt.plot(filtrado['Gold'], filtrado['Sport'], "o",markersize=10, color='#244747')
plt.plot(filtrado['Gold'][2], filtrado['Sport'][9], "o",markersize=20,color='#B73832')

filtrado['Gold'][2]
 477:
filtrado = medalhas_ouro.query('Age <= 15').groupby(['Sport','Medal'])['Medal'].count().unstack().fillna(0).astype(int).reset_index().sort_values(by='Gold', ascending=False)

my_range=range(1,len(filtrado[:15]['Sport'])+1)

ax.set_facecolor(cor_fundo_gold)

plt.hlines(y=filtrado['Sport'], xmin=0, xmax=filtrado['Gold'], color='gray')
plt.plot(filtrado['Gold'], filtrado['Sport'], "o",markersize=10, color='#244747')
plt.plot(filtrado['Gold'][2], filtrado['Sport'][9], "o",markersize=20,color='#B73832')

filtrado
 478:
filtrado = medalhas_ouro.query('Age <= 15').groupby(['Sport','Medal'])['Medal'].count().unstack().fillna(0).astype(int).reset_index().sort_values(by='Medal', ascending=False)

my_range=range(1,len(filtrado[:15]['Sport'])+1)

ax.set_facecolor(cor_fundo_gold)

plt.hlines(y=filtrado['Sport'], xmin=0, xmax=filtrado['Gold'], color='gray')
plt.plot(filtrado['Gold'], filtrado['Sport'], "o",markersize=10, color='#244747')
plt.plot(filtrado['Gold'][2], filtrado['Sport'][9], "o",markersize=20,color='#B73832')

filtrado
 479:
filtrado = medalhas_ouro.query('Age <= 15').groupby(['Sport','Medal'])['Medal'].count().unstack().fillna(0).astype(int).reset_index().sort_values(by='Gold', ascending=False)

my_range=range(1,len(filtrado[:15]['Sport'])+1)

ax.set_facecolor(cor_fundo_gold)

plt.hlines(y=filtrado['Sport'], xmin=0, xmax=filtrado['Gold'], color='gray')
plt.plot(filtrado['Gold'], filtrado['Sport'], "o",markersize=10, color='#244747')
plt.plot(filtrado['Gold'][2], filtrado['Sport'][9], "o",markersize=20,color='#B73832')

filtrado
 480:
filtrado = medalhas_ouro.query('Age <= 15').groupby(['Sport','Medal'])['Medal'].count().unstack().fillna(0).astype(int).reset_index().sort_values(by='Gold', ascending=False)

my_range=range(1,len(filtrado[:15]['Sport'])+1)

ax.set_facecolor(cor_fundo_gold)

plt.hlines(y=filtrado['Sport'], xmin=0, xmax=filtrado['Gold'], color='gray')
plt.plot(filtrado['Gold'], filtrado['Sport'], "o",markersize=10, color='#244747')
plt.plot(filtrado['Gold'][9], filtrado['Sport'][9], "o",markersize=20,color='#B73832')

filtrado
 481:
filtrado = medalhas_ouro.query('Age <= 15').groupby(['Sport','Medal'])['Medal'].count().unstack().fillna(0).astype(int).reset_index().sort_values(by='Gold', ascending=False)

my_range=range(1,len(filtrado[:15]['Sport'])+1)

ax.set_facecolor(cor_fundo_gold)

plt.hlines(y=filtrado['Sport'], xmin=0, xmax=filtrado['Gold'], color='gray')
plt.plot(filtrado['Gold'], filtrado['Sport'], "o",markersize=10, color='#244747')
plt.plot(filtrado['Gold'][9], filtrado['Sport'][9], "o",markersize=20,color='#B73832')

Xstart, Xend = ax.get_xlim()
Ystart, Yend = ax.get_ylim()

ax.tick_params(axis=u'both', which=u'both',length=0)
ax.set_xlabel("Total Medals",fontfamily='monospace',loc='left',color='gray')
ax.set_axisbelow(True)

for s in ['top','right','bottom','left']:
    ax.spines[s].set_visible(False)


ax.text(-90,Yend+2.3, 'Olympic Total Medals by Country: Tokyo 2021', fontsize=15,fontweight='bold',fontfamily='serif',color='#323232')
ax.text(-90,Yend+1.1, 'Japan hosted the games for the second time', fontsize=10,fontweight='bold',fontfamily='sansserif',color='#B73832')

plt.yticks(my_range, filtrado['Sport'])
plt.xlabel('')

ax.annotate(filtrado['Gold'][2], xy=(54.86,10.95), va = 'center', ha='left',fontweight='light', fontfamily='monospace',fontsize=10, color='white',rotation=0)



filtrado
 482:
filtrado = medalhas_ouro.query('Age <= 15').groupby(['Sport','Medal'])['Medal'].count().unstack().fillna(0).astype(int).reset_index().sort_values(by='Gold', ascending=False)

my_range=range(1,len(filtrado[:15]['Sport'])+1)

ax.set_facecolor(cor_fundo_gold)

plt.hlines(y=filtrado['Sport'], xmin=0, xmax=filtrado['Gold'], color='gray')
plt.plot(filtrado['Gold'], filtrado['Sport'], "o",markersize=10, color='#244747')
plt.plot(filtrado['Gold'][9], filtrado['Sport'][9], "o",markersize=20,color='#B73832')

Xstart, Xend = ax.get_xlim()
Ystart, Yend = ax.get_ylim()

ax.tick_params(axis=u'both', which=u'both',length=0)
ax.set_xlabel("Total Medals",fontfamily='monospace',loc='left',color='gray')
ax.set_axisbelow(True)

for s in ['top','right','bottom','left']:
    ax.spines[s].set_visible(False)


ax.text(-90,Yend+2.3, 'Olympic Total Medals by Country: Tokyo 2021', fontsize=15,fontweight='bold',fontfamily='serif',color='#323232')
ax.text(-90,Yend+1.1, 'Japan hosted the games for the second time', fontsize=10,fontweight='bold',fontfamily='sansserif',color='#B73832')

plt.yticks(my_range, filtrado['Sport'])
plt.xlabel('')

ax.annotate(filtrado['Gold'][2], xy=(54.86,10.95), va = 'center', ha='left',fontweight='light', fontfamily='monospace',fontsize=10, color='white',rotation=0)
 483:
filtrado = medalhas_ouro.query('Age <= 15').groupby(['Sport','Medal'])['Medal'].count().unstack().fillna(0).astype(int).reset_index().sort_values(by='Gold', ascending=False)

my_range=range(1,len(filtrado[:15]['Sport'])+1)

fig, ax = plt.subplots(figsize=(4, 5), facecolor=cor_fundo_gold)

plt.hlines(y=filtrado['Sport'], xmin=0, xmax=filtrado['Gold'], color='gray')
plt.plot(filtrado['Gold'], filtrado['Sport'], "o",markersize=10, color='#244747')
plt.plot(filtrado['Gold'][9], filtrado['Sport'][9], "o",markersize=20,color='#B73832')

ax.set_facecolor(cor_fundo_gold)

Xstart, Xend = ax.get_xlim()
Ystart, Yend = ax.get_ylim()

ax.tick_params(axis=u'both', which=u'both',length=0)
ax.set_xlabel("Total Medals",fontfamily='monospace',loc='left',color='gray')
ax.set_axisbelow(True)

for s in ['top','right','bottom','left']:
    ax.spines[s].set_visible(False)


ax.text(-90,Yend+2.3, 'Olympic Total Medals by Country: Tokyo 2021', fontsize=15,fontweight='bold',fontfamily='serif',color='#323232')
ax.text(-90,Yend+1.1, 'Japan hosted the games for the second time', fontsize=10,fontweight='bold',fontfamily='sansserif',color='#B73832')

plt.yticks(my_range, filtrado['Sport'])
plt.xlabel('')

ax.annotate(filtrado['Gold'][2], xy=(54.86,10.95), va = 'center', ha='left',fontweight='light', fontfamily='monospace',fontsize=10, color='white',rotation=0)
 484:
filtrado = medalhas_ouro.query('Age <= 15').groupby(['Sport','Medal'])['Medal'].count().unstack().fillna(0).astype(int).reset_index().sort_values(by='Gold', ascending=False)

my_range=range(1,len(filtrado[:15]['Sport'])+1)

fig, ax = plt.subplots(figsize=(4, 5), facecolor=cor_fundo_gold)

plt.hlines(y=filtrado['Sport'], xmin=0, xmax=filtrado['Gold'], color='gray')
plt.plot(filtrado['Gold'], filtrado['Sport'], "o",markersize=10, color='#244747')
plt.plot(filtrado['Gold'][9], filtrado['Sport'][9], "o",markersize=20,color='#B73832')

ax.set_facecolor(cor_fundo_gold)

Xstart, Xend = ax.get_xlim()
Ystart, Yend = ax.get_ylim()

ax.tick_params(axis=u'both', which=u'both',length=0)
ax.set_xlabel("Total Medals",fontfamily='monospace',loc='left',color='gray')
ax.set_axisbelow(True)

for s in ['top','right','bottom','left']:
    ax.spines[s].set_visible(False)


ax.text(-90,Yend+2.3, 'Olympic Total Medals by Country: Tokyo 2021', fontsize=15,fontweight='bold',fontfamily='serif',color='#323232')
ax.text(-90,Yend+1.1, 'Japan hosted the games for the second time', fontsize=10,fontweight='bold',fontfamily='sansserif',color='#B73832')

plt.yticks(my_range, filtrado['Sport'])
plt.xlabel('')

ax.annotate(filtrado['Gold'][2], xy=(54.86,10.95), va = 'center', ha='left',fontweight='light', fontfamily='monospace',fontsize=10, color='white',rotation=0)

plt.tight_layout()
 485:
filtrado = medalhas_ouro.query('Age <= 15').groupby(['Sport','Medal'])['Medal'].count().unstack().fillna(0).astype(int).reset_index().sort_values(by='Gold', ascending=False)

my_range=range(1,len(filtrado[:15]['Sport'])+1)

fig, ax = plt.subplots(figsize=(4, 5), facecolor=cor_fundo_gold)

plt.hlines(y=filtrado['Sport'], xmin=0, xmax=filtrado['Gold'], color='gray')
plt.plot(filtrado['Gold'], filtrado['Sport'], "o",markersize=10, color='#244747')
plt.plot(filtrado['Gold'][9], filtrado['Sport'][9], "o",markersize=20,color='#B73832')

ax.set_facecolor(cor_fundo_gold)

Xstart, Xend = ax.get_xlim()
Ystart, Yend = ax.get_ylim()

ax.tick_params(axis=u'both', which=u'both',length=0)
ax.set_xlabel("Total Medals",fontfamily='monospace',loc='left',color='gray')
ax.set_axisbelow(True)

for s in ['top','right','bottom','left']:
    ax.spines[s].set_visible(False)


ax.text(-90,Yend+2.3, 'Olympic Total Medals by Country: Tokyo 2021', fontsize=15,fontweight='bold',fontfamily='serif',color='#323232')
ax.text(-90,Yend+1.1, 'Japan hosted the games for the second time', fontsize=10,fontweight='bold',fontfamily='serif',color='#B73832')

plt.yticks(my_range, filtrado['Sport'])
plt.xlabel('')

ax.annotate(filtrado['Gold'][2], xy=(54.86,10.95), va = 'center', ha='left',fontweight='light', fontfamily='monospace',fontsize=10, color='white',rotation=0)

plt.tight_layout()
 486:
filtrado = medalhas_ouro.query('Age <= 15').groupby(['Sport','Medal'])['Medal'].count().unstack().fillna(0).astype(int).reset_index().sort_values(by='Gold', ascending=False)

my_range=range(1,len(filtrado[:15]['Sport'])+1)

fig, ax = plt.subplots(figsize=(4, 5), facecolor=cor_fundo_gold)

plt.hlines(y=filtrado['Sport'], xmin=0, xmax=filtrado['Gold'], color='gray')
plt.plot(filtrado['Gold'], filtrado['Sport'], "o",markersize=10, color='#244747')
plt.plot(filtrado['Gold'][9], filtrado['Sport'][9], "o",markersize=20,color='#B73832')

ax.set_facecolor(cor_fundo_gold)


plt.tight_layout()
 487:
filtrado = medalhas_ouro.query('Age <= 15').groupby(['Sport','Medal'])['Medal'].count().unstack().fillna(0).astype(int).reset_index().sort_values(by='Gold', ascending=False)

my_range=range(1,len(filtrado[:15]['Sport'])+1)

fig, ax = plt.subplots(figsize=(4, 5), facecolor=cor_fundo_gold)

plt.hlines(y=filtrado['Sport'], xmin=0, xmax=filtrado['Gold'], color='gray')
plt.plot(filtrado['Gold'], filtrado['Sport'], "o",markersize=10, color='#244747')
plt.plot(filtrado['Gold'][9], filtrado['Sport'][9], "o",markersize=20,color='#B73832')

ax.set_facecolor(cor_fundo_gold)

Xstart, Xend = ax.get_xlim()
Ystart, Yend = ax.get_ylim()

ax.tick_params(axis=u'both', which=u'both',length=0)
ax.set_xlabel("Total Medals",fontfamily='monospace',loc='left',color='gray')
ax.set_axisbelow(True)

for s in ['top','right','bottom','left']:
    ax.spines[s].set_visible(False)


ax.text(-90,Yend+2.3, 'Olympic Total Medals by Country: Tokyo 2021', fontsize=15,fontweight='bold',fontfamily='serif',color='#323232')
ax.text(-90,Yend+1.1, 'Japan hosted the games for the second time', fontsize=10,fontweight='bold',fontfamily='serif',color='#B73832')

plt.yticks(my_range, filtrado['Sport'])
plt.xlabel('')

ax.annotate(filtrado['Gold'][2], xy=(54.86,10.95), va = 'center', ha='left',fontweight='light', fontfamily='monospace',fontsize=10, color='white',rotation=0)



plt.tight_layout()
 488:
filtrado = medalhas_ouro.query('Age <= 15').groupby(['Sport','Medal'])['Medal'].count().unstack().fillna(0).astype(int).reset_index().sort_values(by='Gold', ascending=False)

my_range=range(1,len(filtrado[:15]['Sport'])+1)

fig, ax = plt.subplots(figsize=(4, 5), facecolor=cor_fundo_gold)

plt.hlines(y=filtrado['Sport'], xmin=0, xmax=filtrado['Gold'], color='gray')
plt.plot(filtrado['Gold'], filtrado['Sport'], "o",markersize=10, color='#244747')
plt.plot(filtrado['Gold'][9], filtrado['Sport'][9], "o",markersize=20,color='#B73832')

ax.set_facecolor(cor_fundo_gold)

Xstart, Xend = ax.get_xlim()
Ystart, Yend = ax.get_ylim()

ax.tick_params(axis=u'both', which=u'both',length=0)
ax.set_xlabel("Total Medals",fontfamily='monospace',loc='left',color='gray')
ax.set_axisbelow(True)

for s in ['top','right','bottom','left']:
    ax.spines[s].set_visible(False)


ax.text(-30,Yend+2.3, 'Olympic Total Medals by Country: Tokyo 2021', fontsize=15,fontweight='bold',fontfamily='serif',color='#323232')
ax.text(-30,Yend+1.1, 'Japan hosted the games for the second time', fontsize=10,fontweight='bold',fontfamily='serif',color='#B73832')

plt.yticks(my_range, filtrado['Sport'])
plt.xlabel('')

ax.annotate(filtrado['Gold'][2], xy=(54.86,10.95), va = 'center', ha='left',fontweight='light', fontfamily='monospace',fontsize=10, color='white',rotation=0)



plt.tight_layout()
 489:
filtrado = medalhas_ouro.query('Age <= 15').groupby(['Sport','Medal'])['Medal'].count().unstack().fillna(0).astype(int).reset_index().sort_values(by='Gold', ascending=False)

my_range=range(1,len(filtrado[:15]['Sport'])+1)

fig, ax = plt.subplots(figsize=(4, 5), facecolor=cor_fundo_gold)

plt.hlines(y=filtrado['Sport'], xmin=0, xmax=filtrado['Gold'], color='gray')
plt.plot(filtrado['Gold'], filtrado['Sport'], "o",markersize=10, color='#244747')
plt.plot(filtrado['Gold'][9], filtrado['Sport'][9], "o",markersize=20,color='#B73832')

ax.set_facecolor(cor_fundo_gold)

Xstart, Xend = ax.get_xlim()
Ystart, Yend = ax.get_ylim()

ax.tick_params(axis=u'both', which=u'both',length=0)
ax.set_xlabel("Total Medals",fontfamily='monospace',loc='left',color='gray')
ax.set_axisbelow(True)

for s in ['top','right','bottom','left']:
    ax.spines[s].set_visible(False)


ax.text(-50,Yend+2.3, 'Olympic Total Medals by Country: Tokyo 2021', fontsize=15,fontweight='bold',fontfamily='serif',color='#323232')
ax.text(-50,Yend+1.1, 'Japan hosted the games for the second time', fontsize=10,fontweight='bold',fontfamily='serif',color='#B73832')

plt.yticks(my_range, filtrado['Sport'])
plt.xlabel('')

ax.annotate(filtrado['Gold'][2], xy=(54.86,10.95), va = 'center', ha='left',fontweight='light', fontfamily='monospace',fontsize=10, color='white',rotation=0)



plt.tight_layout()
 490:
filtrado = medalhas_ouro.query('Age <= 15').groupby(['Sport','Medal'])['Medal'].count().unstack().fillna(0).astype(int).reset_index().sort_values(by='Gold', ascending=False)

my_range=range(1,len(filtrado[:15]['Sport'])+1)

fig, ax = plt.subplots(figsize=(4, 5), facecolor=cor_fundo_gold)

plt.hlines(y=filtrado['Sport'], xmin=0, xmax=100, color='gray')
plt.plot(filtrado['Gold'], filtrado['Sport'], "o",markersize=10, color='#244747')
plt.plot(filtrado['Gold'][9], filtrado['Sport'][9], "o",markersize=20,color='#B73832')

ax.set_facecolor(cor_fundo_gold)

Xstart, Xend = ax.get_xlim()
Ystart, Yend = ax.get_ylim()

ax.tick_params(axis=u'both', which=u'both',length=0)
ax.set_xlabel("Total Medals",fontfamily='monospace',loc='left',color='gray')
ax.set_axisbelow(True)

for s in ['top','right','bottom','left']:
    ax.spines[s].set_visible(False)


ax.text(-50,Yend+2.3, 'Olympic Total Medals by Country: Tokyo 2021', fontsize=15,fontweight='bold',fontfamily='serif',color='#323232')
ax.text(-50,Yend+1.1, 'Japan hosted the games for the second time', fontsize=10,fontweight='bold',fontfamily='serif',color='#B73832')

plt.yticks(my_range, filtrado['Sport'])
plt.xlabel('')

ax.annotate(filtrado['Gold'][2], xy=(54.86,10.95), va = 'center', ha='left',fontweight='light', fontfamily='monospace',fontsize=10, color='white',rotation=0)



plt.tight_layout()
 491:
filtrado = medalhas_ouro.query('Age <= 15').groupby(['Sport','Medal'])['Medal'].count().unstack().fillna(0).astype(int).reset_index().sort_values(by='Gold', ascending=False)

my_range=range(1,len(filtrado[:15]['Sport'])+1)

fig, ax = plt.subplots(figsize=(4, 5), facecolor=cor_fundo_gold)

plt.hlines(y=filtrado['Sport'], xmin=0, xmax=filtrado['Gold'], color='gray')
plt.plot(filtrado['Gold'], filtrado['Sport'], "o",markersize=10, color='#244747')
plt.plot(filtrado['Gold'][9], filtrado['Sport'][9], "o",markersize=20,color='#B73832')

ax.set_facecolor(cor_fundo_gold)

Xstart, Xend = ax.get_xlim()
Ystart, Yend = ax.get_ylim()

ax.tick_params(axis=u'both', which=u'both',length=0)
ax.set_xlabel("Total Medals",fontfamily='monospace',loc='left',color='gray')
ax.set_axisbelow(True)

for s in ['top','right','bottom','left']:
    ax.spines[s].set_visible(False)


ax.text(-50,Yend+2.3, 'Olympic Total Medals by Country: Tokyo 2021', fontsize=15,fontweight='bold',fontfamily='serif',color='#323232')
ax.text(-50,Yend+1.1, 'Japan hosted the games for the second time', fontsize=10,fontweight='bold',fontfamily='serif',color='#B73832')

plt.yticks(my_range, filtrado['Sport'])
plt.xlabel('')

ax.annotate(filtrado['Gold'][2], xy=(54.86,10.95), va = 'center', ha='left',fontweight='light', fontfamily='monospace',fontsize=10, color='white',rotation=0)



plt.tight_layout()
 492:
filtrado = medalhas_ouro.query('Age <= 15').groupby(['Sport','Medal'])['Medal'].count().unstack().fillna(0).astype(int).reset_index().sort_values(by='Gold', ascending=False)

my_range=range(1,len(filtrado[:15]['Sport'])+1)

fig, ax = plt.subplots(figsize=(20, 10), facecolor=cor_fundo_gold)

plt.hlines(y=filtrado['Sport'], xmin=0, xmax=filtrado['Gold'], color='gray')
plt.plot(filtrado['Gold'], filtrado['Sport'], "o",markersize=10, color='#244747')
plt.plot(filtrado['Gold'][9], filtrado['Sport'][9], "o",markersize=20,color='#B73832')

ax.set_facecolor(cor_fundo_gold)

Xstart, Xend = ax.get_xlim()
Ystart, Yend = ax.get_ylim()

ax.tick_params(axis=u'both', which=u'both',length=0)
ax.set_xlabel("Total Medals",fontfamily='monospace',loc='left',color='gray')
ax.set_axisbelow(True)

for s in ['top','right','bottom','left']:
    ax.spines[s].set_visible(False)


ax.text(-50,Yend+2.3, 'Olympic Total Medals by Country: Tokyo 2021', fontsize=15,fontweight='bold',fontfamily='serif',color='#323232')
ax.text(-50,Yend+1.1, 'Japan hosted the games for the second time', fontsize=10,fontweight='bold',fontfamily='serif',color='#B73832')

plt.yticks(my_range, filtrado['Sport'])
plt.xlabel('')

ax.annotate(filtrado['Gold'][2], xy=(54.86,10.95), va = 'center', ha='left',fontweight='light', fontfamily='monospace',fontsize=10, color='white',rotation=0)



plt.tight_layout()
 493:
filtrado = medalhas_ouro.query('Age <= 15').groupby(['Sport','Medal'])['Medal'].count().unstack().fillna(0).astype(int).reset_index().sort_values(by='Gold', ascending=False)

my_range=range(1,len(filtrado[:15]['Sport'])+1)

fig, ax = plt.subplots(figsize=(10, 5), facecolor=cor_fundo_gold)

plt.hlines(y=filtrado['Sport'], xmin=0, xmax=filtrado['Gold'], color='gray')
plt.plot(filtrado['Gold'], filtrado['Sport'], "o",markersize=10, color='#244747')
plt.plot(filtrado['Gold'][9], filtrado['Sport'][9], "o",markersize=20,color='#B73832')

ax.set_facecolor(cor_fundo_gold)

Xstart, Xend = ax.get_xlim()
Ystart, Yend = ax.get_ylim()

ax.tick_params(axis=u'both', which=u'both',length=0)
ax.set_xlabel("Total Medals",fontfamily='monospace',loc='left',color='gray')
ax.set_axisbelow(True)

for s in ['top','right','bottom','left']:
    ax.spines[s].set_visible(False)


ax.text(-50,Yend+2.3, 'Olympic Total Medals by Country: Tokyo 2021', fontsize=15,fontweight='bold',fontfamily='serif',color='#323232')
ax.text(-50,Yend+1.1, 'Japan hosted the games for the second time', fontsize=10,fontweight='bold',fontfamily='serif',color='#B73832')

plt.yticks(my_range, filtrado['Sport'])
plt.xlabel('')

ax.annotate(filtrado['Gold'][2], xy=(54.86,10.95), va = 'center', ha='left',fontweight='light', fontfamily='monospace',fontsize=10, color='white',rotation=0)



plt.tight_layout()
 494:
filtrado = medalhas_ouro.query('Age <= 15').groupby(['Sport','Medal'])['Medal'].count().unstack().fillna(0).astype(int).reset_index().sort_values(by='Gold', ascending=False)

my_range=range(1,len(filtrado[:15]['Sport'])+1)

fig, ax = plt.subplots(figsize=(10, 5), facecolor=cor_fundo_gold)

plt.hlines(y=filtrado['Sport'], xmin=0, xmax=filtrado['Gold'], color='gray')
plt.plot(filtrado['Gold'], filtrado['Sport'], "o",markersize=10, color='#244747')
plt.plot(filtrado['Gold'][9], filtrado['Sport'][9], "o",markersize=20,color='#B73832')

ax.set_facecolor(cor_fundo_gold)

Xstart, Xend = ax.get_xlim()
Ystart, Yend = ax.get_ylim()

ax.tick_params(axis=u'both', which=u'both',length=0)
ax.set_xlabel("Total Medals",fontfamily='monospace',loc='left',color='gray')
ax.set_axisbelow(True)

for s in ['top','right','bottom','left']:
    ax.spines[s].set_visible(False)


ax.text(-50,Yend+2.3, 'Olympic Total Medals by Country: Tokyo 2021', fontsize=15,fontweight='bold',fontfamily='serif',color='#323232')
ax.text(-50,Yend+1.1, 'Japan hosted the games for the second time', fontsize=10,fontweight='bold',fontfamily='serif',color='#B73832')

plt.yticks(my_range, filtrado['Sport'])
plt.xlabel('')

ax.annotate(filtrado['Gold'][2], xy=(54.86,10.95), va = 'center', ha='left',fontweight='light', fontfamily='monospace',fontsize=10, color='white',rotation=0)

ax.set_yticklabels(filtrado['Sport'], ha='right', position=(0, 0.02))

plt.tight_layout()
 495:
filtrado = medalhas_ouro.query('Age <= 15').groupby(['Sport','Medal'])['Medal'].count().unstack().fillna(0).astype(int).reset_index().sort_values(by='Gold', ascending=False)

my_range=range(1,len(filtrado[:15]['Sport'])+1)

fig, ax = plt.subplots(figsize=(10, 5), facecolor=cor_fundo_gold)

plt.hlines(y=filtrado['Sport'], xmin=0, xmax=filtrado['Gold'], color='gray')
plt.plot(filtrado['Gold'], filtrado['Sport'], "o",markersize=10, color='#244747')
plt.plot(filtrado['Gold'][9], filtrado['Sport'][9], "o",markersize=20,color='#B73832')

ax.set_facecolor(cor_fundo_gold)

Xstart, Xend = ax.get_xlim()
Ystart, Yend = ax.get_ylim()

ax.tick_params(axis=u'both', which=u'both',length=0)
ax.set_xlabel("Total Medals",fontfamily='monospace',loc='left',color='gray')
ax.set_axisbelow(True)

for s in ['top','right','bottom','left']:
    ax.spines[s].set_visible(False)


ax.text(-90,Yend+2.3, 'Olympic Total Medals by Country: Tokyo 2021', fontsize=15,fontweight='bold',fontfamily='serif',color='#323232')
ax.text(-90,Yend+1.1, 'Japan hosted the games for the second time', fontsize=10,fontweight='bold',fontfamily='serif',color='#B73832')

plt.yticks(my_range, filtrado['Sport'])
plt.xlabel('')

ax.annotate(filtrado['Gold'][2], xy=(54.86,10.95), va = 'center', ha='left',fontweight='light', fontfamily='monospace',fontsize=10, color='white',rotation=0)

ax.set_yticklabels(filtrado['Sport'], ha='right', position=(0, 0.02))

plt.tight_layout()
 496:
filtrado = medalhas_ouro.query('Age <= 15').groupby(['Sport','Medal'])['Medal'].count().unstack().fillna(0).astype(int).reset_index().sort_values(by='Gold', ascending=False)

my_range=range(1,len(filtrado[:15]['Sport'])+1)

fig, ax = plt.subplots(figsize=(10, 5), facecolor=cor_fundo_gold)

plt.hlines(y=filtrado['Sport'], xmin=0, xmax=filtrado['Gold'], color='gray')
plt.plot(filtrado['Gold'], filtrado['Sport'], "o",markersize=10, color='#244747')
plt.plot(filtrado['Gold'][9], filtrado['Sport'][9], "o",markersize=20,color='#B73832')

ax.set_facecolor(cor_fundo_gold)

Xstart, Xend = ax.get_xlim()
Ystart, Yend = ax.get_ylim()

ax.tick_params(axis=u'both', which=u'both',length=0)
ax.set_xlabel("Total Medals",fontfamily='monospace',loc='left',color='gray')
ax.set_axisbelow(True)

for s in ['top','right','bottom','left']:
    ax.spines[s].set_visible(False)


ax.text(-90,Yend+2.3, 'Olympic Total Medals by Country: Tokyo 2021', fontsize=15,fontweight='bold',fontfamily='serif',color='#323232')

plt.yticks(my_range, filtrado['Sport'])
plt.xlabel('')

ax.annotate(filtrado['Gold'][2], xy=(54.86,10.95), va = 'center', ha='left',fontweight='light', fontfamily='monospace',fontsize=10, color='white',rotation=0)

ax.set_yticklabels(filtrado['Sport'], ha='right', position=(0, 0.02))

plt.tight_layout()
 497:
filtrado = medalhas_ouro.query('Age <= 15').groupby(['Sport','Medal'])['Medal'].count().unstack().fillna(0).astype(int).reset_index().sort_values(by='Gold', ascending=False)

my_range=range(1,len(filtrado[:15]['Sport'])+1)

fig, ax = plt.subplots(figsize=(10, 5), facecolor=cor_fundo_gold)

plt.hlines(y=filtrado['Sport'], xmin=0, xmax=filtrado['Gold'], color='gray')
plt.plot(filtrado['Gold'], filtrado['Sport'], "o",markersize=10, color='#244747')
plt.plot(filtrado['Gold'][9], filtrado['Sport'][9], "o",markersize=20,color='#B73832')

ax.set_facecolor(cor_fundo_gold)

Xstart, Xend = ax.get_xlim()
Ystart, Yend = ax.get_ylim()

ax.tick_params(axis=u'both', which=u'both',length=0)
ax.set_xlabel("Total Medals",fontfamily='monospace',loc='left',color='gray')
ax.set_axisbelow(True)

for s in ['top','right','bottom','left']:
    ax.spines[s].set_visible(False)


ax.text(0,Yend+2.3, 'Olympic Total Medals by Country: Tokyo 2021', fontsize=15,fontweight='bold',fontfamily='serif',color='#323232')

plt.yticks(my_range, filtrado['Sport'])
plt.xlabel('')

ax.annotate(filtrado['Gold'][2], xy=(54.86,10.95), va = 'center', ha='left',fontweight='light', fontfamily='monospace',fontsize=10, color='white',rotation=0)

ax.set_yticklabels(filtrado['Sport'], ha='right', position=(0, 0.02))

plt.tight_layout()
 498:
filtrado = medalhas_ouro.query('Age <= 15').groupby(['Sport','Medal'])['Medal'].count().unstack().fillna(0).astype(int).reset_index().sort_values(by='Gold', ascending=False)

my_range=range(1,len(filtrado[:15]['Sport'])+1)

fig, ax = plt.subplots(figsize=(10, 5), facecolor=cor_fundo_gold)

plt.hlines(y=filtrado['Sport'], xmin=0, xmax=filtrado['Gold'], color='gray')
plt.plot(filtrado['Gold'], filtrado['Sport'], "o",markersize=10, color='#244747')
plt.plot(filtrado['Gold'][9], filtrado['Sport'][9], "o",markersize=20,color='#B73832')

ax.set_facecolor(cor_fundo_gold)

Xstart, Xend = ax.get_xlim()
Ystart, Yend = ax.get_ylim()

ax.tick_params(axis=u'both', which=u'both',length=0)
ax.set_xlabel("Total Medals",fontfamily='monospace',loc='left',color='gray')
ax.set_axisbelow(True)

for s in ['top','right','bottom','left']:
    ax.spines[s].set_visible(False)


ax.text(0,Yend+2.3, 'Olympic Total Medals by Country: Tokyo 2021', fontsize=15,fontweight='bold',fontfamily='serif',color='#323232')

plt.yticks(my_range, filtrado['Sport'])
plt.xlabel('')

x_coord = filtrado['Gold'].iloc[9]
y_coord = filtrado['Sport'].iloc[9]

ax.annotate(filtrado['Gold'][2], xy=(x_coord,y_coord), va = 'center', ha='left',fontweight='light', fontfamily='monospace',fontsize=10, color='white',rotation=0)

ax.set_yticklabels(filtrado['Sport'], ha='right', position=(0, 0.02))

plt.tight_layout()
 499:
filtrado = medalhas_ouro.query('Age <= 15').groupby(['Sport','Medal'])['Medal'].count().unstack().fillna(0).astype(int).reset_index().sort_values(by='Gold', ascending=False)

my_range=range(1,len(filtrado[:15]['Sport'])+1)

fig, ax = plt.subplots(figsize=(10, 5), facecolor=cor_fundo_gold)

plt.hlines(y=filtrado['Sport'], xmin=0, xmax=filtrado['Gold'], color='gray')
plt.plot(filtrado['Gold'], filtrado['Sport'], "o",markersize=10, color='#244747')
plt.plot(filtrado['Gold'][9], filtrado['Sport'][9], "o",markersize=20,color='#B73832')

ax.set_facecolor(cor_fundo_gold)

Xstart, Xend = ax.get_xlim()
Ystart, Yend = ax.get_ylim()

ax.tick_params(axis=u'both', which=u'both',length=0)
ax.set_xlabel("Total Medals",fontfamily='monospace',loc='left',color='gray')
ax.set_axisbelow(True)

for s in ['top','right','bottom','left']:
    ax.spines[s].set_visible(False)


ax.text(0,Yend+2.3, 'Olympic Total Medals by Country: Tokyo 2021', fontsize=15,fontweight='bold',fontfamily='serif',color='#323232')

plt.yticks(my_range, filtrado['Sport'])
plt.xlabel('')

x_coord = filtrado['Gold'].iloc[9]
y_coord = filtrado['Sport'].iloc[9]

ax.annotate(filtrado['Gold'][9], xy=(x_coord,y_coord), va = 'center', ha='left',fontweight='light', fontfamily='monospace',fontsize=10, color='white',rotation=0)

ax.set_yticklabels(filtrado['Sport'], ha='right', position=(0, 0.02))

plt.tight_layout()
 500:
filtrado = medalhas_ouro.query('Age <= 15').groupby(['Sport','Medal'])['Medal'].count().unstack().fillna(0).astype(int).reset_index().sort_values(by='Gold', ascending=False)

my_range=range(1,len(filtrado[:15]['Sport'])+1)

fig, ax = plt.subplots(figsize=(10, 5), facecolor=cor_fundo_gold)

plt.hlines(y=filtrado['Sport'], xmin=0, xmax=filtrado['Gold'], color='gray')
plt.plot(filtrado['Gold'], filtrado['Sport'], "o",markersize=10, color='#244747')
plt.plot(filtrado['Gold'][9], filtrado['Sport'][9], "o",markersize=20,color='#B73832')

ax.set_facecolor(cor_fundo_gold)

Xstart, Xend = ax.get_xlim()
Ystart, Yend = ax.get_ylim()

ax.tick_params(axis=u'both', which=u'both',length=0)
ax.set_xlabel("Total Medals",fontfamily='monospace',loc='left',color='gray')
ax.set_axisbelow(True)

for s in ['top','right','bottom','left']:
    ax.spines[s].set_visible(False)


ax.text(0,Yend+2.3, 'Olympic Total Medals by Country: Tokyo 2021', fontsize=15,fontweight='bold',fontfamily='serif',color='#323232')

plt.yticks(my_range, filtrado['Sport'])
plt.xlabel('')

x_coord = filtrado['Gold'].iloc[1]
y_coord = filtrado['Sport'].iloc[1]

ax.annotate(filtrado['Gold'][9], xy=(x_coord,y_coord), va = 'center', ha='left',fontweight='light', fontfamily='monospace',fontsize=10, color='white',rotation=0)

ax.set_yticklabels(filtrado['Sport'], ha='right', position=(0, 0.02))

plt.tight_layout()
 501:
filtrado = medalhas_ouro.query('Age <= 15').groupby(['Sport','Medal'])['Medal'].count().unstack().fillna(0).astype(int).reset_index().sort_values(by='Gold', ascending=False)

my_range=range(1,len(filtrado[:15]['Sport'])+1)

fig, ax = plt.subplots(figsize=(10, 5), facecolor=cor_fundo_gold)

plt.hlines(y=filtrado['Sport'], xmin=0, xmax=filtrado['Gold'], color='gray')
plt.plot(filtrado['Gold'], filtrado['Sport'], "o",markersize=10, color='#244747')
plt.plot(filtrado['Gold'][9], filtrado['Sport'][9], "o",markersize=20,color='#B73832')

ax.set_facecolor(cor_fundo_gold)

Xstart, Xend = ax.get_xlim()
Ystart, Yend = ax.get_ylim()

ax.tick_params(axis=u'both', which=u'both',length=0)
ax.set_xlabel("Total Medals",fontfamily='monospace',loc='left',color='gray')
ax.set_axisbelow(True)

for s in ['top','right','bottom','left']:
    ax.spines[s].set_visible(False)


ax.text(0,Yend+2.3, 'Olympic Total Medals by Country: Tokyo 2021', fontsize=15,fontweight='bold',fontfamily='serif',color='#323232')

plt.yticks(my_range, filtrado['Sport'])
plt.xlabel('')

x_coord = filtrado['Gold'].iloc[0]
y_coord = filtrado['Sport'].iloc[0]

ax.annotate(filtrado['Gold'][9], xy=(x_coord,y_coord), va = 'center', ha='left',fontweight='light', fontfamily='monospace',fontsize=10, color='white',rotation=0)

ax.set_yticklabels(filtrado['Sport'], ha='right', position=(0, 0.02))

plt.tight_layout()
 502:
filtrado = medalhas_ouro.query('Age <= 15').groupby(['Sport','Medal'])['Medal'].count().unstack().fillna(0).astype(int).reset_index().sort_values(by='Gold', ascending=False)

my_range=range(1,len(filtrado[:15]['Sport'])+1)

fig, ax = plt.subplots(figsize=(10, 5), facecolor=cor_fundo_gold)

plt.hlines(y=filtrado['Sport'], xmin=0, xmax=filtrado['Gold'], color='gray')
plt.plot(filtrado['Gold'], filtrado['Sport'], "o",markersize=10, color='#244747')
plt.plot(filtrado['Gold'][9], filtrado['Sport'][9], "o",markersize=20,color='#B73832')

ax.set_facecolor(cor_fundo_gold)

Xstart, Xend = ax.get_xlim()
Ystart, Yend = ax.get_ylim()

ax.tick_params(axis=u'both', which=u'both',length=0)
ax.set_xlabel("Total Medals",fontfamily='monospace',loc='left',color='gray')
ax.set_axisbelow(True)

for s in ['top','right','bottom','left']:
    ax.spines[s].set_visible(False)


ax.text(0,Yend+2.3, 'Olympic Total Medals by Country: Tokyo 2021', fontsize=15,fontweight='bold',fontfamily='serif',color='#323232')

plt.yticks(my_range, filtrado['Sport'])
plt.xlabel('')

x_coord = filtrado['Gold'].iloc[0]
y_coord = filtrado['Sport'].iloc[0]

ax.annotate(filtrado['Gold'][9], xy=(x_coord-1,y_coord), va = 'center', ha='left',fontweight='light', fontfamily='monospace',fontsize=10, color='white',rotation=0)

ax.set_yticklabels(filtrado['Sport'], ha='right', position=(0, 0.02))

plt.tight_layout()
 503:
filtrado = medalhas_ouro.query('Age <= 15').groupby(['Sport','Medal'])['Medal'].count().unstack().fillna(0).astype(int).reset_index().sort_values(by='Gold', ascending=False)

my_range=range(1,len(filtrado[:15]['Sport'])+1)

fig, ax = plt.subplots(figsize=(10, 5), facecolor=cor_fundo_gold)

plt.hlines(y=filtrado['Sport'], xmin=0, xmax=filtrado['Gold'], color='gray')
plt.plot(filtrado['Gold'], filtrado['Sport'], "o",markersize=10, color='#244747')
plt.plot(filtrado['Gold'][9], filtrado['Sport'][9], "o",markersize=20,color='#B73832')

ax.set_facecolor(cor_fundo_gold)

Xstart, Xend = ax.get_xlim()
Ystart, Yend = ax.get_ylim()

ax.tick_params(axis=u'both', which=u'both',length=0)
ax.set_xlabel("Total Medals",fontfamily='monospace',loc='left',color='gray')
ax.set_axisbelow(True)

for s in ['top','right','bottom','left']:
    ax.spines[s].set_visible(False)


ax.text(0,Yend+2.3, 'Olympic Total Medals by Country: Tokyo 2021', fontsize=15,fontweight='bold',fontfamily='serif',color='#323232')

plt.yticks(my_range, filtrado['Sport'])
plt.xlabel('')

x_coord = filtrado['Gold'].iloc[0]
y_coord = filtrado['Sport'].iloc[0]

ax.annotate(filtrado['Gold'][9], xy=(x_coord-0.5,y_coord), va = 'center', ha='left',fontweight='light', fontfamily='monospace',fontsize=10, color='white',rotation=0)

ax.set_yticklabels(filtrado['Sport'], ha='right', position=(0, 0.02))

plt.tight_layout()
 504:
filtrado = medalhas_ouro.query('Age <= 15').groupby(['Sport','Medal'])['Medal'].count().unstack().fillna(0).astype(int).reset_index().sort_values(by='Gold', ascending=False)

my_range=range(1,len(filtrado[:15]['Sport'])+1)

fig, ax = plt.subplots(figsize=(10, 5), facecolor=cor_fundo_gold)

plt.hlines(y=filtrado['Sport'], xmin=1, xmax=filtrado['Gold'], color='gray')
plt.plot(filtrado['Gold'], filtrado['Sport'], "o",markersize=10, color='#244747')
plt.plot(filtrado['Gold'][9], filtrado['Sport'][9], "o",markersize=20,color='#B73832')

ax.set_facecolor(cor_fundo_gold)

Xstart, Xend = ax.get_xlim()
Ystart, Yend = ax.get_ylim()

ax.tick_params(axis=u'both', which=u'both',length=0)
ax.set_xlabel("Total Medals",fontfamily='monospace',loc='left',color='gray')
ax.set_axisbelow(True)

for s in ['top','right','bottom','left']:
    ax.spines[s].set_visible(False)


ax.text(0,Yend+2.3, 'Olympic Total Medals by Country: Tokyo 2021', fontsize=15,fontweight='bold',fontfamily='serif',color='#323232')

plt.yticks(my_range, filtrado['Sport'])
plt.xlabel('')

x_coord = filtrado['Gold'].iloc[0]
y_coord = filtrado['Sport'].iloc[0]

ax.annotate(filtrado['Gold'][9], xy=(x_coord-0.5,y_coord), va = 'center', ha='left',fontweight='light', fontfamily='monospace',fontsize=10, color='white',rotation=0)

ax.set_yticklabels(filtrado['Sport'], ha='right', position=(0, 0.02))

plt.tight_layout()
 505:
filtrado = medalhas_ouro.query('Age <= 15').groupby(['Sport','Medal'])['Medal'].count().unstack().fillna(0).astype(int).reset_index().sort_values(by='Gold', ascending=True)

my_range=range(1,len(filtrado[:15]['Sport'])+1)

fig, ax = plt.subplots(figsize=(10, 5), facecolor=cor_fundo_gold)

plt.hlines(y=filtrado['Sport'], xmin=0, xmax=filtrado['Gold'], color='gray')
plt.plot(filtrado['Gold'], filtrado['Sport'], "o",markersize=10, color='#244747')
plt.plot(filtrado['Gold'][9], filtrado['Sport'][9], "o",markersize=20,color='#B73832')

ax.set_facecolor(cor_fundo_gold)

Xstart, Xend = ax.get_xlim()
Ystart, Yend = ax.get_ylim()

ax.tick_params(axis=u'both', which=u'both',length=0)
ax.set_xlabel("Total Medals",fontfamily='monospace',loc='left',color='gray')
ax.set_axisbelow(True)

for s in ['top','right','bottom','left']:
    ax.spines[s].set_visible(False)


ax.text(0,Yend+2.3, 'Olympic Total Medals by Country: Tokyo 2021', fontsize=15,fontweight='bold',fontfamily='serif',color='#323232')

plt.yticks(my_range, filtrado['Sport'])
plt.xlabel('')

x_coord = filtrado['Gold'].iloc[0]
y_coord = filtrado['Sport'].iloc[0]

ax.annotate(filtrado['Gold'][9], xy=(x_coord-0.5,y_coord), va = 'center', ha='left',fontweight='light', fontfamily='monospace',fontsize=10, color='white',rotation=0)

ax.set_yticklabels(filtrado['Sport'], ha='right', position=(0, 0.02))

plt.tight_layout()
 506:
filtrado = medalhas_ouro.query('Age <= 15').groupby(['Sport','Medal'])['Medal'].count().unstack().fillna(0).astype(int).reset_index()

my_range=range(1,len(filtrado[:15]['Sport'])+1)

fig, ax = plt.subplots(figsize=(10, 5), facecolor=cor_fundo_gold)

plt.hlines(y=filtrado['Sport'], xmin=0, xmax=filtrado['Gold'], color='gray')
plt.plot(filtrado['Gold'], filtrado['Sport'], "o",markersize=10, color='#244747')
plt.plot(filtrado['Gold'][9], filtrado['Sport'][9], "o",markersize=20,color='#B73832')

ax.set_facecolor(cor_fundo_gold)

Xstart, Xend = ax.get_xlim()
Ystart, Yend = ax.get_ylim()

ax.tick_params(axis=u'both', which=u'both',length=0)
ax.set_xlabel("Total Medals",fontfamily='monospace',loc='left',color='gray')
ax.set_axisbelow(True)

for s in ['top','right','bottom','left']:
    ax.spines[s].set_visible(False)


ax.text(0,Yend+2.3, 'Olympic Total Medals by Country: Tokyo 2021', fontsize=15,fontweight='bold',fontfamily='serif',color='#323232')

plt.yticks(my_range, filtrado['Sport'])
plt.xlabel('')

x_coord = filtrado['Gold'].iloc[0]
y_coord = filtrado['Sport'].iloc[0]

ax.annotate(filtrado['Gold'][9], xy=(x_coord-0.5,y_coord), va = 'center', ha='left',fontweight='light', fontfamily='monospace',fontsize=10, color='white',rotation=0)

ax.set_yticklabels(filtrado['Sport'], ha='right', position=(0, 0.02))

plt.tight_layout()
 507:
filtrado = medalhas_ouro.query('Age <= 15').groupby(['Sport','Medal'])['Medal'].count().unstack().fillna(0).astype(int).reset_index().sort_values(by='Gold', ascending=False)

my_range=range(1,len(filtrado[:15]['Sport'])+1)

fig, ax = plt.subplots(figsize=(10, 5), facecolor=cor_fundo_gold)

plt.hlines(y=filtrado['Sport'], xmin=0, xmax=filtrado['Gold'], color='gray')
plt.plot(filtrado['Gold'], filtrado['Sport'], "o",markersize=10, color='#244747')
plt.plot(filtrado['Gold'][9], filtrado['Sport'][9], "o",markersize=20,color='#B73832')

ax.set_facecolor(cor_fundo_gold)

Xstart, Xend = ax.get_xlim()
Ystart, Yend = ax.get_ylim()

ax.tick_params(axis=u'both', which=u'both',length=0)
ax.set_xlabel("Total Medals",fontfamily='monospace',loc='left',color='gray')
ax.set_axisbelow(True)

for s in ['top','right','bottom','left']:
    ax.spines[s].set_visible(False)


ax.text(0,Yend+2.3, 'Olympic Total Medals by Country: Tokyo 2021', fontsize=15,fontweight='bold',fontfamily='serif',color='#323232')

plt.yticks(my_range, filtrado['Sport'])
plt.xlabel('')

x_coord = filtrado['Gold'].iloc[0]
y_coord = filtrado['Sport'].iloc[0]

ax.annotate(filtrado['Gold'][9], xy=(x_coord-0.5,y_coord), va = 'center', ha='left',fontweight='light', fontfamily='monospace',fontsize=10, color='white',rotation=0)

ax.set_yticklabels(filtrado['Sport'], ha='right', position=(0, 0.02))

plt.tight_layout()
 508:
filtrado = medalhas_ouro.query('Age <= 15').groupby(['Sport','Medal'])['Medal'].count().unstack().fillna(0).astype(int).reset_index().sort_values(by='Gold', ascending=False)

my_range=range(1,len(filtrado[:15]['Sport'])+1)

fig, ax = plt.subplots(figsize=(10, 5), facecolor=cor_fundo_gold)

plt.hlines(y=filtrado['Sport'], xmin=0, xmax=filtrado['Gold'], color='gray')
plt.plot(filtrado['Gold'], filtrado['Sport'], "o",markersize=10, color='#244747')
plt.plot(filtrado['Gold'][9], filtrado['Sport'][9], "o",markersize=20,color='#B73832')

ax.set_facecolor(cor_fundo_gold)

Xstart, Xend = ax.get_xlim()
Ystart, Yend = ax.get_ylim()

ax.tick_params(axis=u'both', which=u'both',length=0)
ax.set_xlabel("Total Medals",fontfamily='monospace',loc='left',color='gray')
ax.set_axisbelow(True)

for s in ['top','right','bottom','left']:
    ax.spines[s].set_visible(False)


ax.text(0,Yend+2.3, 'Olympic Total Medals by Country: Tokyo 2021', fontsize=15,fontweight='bold',fontfamily='serif',color='#323232')

plt.yticks(my_range, filtrado['Sport'])
plt.xlabel('')

x_coord = filtrado['Gold'].iloc[0]
y_coord = filtrado['Sport'].iloc[0]

ax.annotate(filtrado['Gold'][9], xy=(x_coord-0.5,y_coord), va = 'center', ha='left',fontweight='light', fontfamily='monospace',fontsize=10, color='white',rotation=0)

ax.set_yticklabels(filtrado['Sport'], ha='right', position=(0, 0.02))
 509:
filtrado = medalhas_ouro.query('Age <= 15').groupby(['Sport','Medal'])['Medal'].count().unstack().fillna(0).astype(int).reset_index().sort_values(by='Gold', ascending=False)

my_range=range(1,len(filtrado[:15]['Sport'])+1)

fig, ax = plt.subplots(figsize=(10, 5), facecolor=cor_fundo_gold)

plt.hlines(y=filtrado['Sport'], xmin=0, xmax=filtrado['Gold'], color='gray')
plt.plot(filtrado['Gold'], filtrado['Sport'], "o",markersize=10, color='#244747')
plt.plot(filtrado['Gold'][9], filtrado['Sport'][9], "o",markersize=20,color='#B73832')

ax.set_facecolor(cor_fundo_gold)

Xstart, Xend = ax.get_xlim()
Ystart, Yend = ax.get_ylim()

ax.tick_params(axis=u'both', which=u'both',length=0)
ax.set_xlabel("Total Medals",fontfamily='monospace',loc='left',color='gray')
ax.set_axisbelow(True)

for s in ['top','right','bottom','left']:
    ax.spines[s].set_visible(False)


ax.text(0,Yend+2.3, 'Olympic Total Medals by Country: Tokyo 2021', fontsize=15,fontweight='bold',fontfamily='serif',color='#323232')

plt.yticks(my_range, filtrado['Sport'])
plt.xlabel('')

x_coord = filtrado['Gold'].iloc[0]
y_coord = filtrado['Sport'].iloc[0]

ax.annotate(filtrado['Gold'][9], xy=(x_coord-0.5,y_coord), va = 'center', ha='left',fontweight='light', fontfamily='monospace',fontsize=10, color='white',rotation=0)

ax.set_yticklabels(filtrado['Sport'], ha='right', position=(0, 0.02))

plt.tight_layout()
 510:
filtrado = medalhas_ouro.query('Age <= 15').groupby(['Sport','Medal'])['Medal'].count().unstack().fillna(0).astype(int).reset_index().sort_values(by='Gold', ascending=False)

my_range=range(1,len(filtrado[:15]['Sport'])+1)

fig, ax = plt.subplots(figsize=(10, 5), facecolor=cor_fundo_gold)

plt.hlines(y=filtrado['Sport'], xmin=0, xmax=filtrado['Gold'], color='gray')
plt.plot(filtrado['Gold'], filtrado['Sport'], "o",markersize=10, color='#244747')
plt.plot(filtrado['Gold'][9], filtrado['Sport'][9], "o",markersize=20,color='#B73832')

ax.set_facecolor(cor_fundo_gold)

Xstart, Xend = ax.get_xlim()
Ystart, Yend = ax.get_ylim()

ax.tick_params(axis=u'both', which=u'both',length=0)
ax.set_xlabel("Total Medals",fontfamily='monospace',loc='left',color='gray')
ax.set_axisbelow(True)

for s in ['top','right','bottom','left']:
    ax.spines[s].set_visible(False)


ax.text(0,Yend+2.3, 'Olympic Total Medals by Country: Tokyo 2021', fontsize=15,fontweight='bold',fontfamily='serif',color='#323232')

plt.yticks(my_range, filtrado['Sport'])
plt.xlabel('')

x_coord = filtrado['Gold'].iloc[0]
y_coord = filtrado['Sport'].iloc[0]

ax.annotate(filtrado['Gold'][9], xy=(x_coord-0.5,y_coord), va = 'center', ha='center',fontweight='light', fontfamily='monospace',fontsize=10, color='white',rotation=0)

ax.set_yticklabels(filtrado['Sport'], ha='right', position=(0, 0.02))

plt.tight_layout()
 511:
filtrado = medalhas_ouro.query('Age <= 15').groupby(['Sport','Medal'])['Medal'].count().unstack().fillna(0).astype(int).reset_index().sort_values(by='Gold', ascending=False)

my_range=range(1,len(filtrado[:15]['Sport'])+1)

fig, ax = plt.subplots(figsize=(10, 5), facecolor=cor_fundo_gold)

plt.hlines(y=filtrado['Sport'], xmin=0, xmax=filtrado['Gold'], color='gray')
plt.plot(filtrado['Gold'], filtrado['Sport'], "o",markersize=10, color='#244747')
plt.plot(filtrado['Gold'][9], filtrado['Sport'][9], "o",markersize=20,color='#B73832')

ax.set_facecolor(cor_fundo_gold)

Xstart, Xend = ax.get_xlim()
Ystart, Yend = ax.get_ylim()

ax.tick_params(axis=u'both', which=u'both',length=0)
ax.set_xlabel("Total Medals",fontfamily='monospace',loc='left',color='gray')
ax.set_axisbelow(True)

for s in ['top','right','bottom','left']:
    ax.spines[s].set_visible(False)


ax.text(0,Yend+2.3, 'Olympic Total Medals by Country: Tokyo 2021', fontsize=15,fontweight='bold',fontfamily='serif',color='#323232')

plt.yticks(my_range, filtrado['Sport'])
plt.xlabel('')

x_coord = filtrado['Gold'].iloc[0]
y_coord = filtrado['Sport'].iloc[0]

ax.annotate(filtrado['Gold'][9], xy=(x_coord,y_coord), va = 'center', ha='center',fontweight='light', fontfamily='monospace',fontsize=10, color='white',rotation=0)

ax.set_yticklabels(filtrado['Sport'], ha='right', position=(0, 0.02))

plt.tight_layout()
 512:
filtrado = medalhas_ouro.query('Age <= 15').groupby(['Sport','Medal'])['Medal'].count().unstack().fillna(0).astype(int).reset_index().sort_values(by='Gold', ascending=False)

my_range=range(1,len(filtrado[:15]['Sport'])+1)

fig, ax = plt.subplots(figsize=(10, 5), facecolor=cor_fundo_gold)

plt.hlines(y=filtrado['Sport'], xmin=0, xmax=filtrado['Gold'], color='gray')
plt.plot(filtrado['Gold'], filtrado['Sport'], "o",markersize=10, color='#244747')
plt.plot(filtrado['Gold'][9], filtrado['Sport'][9], "o",markersize=20,color='#B73832')

ax.set_facecolor(cor_fundo_gold)

Xstart, Xend = ax.get_xlim()
Ystart, Yend = ax.get_ylim()

ax.tick_params(axis=u'both', which=u'both',length=0)
ax.set_xlabel("Total Medals",fontfamily='monospace',loc='left',color='gray')
ax.set_axisbelow(True)

for s in ['top','right','bottom','left']:
    ax.spines[s].set_visible(False)


ax.text(0,Yend+2.3, 'Olympic Total Medals by Country: Tokyo 2021', fontsize=15,fontweight='bold',fontfamily='serif',color='#323232')

plt.yticks(my_range, filtrado['Sport'])
plt.xlabel('')

x_coord = filtrado['Gold'].iloc[0]
y_coord = filtrado['Sport'].iloc[0]

ax.annotate(filtrado['Gold'][9], xy=(x_coord,y_coord), va = 'center', ha='center',fontweight='light', fontfamily='monospace',fontsize=10, color='white',rotation=0)

ax.set_yticklabels(filtrado['Sport'], ha='right', position=(0, 0.02))

plt.subplots_adjust(left=0.2, right=0.9, top=0.85, bottom=0.1)

plt.tight_layout()
 513:
filtrado = medalhas_ouro.query('Age <= 15').groupby(['Sport','Medal'])['Medal'].count().unstack().fillna(0).astype(int).reset_index().sort_values(by='Gold', ascending=False)

my_range=range(1,len(filtrado[:15]['Sport'])+1)

fig, ax = plt.subplots(figsize=(10, 5), facecolor=cor_fundo_gold)

plt.hlines(y=filtrado['Sport'], xmin=0, xmax=filtrado['Gold'], color='gray')
plt.plot(filtrado['Gold'], filtrado['Sport'], "o",markersize=10, color='#244747')
plt.plot(filtrado['Gold'][9], filtrado['Sport'][9], "o",markersize=20,color='#B73832')

ax.set_facecolor(cor_fundo_gold)

Xstart, Xend = ax.get_xlim()
Ystart, Yend = ax.get_ylim()

ax.tick_params(axis=u'both', which=u'both',length=0)
ax.set_xlabel("Total Medals",fontfamily='monospace',loc='left',color='gray')
ax.set_axisbelow(True)

for s in ['top','right','bottom','left']:
    ax.spines[s].set_visible(False)


ax.text(0,Yend+2.3, 'Olympic Total Medals by Country: Tokyo 2021', fontsize=15,fontweight='bold',fontfamily='serif',color='#323232')

plt.yticks(my_range, filtrado['Sport'])
plt.xlabel('')

x_coord = filtrado['Gold'].iloc[0]
y_coord = filtrado['Sport'].iloc[0]

ax.annotate(filtrado['Gold'][9], xy=(x_coord,y_coord), va = 'center', ha='center',fontweight='light', fontfamily='monospace',fontsize=10, color='white',rotation=0)

plt.tight_layout()
 514:
filtrado = medalhas_ouro.query('Age <= 15').groupby(['Sport','Medal'])['Medal'].count().unstack().fillna(0).astype(int).reset_index().sort_values(by='Gold', ascending=False)

my_range=range(1,len(filtrado[:15]['Sport'])+1)

fig, ax = plt.subplots(figsize=(10, 5), facecolor=cor_fundo_gold)

plt.hlines(y=my_range, xmin=0, xmax=filtrado['Gold'], color='gray')
plt.plot(filtrado['Gold'], filtrado['Sport'], "o",markersize=10, color='#244747')
plt.plot(filtrado['Gold'][9], filtrado['Sport'][9], "o",markersize=20,color='#B73832')

ax.set_facecolor(cor_fundo_gold)

Xstart, Xend = ax.get_xlim()
Ystart, Yend = ax.get_ylim()

ax.tick_params(axis=u'both', which=u'both',length=0)
ax.set_xlabel("Total Medals",fontfamily='monospace',loc='left',color='gray')
ax.set_axisbelow(True)

for s in ['top','right','bottom','left']:
    ax.spines[s].set_visible(False)


ax.text(0,Yend+2.3, 'Olympic Total Medals by Country: Tokyo 2021', fontsize=15,fontweight='bold',fontfamily='serif',color='#323232')

plt.yticks(my_range, filtrado['Sport'])
plt.xlabel('')

x_coord = filtrado['Gold'].iloc[0]
y_coord = filtrado['Sport'].iloc[0]

ax.annotate(filtrado['Gold'][9], xy=(x_coord,y_coord), va = 'center', ha='center',fontweight='light', fontfamily='monospace',fontsize=10, color='white',rotation=0)

plt.tight_layout()
 515:
filtrado = medalhas_ouro.query('Age <= 15').groupby(['Sport','Medal'])['Medal'].count().unstack().fillna(0).astype(int).reset_index().sort_values(by='Gold', ascending=False)

my_range=range(1,len(filtrado[:15]['Sport'])+1)

fig, ax = plt.subplots(figsize=(10, 5), facecolor=cor_fundo_gold)

plt.hlines(y=my_range, xmin=0, xmax=filtrado['Gold'], color='gray')
plt.plot(filtrado['Gold'], my_range, "o",markersize=10, color='#244747')
plt.plot(filtrado['Gold'][9], filtrado['Sport'][9], "o",markersize=20,color='#B73832')

ax.set_facecolor(cor_fundo_gold)

Xstart, Xend = ax.get_xlim()
Ystart, Yend = ax.get_ylim()

ax.tick_params(axis=u'both', which=u'both',length=0)
ax.set_xlabel("Total Medals",fontfamily='monospace',loc='left',color='gray')
ax.set_axisbelow(True)

for s in ['top','right','bottom','left']:
    ax.spines[s].set_visible(False)


ax.text(0,Yend+2.3, 'Olympic Total Medals by Country: Tokyo 2021', fontsize=15,fontweight='bold',fontfamily='serif',color='#323232')

plt.yticks(my_range, filtrado['Sport'])
plt.xlabel('')

x_coord = filtrado['Gold'].iloc[0]
y_coord = filtrado['Sport'].iloc[0]

ax.annotate(filtrado['Gold'][9], xy=(x_coord,y_coord), va = 'center', ha='center',fontweight='light', fontfamily='monospace',fontsize=10, color='white',rotation=0)

plt.tight_layout()
 516:
filtrado = medalhas_ouro.query('Age <= 15').groupby(['Sport','Medal'])['Medal'].count().unstack().fillna(0).astype(int).reset_index().sort_values(by='Gold', ascending=False)

my_range=range(1,len(filtrado[:15]['Sport'])+1)

fig, ax = plt.subplots(figsize=(10, 5), facecolor=cor_fundo_gold)

plt.hlines(y=my_range, xmin=0, xmax=filtrado['Gold'], color='gray')
plt.plot(filtrado['Gold'], my_range, "o",markersize=10, color='#244747')
plt.plot(filtrado['Gold'][9], my_range[9], "o",markersize=20,color='#B73832')

ax.set_facecolor(cor_fundo_gold)

Xstart, Xend = ax.get_xlim()
Ystart, Yend = ax.get_ylim()

ax.tick_params(axis=u'both', which=u'both',length=0)
ax.set_xlabel("Total Medals",fontfamily='monospace',loc='left',color='gray')
ax.set_axisbelow(True)

for s in ['top','right','bottom','left']:
    ax.spines[s].set_visible(False)


ax.text(0,Yend+2.3, 'Olympic Total Medals by Country: Tokyo 2021', fontsize=15,fontweight='bold',fontfamily='serif',color='#323232')

plt.yticks(my_range, filtrado['Sport'])
plt.xlabel('')

x_coord = filtrado['Gold'].iloc[0]
y_coord = filtrado['Sport'].iloc[0]

ax.annotate(filtrado['Gold'][9], xy=(x_coord,y_coord), va = 'center', ha='center',fontweight='light', fontfamily='monospace',fontsize=10, color='white',rotation=0)

plt.tight_layout()
 517:
filtrado = medalhas_ouro.query('Age <= 15').groupby(['Sport','Medal'])['Medal'].count().unstack().fillna(0).astype(int).reset_index().sort_values(by='Gold', ascending=False)

my_range=range(1,len(filtrado[:15]['Sport'])+1)

fig, ax = plt.subplots(figsize=(10, 5), facecolor=cor_fundo_gold)

plt.hlines(y=my_range, xmin=0, xmax=filtrado['Gold'], color='gray')
plt.plot(filtrado['Gold'], my_range, "o",markersize=10, color='#244747')
plt.plot(filtrado['Gold'][9], my_range, "o",markersize=20,color='#B73832')

ax.set_facecolor(cor_fundo_gold)

Xstart, Xend = ax.get_xlim()
Ystart, Yend = ax.get_ylim()

ax.tick_params(axis=u'both', which=u'both',length=0)
ax.set_xlabel("Total Medals",fontfamily='monospace',loc='left',color='gray')
ax.set_axisbelow(True)

for s in ['top','right','bottom','left']:
    ax.spines[s].set_visible(False)


ax.text(0,Yend+2.3, 'Olympic Total Medals by Country: Tokyo 2021', fontsize=15,fontweight='bold',fontfamily='serif',color='#323232')

plt.yticks(my_range, filtrado['Sport'])
plt.xlabel('')

x_coord = filtrado['Gold'].iloc[0]
y_coord = filtrado['Sport'].iloc[0]

ax.annotate(filtrado['Gold'][9], xy=(x_coord,y_coord), va = 'center', ha='center',fontweight='light', fontfamily='monospace',fontsize=10, color='white',rotation=0)

plt.tight_layout()
 518:
filtrado = medalhas_ouro.query('Age <= 15').groupby(['Sport','Medal'])['Medal'].count().unstack().fillna(0).astype(int).reset_index().sort_values(by='Gold', ascending=False)

my_range=range(1,len(filtrado[:15]['Sport'])+1)

fig, ax = plt.subplots(figsize=(10, 5), facecolor=cor_fundo_gold)

plt.hlines(y=my_range, xmin=0, xmax=filtrado['Gold'], color='gray')
plt.plot(filtrado['Gold'], my_range, "o",markersize=10, color='#244747')
plt.plot(filtrado['Gold'][9], my_range, "o",markersize=20,color='#B73832')

ax.set_facecolor(cor_fundo_gold)

Xstart, Xend = ax.get_xlim()
Ystart, Yend = ax.get_ylim()

ax.tick_params(axis=u'both', which=u'both',length=0)
ax.set_xlabel("Total Medals",fontfamily='monospace',loc='left',color='gray')
ax.set_axisbelow(True)

for s in ['top','right','bottom','left']:
    ax.spines[s].set_visible(False)


ax.text(0,Yend+2.3, 'Olympic Total Medals by Country: Tokyo 2021', fontsize=15,fontweight='bold',fontfamily='serif',color='#323232')

plt.yticks(my_range, filtrado['Sport'])
plt.xlabel('')

x_coord = filtrado['Gold'].iloc[0]
y_coord = filtrado['Sport'].iloc[0]

ax.annotate(filtrado['Gold'][9], xy=(x_coord,y_coord), va = 'center', ha='center',fontweight='light', fontfamily='monospace',fontsize=10, color='white',rotation=0)

plt.tight_layout()
 519:
filtrado = medalhas_ouro.query('Age <= 15').groupby(['Sport','Medal'])['Medal'].count().unstack().fillna(0).astype(int).reset_index().sort_values(by='Gold', ascending=False)

my_range=range(1,len(filtrado[:15]['Sport'])+1)

fig, ax = plt.subplots(figsize=(10, 5), facecolor=cor_fundo_gold)

plt.hlines(y=my_range, xmin=0, xmax=filtrado['Gold'], color='gray')
plt.plot(filtrado['Gold'], my_range, "o",markersize=10, color='#244747')
plt.plot(filtrado['Gold'][9], my_range[1], "o",markersize=20,color='#B73832')

ax.set_facecolor(cor_fundo_gold)

Xstart, Xend = ax.get_xlim()
Ystart, Yend = ax.get_ylim()

ax.tick_params(axis=u'both', which=u'both',length=0)
ax.set_xlabel("Total Medals",fontfamily='monospace',loc='left',color='gray')
ax.set_axisbelow(True)

for s in ['top','right','bottom','left']:
    ax.spines[s].set_visible(False)


ax.text(0,Yend+2.3, 'Olympic Total Medals by Country: Tokyo 2021', fontsize=15,fontweight='bold',fontfamily='serif',color='#323232')

plt.yticks(my_range, filtrado['Sport'])
plt.xlabel('')

x_coord = filtrado['Gold'].iloc[0]
y_coord = filtrado['Sport'].iloc[0]

ax.annotate(filtrado['Gold'][9], xy=(x_coord,y_coord), va = 'center', ha='center',fontweight='light', fontfamily='monospace',fontsize=10, color='white',rotation=0)

plt.tight_layout()
 520:
filtrado = medalhas_ouro.query('Age <= 15').groupby(['Sport','Medal'])['Medal'].count().unstack().fillna(0).astype(int).reset_index().sort_values(by='Gold', ascending=False)

my_range=range(1,len(filtrado[:15]['Sport'])+1)

fig, ax = plt.subplots(figsize=(10, 5), facecolor=cor_fundo_gold)

plt.hlines(y=my_range, xmin=0, xmax=filtrado['Gold'], color='gray')
plt.plot(filtrado['Gold'], my_range, "o",markersize=10, color='#244747')
plt.plot(filtrado['Gold'].iloc[9], my_range[9], "o", markersize=20, color='#B73832')

ax.set_facecolor(cor_fundo_gold)

Xstart, Xend = ax.get_xlim()
Ystart, Yend = ax.get_ylim()

ax.tick_params(axis=u'both', which=u'both',length=0)
ax.set_xlabel("Total Medals",fontfamily='monospace',loc='left',color='gray')
ax.set_axisbelow(True)

for s in ['top','right','bottom','left']:
    ax.spines[s].set_visible(False)


ax.text(0,Yend+2.3, 'Olympic Total Medals by Country: Tokyo 2021', fontsize=15,fontweight='bold',fontfamily='serif',color='#323232')

plt.yticks(my_range, filtrado['Sport'])
plt.xlabel('')

x_coord = filtrado['Gold'].iloc[0]
y_coord = filtrado['Sport'].iloc[0]

ax.annotate(filtrado['Gold'][9], xy=(x_coord,y_coord), va = 'center', ha='center',fontweight='light', fontfamily='monospace',fontsize=10, color='white',rotation=0)

plt.tight_layout()
 521:
filtrado = medalhas_ouro.query('Age <= 15').groupby(['Sport','Medal'])['Medal'].count().unstack().fillna(0).astype(int).reset_index().sort_values(by='Gold', ascending=False)

my_range=range(1,len(filtrado[:15]['Sport'])+1)

my_range[9]
 522:
filtrado = medalhas_ouro.query('Age <= 15').groupby(['Sport','Medal'])['Medal'].count().unstack().fillna(0).astype(int).reset_index().sort_values(by='Gold', ascending=False)

my_range=range(1,len(filtrado[:15]['Sport'])+1)
my_range = range(len(filtrado))

fig, ax = plt.subplots(figsize=(10, 5), facecolor=cor_fundo_gold)

plt.hlines(y=my_range, xmin=0, xmax=filtrado['Gold'], color='gray')
plt.plot(filtrado['Gold'], my_range, "o",markersize=10, color='#244747')
plt.plot(filtrado['Gold'].iloc[9], my_range[9], "o", markersize=20, color='#B73832')

ax.set_facecolor(cor_fundo_gold)

Xstart, Xend = ax.get_xlim()
Ystart, Yend = ax.get_ylim()

ax.tick_params(axis=u'both', which=u'both',length=0)
ax.set_xlabel("Total Medals",fontfamily='monospace',loc='left',color='gray')
ax.set_axisbelow(True)

for s in ['top','right','bottom','left']:
    ax.spines[s].set_visible(False)


ax.text(0,Yend+2.3, 'Olympic Total Medals by Country: Tokyo 2021', fontsize=15,fontweight='bold',fontfamily='serif',color='#323232')

plt.yticks(my_range, filtrado['Sport'])
plt.xlabel('')

x_coord = filtrado['Gold'].iloc[0]
y_coord = filtrado['Sport'].iloc[0]

ax.annotate(filtrado['Gold'][9], xy=(x_coord,y_coord), va = 'center', ha='center',fontweight='light', fontfamily='monospace',fontsize=10, color='white',rotation=0)

plt.tight_layout()
 523:
filtrado = medalhas_ouro.query('Age <= 15').groupby(['Sport','Medal'])['Medal'].count().unstack().fillna(0).astype(int).reset_index().sort_values(by='Gold', ascending=False)

my_range=range(1,len(filtrado[:15]['Sport'])+1)
my_range = range(len(filtrado))

fig, ax = plt.subplots(figsize=(10, 5), facecolor=cor_fundo_gold)

plt.hlines(y=my_range, xmin=0, xmax=filtrado['Gold'], color='gray')
plt.plot(filtrado['Gold'], my_range, "o",markersize=10, color='#244747')
plt.plot(filtrado['Gold'].iloc[9], filtrado.iloc[9], "o", markersize=20, color='#B73832')


ax.set_facecolor(cor_fundo_gold)

Xstart, Xend = ax.get_xlim()
Ystart, Yend = ax.get_ylim()

ax.tick_params(axis=u'both', which=u'both',length=0)
ax.set_xlabel("Total Medals",fontfamily='monospace',loc='left',color='gray')
ax.set_axisbelow(True)

for s in ['top','right','bottom','left']:
    ax.spines[s].set_visible(False)


ax.text(0,Yend+2.3, 'Olympic Total Medals by Country: Tokyo 2021', fontsize=15,fontweight='bold',fontfamily='serif',color='#323232')

plt.yticks(my_range, filtrado['Sport'])
plt.xlabel('')

x_coord = filtrado['Gold'].iloc[0]
y_coord = filtrado['Sport'].iloc[0]

ax.annotate(filtrado['Gold'][9], xy=(x_coord,y_coord), va = 'center', ha='center',fontweight='light', fontfamily='monospace',fontsize=10, color='white',rotation=0)

plt.tight_layout()
 524:
filtrado = medalhas_ouro.query('Age <= 15').groupby(['Sport','Medal'])['Medal'].count().unstack().fillna(0).astype(int).reset_index().sort_values(by='Gold', ascending=False)

my_range=range(1,len(filtrado[:15]['Sport'])+1)
my_range = range(len(filtrado))

fig, ax = plt.subplots(figsize=(10, 5), facecolor=cor_fundo_gold)

plt.hlines(y=my_range, xmin=0, xmax=filtrado['Gold'], color='gray')
plt.plot(filtrado['Gold'], my_range, "o",markersize=10, color='#244747')
plt.plot(filtrado['Gold'].iloc[9], filtrado.iloc['Sport'].iloc[9], "o", markersize=20, color='#B73832')


ax.set_facecolor(cor_fundo_gold)

Xstart, Xend = ax.get_xlim()
Ystart, Yend = ax.get_ylim()

ax.tick_params(axis=u'both', which=u'both',length=0)
ax.set_xlabel("Total Medals",fontfamily='monospace',loc='left',color='gray')
ax.set_axisbelow(True)

for s in ['top','right','bottom','left']:
    ax.spines[s].set_visible(False)


ax.text(0,Yend+2.3, 'Olympic Total Medals by Country: Tokyo 2021', fontsize=15,fontweight='bold',fontfamily='serif',color='#323232')

plt.yticks(my_range, filtrado['Sport'])
plt.xlabel('')

x_coord = filtrado['Gold'].iloc[0]
y_coord = filtrado['Sport'].iloc[0]

ax.annotate(filtrado['Gold'][9], xy=(x_coord,y_coord), va = 'center', ha='center',fontweight='light', fontfamily='monospace',fontsize=10, color='white',rotation=0)

plt.tight_layout()
 525:
filtrado = medalhas_ouro.query('Age <= 15').groupby(['Sport','Medal'])['Medal'].count().unstack().fillna(0).astype(int).reset_index().sort_values(by='Gold', ascending=False)

my_range=range(1,len(filtrado[:15]['Sport'])+1)
my_range = range(len(filtrado))

fig, ax = plt.subplots(figsize=(10, 5), facecolor=cor_fundo_gold)

plt.hlines(y=my_range, xmin=0, xmax=filtrado['Gold'], color='gray')
plt.plot(filtrado['Gold'], my_range, "o",markersize=10, color='#244747')
plt.plot(filtrado['Gold'].iloc[9], filtrado.iloc['Sport'].loc[9], "o", markersize=20, color='#B73832')


ax.set_facecolor(cor_fundo_gold)

Xstart, Xend = ax.get_xlim()
Ystart, Yend = ax.get_ylim()

ax.tick_params(axis=u'both', which=u'both',length=0)
ax.set_xlabel("Total Medals",fontfamily='monospace',loc='left',color='gray')
ax.set_axisbelow(True)

for s in ['top','right','bottom','left']:
    ax.spines[s].set_visible(False)


ax.text(0,Yend+2.3, 'Olympic Total Medals by Country: Tokyo 2021', fontsize=15,fontweight='bold',fontfamily='serif',color='#323232')

plt.yticks(my_range, filtrado['Sport'])
plt.xlabel('')

x_coord = filtrado['Gold'].iloc[0]
y_coord = filtrado['Sport'].iloc[0]

ax.annotate(filtrado['Gold'][9], xy=(x_coord,y_coord), va = 'center', ha='center',fontweight='light', fontfamily='monospace',fontsize=10, color='white',rotation=0)

plt.tight_layout()
 526:
filtrado = medalhas_ouro.query('Age <= 15').groupby(['Sport','Medal'])['Medal'].count().unstack().fillna(0).astype(int).reset_index().sort_values(by='Gold', ascending=False)

my_range=range(1,len(filtrado[:15]['Sport'])+1)
my_range = range(len(filtrado))

fig, ax = plt.subplots(figsize=(10, 5), facecolor=cor_fundo_gold)

plt.hlines(y=my_range, xmin=0, xmax=filtrado['Gold'], color='gray')
plt.plot(filtrado['Gold'], my_range, "o",markersize=10, color='#244747')
plt.plot(filtrado['Gold'].iloc[9], filtrado.iloc['Sport'], "o", markersize=20, color='#B73832')


ax.set_facecolor(cor_fundo_gold)

Xstart, Xend = ax.get_xlim()
Ystart, Yend = ax.get_ylim()

ax.tick_params(axis=u'both', which=u'both',length=0)
ax.set_xlabel("Total Medals",fontfamily='monospace',loc='left',color='gray')
ax.set_axisbelow(True)

for s in ['top','right','bottom','left']:
    ax.spines[s].set_visible(False)


ax.text(0,Yend+2.3, 'Olympic Total Medals by Country: Tokyo 2021', fontsize=15,fontweight='bold',fontfamily='serif',color='#323232')

plt.yticks(my_range, filtrado['Sport'])
plt.xlabel('')

x_coord = filtrado['Gold'].iloc[0]
y_coord = filtrado['Sport'].iloc[0]

ax.annotate(filtrado['Gold'][9], xy=(x_coord,y_coord), va = 'center', ha='center',fontweight='light', fontfamily='monospace',fontsize=10, color='white',rotation=0)

plt.tight_layout()
 527:
filtrado = medalhas_ouro.query('Age <= 15').groupby(['Sport','Medal'])['Medal'].count().unstack().fillna(0).astype(int).reset_index().sort_values(by='Gold', ascending=False)

my_range=range(1,len(filtrado[:15]['Sport'])+1)
my_range = range(len(filtrado))

fig, ax = plt.subplots(figsize=(10, 5), facecolor=cor_fundo_gold)

plt.hlines(y=my_range, xmin=0, xmax=filtrado['Gold'], color='gray')
plt.plot(filtrado['Gold'], my_range, "o",markersize=10, color='#244747')



ax.set_facecolor(cor_fundo_gold)

Xstart, Xend = ax.get_xlim()
Ystart, Yend = ax.get_ylim()

ax.tick_params(axis=u'both', which=u'both',length=0)
ax.set_xlabel("Total Medals",fontfamily='monospace',loc='left',color='gray')
ax.set_axisbelow(True)

for s in ['top','right','bottom','left']:
    ax.spines[s].set_visible(False)


ax.text(0,Yend+2.3, 'Olympic Total Medals by Country: Tokyo 2021', fontsize=15,fontweight='bold',fontfamily='serif',color='#323232')

plt.yticks(my_range, filtrado['Sport'])
plt.xlabel('')

x_coord = filtrado['Gold'].iloc[0]
y_coord = filtrado['Sport'].iloc[0]

ax.annotate(filtrado['Gold'][9], xy=(x_coord,y_coord), va = 'center', ha='center',fontweight='light', fontfamily='monospace',fontsize=10, color='white',rotation=0)

plt.tight_layout()
 528:
filtrado = medalhas_ouro.query('Age <= 15').groupby(['Sport','Medal'])['Medal'].count().unstack().fillna(0).astype(int).reset_index().sort_values(by='Gold', ascending=False)

my_range=range(1,len(filtrado[:15]['Sport'])+1)
my_range = range(len(filtrado))

fig, ax = plt.subplots(figsize=(10, 5), facecolor=cor_fundo_gold)

plt.hlines(y=my_range, xmin=0, xmax=filtrado['Gold'], color='gray')
plt.plot(filtrado['Gold'], my_range, "o",markersize=10, color='#244747')

ax.set_facecolor(cor_fundo_gold)

Xstart, Xend = ax.get_xlim()
Ystart, Yend = ax.get_ylim()

ax.tick_params(axis=u'both', which=u'both',length=0)
ax.set_xlabel("Total Medals",fontfamily='monospace',loc='left',color='gray')
ax.set_axisbelow(True)

for s in ['top','right','bottom','left']:
    ax.spines[s].set_visible(False)


ax.text(0,Yend+2.3, 'Olympic Total Medals by Country: Tokyo 2021', fontsize=15,fontweight='bold',fontfamily='serif',color='#323232')

plt.yticks(my_range, filtrado['Sport'])
plt.xlabel('')

x_coord = filtrado['Gold'].iloc[0]
y_coord = filtrado['Sport'].iloc[0]

ax.annotate(filtrado['Gold'][9], xy=(x_coord,y_coord), va = 'center', ha='center',fontweight='light', fontfamily='monospace',fontsize=10, color='white',rotation=0)

plt.tight_layout()
 529:
filtrado = medalhas_ouro.query('Age <= 15').groupby(['Sport','Medal'])['Medal'].count().unstack().fillna(0).astype(int).reset_index().sort_values(by='Gold', ascending=False)

my_range=range(1,len(filtrado[:15]['Sport'])+1)

fig, ax = plt.subplots(figsize=(10, 5), facecolor=cor_fundo_gold)

plt.hlines(y=my_range, xmin=0, xmax=filtrado['Gold'], color='gray')
plt.plot(filtrado['Gold'], my_range, "o",markersize=10, color='#244747')

ax.set_facecolor(cor_fundo_gold)

Xstart, Xend = ax.get_xlim()
Ystart, Yend = ax.get_ylim()

ax.tick_params(axis=u'both', which=u'both',length=0)
ax.set_xlabel("Total Medals",fontfamily='monospace',loc='left',color='gray')
ax.set_axisbelow(True)

for s in ['top','right','bottom','left']:
    ax.spines[s].set_visible(False)


ax.text(0,Yend+2.3, 'Olympic Total Medals by Country: Tokyo 2021', fontsize=15,fontweight='bold',fontfamily='serif',color='#323232')

plt.yticks(my_range, filtrado['Sport'])
plt.xlabel('')

x_coord = filtrado['Gold'].iloc[0]
y_coord = filtrado['Sport'].iloc[0]

ax.annotate(filtrado['Gold'][9], xy=(x_coord,y_coord), va = 'center', ha='center',fontweight='light', fontfamily='monospace',fontsize=10, color='white',rotation=0)

plt.tight_layout()
 530:
filtrado = medalhas_ouro.query('Age <= 15').groupby(['Sport','Medal'])['Medal'].count().unstack().fillna(0).astype(int).reset_index().sort_values(by='Gold', ascending=False)

my_range=range(1,len(filtrado[:15]['Sport'])+1)

fig, ax = plt.subplots(figsize=(10, 5), facecolor=cor_fundo_gold)

plt.hlines(y=my_range, xmin=0, xmax=filtrado['Gold'], color='gray')
plt.plot(filtrado['Gold'], my_range, "o",markersize=10, color='#244747')
plt.plot(filtrado['Gold'].iloc[9], my_range[9], "o", markersize=20, color='#B73832')

ax.set_facecolor(cor_fundo_gold)

Xstart, Xend = ax.get_xlim()
Ystart, Yend = ax.get_ylim()

ax.tick_params(axis=u'both', which=u'both',length=0)
ax.set_xlabel("Total Medals",fontfamily='monospace',loc='left',color='gray')
ax.set_axisbelow(True)

for s in ['top','right','bottom','left']:
    ax.spines[s].set_visible(False)


ax.text(0,Yend+2.3, 'Olympic Total Medals by Country: Tokyo 2021', fontsize=15,fontweight='bold',fontfamily='serif',color='#323232')

plt.yticks(my_range, filtrado['Sport'])
plt.xlabel('')

x_coord = filtrado['Gold'].iloc[0]
y_coord = filtrado['Sport'].iloc[0]

ax.annotate(filtrado['Gold'][9], xy=(x_coord,y_coord), va = 'center', ha='center',fontweight='light', fontfamily='monospace',fontsize=10, color='white',rotation=0)

plt.tight_layout()
 531:
filtrado = medalhas_ouro.query('Age <= 15').groupby(['Sport','Medal'])['Medal'].count().unstack().fillna(0).astype(int).reset_index().sort_values(by='Gold', ascending=False)

my_range=range(1,len(filtrado[:15]['Sport'])+1)

fig, ax = plt.subplots(figsize=(10, 5), facecolor=cor_fundo_gold)

plt.hlines(y=my_range, xmin=0, xmax=filtrado['Gold'], color='gray')
plt.plot(filtrado['Gold'], my_range, "o",markersize=10, color='#244747')


ax.set_facecolor(cor_fundo_gold)

Xstart, Xend = ax.get_xlim()
Ystart, Yend = ax.get_ylim()

ax.tick_params(axis=u'both', which=u'both',length=0)
ax.set_xlabel("Total Medals",fontfamily='monospace',loc='left',color='gray')
ax.set_axisbelow(True)

for s in ['top','right','bottom','left']:
    ax.spines[s].set_visible(False)


ax.text(0,Yend+2.3, 'Olympic Total Medals by Country: Tokyo 2021', fontsize=15,fontweight='bold',fontfamily='serif',color='#323232')

plt.yticks(my_range, filtrado['Sport'])
plt.xlabel('')

x_coord = filtrado['Gold'].iloc[0]
y_coord = filtrado['Sport'].iloc[0]

ax.annotate(filtrado['Gold'][9], xy=(x_coord,y_coord), va = 'center', ha='center',fontweight='light', fontfamily='monospace',fontsize=10, color='white',rotation=0)

plt.tight_layout()
 532:
filtrado = medalhas_ouro.query('Age <= 15').groupby(['Sport','Medal'])['Medal'].count().unstack().fillna(0).astype(int).reset_index().sort_values(by='Gold', ascending=False)

my_range=range(1,len(filtrado[:15]['Sport'])+1)

fig, ax = plt.subplots(figsize=(10, 5), facecolor=cor_fundo_gold)

plt.hlines(y=filtrado['Sport'], xmin=0, xmax=filtrado['Gold'], color='gray')
plt.plot(filtrado['Gold'], filtrado['Sport'], "o",markersize=10, color='#244747')
plt.plot(filtrado['Gold'][9], filtrado['Sport'][9], "o",markersize=20,color='#B73832')

ax.set_facecolor(cor_fundo_gold)

Xstart, Xend = ax.get_xlim()
Ystart, Yend = ax.get_ylim()

ax.tick_params(axis=u'both', which=u'both',length=0)
ax.set_xlabel("Total Medals",fontfamily='monospace',loc='left',color='gray')
ax.set_axisbelow(True)

for s in ['top','right','bottom','left']:
    ax.spines[s].set_visible(False)


ax.text(0,Yend+2.3, 'Olympic Total Medals by Country: Tokyo 2021', fontsize=15,fontweight='bold',fontfamily='serif',color='#323232')

plt.yticks(my_range, filtrado['Sport'])
plt.xlabel('')

x_coord = filtrado['Gold'].iloc[0]
y_coord = filtrado['Sport'].iloc[0]

ax.annotate(filtrado['Gold'][9], xy=(x_coord-0.5,y_coord), va = 'center', ha='left',fontweight='light', fontfamily='monospace',fontsize=10, color='white',rotation=0)

ax.set_yticklabels(filtrado['Sport'], ha='right', position=(0, 0.02))

plt.tight_layout()
 533:
filtrado = medalhas_ouro.query('Age <= 15').groupby(['Sport','Medal'])['Medal'].count().unstack().fillna(0).astype(int).reset_index().sort_values(by='Gold', ascending=False)

my_range=range(1,len(filtrado[:15]['Sport'])+1)

fig, ax = plt.subplots(figsize=(10, 5), facecolor=cor_fundo_gold)

plt.hlines(y=filtrado['Sport'], xmin=0, xmax=filtrado['Gold'], color='gray')
plt.plot(filtrado['Gold'], my_range, "o",markersize=10, color='#244747')
plt.plot(filtrado['Gold'][9], filtrado['Sport'][9], "o",markersize=20,color='#B73832')

ax.set_facecolor(cor_fundo_gold)

Xstart, Xend = ax.get_xlim()
Ystart, Yend = ax.get_ylim()

ax.tick_params(axis=u'both', which=u'both',length=0)
ax.set_xlabel("Total Medals",fontfamily='monospace',loc='left',color='gray')
ax.set_axisbelow(True)

for s in ['top','right','bottom','left']:
    ax.spines[s].set_visible(False)


ax.text(0,Yend+2.3, 'Olympic Total Medals by Country: Tokyo 2021', fontsize=15,fontweight='bold',fontfamily='serif',color='#323232')

plt.yticks(my_range, filtrado['Sport'])
plt.xlabel('')

x_coord = filtrado['Gold'].iloc[0]
y_coord = filtrado['Sport'].iloc[0]

ax.annotate(filtrado['Gold'][9], xy=(x_coord-0.5,y_coord), va = 'center', ha='left',fontweight='light', fontfamily='monospace',fontsize=10, color='white',rotation=0)

ax.set_yticklabels(filtrado['Sport'], ha='right', position=(0, 0.02))

plt.tight_layout()
 534:
filtrado = medalhas_ouro.query('Age <= 15').groupby(['Sport','Medal'])['Medal'].count().unstack().fillna(0).astype(int).reset_index().sort_values(by='Gold', ascending=False)

my_range=range(1,len(filtrado[:15]['Sport'])+1)

fig, ax = plt.subplots(figsize=(10, 5), facecolor=cor_fundo_gold)

plt.hlines(y=my_range, xmin=0, xmax=filtrado['Gold'], color='gray')
plt.plot(filtrado['Gold'], my_range, "o",markersize=10, color='#244747')
plt.plot(filtrado['Gold'][9], filtrado['Sport'][9], "o",markersize=20,color='#B73832')

ax.set_facecolor(cor_fundo_gold)

Xstart, Xend = ax.get_xlim()
Ystart, Yend = ax.get_ylim()

ax.tick_params(axis=u'both', which=u'both',length=0)
ax.set_xlabel("Total Medals",fontfamily='monospace',loc='left',color='gray')
ax.set_axisbelow(True)

for s in ['top','right','bottom','left']:
    ax.spines[s].set_visible(False)


ax.text(0,Yend+2.3, 'Olympic Total Medals by Country: Tokyo 2021', fontsize=15,fontweight='bold',fontfamily='serif',color='#323232')

plt.yticks(my_range, filtrado['Sport'])
plt.xlabel('')

x_coord = filtrado['Gold'].iloc[0]
y_coord = filtrado['Sport'].iloc[0]

ax.annotate(filtrado['Gold'][9], xy=(x_coord-0.5,y_coord), va = 'center', ha='left',fontweight='light', fontfamily='monospace',fontsize=10, color='white',rotation=0)

ax.set_yticklabels(filtrado['Sport'], ha='right', position=(0, 0.02))

plt.tight_layout()
 535:
filtrado = medalhas_ouro.query('Age <= 15').groupby(['Sport','Medal'])['Medal'].count().unstack().fillna(0).astype(int).reset_index().sort_values(by='Gold', ascending=False)

my_range=range(1,len(filtrado[:15]['Sport'])+1)

fig, ax = plt.subplots(figsize=(10, 5), facecolor=cor_fundo_gold)

plt.hlines(y=my_range, xmin=0, xmax=filtrado['Gold'], color='gray')
plt.plot(filtrado['Gold'], my_range, "o",markersize=10, color='#244747')
plt.plot(filtrado['Gold'][9], filtrado['Sport'][9], "o",markersize=20,color='#B73832')

filtrado['Gold'][9]
 536:
filtrado = medalhas_ouro.query('Age <= 15').groupby(['Sport','Medal'])['Medal'].count().unstack().fillna(0).astype(int).reset_index().sort_values(by='Gold', ascending=False)

my_range=range(1,len(filtrado[:15]['Sport'])+1)

fig, ax = plt.subplots(figsize=(10, 5), facecolor=cor_fundo_gold)

plt.hlines(y=my_range, xmin=0, xmax=filtrado['Gold'], color='gray')
plt.plot(filtrado['Gold'], my_range, "o",markersize=10, color='#244747')
plt.plot(filtrado['Gold'][9], filtrado['Sport'][9], "o",markersize=20,color='#B73832')

filtrado['Gold'][9]
my_range[9]
 537:
filtrado = medalhas_ouro.query('Age <= 15').groupby(['Sport','Medal'])['Medal'].count().unstack().fillna(0).astype(int).reset_index().sort_values(by='Gold', ascending=True)

my_range=range(1,len(filtrado[:15]['Sport'])+1)

fig, ax = plt.subplots(figsize=(10, 5), facecolor=cor_fundo_gold)

plt.hlines(y=my_range, xmin=0, xmax=filtrado['Gold'], color='gray')
plt.plot(filtrado['Gold'], my_range, "o",markersize=10, color='#244747')
plt.plot(filtrado['Gold'][9], filtrado['Sport'][9], "o",markersize=20,color='#B73832')

filtrado['Gold'][9]
my_range[9]
 538:
filtrado = medalhas_ouro.query('Age <= 15').groupby(['Sport','Medal'])['Medal'].count().unstack().fillna(0).astype(int).reset_index().sort_values(by='Gold', ascending=True)

my_range=range(1,len(filtrado[:15]['Sport'])+1)

fig, ax = plt.subplots(figsize=(10, 5), facecolor=cor_fundo_gold)

plt.hlines(y=my_range, xmin=0, xmax=filtrado['Gold'], color='gray')
plt.plot(filtrado['Gold'], my_range, "o",markersize=10, color='#244747')
plt.plot(filtrado['Gold'][0], filtrado['Sport'][9], "o",markersize=20,color='#B73832')

filtrado['Gold'][9]
my_range[9]
 539:
filtrado = medalhas_ouro.query('Age <= 15').groupby(['Sport','Medal'])['Medal'].count().unstack().fillna(0).astype(int).reset_index().sort_values(by='Gold', ascending=True)

my_range=range(1,len(filtrado[:15]['Sport'])+1)

fig, ax = plt.subplots(figsize=(10, 5), facecolor=cor_fundo_gold)

plt.hlines(y=my_range, xmin=0, xmax=filtrado['Gold'], color='gray')
plt.plot(filtrado['Gold'], my_range, "o",markersize=10, color='#244747')
plt.plot(filtrado['Gold'][0], filtrado['Sport'][9], "o",markersize=20,color='#B73832')

filtrado['Gold'][0]
 540:
filtrado = medalhas_ouro.query('Age <= 15').groupby(['Sport','Medal'])['Medal'].count().unstack().fillna(0).astype(int).reset_index().sort_values(by='Gold', ascending=True)

my_range=range(1,len(filtrado[:15]['Sport'])+1)

fig, ax = plt.subplots(figsize=(10, 5), facecolor=cor_fundo_gold)

plt.hlines(y=my_range, xmin=0, xmax=filtrado['Gold'], color='gray')
plt.plot(filtrado['Gold'], my_range, "o",markersize=10, color='#244747')
plt.plot(filtrado['Gold'][0], filtrado['Sport'][9], "o",markersize=20,color='#B73832')

filtrado
 541:
filtrado = medalhas_ouro.query('Age <= 15').groupby(['Sport','Medal'])['Medal'].count().unstack().fillna(0).astype(int).reset_index().sort_values(by='Gold', ascending=True)

my_range=range(1,len(filtrado[:15]['Sport'])+1)

fig, ax = plt.subplots(figsize=(10, 5), facecolor=cor_fundo_gold)

plt.hlines(y=my_range, xmin=0, xmax=filtrado['Gold'], color='gray')
plt.plot(filtrado['Gold'], my_range, "o",markersize=10, color='#244747')
plt.plot(filtrado['Gold'][0], filtrado['Sport'][9], "o",markersize=20,color='#B73832')

filtrado['Gold'][9]
 542:
filtrado = medalhas_ouro.query('Age <= 15').groupby(['Sport','Medal'])['Medal'].count().unstack().fillna(0).astype(int).reset_index().sort_values(by='Gold', ascending=True)

my_range=range(1,len(filtrado[:15]['Sport'])+1)

fig, ax = plt.subplots(figsize=(10, 5), facecolor=cor_fundo_gold)

plt.hlines(y=my_range, xmin=0, xmax=filtrado['Gold'], color='gray')
plt.plot(filtrado['Gold'], my_range, "o",markersize=10, color='#244747')
plt.plot(filtrado['Gold'][0], filtrado['Sport'][9], "o",markersize=20,color='#B73832')

filtrado['Gold'][9]
filtrado['Sport'][9]
 543:
filtrado = medalhas_ouro.query('Age <= 15').groupby(['Sport','Medal'])['Medal'].count().unstack().fillna(0).astype(int).reset_index().sort_values(by='Gold', ascending=True)

my_range=range(1,len(filtrado[:15]['Sport'])+1)

fig, ax = plt.subplots(figsize=(10, 5), facecolor=cor_fundo_gold)

plt.hlines(y=my_range, xmin=0, xmax=filtrado['Gold'], color='gray')
plt.plot(filtrado['Gold'], my_range, "o",markersize=10, color='#244747')
plt.plot(filtrado['Gold'][0], filtrado['Sport'][9], "o",markersize=20,color='#B73832')

filtrado['Gold'][9]
my_range[9]
 544:
filtrado = medalhas_ouro.query('Age <= 15').groupby(['Sport','Medal'])['Medal'].count().unstack().fillna(0).astype(int).reset_index().sort_values(by='Gold', ascending=True)

my_range=range(1,len(filtrado[:15]['Sport'])+1)

fig, ax = plt.subplots(figsize=(10, 5), facecolor=cor_fundo_gold)

plt.hlines(y=my_range, xmin=0, xmax=filtrado['Gold'], color='gray')
plt.plot(filtrado['Gold'], my_range, "o",markersize=10, color='#244747')
plt.plot(filtrado['Gold'][0], filtrado['Sport'][9], "o",markersize=20,color='#B73832')

filtrado['Gold'][9]
my_range[0]
 545:
filtrado = medalhas_ouro.query('Age <= 15').groupby(['Sport','Medal'])['Medal'].count().unstack().fillna(0).astype(int).reset_index().sort_values(by='Gold', ascending=True)

my_range=range(1,len(filtrado[:15]['Sport'])+1)

fig, ax = plt.subplots(figsize=(10, 5), facecolor=cor_fundo_gold)

plt.hlines(y=my_range, xmin=0, xmax=filtrado['Gold'], color='gray')
plt.plot(filtrado['Gold'], my_range, "o",markersize=10, color='#244747')
plt.plot(filtrado['Gold'][0], my_range[0], "o",markersize=20,color='#B73832')

filtrado['Gold'][9]
 546:
filtrado = medalhas_ouro.query('Age <= 15').groupby(['Sport','Medal'])['Medal'].count().unstack().fillna(0).astype(int).reset_index().sort_values(by='Gold', ascending=True)

my_range=range(1,len(filtrado[:15]['Sport'])+1)

fig, ax = plt.subplots(figsize=(10, 5), facecolor=cor_fundo_gold)

plt.hlines(y=my_range, xmin=0, xmax=filtrado['Gold'], color='gray')
plt.plot(filtrado['Gold'], my_range, "o",markersize=10, color='#244747')
plt.plot(filtrado['Gold'][9], my_range[0], "o",markersize=20,color='#B73832')

filtrado['Gold'][9]
 547:
filtrado = medalhas_ouro.query('Age <= 15').groupby(['Sport','Medal'])['Medal'].count().unstack().fillna(0).astype(int).reset_index().sort_values(by='Gold', ascending=True)

my_range=range(1,len(filtrado[:15]['Sport'])+1)

fig, ax = plt.subplots(figsize=(10, 5), facecolor=cor_fundo_gold)

plt.hlines(y=my_range, xmin=0, xmax=filtrado['Gold'], color='gray')
plt.plot(filtrado['Gold'], my_range, "o",markersize=10, color='#244747')
plt.plot(filtrado['Gold'][9], my_range[9], "o",markersize=20,color='#B73832')

filtrado['Gold'][9]
 548:
filtrado = medalhas_ouro.query('Age <= 15').groupby(['Sport','Medal'])['Medal'].count().unstack().fillna(0).astype(int).reset_index().sort_values(by='Gold', ascending=True)

my_range=range(1,len(filtrado[:15]['Sport'])+1)

fig, ax = plt.subplots(figsize=(10, 5), facecolor=cor_fundo_gold)

plt.hlines(y=my_range, xmin=0, xmax=filtrado['Gold'], color='gray')
plt.plot(filtrado['Gold'], my_range, "o",markersize=10, color='#244747')
plt.plot(filtrado['Gold'][9], my_range[9], "o",markersize=20,color='#B73832')


ax.set_facecolor(cor_fundo_gold)

Xstart, Xend = ax.get_xlim()
Ystart, Yend = ax.get_ylim()

ax.tick_params(axis=u'both', which=u'both',length=0)
ax.set_xlabel("Total Medals",fontfamily='monospace',loc='left',color='gray')
ax.set_axisbelow(True)

for s in ['top','right','bottom','left']:
    ax.spines[s].set_visible(False)


ax.text(0,Yend+2.3, 'Olympic Total Medals by Country: Tokyo 2021', fontsize=15,fontweight='bold',fontfamily='serif',color='#323232')

plt.yticks(my_range, filtrado['Sport'])
plt.xlabel('')

x_coord = filtrado['Gold'].iloc[0]
y_coord = filtrado['Sport'].iloc[0]

ax.annotate(filtrado['Gold'][9], xy=(x_coord-0.5,y_coord), va = 'center', ha='left',fontweight='light', fontfamily='monospace',fontsize=10, color='white',rotation=0)

ax.set_yticklabels(filtrado['Sport'], ha='right', position=(0, 0.02))

plt.tight_layout()
 549:
filtrado = medalhas_ouro.query('Age <= 15').groupby(['Sport','Medal'])['Medal'].count().unstack().fillna(0).astype(int).reset_index().sort_values(by='Gold', ascending=True)

my_range=range(1,len(filtrado[:15]['Sport'])+1)

fig, ax = plt.subplots(figsize=(10, 5), facecolor=cor_fundo_gold)

plt.hlines(y=my_range, xmin=0, xmax=filtrado['Gold'], color='gray')
plt.plot(filtrado['Gold'], my_range, "o",markersize=10, color='#244747')
plt.plot(filtrado['Gold'][9], my_range[9], "o",markersize=20,color='#B73832')


ax.set_facecolor(cor_fundo_gold)
 550:
filtrado = medalhas_ouro.query('Age <= 15').groupby(['Sport','Medal'])['Medal'].count().unstack().fillna(0).astype(int).reset_index().sort_values(by='Gold', ascending=True)

my_range=range(1,len(filtrado[:15]['Sport'])+1)

fig, ax = plt.subplots(figsize=(10, 5), facecolor=cor_fundo_gold)

plt.hlines(y=my_range, xmin=0, xmax=filtrado['Gold'], color='gray')
plt.plot(filtrado['Gold'], my_range, "o",markersize=10, color='#244747')
plt.plot(filtrado['Gold'][9], my_range[9], "o",markersize=20,color='#B73832')
 551:
filtrado = medalhas_ouro.query('Age <= 15').groupby(['Sport','Medal'])['Medal'].count().unstack().fillna(0).astype(int).reset_index().sort_values(by='Gold', ascending=True)

my_range=range(1,len(filtrado[:15]['Sport'])+1)

fig, ax = plt.subplots(figsize=(10, 5), facecolor=cor_fundo_gold)

plt.hlines(y=my_range, xmin=0, xmax=filtrado['Gold'], color='gray')
plt.plot(filtrado['Gold'], my_range, "o",markersize=10, color='#244747')
plt.plot(filtrado['Gold'][9], my_range[9], "o",markersize=20,color='#B73832')

ax.set_facecolor(cor_fundo_gold)
 552:
filtrado = medalhas_ouro.query('Age <= 15').groupby(['Sport','Medal'])['Medal'].count().unstack().fillna(0).astype(int).reset_index().sort_values(by='Gold', ascending=True)

my_range=range(1,len(filtrado[:15]['Sport'])+1)

fig, ax = plt.subplots(figsize=(10, 5), facecolor=cor_fundo_gold)

plt.hlines(y=filtrado[my_range], xmin=0, xmax=filtrado['Gold'], color='gray')
plt.plot(filtrado['Gold'], my_range, "o",markersize=10, color='#244747')
plt.plot(filtrado['Gold'][9], my_range[9], "o",markersize=20,color='#B73832')

ax.set_facecolor(cor_fundo_gold)
 553:
filtrado = medalhas_ouro.query('Age <= 15').groupby(['Sport','Medal'])['Medal'].count().unstack().fillna(0).astype(int).reset_index().sort_values(by='Gold', ascending=True)

my_range=range(1,len(filtrado[:15]['Sport'])+1)

fig, ax = plt.subplots(figsize=(10, 5), facecolor=cor_fundo_gold)

plt.hlines(y=filtrado['Sport'][my_range], xmin=0, xmax=filtrado['Gold'], color='gray')
plt.plot(filtrado['Gold'], my_range, "o",markersize=10, color='#244747')
plt.plot(filtrado['Gold'][9], my_range[9], "o",markersize=20,color='#B73832')

ax.set_facecolor(cor_fundo_gold)
 554:
filtrado = medalhas_ouro.query('Age <= 15').groupby(['Sport','Medal'])['Medal'].count().unstack().fillna(0).astype(int).reset_index().sort_values(by='Gold', ascending=True)

my_range=range(1,len(filtrado[:15]['Sport'])+1)

fig, ax = plt.subplots(figsize=(10, 5), facecolor=cor_fundo_gold)

plt.hlines(y=filtrado['Sport'], xmin=0, xmax=filtrado['Gold'], color='gray')
plt.plot(filtrado['Gold'], my_range, "o",markersize=10, color='#244747')
plt.plot(filtrado['Gold'][9], my_range[9], "o",markersize=20,color='#B73832')

ax.set_facecolor(cor_fundo_gold)
 555:
filtrado = medalhas_ouro.query('Age <= 15').groupby(['Sport','Medal'])['Medal'].count().unstack().fillna(0).astype(int).reset_index().sort_values(by='Gold', ascending=True)

my_range=range(1,len(filtrado[:15]['Sport'])+1)

fig, ax = plt.subplots(figsize=(10, 5), facecolor=cor_fundo_gold)

plt.hlines(y=filtrado['Sport'], xmin=0, xmax=filtrado['Gold'], color='gray')
plt.plot(filtrado['Gold'], filtrado['Sport'], "o",markersize=10, color='#244747')
plt.plot(filtrado['Gold'][9], my_range[9], "o",markersize=20,color='#B73832')

ax.set_facecolor(cor_fundo_gold)
 556:
filtrado = medalhas_ouro.query('Age <= 15').groupby(['Sport','Medal'])['Medal'].count().unstack().fillna(0).astype(int).reset_index().sort_values(by='Gold', ascending=True)

my_range=range(1,len(filtrado[:15]['Sport'])+1)

fig, ax = plt.subplots(figsize=(10, 5), facecolor=cor_fundo_gold)

plt.hlines(y=filtrado['Sport'], xmin=0, xmax=filtrado['Gold'], color='gray')
plt.plot(filtrado['Gold'], filtrado['Sport'], "o",markersize=10, color='#244747')
plt.plot(filtrado['Gold'][9], filtrado['Sport'][9], "o",markersize=20,color='#B73832')

ax.set_facecolor(cor_fundo_gold)
 557:
filtrado = medalhas_ouro.query('Age <= 15').groupby(['Sport','Medal'])['Medal'].count().unstack().fillna(0).astype(int).reset_index().sort_values(by='Gold', ascending=True)

my_range=range(1,len(filtrado[:15]['Sport'])+1)

fig, ax = plt.subplots(figsize=(10, 5), facecolor=cor_fundo_gold)

plt.hlines(y=filtrado['Sport'], xmin=0, xmax=filtrado['Gold'], color='gray')
plt.plot(filtrado['Gold'], filtrado['Sport'], "o",markersize=10, color='#244747')
plt.plot(filtrado['Gold'][9], filtrado['Sport'][9], "o",markersize=20,color='#B73832')

ax.set_facecolor(cor_fundo_gold)

Xstart, Xend = ax.get_xlim()
Ystart, Yend = ax.get_ylim()
 558:
filtrado = medalhas_ouro.query('Age <= 15').groupby(['Sport','Medal'])['Medal'].count().unstack().fillna(0).astype(int).reset_index().sort_values(by='Gold', ascending=True)

my_range=range(1,len(filtrado[:15]['Sport'])+1)

fig, ax = plt.subplots(figsize=(10, 5), facecolor=cor_fundo_gold)

plt.hlines(y=filtrado['Sport'], xmin=0, xmax=filtrado['Gold'], color='gray')
plt.plot(filtrado['Gold'], filtrado['Sport'], "o",markersize=10, color='#244747')
plt.plot(filtrado['Gold'][9], filtrado['Sport'][9], "o",markersize=20,color='#B73832')

ax.set_facecolor(cor_fundo_gold)

Xstart, Xend = ax.get_xlim()
Ystart, Yend = ax.get_ylim()

ax.tick_params(axis=u'both', which=u'both',length=0)
ax.set_xlabel("Total Medals",fontfamily='monospace',loc='left',color='gray')
ax.set_axisbelow(True)
 559:
filtrado = medalhas_ouro.query('Age <= 15').groupby(['Sport','Medal'])['Medal'].count().unstack().fillna(0).astype(int).reset_index().sort_values(by='Gold', ascending=True)

my_range=range(1,len(filtrado[:15]['Sport'])+1)

fig, ax = plt.subplots(figsize=(10, 5), facecolor=cor_fundo_gold)

plt.hlines(y=filtrado['Sport'], xmin=0, xmax=filtrado['Gold'], color='gray')
plt.plot(filtrado['Gold'], filtrado['Sport'], "o",markersize=10, color='#244747')
plt.plot(filtrado['Gold'][9], filtrado['Sport'][9], "o",markersize=20,color='#B73832')

ax.set_facecolor(cor_fundo_gold)

Xstart, Xend = ax.get_xlim()
Ystart, Yend = ax.get_ylim()

ax.tick_params(axis=u'both', which=u'both',length=0)
ax.set_xlabel("Total Medals",fontfamily='monospace',loc='left',color='gray')
ax.set_axisbelow(True)

for s in ['top','right','bottom','left']:
    ax.spines[s].set_visible(False)
 560:
filtrado = medalhas_ouro.query('Age <= 15').groupby(['Sport','Medal'])['Medal'].count().unstack().fillna(0).astype(int).reset_index().sort_values(by='Gold', ascending=True)

my_range=range(1,len(filtrado[:15]['Sport'])+1)

fig, ax = plt.subplots(figsize=(10, 5), facecolor=cor_fundo_gold)

plt.hlines(y=filtrado['Sport'], xmin=0, xmax=filtrado['Gold'], color='gray')
plt.plot(filtrado['Gold'], filtrado['Sport'], "o",markersize=10, color='#244747')
plt.plot(filtrado['Gold'][9], filtrado['Sport'][9], "o",markersize=20,color='#B73832')

ax.set_facecolor(cor_fundo_gold)

Xstart, Xend = ax.get_xlim()
Ystart, Yend = ax.get_ylim()

ax.tick_params(axis=u'both', which=u'both',length=0)
ax.set_xlabel("Total Medals",fontfamily='monospace',loc='left',color='gray')
ax.set_axisbelow(True)

for s in ['top','right','bottom','left']:
    ax.spines[s].set_visible(False)

ax.text(0,Yend+2.3, 'Olympic Total Medals by Country: Tokyo 2021', fontsize=15,fontweight='bold',fontfamily='serif',color='#323232')
 561:
filtrado = medalhas_ouro.query('Age <= 15').groupby(['Sport','Medal'])['Medal'].count().unstack().fillna(0).astype(int).reset_index().sort_values(by='Gold', ascending=True)

my_range=range(1,len(filtrado[:15]['Sport'])+1)

fig, ax = plt.subplots(figsize=(10, 5), facecolor=cor_fundo_gold)

plt.hlines(y=filtrado['Sport'], xmin=0, xmax=filtrado['Gold'], color='gray')
plt.plot(filtrado['Gold'], filtrado['Sport'], "o",markersize=10, color='#244747')
plt.plot(filtrado['Gold'][9], filtrado['Sport'][9], "o",markersize=20,color='#B73832')

ax.set_facecolor(cor_fundo_gold)

Xstart, Xend = ax.get_xlim()
Ystart, Yend = ax.get_ylim()

ax.tick_params(axis=u'both', which=u'both',length=0)
ax.set_xlabel("Total Medals",fontfamily='monospace',loc='left',color='gray')
ax.set_axisbelow(True)

for s in ['top','right','bottom','left']:
    ax.spines[s].set_visible(False)

ax.text(0,Yend+2.3, 'Olympic Total Medals by Country: Tokyo 2021', fontsize=15,fontweight='bold',fontfamily='serif',color='#323232')
plt.yticks(my_range, filtrado['Sport'])
plt.xlabel('')
 562:
filtrado = medalhas_ouro.query('Age <= 15').groupby(['Sport','Medal'])['Medal'].count().unstack().fillna(0).astype(int).reset_index().sort_values(by='Gold', ascending=True)

my_range=range(1,len(filtrado[:15]['Sport'])+1)

fig, ax = plt.subplots(figsize=(10, 5), facecolor=cor_fundo_gold)

plt.hlines(y=filtrado['Sport'], xmin=0, xmax=filtrado['Gold'], color='gray')
plt.plot(filtrado['Gold'], filtrado['Sport'], "o",markersize=10, color='#244747')
plt.plot(filtrado['Gold'][9], filtrado['Sport'][9], "o",markersize=20,color='#B73832')

ax.set_facecolor(cor_fundo_gold)

Xstart, Xend = ax.get_xlim()
Ystart, Yend = ax.get_ylim()

ax.tick_params(axis=u'both', which=u'both',length=0)
ax.set_xlabel("Total Medals",fontfamily='monospace',loc='left',color='gray')
ax.set_axisbelow(True)

for s in ['top','right','bottom','left']:
    ax.spines[s].set_visible(False)

ax.text(0,Yend+2.3, 'Olympic Total Medals by Country: Tokyo 2021', fontsize=15,fontweight='bold',fontfamily='serif',color='#323232')
plt.yticks(filtrado['Sport'])
plt.xlabel('')
 563:
filtrado = medalhas_ouro.query('Age <= 15').groupby(['Sport','Medal'])['Medal'].count().unstack().fillna(0).astype(int).reset_index().sort_values(by='Gold', ascending=True)

my_range=range(1,len(filtrado[:15]['Sport'])+1)

fig, ax = plt.subplots(figsize=(10, 5), facecolor=cor_fundo_gold)

plt.hlines(y=filtrado['Sport'], xmin=0, xmax=filtrado['Gold'], color='gray')
plt.plot(filtrado['Gold'], filtrado['Sport'], "o",markersize=10, color='#244747')
plt.plot(filtrado['Gold'][9], filtrado['Sport'][9], "o",markersize=20,color='#B73832')

ax.set_facecolor(cor_fundo_gold)

Xstart, Xend = ax.get_xlim()
Ystart, Yend = ax.get_ylim()

ax.tick_params(axis=u'both', which=u'both',length=0)
ax.set_xlabel("Total Medals",fontfamily='monospace',loc='left',color='gray')
ax.set_axisbelow(True)

for s in ['top','right','bottom','left']:
    ax.spines[s].set_visible(False)

ax.text(0,Yend+2.3, 'Olympic Total Medals by Country: Tokyo 2021', fontsize=15,fontweight='bold',fontfamily='serif',color='#323232')
plt.xlabel('')
 564:
filtrado = medalhas_ouro.query('Age <= 15').groupby(['Sport','Medal'])['Medal'].count().unstack().fillna(0).astype(int).reset_index().sort_values(by='Gold', ascending=True)

my_range=range(1,len(filtrado[:15]['Sport'])+1)

fig, ax = plt.subplots(figsize=(10, 5), facecolor=cor_fundo_gold)

plt.hlines(y=filtrado['Sport'], xmin=0, xmax=filtrado['Gold'], color='gray')
plt.plot(filtrado['Gold'], filtrado['Sport'], "o",markersize=10, color='#244747')
plt.plot(filtrado['Gold'][9], filtrado['Sport'][9], "o",markersize=20,color='#B73832')

ax.set_facecolor(cor_fundo_gold)

Xstart, Xend = ax.get_xlim()
Ystart, Yend = ax.get_ylim()

ax.tick_params(axis=u'both', which=u'both',length=0)
ax.set_xlabel("Total Medals",fontfamily='monospace',loc='left',color='gray')
ax.set_axisbelow(True)

for s in ['top','right','bottom','left']:
    ax.spines[s].set_visible(False)

ax.text(0,Yend+2.3, 'Olympic Total Medals by Country: Tokyo 2021', fontsize=15,fontweight='bold',fontfamily='serif',color='#323232')
plt.xlabel('')

x_coord = filtrado['Gold'].iloc[0]
y_coord = filtrado['Sport'].iloc[0]

x_coord
y_coord
 565:
filtrado = medalhas_ouro.query('Age <= 15').groupby(['Sport','Medal'])['Medal'].count().unstack().fillna(0).astype(int).reset_index().sort_values(by='Gold', ascending=True)

my_range=range(1,len(filtrado[:15]['Sport'])+1)

fig, ax = plt.subplots(figsize=(10, 5), facecolor=cor_fundo_gold)

plt.hlines(y=filtrado['Sport'], xmin=0, xmax=filtrado['Gold'], color='gray')
plt.plot(filtrado['Gold'], filtrado['Sport'], "o",markersize=10, color='#244747')
plt.plot(filtrado['Gold'][9], filtrado['Sport'][9], "o",markersize=20,color='#B73832')

ax.set_facecolor(cor_fundo_gold)

Xstart, Xend = ax.get_xlim()
Ystart, Yend = ax.get_ylim()

ax.tick_params(axis=u'both', which=u'both',length=0)
ax.set_xlabel("Total Medals",fontfamily='monospace',loc='left',color='gray')
ax.set_axisbelow(True)

for s in ['top','right','bottom','left']:
    ax.spines[s].set_visible(False)

ax.text(0,Yend+2.3, 'Olympic Total Medals by Country: Tokyo 2021', fontsize=15,fontweight='bold',fontfamily='serif',color='#323232')
plt.xlabel('')

x_coord = filtrado['Gold'].iloc[0]
y_coord = filtrado['Sport'].iloc[0]

x_coord
 566:
filtrado = medalhas_ouro.query('Age <= 15').groupby(['Sport','Medal'])['Medal'].count().unstack().fillna(0).astype(int).reset_index().sort_values(by='Gold', ascending=True)

my_range=range(1,len(filtrado[:15]['Sport'])+1)

fig, ax = plt.subplots(figsize=(10, 5), facecolor=cor_fundo_gold)

plt.hlines(y=filtrado['Sport'], xmin=0, xmax=filtrado['Gold'], color='gray')
plt.plot(filtrado['Gold'], filtrado['Sport'], "o",markersize=10, color='#244747')
plt.plot(filtrado['Gold'][9], filtrado['Sport'][9], "o",markersize=20,color='#B73832')

ax.set_facecolor(cor_fundo_gold)

Xstart, Xend = ax.get_xlim()
Ystart, Yend = ax.get_ylim()

ax.tick_params(axis=u'both', which=u'both',length=0)
ax.set_xlabel("Total Medals",fontfamily='monospace',loc='left',color='gray')
ax.set_axisbelow(True)

for s in ['top','right','bottom','left']:
    ax.spines[s].set_visible(False)

ax.text(0,Yend+2.3, 'Olympic Total Medals by Country: Tokyo 2021', fontsize=15,fontweight='bold',fontfamily='serif',color='#323232')
plt.xlabel('')

x_coord = filtrado['Gold'].iloc[9]
y_coord = filtrado['Sport'].iloc[9]

ax.annotate(filtrado['Gold'][9], xy=(x_coord-0.5,y_coord), va = 'center', ha='left',fontweight='light', fontfamily='monospace',fontsize=10, color='white',rotation=0)
 567:
filtrado = medalhas_ouro.query('Age <= 15').groupby(['Sport','Medal'])['Medal'].count().unstack().fillna(0).astype(int).reset_index().sort_values(by='Gold', ascending=True)

my_range=range(1,len(filtrado[:15]['Sport'])+1)

fig, ax = plt.subplots(figsize=(10, 5), facecolor=cor_fundo_gold)

plt.hlines(y=filtrado['Sport'], xmin=0, xmax=filtrado['Gold'], color='gray')
plt.plot(filtrado['Gold'], filtrado['Sport'], "o",markersize=10, color='#244747')
plt.plot(filtrado['Gold'][9], filtrado['Sport'][9], "o",markersize=20,color='#B73832')

ax.set_facecolor(cor_fundo_gold)

Xstart, Xend = ax.get_xlim()
Ystart, Yend = ax.get_ylim()

ax.tick_params(axis=u'both', which=u'both',length=0)
ax.set_xlabel("Total Medals",fontfamily='monospace',loc='left',color='gray')
ax.set_axisbelow(True)

for s in ['top','right','bottom','left']:
    ax.spines[s].set_visible(False)

ax.text(0,Yend+2.3, 'Olympic Total Medals by Country: Tokyo 2021', fontsize=15,fontweight='bold',fontfamily='serif',color='#323232')
plt.xlabel('')

x_coord = filtrado['Gold'].iloc[9]
y_coord = filtrado['Sport'].iloc[9]

ax.annotate(filtrado['Gold'][9], xy=(x_coord,y_coord), va = 'center', ha='center',fontweight='light', fontfamily='monospace',fontsize=10, color='white',rotation=0)
 568:
filtrado = medalhas_ouro.query('Age <= 15').groupby(['Sport','Medal'])['Medal'].count().unstack().fillna(0).astype(int).reset_index().sort_values(by='Gold', ascending=True)

my_range=range(1,len(filtrado[:15]['Sport'])+1)

fig, ax = plt.subplots(figsize=(10, 5), facecolor=cor_fundo_gold)

plt.hlines(y=filtrado['Sport'], xmin=0, xmax=filtrado['Gold'], color='gray')
plt.plot(filtrado['Gold'], filtrado['Sport'], "o",markersize=10, color='#244747')
plt.plot(filtrado['Gold'][9], filtrado['Sport'][9], "o",markersize=20,color='#B73832')

ax.set_facecolor(cor_fundo_gold)

Xstart, Xend = ax.get_xlim()
Ystart, Yend = ax.get_ylim()

ax.tick_params(axis=u'both', which=u'both',length=0)
ax.set_xlabel("Total Medals",fontfamily='monospace',loc='left',color='gray')
ax.set_axisbelow(True)

for s in ['top','right','bottom','left']:
    ax.spines[s].set_visible(False)

ax.text(0,Yend+2.3, 'Olympic Total Medals by Country: Tokyo 2021', fontsize=15,fontweight='bold',fontfamily='serif',color='#323232')
plt.xlabel('')

x_coord = filtrado['Gold'].iloc[9]
y_coord = filtrado['Sport'].iloc[9]

ax.annotate(filtrado['Gold'][9], xy=(x_coord,y_coord), va = 'center', ha='center',fontweight='light', fontfamily='monospace',fontsize=10, color='white',rotation=0)

plt.tight_layout()
 569:
filtrado = medalhas_ouro.query('Age <= 15').groupby(['Sport','Medal'])['Medal'].count().unstack().fillna(0).astype(int).reset_index().sort_values(by='Gold', ascending=True)

my_range=range(1,len(filtrado[:15]['Sport'])+1)

fig, ax = plt.subplots(figsize=(10, 5), facecolor=cor_fundo_gold)

plt.hlines(y=filtrado['Sport'], xmin=0, xmax=filtrado['Gold'], color='gray')
plt.plot(filtrado['Gold'], filtrado['Sport'], "o",markersize=10, color=cor_dourada_clara)
plt.plot(filtrado['Gold'][9], filtrado['Sport'][9], "o",markersize=20,color='#B73832')

ax.set_facecolor(cor_fundo_gold)

Xstart, Xend = ax.get_xlim()
Ystart, Yend = ax.get_ylim()

ax.tick_params(axis=u'both', which=u'both',length=0)
ax.set_xlabel("Total Medals",fontfamily='monospace',loc='left',color='gray')
ax.set_axisbelow(True)

for s in ['top','right','bottom','left']:
    ax.spines[s].set_visible(False)

ax.text(0,Yend+2.3, 'Olympic Total Medals by Country: Tokyo 2021', fontsize=15,fontweight='bold',fontfamily='serif',color='#323232')
plt.xlabel('')

x_coord = filtrado['Gold'].iloc[9]
y_coord = filtrado['Sport'].iloc[9]

ax.annotate(filtrado['Gold'][9], xy=(x_coord,y_coord),
            va = 'center', ha='center',fontweight='light',
            fontfamily='monospace',fontsize=10, color='white',rotation=0)

plt.tight_layout()
 570:
filtrado = medalhas_ouro.query('Age <= 15').groupby(['Sport','Medal'])['Medal'].count().unstack().fillna(0).astype(int).reset_index().sort_values(by='Gold', ascending=True)

my_range=range(1,len(filtrado[:15]['Sport'])+1)

fig, ax = plt.subplots(figsize=(10, 5), facecolor=cor_fundo_gold)

plt.hlines(y=filtrado['Sport'], xmin=0, xmax=filtrado['Gold'], color='gray')
plt.plot(filtrado['Gold'], filtrado['Sport'], "o",markersize=10, color=cor_dourada_clara)
plt.plot(filtrado['Gold'][9], filtrado['Sport'][9], "o",markersize=20,color=cor_dourada)

ax.set_facecolor(cor_fundo_gold)

Xstart, Xend = ax.get_xlim()
Ystart, Yend = ax.get_ylim()

ax.tick_params(axis=u'both', which=u'both',length=0)
ax.set_xlabel("Total Medals",fontfamily='monospace',loc='left',color='gray')
ax.set_axisbelow(True)

for s in ['top','right','bottom','left']:
    ax.spines[s].set_visible(False)

ax.text(0,Yend+2.3, 'Olympic Total Medals by Country: Tokyo 2021', fontsize=15,fontweight='bold',fontfamily='serif',color='#323232')
plt.xlabel('')

x_coord = filtrado['Gold'].iloc[9]
y_coord = filtrado['Sport'].iloc[9]

ax.annotate(filtrado['Gold'][9], xy=(x_coord,y_coord),
            va = 'center', ha='center',fontweight='light',
            fontfamily='monospace',fontsize=10, color='white',rotation=0)

plt.tight_layout()
 571:
filtrado = medalhas_ouro.query('Age <= 15').groupby(['Sport','Medal'])['Medal'].count().unstack().fillna(0).astype(int).reset_index().sort_values(by='Gold', ascending=True)

my_range=range(1,len(filtrado[:15]['Sport'])+1)

fig, ax = plt.subplots(figsize=(10, 5), facecolor=cor_fundo_gold)

plt.hlines(y=filtrado['Sport'], xmin=0, xmax=filtrado['Gold'], color='gray')
plt.plot(filtrado['Gold'], filtrado['Sport'], "o",markersize=10, color=cor_dourada_clara)
plt.plot(filtrado['Gold'][9], filtrado['Sport'][9], "o",markersize=20,color=cor_dourada)

ax.set_facecolor(cor_fundo_gold)

Xstart, Xend = ax.get_xlim()
Ystart, Yend = ax.get_ylim()

ax.tick_params(axis=u'both', which=u'both',length=0)
ax.set_xlabel("Total Medals",fontfamily='monospace',loc='left',color='gray')
ax.set_axisbelow(True)

for s in ['top','right','bottom','left']:
    ax.spines[s].set_visible(False)

ax.text(0,Yend+2.3, 'Medalhas de Ouro por modalidade ( < 16 anos)', fontsize=15,fontweight='bold',fontfamily='serif',color='#323232')
plt.xlabel('')

x_coord = filtrado['Gold'].iloc[9]
y_coord = filtrado['Sport'].iloc[9]

ax.annotate(filtrado['Gold'][9], xy=(x_coord,y_coord),
            va = 'center', ha='center',fontweight='light',
            fontfamily='monospace',fontsize=10, color='white',rotation=0)

plt.tight_layout()
 572:
filtrado = medalhas_ouro.query('Age <= 15').groupby(['Sport','Medal'])['Medal'].count().unstack().fillna(0).astype(int).reset_index().sort_values(by='Gold', ascending=True)

minha_range=range(1,len(filtrado[:15]['Sport'])+1)

fig, ax = plt.subplots(figsize=(10, 5), facecolor=cor_fundo_gold)

plt.hlines(y=filtrado['Sport'], xmin=0, xmax=filtrado['Gold'], color='gray')
plt.plot(filtrado['Gold'], filtrado['Sport'], "o",markersize=10, color=cor_dourada_clara)
plt.plot(filtrado['Gold'][9], filtrado['Sport'][9], "o",markersize=20,color=cor_dourada)

ax.set_facecolor(cor_fundo_gold)

Xstart, Xend = ax.get_xlim()
Ystart, Yend = ax.get_ylim()

ax.tick_params(axis=u'both', which=u'both',length=0)
ax.set_xlabel("Total Medals",fontfamily='monospace',loc='left',color='gray')
ax.set_axisbelow(True)

for s in ['top','right','bottom','left']:
    ax.spines[s].set_visible(False)

ax.text(0,Yend+2.3, 'Medalhas de Ouro por modalidade ( < 16 anos)', fontsize=15,fontweight='bold',fontfamily='serif',color='#323232')
plt.xlabel('')

x_coord = filtrado['Gold'].iloc[9]
y_coord = filtrado['Sport'].iloc[9]

ax.annotate(filtrado['Gold'][9], xy=(x_coord,y_coord),
            va = 'center', ha='center',fontweight='light',
            fontfamily='monospace',fontsize=10, color='white',rotation=0)

plt.tight_layout()
 573:
filtrado = medalhas_ouro.query('Age <= 15').groupby(['Sport','Medal'])['Medal'].count().unstack().fillna(0).astype(int).reset_index().sort_values(by='Gold', ascending=True)

fig, ax = plt.subplots(figsize=(10, 5), facecolor=cor_fundo_gold)

plt.hlines(y=filtrado['Sport'], xmin=0, xmax=filtrado['Gold'], color='gray')
plt.plot(filtrado['Gold'], filtrado['Sport'], "o",markersize=10, color=cor_dourada_clara)
plt.plot(filtrado['Gold'][9], filtrado['Sport'][9], "o",markersize=20,color=cor_dourada)

ax.set_facecolor(cor_fundo_gold)

Xstart, Xend = ax.get_xlim()
Ystart, Yend = ax.get_ylim()

ax.tick_params(axis=u'both', which=u'both',length=0)
ax.set_xlabel("Total Medals",fontfamily='monospace',loc='left',color='gray')
ax.set_axisbelow(True)

for s in ['top','right','bottom','left']:
    ax.spines[s].set_visible(False)

ax.text(0,Yend+2.3, 'Medalhas de Ouro por modalidade ( < 16 anos)', fontsize=15,fontweight='bold',fontfamily='serif',color='#323232')
plt.xlabel('')

x_coord = filtrado['Gold'].iloc[9]
y_coord = filtrado['Sport'].iloc[9]

ax.annotate(filtrado['Gold'][9], xy=(x_coord,y_coord),
            va = 'center', ha='center',fontweight='light',
            fontfamily='monospace',fontsize=10, color='white',rotation=0)

plt.tight_layout()
 574:
filtrado = medalhas_ouro.query('Age <= 15').groupby(['Sport','Medal'])['Medal'].count().unstack().fillna(0).astype(int).reset_index().sort_values(by='Gold', ascending=True)

fig, ax = plt.subplots(figsize=(10, 5), facecolor=cor_fundo_gold)

plt.hlines(y=filtrado['Sport'], xmin=0, xmax=filtrado['Gold'], color='gray')
plt.plot(filtrado['Gold'], filtrado['Sport'], "o",markersize=10, color=cor_dourada_clara)
plt.plot(filtrado['Gold'][9], filtrado['Sport'][9], "o",markersize=20,color=cor_dourada)

ax.set_facecolor(cor_fundo_gold)

Xstart, Xend = ax.get_xlim()
Ystart, Yend = ax.get_ylim()

ax.tick_params(axis=u'both', which=u'both',length=0)
ax.set_xlabel("Total Medals",fontfamily='monospace',loc='left',color='gray')
ax.set_axisbelow(True)

for s in ['top','right','bottom','left']:
    ax.spines[s].set_visible(False)

ax.text(0,Yend+2.3, 'Medalhas de Ouro por modalidade ( < 16 anos)', fontsize=15,fontweight='bold',fontfamily='serif',color='#323232')
plt.xlabel('')

x_coord = filtrado['Gold'].iloc[9]
y_coord = filtrado['Sport'].iloc[9]

ax.annotate(filtrado['Gold'][9], xy=(x_coord+1,y_coord),
            va = 'center', ha='center',fontweight='light',
            fontfamily='monospace',fontsize=10, color='white',rotation=0)

plt.tight_layout()
 575:
filtrado = medalhas_ouro.query('Age <= 15').groupby(['Sport','Medal'])['Medal'].count().unstack().fillna(0).astype(int).reset_index().sort_values(by='Gold', ascending=True)

fig, ax = plt.subplots(figsize=(10, 5), facecolor=cor_fundo_gold)

plt.hlines(y=filtrado['Sport'], xmin=0, xmax=filtrado['Gold'], color='gray')
plt.plot(filtrado['Gold'], filtrado['Sport'], "o",markersize=10, color=cor_dourada_clara)
plt.plot(filtrado['Gold'][9], filtrado['Sport'][9], "o",markersize=20,color=cor_dourada)

ax.set_facecolor(cor_fundo_gold)

Xstart, Xend = ax.get_xlim()
Ystart, Yend = ax.get_ylim()

ax.tick_params(axis=u'both', which=u'both',length=0)
ax.set_xlabel("Total Medals",fontfamily='monospace',loc='left',color='gray')
ax.set_axisbelow(True)

for s in ['top','right','bottom','left']:
    ax.spines[s].set_visible(False)

ax.text(0,Yend+2.3, 'Medalhas de Ouro por modalidade ( < 16 anos)', fontsize=15,fontweight='bold',fontfamily='serif',color='#323232')
plt.xlabel('')

x_coord = filtrado['Gold'].iloc[9]
y_coord = filtrado['Sport'].iloc[9]

ax.annotate(filtrado['Gold'][9], xy=(x_coord+0.5,y_coord),
            va = 'center', ha='center',fontweight='light',
            fontfamily='monospace',fontsize=10, color='white',rotation=0)

plt.tight_layout()
 576:
filtrado = medalhas_ouro.query('Age <= 15').groupby(['Sport','Medal'])['Medal'].count().unstack().fillna(0).astype(int).reset_index().sort_values(by='Gold', ascending=True)

fig, ax = plt.subplots(figsize=(10, 5), facecolor=cor_fundo_gold)

plt.hlines(y=filtrado['Sport'], xmin=0, xmax=filtrado['Gold'], color='gray')
plt.plot(filtrado['Gold'], filtrado['Sport'], "o",markersize=10, color=cor_dourada_clara)
plt.plot(filtrado['Gold'][9], filtrado['Sport'][9], "o",markersize=20,color=cor_dourada)

ax.set_facecolor(cor_fundo_gold)

Xstart, Xend = ax.get_xlim()
Ystart, Yend = ax.get_ylim()

ax.tick_params(axis=u'both', which=u'both',length=0)
ax.set_xlabel("Total Medals",fontfamily='monospace',loc='left',color='gray')
ax.set_axisbelow(True)

for s in ['top','right','bottom','left']:
    ax.spines[s].set_visible(False)

ax.text(0,Yend+2.3, 'Medalhas de Ouro por modalidade ( < 16 anos)', fontsize=15,fontweight='bold',fontfamily='serif',color='#323232')
plt.xlabel('')

x_coord = filtrado['Gold'].iloc[9]
y_coord = filtrado['Sport'].iloc[9]

ax.annotate(filtrado['Gold'][9], xy=(x_coord,y_coord),
            va = 'center', ha='center',fontweight='light',
            fontfamily='monospace',fontsize=10, color='white',rotation=0)

plt.tight_layout()
 577:
filtrado = medalhas_ouro.query('Age <= 15').groupby(['Sport','Medal'])['Medal'].count().unstack().fillna(0).astype(int).reset_index().sort_values(by='Gold', ascending=True)

fig, ax = plt.subplots(figsize=(10, 5), facecolor=cor_fundo_gold)

plt.hlines(y=filtrado['Sport'], xmin=0, xmax=filtrado['Gold'], color='gray')
plt.plot(filtrado['Gold'], filtrado['Sport'], "o",markersize=10, color=cor_dourada_clara)
plt.plot(filtrado['Gold'][9], filtrado['Sport'][9], "o",markersize=20,color=cor_dourada)

ax.set_facecolor(cor_fundo_gold)

Xstart, Xend = ax.get_xlim()
Ystart, Yend = ax.get_ylim()

ax.tick_params(axis=u'both', which=u'both',length=0)
ax.set_xlabel("Total Medals",fontfamily='monospace',loc='left',color='gray')
ax.set_axisbelow(True)

for s in ['top','right','bottom','left']:
    ax.spines[s].set_visible(False)

ax.text(0,Yend+2.3, 'Medalhas de Ouro por modalidade ( < 16 anos)', fontsize=15,fontweight='bold',fontfamily='serif',color='#323232')
plt.xlabel('')

x_coord = filtrado['Gold'].iloc[9]
y_coord = filtrado['Sport'].iloc[9]

ax.annotate(filtrado['Gold'][9], xy=(x_coord,y_coord),
            va = 'center', ha='center',fontweight='bold',
            fontfamily='monospace',fontsize=10, color='white',rotation=0)

plt.tight_layout()
 578:
filtrado = medalhas_ouro.query('Age <= 15').groupby(['Sport','Medal'])['Medal'].count().unstack().fillna(0).astype(int).reset_index().sort_values(by='Gold', ascending=True)

fig, ax = plt.subplots(figsize=(10, 5), facecolor=cor_fundo_gold)

maior = len(filtrado)
maior
 579:
filtrado = medalhas_ouro.query('Age <= 15').groupby(['Sport','Medal'])['Medal'].count().unstack().fillna(0).astype(int).reset_index().sort_values(by='Gold', ascending=True)

fig, ax = plt.subplots(figsize=(10, 5), facecolor=cor_fundo_gold)

maior = len(filtrado) - 1

plt.hlines(y=filtrado['Sport'], xmin=0, xmax=filtrado['Gold'], color='gray')
plt.plot(filtrado['Gold'], filtrado['Sport'], "o",markersize=10, color=cor_dourada_clara)
plt.plot(filtrado['Gold'][maior], filtrado['Sport'][maior], "o",markersize=20,color=cor_dourada)

ax.set_facecolor(cor_fundo_gold)

Xstart, Xend = ax.get_xlim()
Ystart, Yend = ax.get_ylim()

ax.tick_params(axis=u'both', which=u'both',length=0)
ax.set_xlabel("Total Medals",fontfamily='monospace',loc='left',color='gray')
ax.set_axisbelow(True)

for s in ['top','right','bottom','left']:
    ax.spines[s].set_visible(False)

ax.text(0,Yend+2.3, 'Medalhas de Ouro por modalidade ( < 16 anos)', fontsize=15,fontweight='bold',fontfamily='serif',color='#323232')
plt.xlabel('')

x_coord = filtrado['Gold'].iloc[maior]
y_coord = filtrado['Sport'].iloc[maior]

ax.annotate(filtrado['Gold'][maior], xy=(x_coord,y_coord),
            va = 'center', ha='center',fontweight='bold',
            fontfamily='monospace',fontsize=10, color='white',rotation=0)

plt.tight_layout()
 580:
filtrado = medalhas_ouro.query('Age > 50')\
    .groupby(['Sport','Medal'])['Medal'].count()\
    .unstack().fillna(0).astype(int).reset_index()\
    .sort_values(by='Gold', ascending=True)

fig, ax = plt.subplots(figsize=(10, 5), facecolor=cor_fundo_gold)

maior = len(filtrado) - 1

plt.hlines(y=filtrado['Sport'], xmin=0, xmax=filtrado['Gold'], color='gray')
plt.plot(filtrado['Gold'], filtrado['Sport'], "o",markersize=10, color=cor_dourada_clara)
plt.plot(filtrado['Gold'][maior], filtrado['Sport'][maior], "o",markersize=20,color=cor_dourada)

ax.set_facecolor(cor_fundo_gold)

Xstart, Xend = ax.get_xlim()
Ystart, Yend = ax.get_ylim()

ax.tick_params(axis=u'both', which=u'both',length=0)
ax.set_xlabel("Total Medals",fontfamily='monospace',loc='left',color='gray')
ax.set_axisbelow(True)

for s in ['top','right','bottom','left']:
    ax.spines[s].set_visible(False)

ax.text(0,Yend+2.3, 'Medalhas de Ouro por modalidade ( < 16 anos)', fontsize=15,fontweight='bold',fontfamily='serif',color='#323232')
plt.xlabel('')

x_coord = filtrado['Gold'].iloc[maior]
y_coord = filtrado['Sport'].iloc[maior]

ax.annotate(filtrado['Gold'][maior], xy=(x_coord,y_coord),
            va = 'center', ha='center',fontweight='bold',
            fontfamily='monospace',fontsize=10, color='white',rotation=0)

plt.tight_layout()
 581:
filtrado = medalhas_ouro.query('Age > 50')\
    .groupby(['Sport','Medal'])['Medal'].count()\
    .unstack().fillna(0).astype(int).reset_index()\
    .sort_values(by='Gold', ascending=True)

filtrado
 582:
filtrado = medalhas_ouro.query('Age > 50')\
    .groupby(['Sport','Medal'])['Medal'].count()\
    .unstack().fillna(0).astype(int).reset_index()\
    .sort_values(by='Gold', ascending=True)

fig, ax = plt.subplots(figsize=(10, 5), facecolor=cor_fundo_gold)

maior = len(filtrado) - 1

filtrado['Gold'][maior]
filtrado['Sport'][maior]
 583:
filtrado = medalhas_ouro.query('Age > 50')\
    .groupby(['Sport','Medal'])['Medal'].count()\
    .unstack().fillna(0).astype(int).reset_index()\
    .sort_values(by='Gold', ascending=True)

fig, ax = plt.subplots(figsize=(10, 5), facecolor=cor_fundo_gold)

maior = len(filtrado) - 1

maior
filtrado['Gold'][maior]
filtrado['Sport'][maior]
 584:
filtrado = medalhas_ouro.query('Age > 50')\
    .groupby(['Sport','Medal'])['Medal'].count()\
    .unstack().fillna(0).astype(int).reset_index()\
    .sort_values(by='Gold', ascending=True)

fig, ax = plt.subplots(figsize=(10, 5), facecolor=cor_fundo_gold)

maior = len(filtrado) - 1

maior
 585:
filtrado = medalhas_ouro.query('Age > 50')\
    .groupby(['Sport','Medal'])['Medal'].count()\
    .unstack().fillna(0).astype(int).reset_index()\
    .sort_values(by='Gold', ascending=True)

fig, ax = plt.subplots(figsize=(10, 5), facecolor=cor_fundo_gold)

maior = len(filtrado)

maior
 586:
filtrado = medalhas_ouro.query('Age > 50')\
    .groupby(['Sport','Medal'])['Medal'].count()\
    .unstack().fillna(0).astype(int).reset_index()\
    .sort_values(by='Gold', ascending=True)

fig, ax = plt.subplots(figsize=(10, 5), facecolor=cor_fundo_gold)

maior = len(filtrado)

filtrado
 587:
filtrado = medalhas_ouro.query('Age > 50')\
    .groupby(['Sport','Medal'])['Medal'].count()\
    .unstack().fillna(0).astype(int).reset_index()\
    .sort_values(by='Gold', ascending=True)

fig, ax = plt.subplots(figsize=(10, 5), facecolor=cor_fundo_gold)

maior = len(filtrado)


plt.hlines(y=filtrado['Sport'], xmin=0, xmax=filtrado['Gold'], color='gray')
plt.plot(filtrado['Gold'], filtrado['Sport'], "o",markersize=10, color=cor_dourada_clara)
plt.plot(filtrado['Gold'][maior], filtrado['Sport'][maior], "o",markersize=20,color=cor_dourada)

ax.set_facecolor(cor_fundo_gold)

Xstart, Xend = ax.get_xlim()
Ystart, Yend = ax.get_ylim()

ax.tick_params(axis=u'both', which=u'both',length=0)
ax.set_xlabel("Total Medals",fontfamily='monospace',loc='left',color='gray')
ax.set_axisbelow(True)

for s in ['top','right','bottom','left']:
    ax.spines[s].set_visible(False)

ax.text(0,Yend+2.3, 'Medalhas de Ouro por modalidade ( < 16 anos)', fontsize=15,fontweight='bold',fontfamily='serif',color='#323232')
plt.xlabel('')

x_coord = filtrado['Gold'].iloc[maior]
y_coord = filtrado['Sport'].iloc[maior]

ax.annotate(filtrado['Gold'][maior], xy=(x_coord,y_coord),
            va = 'center', ha='center',fontweight='bold',
            fontfamily='monospace',fontsize=10, color='white',rotation=0)

plt.tight_layout()
 588:
filtrado = medalhas_ouro.query('Age > 50')\
    .groupby(['Sport','Medal'])['Medal'].count()\
    .unstack().fillna(0).astype(int).reset_index()\
    .sort_values(by='Gold', ascending=True)

fig, ax = plt.subplots(figsize=(10, 5), facecolor=cor_fundo_gold)

maior = len(filtrado) - 1

plt.hlines(y=filtrado['Sport'], xmin=0, xmax=filtrado['Gold'], color='gray')
plt.plot(filtrado['Gold'], filtrado['Sport'], "o",markersize=10, color=cor_dourada_clara)
plt.plot(filtrado['Gold'][maior], filtrado['Sport'][maior], "o",markersize=20,color=cor_dourada)

filtrado['Sport'][maior]
 589:
filtrado = medalhas_ouro.query('Age > 50')\
    .groupby(['Sport','Medal'])['Medal'].count()\
    .unstack().fillna(0).astype(int).reset_index()\
    .sort_values(by='Gold', ascending=True)

fig, ax = plt.subplots(figsize=(10, 5), facecolor=cor_fundo_gold)

maior = len(filtrado)

plt.hlines(y=filtrado['Sport'], xmin=0, xmax=filtrado['Gold'], color='gray')
plt.plot(filtrado['Gold'], filtrado['Sport'], "o",markersize=10, color=cor_dourada_clara)
plt.plot(filtrado['Gold'][maior], filtrado['Sport'][maior], "o",markersize=20,color=cor_dourada)

filtrado['Sport'][maior]
 590:
filtrado = medalhas_ouro.query('Age > 50')\
    .groupby(['Sport','Medal'])['Medal'].count()\
    .unstack().fillna(0).astype(int).reset_index()\
    .sort_values(by='Gold', ascending=True)

fig, ax = plt.subplots(figsize=(10, 5), facecolor=cor_fundo_gold)

maior = len(filtrado) - 1

plt.hlines(y=filtrado['Sport'], xmin=0, xmax=filtrado['Gold'], color='gray')
plt.plot(filtrado['Gold'], filtrado['Sport'], "o",markersize=10, color=cor_dourada_clara)
plt.plot(filtrado['Gold'][maior], filtrado['Sport'][maior], "o",markersize=20,color=cor_dourada)

filtrado['Sport'][maior]
 591:
filtrado = medalhas_ouro.query('Age > 50')\
    .groupby(['Sport','Medal'])['Medal'].count()\
    .unstack().fillna(0).astype(int).reset_index()\
    .sort_values(by='Gold', ascending=True)

fig, ax = plt.subplots(figsize=(10, 5), facecolor=cor_fundo_gold)

maior = range(len(filtrado))

plt.hlines(y=filtrado['Sport'], xmin=0, xmax=filtrado['Gold'], color='gray')
plt.plot(filtrado['Gold'], filtrado['Sport'], "o",markersize=10, color=cor_dourada_clara)
plt.plot(filtrado['Gold'][maior], filtrado['Sport'][maior], "o",markersize=20,color=cor_dourada)

filtrado['Sport'][maior]
 592:
filtrado = medalhas_ouro.query('Age > 50')\
    .groupby(['Sport','Medal'])['Medal'].count()\
    .unstack().fillna(0).astype(int).reset_index()\
    .sort_values(by='Gold', ascending=True)

fig, ax = plt.subplots(figsize=(10, 5), facecolor=cor_fundo_gold)

maior = range(len(filtrado))

plt.hlines(y=filtrado['Sport'], xmin=0, xmax=filtrado['Gold'], color='gray')
plt.plot(filtrado['Gold'], filtrado['Sport'], "o",markersize=10, color=cor_dourada_clara)
plt.plot(filtrado['Gold'][maior], filtrado['Sport'][maior:], "o",markersize=20,color=cor_dourada)

filtrado['Sport'][maior]
 593:
filtrado = medalhas_ouro.query('Age > 50')\
    .groupby(['Sport','Medal'])['Medal'].count()\
    .unstack().fillna(0).astype(int).reset_index()\
    .sort_values(by='Gold', ascending=True)

fig, ax = plt.subplots(figsize=(10, 5), facecolor=cor_fundo_gold)

maior = range(len(filtrado))

plt.hlines(y=filtrado['Sport'], xmin=0, xmax=filtrado['Gold'], color='gray')
plt.plot(filtrado['Gold'], filtrado['Sport'], "o",markersize=10, color=cor_dourada_clara)
plt.plot(filtrado['Gold'][maior], filtrado['Sport'][maior:maior], "o",markersize=20,color=cor_dourada)

filtrado['Sport'][maior]
 594:
filtrado = medalhas_ouro.query('Age > 50')\
    .groupby(['Sport','Medal'])['Medal'].count()\
    .unstack().fillna(0).astype(int).reset_index()\
    .sort_values(by='Gold', ascending=True)

fig, ax = plt.subplots(figsize=(10, 5), facecolor=cor_fundo_gold)

maior = range(len(filtrado))

plt.hlines(y=filtrado['Sport'], xmin=0, xmax=filtrado['Gold'], color='gray')
plt.plot(filtrado['Gold'], filtrado['Sport'], "o",markersize=10, color=cor_dourada_clara)
plt.plot(filtrado['Gold'][maior], filtrado['Sport'][maior-1:maior], "o",markersize=20,color=cor_dourada)

filtrado['Sport'][maior]
 595:
filtrado = medalhas_ouro.query('Age > 50')\
    .groupby(['Sport','Medal'])['Medal'].count()\
    .unstack().fillna(0).astype(int).reset_index()\
    .sort_values(by='Gold', ascending=True)

fig, ax = plt.subplots(figsize=(10, 5), facecolor=cor_fundo_gold)

maior = range(len(filtrado))

plt.hlines(y=filtrado['Sport'], xmin=0, xmax=filtrado['Gold'], color='gray')
plt.plot(filtrado['Gold'], filtrado['Sport'], "o",markersize=10, color=cor_dourada_clara)
plt.plot(filtrado['Gold'][maior], filtrado['Sport'][:maior], "o",markersize=20,color=cor_dourada)

filtrado['Sport'][maior]
 596:
filtrado = medalhas_ouro.query('Age > 50')\
    .groupby(['Sport','Medal'])['Medal'].count()\
    .unstack().fillna(0).astype(int).reset_index()\
    .sort_values(by='Gold', ascending=True)

fig, ax = plt.subplots(figsize=(10, 5), facecolor=cor_fundo_gold)

maior = range(len(filtrado))

plt.hlines(y=filtrado['Sport'], xmin=0, xmax=filtrado['Gold'], color='gray')
plt.plot(filtrado['Gold'], filtrado['Sport'], "o",markersize=10, color=cor_dourada_clara)
plt.plot(filtrado['Gold'][maior], filtrado['Sport'][:-maior], "o",markersize=20,color=cor_dourada)

filtrado['Sport'][maior]
 597:
filtrado = medalhas_ouro.query('Age > 50')\
    .groupby(['Sport','Medal'])['Medal'].count()\
    .unstack().fillna(0).astype(int).reset_index()\
    .sort_values(by='Gold', ascending=True)

fig, ax = plt.subplots(figsize=(10, 5), facecolor=cor_fundo_gold)

maior = range(len(filtrado))

plt.hlines(y=filtrado['Sport'], xmin=0, xmax=filtrado['Gold'], color='gray')
plt.plot(filtrado['Gold'], filtrado['Sport'], "o",markersize=10, color=cor_dourada_clara)
plt.plot(filtrado['Gold'][maior], filtrado['Sport'][::maior], "o",markersize=20,color=cor_dourada)

filtrado['Sport'][maior]
 598:
filtrado = medalhas_ouro.query('Age > 50')\
    .groupby(['Sport','Medal'])['Medal'].count()\
    .unstack().fillna(0).astype(int).reset_index()\
    .sort_values(by='Gold', ascending=True)

fig, ax = plt.subplots(figsize=(10, 5), facecolor=cor_fundo_gold)

maior = range(len(filtrado))

plt.hlines(y=filtrado['Sport'], xmin=0, xmax=filtrado['Gold'], color='gray')
plt.plot(filtrado['Gold'], filtrado['Sport'], "o",markersize=10, color=cor_dourada_clara)
plt.plot(filtrado['Gold'][maior], filtrado['Sport'][::-maior], "o",markersize=20,color=cor_dourada)

filtrado['Sport'][maior]
 599:
filtrado = medalhas_ouro.query('Age > 50')\
    .groupby(['Sport','Medal'])['Medal'].count()\
    .unstack().fillna(0).astype(int).reset_index()\
    .sort_values(by='Gold', ascending=True)

fig, ax = plt.subplots(figsize=(10, 5), facecolor=cor_fundo_gold)

maior = range(len(filtrado))

plt.hlines(y=filtrado['Sport'], xmin=0, xmax=filtrado['Gold'], color='gray')
plt.plot(filtrado['Gold'], filtrado['Sport'], "o",markersize=10, color=cor_dourada_clara)
plt.plot(filtrado['Gold'][maior], filtrado['Sport'][9], "o",markersize=20,color=cor_dourada)

filtrado['Sport'][maior]
 600:
filtrado = medalhas_ouro.query('Age > 50')\
    .groupby(['Sport','Medal'])['Medal'].count()\
    .unstack().fillna(0).astype(int).reset_index()\
    .sort_values(by='Gold', ascending=True)

fig, ax = plt.subplots(figsize=(10, 5), facecolor=cor_fundo_gold)

maior = range(len(filtrado))

plt.hlines(y=filtrado['Sport'], xmin=0, xmax=filtrado['Gold'], color='gray')
plt.plot(filtrado['Gold'], filtrado['Sport'], "o",markersize=10, color=cor_dourada_clara)
plt.plot(filtrado['Gold'][maior], filtrado['Sport'][8], "o",markersize=20,color=cor_dourada)

filtrado['Sport'][maior]
 601:
filtrado = medalhas_ouro.query('Age > 50')\
    .groupby(['Sport','Medal'])['Medal'].count()\
    .unstack().fillna(0).astype(int).reset_index()\
    .sort_values(by='Gold', ascending=True)

fig, ax = plt.subplots(figsize=(10, 5), facecolor=cor_fundo_gold)

maior = len(filtrado)

plt.hlines(y=filtrado['Sport'], xmin=0, xmax=filtrado['Gold'], color='gray')
plt.plot(filtrado['Gold'], filtrado['Sport'], "o",markersize=10, color=cor_dourada_clara)
plt.plot(filtrado['Gold'][maior], filtrado['Sport'][8], "o",markersize=20,color=cor_dourada)

filtrado['Sport'][maior]
 602:
filtrado = medalhas_ouro.query('Age > 50')\
    .groupby(['Sport','Medal'])['Medal'].count()\
    .unstack().fillna(0).astype(int).reset_index()\
    .sort_values(by='Gold', ascending=True)

fig, ax = plt.subplots(figsize=(10, 5), facecolor=cor_fundo_gold)

maior = len(filtrado) -1 

plt.hlines(y=filtrado['Sport'], xmin=0, xmax=filtrado['Gold'], color='gray')
plt.plot(filtrado['Gold'], filtrado['Sport'], "o",markersize=10, color=cor_dourada_clara)
plt.plot(filtrado['Gold'][maior], filtrado['Sport'][8], "o",markersize=20,color=cor_dourada)

filtrado['Sport'][maior]
 603:
filtrado = medalhas_ouro.query('Age > 50')\
    .groupby(['Sport','Medal'])['Medal'].count()\
    .unstack().fillna(0).astype(int).reset_index()\
    .sort_values(by='Gold', ascending=True)

fig, ax = plt.subplots(figsize=(10, 5), facecolor=cor_fundo_gold)

maior = len(filtrado) -1 

plt.hlines(y=filtrado['Sport'], xmin=0, xmax=filtrado['Gold'], color='gray')
plt.plot(filtrado['Gold'], filtrado['Sport'], "o",markersize=10, color=cor_dourada_clara)
plt.plot(filtrado['Gold'][maior], filtrado['Sport'][maior], "o",markersize=20,color=cor_dourada)

filtrado['Sport'][maior]
 604:
filtrado = medalhas_ouro.query('Age > 50')\
    .groupby(['Sport','Medal'])['Medal'].count()\
    .unstack().fillna(0).astype(int).reset_index()\
    .sort_values(by='Gold', ascending=True)

fig, ax = plt.subplots(figsize=(10, 5), facecolor=cor_fundo_gold)

maior = len(filtrado)

plt.hlines(y=filtrado['Sport'], xmin=0, xmax=filtrado['Gold'], color='gray')
plt.plot(filtrado['Gold'], filtrado['Sport'], "o",markersize=10, color=cor_dourada_clara)
plt.plot(filtrado['Gold'][maior], filtrado['Sport'][maior], "o",markersize=20,color=cor_dourada)

filtrado['Sport'][maior]
 605:
filtrado = medalhas_ouro.query('Age > 50')\
    .groupby(['Sport','Medal'])['Medal'].count()\
    .unstack().fillna(0).astype(int).reset_index()\
    .sort_values(by='Gold', ascending=True)

fig, ax = plt.subplots(figsize=(10, 5), facecolor=cor_fundo_gold)

maior = len(filtrado)

plt.hlines(y=filtrado['Sport'], xmin=0, xmax=filtrado['Gold'], color='gray')
plt.plot(filtrado['Gold'], filtrado['Sport'], "o",markersize=10, color=cor_dourada_clara)
#plt.plot(filtrado['Gold'][maior], filtrado['Sport'][maior], "o",markersize=20,color=cor_dourada)

filtrado['Sport'][maior]
 606:
filtrado = medalhas_ouro.query('Age > 50')\
    .groupby(['Sport','Medal'])['Medal'].count()\
    .unstack().fillna(0).astype(int).reset_index()\
    .sort_values(by='Gold', ascending=True)

fig, ax = plt.subplots(figsize=(10, 5), facecolor=cor_fundo_gold)

maior = len(filtrado)

plt.hlines(y=filtrado['Sport'], xmin=0, xmax=filtrado['Gold'], color='gray')
plt.plot(filtrado['Gold'], filtrado['Sport'], "o",markersize=10, color=cor_dourada_clara)
#plt.plot(filtrado['Gold'][maior], filtrado['Sport'][maior], "o",markersize=20,color=cor_dourada)
 607:
filtrado = medalhas_ouro.query('Age > 50')\
    .groupby(['Sport','Medal'])['Medal'].count()\
    .unstack().fillna(0).astype(int).reset_index()\
    .sort_values(by='Gold', ascending=True)

fig, ax = plt.subplots(figsize=(10, 5), facecolor=cor_fundo_gold)

maior = len(filtrado)

plt.hlines(y=filtrado['Sport'], xmin=0, xmax=filtrado['Gold'], color='gray')
plt.plot(filtrado['Gold'], filtrado['Sport'], "o",markersize=10, color=cor_dourada_clara)
#plt.plot(filtrado['Gold'][maior], filtrado['Sport'][maior], "o",markersize=20,color=cor_dourada)

filtrado
 608:
filtrado = medalhas_ouro.query('Age > 50')\
    .groupby(['Sport','Medal'])['Medal'].count()\
    .unstack().fillna(0).astype(int).reset_index()\
    .sort_values(by='Gold', ascending=True)

filtrado.reset_index(drop=True, inplace=True)
fig, ax = plt.subplots(figsize=(10, 5), facecolor=cor_fundo_gold)

'''maior = len(filtrado)

plt.hlines(y=filtrado['Sport'], xmin=0, xmax=filtrado['Gold'], color='gray')
plt.plot(filtrado['Gold'], filtrado['Sport'], "o",markersize=10, color=cor_dourada_clara)
#plt.plot(filtrado['Gold'][maior], filtrado['Sport'][maior], "o",markersize=20,color=cor_dourada)'''

filtrado
 609:
filtrado = medalhas_ouro.query('Age > 50')\
    .groupby(['Sport','Medal'])['Medal'].count()\
    .unstack().fillna(0).astype(int).reset_index()\
    .sort_values(by='Gold', ascending=True)

filtrado.reset_index(drop=True, inplace=True)
fig, ax = plt.subplots(figsize=(10, 5), facecolor=cor_fundo_gold)

maior = len(filtrado) - 1

plt.hlines(y=filtrado['Sport'], xmin=0, xmax=filtrado['Gold'], color='gray')
plt.plot(filtrado['Gold'], filtrado['Sport'], "o",markersize=10, color=cor_dourada_clara)
plt.plot(filtrado['Gold'][maior], filtrado['Sport'][maior], "o",markersize=20,color=cor_dourada)
 610:
filtrado = medalhas_ouro.query('Age > 50')\
    .groupby(['Sport','Medal'])['Medal'].count()\
    .unstack().fillna(0).astype(int).reset_index()\
    .sort_values(by='Gold', ascending=True)

filtrado.reset_index(drop=True, inplace=True)
fig, ax = plt.subplots(figsize=(10, 5), facecolor=cor_fundo_gold)

maior = len(filtrado) - 1

plt.hlines(y=filtrado['Sport'], xmin=0, xmax=filtrado['Gold'], color='gray')
plt.plot(filtrado['Gold'], filtrado['Sport'], "o",markersize=10, color=cor_dourada_clara)
plt.plot(filtrado['Gold'][maior], filtrado['Sport'][maior], "o",markersize=20,color=cor_dourada)

ax.set_facecolor(cor_fundo_gold)

Xstart, Xend = ax.get_xlim()
Ystart, Yend = ax.get_ylim()

ax.tick_params(axis=u'both', which=u'both',length=0)
ax.set_xlabel("Total Medals",fontfamily='monospace',loc='left',color='gray')
ax.set_axisbelow(True)

for s in ['top','right','bottom','left']:
    ax.spines[s].set_visible(False)

ax.text(0,Yend+2.3, 'Medalhas de Ouro por modalidade ( < 16 anos)', fontsize=15,fontweight='bold',fontfamily='serif',color='#323232')
plt.xlabel('')

x_coord = filtrado['Gold'].iloc[maior]
y_coord = filtrado['Sport'].iloc[maior]

ax.annotate(filtrado['Gold'][maior], xy=(x_coord,y_coord),
            va = 'center', ha='center',fontweight='bold',
            fontfamily='monospace',fontsize=10, color='white',rotation=0)

plt.tight_layout()
 611:
filtrado = medalhas_ouro.query('Age > 50')\
    .groupby(['Sport','Medal'])['Medal'].count()\
    .unstack().fillna(0).astype(int).reset_index()\
    .sort_values(by='Gold', ascending=True)

filtrado.reset_index(drop=True, inplace=True)
fig, ax = plt.subplots(figsize=(10, 5), facecolor=cor_fundo_gold)

maior = len(filtrado) - 1

plt.hlines(y=filtrado['Sport'], xmin=0, xmax=filtrado['Gold'], color='gray')
plt.plot(filtrado['Gold'], filtrado['Sport'], "o",markersize=10, color=cor_dourada_clara)
plt.plot(filtrado['Gold'][maior], filtrado['Sport'][maior], "o",markersize=20,color=cor_dourada)

ax.set_facecolor(cor_fundo_gold)

Xstart, Xend = ax.get_xlim()
Ystart, Yend = ax.get_ylim()

ax.tick_params(axis=u'both', which=u'both',length=0)
ax.set_xlabel("Total Medals",fontfamily='monospace',loc='left',color='gray')
ax.set_axisbelow(True)

for s in ['top','right','bottom','left']:
    ax.spines[s].set_visible(False)

ax.text(0,Yend+2.3, 'Medalhas de Ouro por modalidade ( > 50 anos)', fontsize=15,fontweight='bold',fontfamily='serif',color='#323232')
plt.xlabel('')

x_coord = filtrado['Gold'].iloc[maior]
y_coord = filtrado['Sport'].iloc[maior]

ax.annotate(filtrado['Gold'][maior], xy=(x_coord,y_coord),
            va = 'center', ha='center',fontweight='bold',
            fontfamily='monospace',fontsize=10, color='white',rotation=0)

plt.tight_layout()
 612:
filtrado = medalhas_ouro.query('Age > 50')\
    .groupby(['Sport','Medal'])['Medal'].count()\
    .unstack().fillna(0).astype(int).reset_index()\
    .sort_values(by='Gold', ascending=True)

filtrado.reset_index(drop=True, inplace=True)
fig, ax = plt.subplots(figsize=(10, 5), facecolor=cor_fundo_gold)

maior = len(filtrado) - 1

plt.hlines(y=filtrado['Sport'], xmin=0, xmax=filtrado['Gold'], color='gray')
plt.plot(filtrado['Gold'], filtrado['Sport'], "o",markersize=10, color=cor_dourada_clara)
plt.plot(filtrado['Gold'][maior], filtrado['Sport'][maior], "o",markersize=20,color=cor_dourada)

ax.set_facecolor(cor_fundo_gold)

Xstart, Xend = ax.get_xlim()
Ystart, Yend = ax.get_ylim()

ax.tick_params(axis=u'both', which=u'both',length=0)
ax.set_xlabel("Total Medals",fontfamily='monospace',loc='left',color='gray')
ax.set_axisbelow(True)

for s in ['top','right','bottom','left']:
    ax.spines[s].set_visible(False)

ax.text(0,Yend+1, 'Medalhas de Ouro por modalidade ( > 50 anos)', fontsize=15,fontweight='bold',fontfamily='serif',color='#323232')
plt.xlabel('')

x_coord = filtrado['Gold'].iloc[maior]
y_coord = filtrado['Sport'].iloc[maior]

ax.annotate(filtrado['Gold'][maior], xy=(x_coord,y_coord),
            va = 'center', ha='center',fontweight='bold',
            fontfamily='monospace',fontsize=10, color='white',rotation=0)

plt.tight_layout()
 613:
filtrado = medalhas_ouro.query('Age > 50')\
    .groupby(['Sport','Medal'])['Medal'].count()\
    .unstack().fillna(0).astype(int).reset_index()\
    .sort_values(by='Gold', ascending=True)

filtrado.reset_index(drop=True, inplace=True)
fig, ax = plt.subplots(figsize=(7, 3), facecolor=cor_fundo_gold)

maior = len(filtrado) - 1

plt.hlines(y=filtrado['Sport'], xmin=0, xmax=filtrado['Gold'], color='gray')
plt.plot(filtrado['Gold'], filtrado['Sport'], "o",markersize=10, color=cor_dourada_clara)
plt.plot(filtrado['Gold'][maior], filtrado['Sport'][maior], "o",markersize=20,color=cor_dourada)

ax.set_facecolor(cor_fundo_gold)

Xstart, Xend = ax.get_xlim()
Ystart, Yend = ax.get_ylim()

ax.tick_params(axis=u'both', which=u'both',length=0)
ax.set_xlabel("Total Medals",fontfamily='monospace',loc='left',color='gray')
ax.set_axisbelow(True)

for s in ['top','right','bottom','left']:
    ax.spines[s].set_visible(False)

ax.text(0,Yend+1, 'Medalhas de Ouro por modalidade ( > 50 anos)', fontsize=15,fontweight='bold',fontfamily='serif',color='#323232')
plt.xlabel('')

x_coord = filtrado['Gold'].iloc[maior]
y_coord = filtrado['Sport'].iloc[maior]

ax.annotate(filtrado['Gold'][maior], xy=(x_coord,y_coord),
            va = 'center', ha='center',fontweight='bold',
            fontfamily='monospace',fontsize=10, color='white',rotation=0)

plt.tight_layout()
 614:
filtrado = medalhas_ouro.query('Age > 50')\
    .groupby(['Sport','Medal'])['Medal'].count()\
    .unstack().fillna(0).astype(int).reset_index()\
    .sort_values(by='Gold', ascending=True)

filtrado.reset_index(drop=True, inplace=True)
fig, ax = plt.subplots(figsize=(10, 5), facecolor=cor_fundo_gold)

maior = len(filtrado) - 1

plt.hlines(y=filtrado['Sport'], xmin=0, xmax=filtrado['Gold'], color='gray')
plt.plot(filtrado['Gold'], filtrado['Sport'], "o",markersize=10, color=cor_dourada_clara)
plt.plot(filtrado['Gold'][maior], filtrado['Sport'][maior], "o",markersize=20,color=cor_dourada)

ax.set_facecolor(cor_fundo_gold)

Xstart, Xend = ax.get_xlim()
Ystart, Yend = ax.get_ylim()

ax.tick_params(axis=u'both', which=u'both',length=0)
ax.set_xlabel("Total Medals",fontfamily='monospace',loc='left',color='gray')
ax.set_axisbelow(True)

for s in ['top','right','bottom','left']:
    ax.spines[s].set_visible(False)

ax.text(0,Yend+1, 'Medalhas de Ouro por modalidade ( > 50 anos)', fontsize=15,fontweight='bold',fontfamily='serif',color='#323232')
plt.xlabel('')

x_coord = filtrado['Gold'].iloc[maior]
y_coord = filtrado['Sport'].iloc[maior]

ax.annotate(filtrado['Gold'][maior], xy=(x_coord,y_coord),
            va = 'center', ha='center',fontweight='bold',
            fontfamily='monospace',fontsize=10, color='white',rotation=0)

plt.tight_layout()
 615:
filtrado = medalhas_ouro.query('Age > 50')\
    .groupby(['Sport','Medal'])['Medal'].count()\
    .unstack().fillna(0).astype(int).reset_index()\
    .sort_values(by='Gold', ascending=True)

filtrado.reset_index(drop=True, inplace=True)
fig, ax = plt.subplots(figsize=(7, 5), facecolor=cor_fundo_gold)

maior = len(filtrado) - 1

plt.hlines(y=filtrado['Sport'], xmin=0, xmax=filtrado['Gold'], color='gray')
plt.plot(filtrado['Gold'], filtrado['Sport'], "o",markersize=10, color=cor_dourada_clara)
plt.plot(filtrado['Gold'][maior], filtrado['Sport'][maior], "o",markersize=20,color=cor_dourada)

ax.set_facecolor(cor_fundo_gold)

Xstart, Xend = ax.get_xlim()
Ystart, Yend = ax.get_ylim()

ax.tick_params(axis=u'both', which=u'both',length=0)
ax.set_xlabel("Total Medals",fontfamily='monospace',loc='left',color='gray')
ax.set_axisbelow(True)

for s in ['top','right','bottom','left']:
    ax.spines[s].set_visible(False)

ax.text(0,Yend+1, 'Medalhas de Ouro por modalidade ( > 50 anos)', fontsize=15,fontweight='bold',fontfamily='serif',color='#323232')
plt.xlabel('')

x_coord = filtrado['Gold'].iloc[maior]
y_coord = filtrado['Sport'].iloc[maior]

ax.annotate(filtrado['Gold'][maior], xy=(x_coord,y_coord),
            va = 'center', ha='center',fontweight='bold',
            fontfamily='monospace',fontsize=10, color='white',rotation=0)

plt.tight_layout()
 616:
filtrado = medalhas_ouro.query('Age <= 15')\
    .groupby(['Sport','Medal'])['Medal'].count()\
    .unstack().fillna(0).astype(int).reset_index()\
    .sort_values(by='Gold', ascending=True)

fig, ax = plt.subplots(figsize=(7, 5), facecolor=cor_fundo_gold)

maior = len(filtrado) - 1

plt.hlines(y=filtrado['Sport'], xmin=0, xmax=filtrado['Gold'], color='gray')
plt.plot(filtrado['Gold'], filtrado['Sport'], "o",markersize=10, color=cor_dourada_clara)
plt.plot(filtrado['Gold'][maior], filtrado['Sport'][maior], "o",markersize=20,color=cor_dourada)

ax.set_facecolor(cor_fundo_gold)

Xstart, Xend = ax.get_xlim()
Ystart, Yend = ax.get_ylim()

ax.tick_params(axis=u'both', which=u'both',length=0)
ax.set_xlabel("Total Medals",fontfamily='monospace',loc='left',color='gray')
ax.set_axisbelow(True)

for s in ['top','right','bottom','left']:
    ax.spines[s].set_visible(False)

ax.text(0,Yend+2.3, 'Medalhas de Ouro por modalidade ( < 16 anos)', fontsize=15,fontweight='bold',fontfamily='serif',color='#323232')
plt.xlabel('')

x_coord = filtrado['Gold'].iloc[maior]
y_coord = filtrado['Sport'].iloc[maior]

ax.annotate(filtrado['Gold'][maior], xy=(x_coord,y_coord),
            va = 'center', ha='center',fontweight='bold',
            fontfamily='monospace',fontsize=10, color='white',rotation=0)

plt.tight_layout()
 617:
filtrado = medalhas_ouro.query('Age <= 15')\
    .groupby(['Sport','Medal'])['Medal'].count()\
    .unstack().fillna(0).astype(int).reset_index()\
    .sort_values(by='Gold', ascending=True)

fig, ax = plt.subplots(figsize=(7, 5), facecolor=cor_fundo_gold)

maior = len(filtrado) - 1

plt.hlines(y=filtrado['Sport'], xmin=0, xmax=filtrado['Gold'], color='gray')
plt.plot(filtrado['Gold'], filtrado['Sport'], "o",markersize=10, color=cor_dourada_clara)
plt.plot(filtrado['Gold'][maior], filtrado['Sport'][maior], "o",markersize=20,color=cor_dourada)

ax.set_facecolor(cor_fundo_gold)

Xstart, Xend = ax.get_xlim()
Ystart, Yend = ax.get_ylim()

ax.tick_params(axis=u'both', which=u'both',length=0)
ax.set_xlabel("Total Medals",fontfamily='monospace',loc='left',color='gray')
ax.set_axisbelow(True)

for s in ['top','right','bottom','left']:
    ax.spines[s].set_visible(False)

ax.text(0,Yend+1, 'Medalhas de Ouro por modalidade ( < 16 anos)', fontsize=15,fontweight='bold',fontfamily='serif',color='#323232')
plt.xlabel('')

x_coord = filtrado['Gold'].iloc[maior]
y_coord = filtrado['Sport'].iloc[maior]

ax.annotate(filtrado['Gold'][maior], xy=(x_coord,y_coord),
            va = 'center', ha='center',fontweight='bold',
            fontfamily='monospace',fontsize=10, color='white',rotation=0)

plt.tight_layout()
 618:
filtrado = medalhas_ouro.query('Age <= 15')\
    .groupby(['Sport','Medal'])['Medal'].count()\
    .unstack().fillna(0).astype(int).reset_index()\
    .sort_values(by='Gold', ascending=True)

fig, ax = plt.subplots(figsize=(7, 5), facecolor=cor_fundo_gold)

maior = len(filtrado) - 1

plt.hlines(y=filtrado['Sport'], xmin=0, xmax=filtrado['Gold'], color='gray')
plt.plot(filtrado['Gold'], filtrado['Sport'], "o",markersize=10, color=cor_dourada_clara)
plt.plot(filtrado['Gold'][maior], filtrado['Sport'][maior], "o",markersize=20,color=cor_dourada)

ax.set_facecolor(cor_fundo_gold)

Xstart, Xend = ax.get_xlim()
Ystart, Yend = ax.get_ylim()

ax.tick_params(axis=u'both', which=u'both',length=0)
ax.set_xlabel("Total Medals",fontfamily='monospace',loc='left',color='gray')
ax.set_axisbelow(True)

for s in ['top','right','bottom','left']:
    ax.spines[s].set_visible(False)

ax.text(-50,Yend+1, 'Medalhas de Ouro por modalidade ( < 16 anos)', fontsize=15,fontweight='bold',fontfamily='serif',color='#323232')
plt.xlabel('')

x_coord = filtrado['Gold'].iloc[maior]
y_coord = filtrado['Sport'].iloc[maior]

ax.annotate(filtrado['Gold'][maior], xy=(x_coord,y_coord),
            va = 'center', ha='center',fontweight='bold',
            fontfamily='monospace',fontsize=10, color='white',rotation=0)

plt.tight_layout()
 619:
filtrado = medalhas_ouro.query('Age > 50')\
    .groupby(['Sport','Medal'])['Medal'].count()\
    .unstack().fillna(0).astype(int).reset_index()\
    .sort_values(by='Gold', ascending=True)

filtrado.reset_index(drop=True, inplace=True)
fig, ax = plt.subplots(figsize=(7, 5), facecolor=cor_fundo_gold)

maior = len(filtrado) - 1

plt.hlines(y=filtrado['Sport'], xmin=0, xmax=filtrado['Gold'], color='gray')
plt.plot(filtrado['Gold'], filtrado['Sport'], "o",markersize=10, color=cor_dourada_clara)
plt.plot(filtrado['Gold'][maior], filtrado['Sport'][maior], "o",markersize=20,color=cor_dourada)

ax.set_facecolor(cor_fundo_gold)

Xstart, Xend = ax.get_xlim()
Ystart, Yend = ax.get_ylim()

ax.tick_params(axis=u'both', which=u'both',length=0)
ax.set_xlabel("Total Medals",fontfamily='monospace',loc='left',color='gray')
ax.set_axisbelow(True)

for s in ['top','right','bottom','left']:
    ax.spines[s].set_visible(False)

ax.text(-50,Yend+1, 'Medalhas de Ouro por modalidade ( > 50 anos)', fontsize=15,fontweight='bold',fontfamily='serif',color='#323232')
plt.xlabel('')

x_coord = filtrado['Gold'].iloc[maior]
y_coord = filtrado['Sport'].iloc[maior]

ax.annotate(filtrado['Gold'][maior], xy=(x_coord,y_coord),
            va = 'center', ha='center',fontweight='bold',
            fontfamily='monospace',fontsize=10, color='white',rotation=0)

plt.tight_layout()
 620:
filtrado = medalhas_ouro.query('Age > 50')\
    .groupby(['Sport','Medal'])['Medal'].count()\
    .unstack().fillna(0).astype(int).reset_index()\
    .sort_values(by='Gold', ascending=True)

filtrado.reset_index(drop=True, inplace=True)
fig, ax = plt.subplots(figsize=(7, 5), facecolor=cor_fundo_gold)

maior = len(filtrado) - 1

plt.hlines(y=filtrado['Sport'], xmin=0, xmax=filtrado['Gold'], color='gray')
plt.plot(filtrado['Gold'], filtrado['Sport'], "o",markersize=10, color=cor_dourada_clara)
plt.plot(filtrado['Gold'][maior], filtrado['Sport'][maior], "o",markersize=20,color=cor_dourada)

ax.set_facecolor(cor_fundo_gold)

Xstart, Xend = ax.get_xlim()
Ystart, Yend = ax.get_ylim()

ax.tick_params(axis=u'both', which=u'both',length=0)
ax.set_xlabel("Total Medals",fontfamily='monospace',loc='left',color='gray')
ax.set_axisbelow(True)

for s in ['top','right','bottom','left']:
    ax.spines[s].set_visible(False)

ax.text(-10,Yend+1, 'Medalhas de Ouro por modalidade ( > 50 anos)', fontsize=15,fontweight='bold',fontfamily='serif',color='#323232')
plt.xlabel('')

x_coord = filtrado['Gold'].iloc[maior]
y_coord = filtrado['Sport'].iloc[maior]

ax.annotate(filtrado['Gold'][maior], xy=(x_coord,y_coord),
            va = 'center', ha='center',fontweight='bold',
            fontfamily='monospace',fontsize=10, color='white',rotation=0)

plt.tight_layout()
 621:
filtrado = medalhas_ouro.query('Age > 50')\
    .groupby(['Sport','Medal'])['Medal'].count()\
    .unstack().fillna(0).astype(int).reset_index()\
    .sort_values(by='Gold', ascending=True)

filtrado.reset_index(drop=True, inplace=True)
fig, ax = plt.subplots(figsize=(7, 5), facecolor=cor_fundo_gold)

maior = len(filtrado) - 1

plt.hlines(y=filtrado['Sport'], xmin=0, xmax=filtrado['Gold'], color='gray')
plt.plot(filtrado['Gold'], filtrado['Sport'], "o",markersize=10, color=cor_dourada_clara)
plt.plot(filtrado['Gold'][maior], filtrado['Sport'][maior], "o",markersize=20,color=cor_dourada)

ax.set_facecolor(cor_fundo_gold)

Xstart, Xend = ax.get_xlim()
Ystart, Yend = ax.get_ylim()

ax.tick_params(axis=u'both', which=u'both',length=0)
ax.set_xlabel("Total Medals",fontfamily='monospace',loc='left',color='gray')
ax.set_axisbelow(True)

for s in ['top','right','bottom','left']:
    ax.spines[s].set_visible(False)

ax.text(-5,Yend+1, 'Medalhas de Ouro por modalidade ( > 50 anos)', fontsize=15,fontweight='bold',fontfamily='serif',color='#323232')
plt.xlabel('')

x_coord = filtrado['Gold'].iloc[maior]
y_coord = filtrado['Sport'].iloc[maior]

ax.annotate(filtrado['Gold'][maior], xy=(x_coord,y_coord),
            va = 'center', ha='center',fontweight='bold',
            fontfamily='monospace',fontsize=10, color='white',rotation=0)

plt.tight_layout()
 622:
filtrado = medalhas_ouro.query('Age > 50')\
    .groupby(['Sport','Medal'])['Medal'].count()\
    .unstack().fillna(0).astype(int).reset_index()\
    .sort_values(by='Gold', ascending=True)

filtrado.reset_index(drop=True, inplace=True)
fig, ax = plt.subplots(figsize=(7, 5), facecolor=cor_fundo_gold)

maior = len(filtrado) - 1

plt.hlines(y=filtrado['Sport'], xmin=0, xmax=filtrado['Gold'], color='gray')
plt.plot(filtrado['Gold'], filtrado['Sport'], "o",markersize=10, color=cor_dourada_clara)
plt.plot(filtrado['Gold'][maior], filtrado['Sport'][maior], "o",markersize=20,color=cor_dourada)

ax.set_facecolor(cor_fundo_gold)

Xstart, Xend = ax.get_xlim()
Ystart, Yend = ax.get_ylim()

ax.tick_params(axis=u'both', which=u'both',length=0)
ax.set_xlabel("Total Medals",fontfamily='monospace',loc='left',color='gray')
ax.set_axisbelow(True)

for s in ['top','right','bottom','left']:
    ax.spines[s].set_visible(False)

ax.text(0,Yend+1, 'Medalhas de Ouro por modalidade ( > 50 anos)', fontsize=15,fontweight='bold',fontfamily='serif',color='#323232')
plt.xlabel('')

x_coord = filtrado['Gold'].iloc[maior]
y_coord = filtrado['Sport'].iloc[maior]

ax.annotate(filtrado['Gold'][maior], xy=(x_coord,y_coord),
            va = 'center', ha='center',fontweight='bold',
            fontfamily='monospace',fontsize=10, color='white',rotation=0)

plt.tight_layout()
 623:
filtrado = medalhas_ouro.query('Age > 50')\
    .groupby(['Sport','Medal'])['Medal'].count()\
    .unstack().fillna(0).astype(int).reset_index()\
    .sort_values(by='Gold', ascending=True)

filtrado.reset_index(drop=True, inplace=True)
fig, ax = plt.subplots(figsize=(7, 5), facecolor=cor_fundo_gold)

maior = len(filtrado) - 1

plt.hlines(y=filtrado['Sport'], xmin=0, xmax=filtrado['Gold'], color='gray')
plt.plot(filtrado['Gold'], filtrado['Sport'], "o",markersize=10, color=cor_dourada_clara)
plt.plot(filtrado['Gold'][maior], filtrado['Sport'][maior], "o",markersize=20,color=cor_dourada)

ax.set_facecolor(cor_fundo_gold)

Xstart, Xend = ax.get_xlim()
Ystart, Yend = ax.get_ylim()

ax.tick_params(axis=u'both', which=u'both',length=0)
ax.set_xlabel("Total Medals",fontfamily='monospace',loc='left',color='gray')
ax.set_axisbelow(True)

for s in ['top','right','bottom','left']:
    ax.spines[s].set_visible(False)

ax.text(-2,Yend+1, 'Medalhas de Ouro por modalidade ( > 50 anos)', fontsize=15,fontweight='bold',fontfamily='serif',color='#323232')
plt.xlabel('')

x_coord = filtrado['Gold'].iloc[maior]
y_coord = filtrado['Sport'].iloc[maior]

ax.annotate(filtrado['Gold'][maior], xy=(x_coord,y_coord),
            va = 'center', ha='center',fontweight='bold',
            fontfamily='monospace',fontsize=10, color='white',rotation=0)

plt.tight_layout()
 624:
filtrado = medalhas_ouro.query('Age > 50')\
    .groupby(['Sport','Medal'])['Medal'].count()\
    .unstack().fillna(0).astype(int).reset_index()\
    .sort_values(by='Gold', ascending=True)

filtrado.reset_index(drop=True, inplace=True)
fig, ax = plt.subplots(figsize=(7, 5), facecolor=cor_fundo_gold)

maior = len(filtrado) - 1

plt.hlines(y=filtrado['Sport'], xmin=0, xmax=filtrado['Gold'], color='gray')
plt.plot(filtrado['Gold'], filtrado['Sport'], "o",markersize=10, color=cor_dourada_clara)
plt.plot(filtrado['Gold'][maior], filtrado['Sport'][maior], "o",markersize=20,color=cor_dourada)

ax.set_facecolor(cor_fundo_gold)

Xstart, Xend = ax.get_xlim()
Ystart, Yend = ax.get_ylim()

ax.tick_params(axis=u'both', which=u'both',length=0)
ax.set_xlabel("Total Medals",fontfamily='monospace',loc='left',color='gray')
ax.set_axisbelow(True)

for s in ['top','right','bottom','left']:
    ax.spines[s].set_visible(False)

ax.text(-3,Yend+1, 'Medalhas de Ouro por modalidade ( > 50 anos)', fontsize=15,fontweight='bold',fontfamily='serif',color='#323232')
plt.xlabel('')

x_coord = filtrado['Gold'].iloc[maior]
y_coord = filtrado['Sport'].iloc[maior]

ax.annotate(filtrado['Gold'][maior], xy=(x_coord,y_coord),
            va = 'center', ha='center',fontweight='bold',
            fontfamily='monospace',fontsize=10, color='white',rotation=0)

plt.tight_layout()
 625:
import matplotlib.pyplot as plt

# Filtrando e preparando os dados para o primeiro gráfico
filtrado1 = medalhas_ouro.query('Age <= 15')\
    .groupby(['Sport', 'Medal'])['Medal'].count()\
    .unstack().fillna(0).astype(int).reset_index()\
    .sort_values(by='Gold', ascending=True)

# Filtrando e preparando os dados para o segundo gráfico
filtrado2 = medalhas_ouro.query('Age > 50')\
    .groupby(['Sport', 'Medal'])['Medal'].count()\
    .unstack().fillna(0).astype(int).reset_index()\
    .sort_values(by='Gold', ascending=True)

# Criando subplots lado a lado
fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(14, 5), facecolor=cor_fundo_gold)

# Gráfico 1
maior1 = len(filtrado1) - 1
ax1.hlines(y=filtrado1['Sport'], xmin=0, xmax=filtrado1['Gold'], color='gray')
ax1.plot(filtrado1['Gold'], filtrado1['Sport'], "o", markersize=10, color=cor_dourada_clara)
ax1.plot(filtrado1['Gold'][maior1], filtrado1['Sport'][maior1], "o", markersize=20, color=cor_dourada)
ax1.set_facecolor(cor_fundo_gold)
ax1.tick_params(axis=u'both', which=u'both', length=0)
ax1.set_xlabel("Total Medals", fontfamily='monospace', loc='left', color='gray')
ax1.set_axisbelow(True)
for s in ['top', 'right', 'bottom', 'left']:
    ax1.spines[s].set_visible(False)
ax1.text(-50, len(filtrado1), 'Medalhas de Ouro por modalidade ( < 16 anos)', fontsize=15, fontweight='bold', fontfamily='serif', color='#323232')
x_coord1 = filtrado1['Gold'].iloc[maior1]
y_coord1 = filtrado1['Sport'].iloc[maior1]
ax1.annotate(filtrado1['Gold'][maior1], xy=(x_coord1, y_coord1), va='center', ha='center', fontweight='bold', fontfamily='monospace', fontsize=10, color='white', rotation=0)

# Gráfico 2
maior2 = len(filtrado2) - 1
ax2.hlines(y=filtrado2['Sport'], xmin=0, xmax=filtrado2['Gold'], color='gray')
ax2.plot(filtrado2['Gold'], filtrado2['Sport'], "o", markersize=10, color=cor_dourada_clara)
ax2.plot(filtrado2['Gold'][maior2], filtrado2['Sport'][maior2], "o", markersize=20, color=cor_dourada)
ax2.set_facecolor(cor_fundo_gold)
ax2.tick_params(axis=u'both', which=u'both', length=0)
ax2.set_xlabel("Total Medals", fontfamily='monospace', loc='left', color='gray')
ax2.set_axisbelow(True)
for s in ['top', 'right', 'bottom', 'left']:
    ax2.spines[s].set_visible(False)
ax2.text(-3, len(filtrado2), 'Medalhas de Ouro por modalidade ( > 50 anos)', fontsize=15, fontweight='bold', fontfamily='serif', color='#323232')
x_coord2 = filtrado2['Gold'].iloc[maior2]
y_coord2 = filtrado2['Sport'].iloc[maior2]
ax2.annotate(filtrado2['Gold'][maior2], xy=(x_coord2, y_coord2), va='center', ha='center', fontweight='bold', fontfamily='monospace', fontsize=10, color='white', rotation=0)

plt.tight_layout()
plt.show()
 626:
import matplotlib.pyplot as plt

# Filtrando e preparando os dados para o primeiro gráfico
filtrado1 = medalhas_ouro.query('Age <= 15')\
    .groupby(['Sport', 'Medal'])['Medal'].count()\
    .unstack().fillna(0).astype(int).reset_index()\
    .sort_values(by='Gold', ascending=True)

# Filtrando e preparando os dados para o segundo gráfico
filtrado2 = medalhas_ouro.query('Age > 50')\
    .groupby(['Sport', 'Medal'])['Medal'].count()\
    .unstack().fillna(0).astype(int).reset_index()\
    .sort_values(by='Gold', ascending=True)

filtrado2.reset_index(drop=True, inplace=True)

# Criando subplots lado a lado
fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(14, 5), facecolor=cor_fundo_gold)

# Gráfico 1
maior1 = len(filtrado1) - 1
ax1.hlines(y=filtrado1['Sport'], xmin=0, xmax=filtrado1['Gold'], color='gray')
ax1.plot(filtrado1['Gold'], filtrado1['Sport'], "o", markersize=10, color=cor_dourada_clara)
ax1.plot(filtrado1['Gold'][maior1], filtrado1['Sport'][maior1], "o", markersize=20, color=cor_dourada)
ax1.set_facecolor(cor_fundo_gold)
ax1.tick_params(axis=u'both', which=u'both', length=0)
ax1.set_xlabel("Total Medals", fontfamily='monospace', loc='left', color='gray')
ax1.set_axisbelow(True)
for s in ['top', 'right', 'bottom', 'left']:
    ax1.spines[s].set_visible(False)
ax1.text(-50, len(filtrado1), 'Medalhas de Ouro por modalidade ( < 16 anos)', fontsize=15, fontweight='bold', fontfamily='serif', color='#323232')
x_coord1 = filtrado1['Gold'].iloc[maior1]
y_coord1 = filtrado1['Sport'].iloc[maior1]
ax1.annotate(filtrado1['Gold'][maior1], xy=(x_coord1, y_coord1), va='center', ha='center', fontweight='bold', fontfamily='monospace', fontsize=10, color='white', rotation=0)

# Gráfico 2
maior2 = len(filtrado2) - 1
ax2.hlines(y=filtrado2['Sport'], xmin=0, xmax=filtrado2['Gold'], color='gray')
ax2.plot(filtrado2['Gold'], filtrado2['Sport'], "o", markersize=10, color=cor_dourada_clara)
ax2.plot(filtrado2['Gold'][maior2], filtrado2['Sport'][maior2], "o", markersize=20, color=cor_dourada)
ax2.set_facecolor(cor_fundo_gold)
ax2.tick_params(axis=u'both', which=u'both', length=0)
ax2.set_xlabel("Total Medals", fontfamily='monospace', loc='left', color='gray')
ax2.set_axisbelow(True)
for s in ['top', 'right', 'bottom', 'left']:
    ax2.spines[s].set_visible(False)
ax2.text(-3, len(filtrado2), 'Medalhas de Ouro por modalidade ( > 50 anos)', fontsize=15, fontweight='bold', fontfamily='serif', color='#323232')
x_coord2 = filtrado2['Gold'].iloc[maior2]
y_coord2 = filtrado2['Sport'].iloc[maior2]
ax2.annotate(filtrado2['Gold'][maior2], xy=(x_coord2, y_coord2), va='center', ha='center', fontweight='bold', fontfamily='monospace', fontsize=10, color='white', rotation=0)

plt.tight_layout()
plt.show()
 627:
import matplotlib.pyplot as plt

# Filtrando e preparando os dados para o primeiro gráfico
filtrado1 = medalhas_ouro.query('Age <= 15')\
    .groupby(['Sport', 'Medal'])['Medal'].count()\
    .unstack().fillna(0).astype(int).reset_index()\
    .sort_values(by='Gold', ascending=True)

# Filtrando e preparando os dados para o segundo gráfico
filtrado2 = medalhas_ouro.query('Age > 50')\
    .groupby(['Sport', 'Medal'])['Medal'].count()\
    .unstack().fillna(0).astype(int).reset_index()\
    .sort_values(by='Gold', ascending=True)

filtrado2.reset_index(drop=True, inplace=True)

# Criando subplots lado a lado
fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(14, 5), facecolor=cor_fundo_gold)

# Gráfico 1
maior1 = len(filtrado1) - 1
ax1.hlines(y=filtrado1['Sport'], xmin=0, xmax=filtrado1['Gold'], color='gray')
ax1.plot(filtrado1['Gold'], filtrado1['Sport'], "o", markersize=10, color=cor_dourada_clara)
ax1.plot(filtrado1['Gold'][maior1], filtrado1['Sport'][maior1], "o", markersize=20, color=cor_dourada)
ax1.set_facecolor(cor_fundo_gold)
ax1.tick_params(axis=u'both', which=u'both', length=0)
ax1.set_xlabel("Total Medals", fontfamily='monospace', loc='left', color='gray')
ax1.set_axisbelow(True)
for s in ['top', 'right', 'bottom', 'left']:
    ax1.spines[s].set_visible(False)
ax1.text(-10, len(filtrado1), 'Medalhas de Ouro por modalidade ( < 16 anos)', fontsize=15, fontweight='bold', fontfamily='serif', color='#323232')
x_coord1 = filtrado1['Gold'].iloc[maior1]
y_coord1 = filtrado1['Sport'].iloc[maior1]
ax1.annotate(filtrado1['Gold'][maior1], xy=(x_coord1, y_coord1), va='center', ha='center', fontweight='bold', fontfamily='monospace', fontsize=10, color='white', rotation=0)

# Gráfico 2
maior2 = len(filtrado2) - 1
ax2.hlines(y=filtrado2['Sport'], xmin=0, xmax=filtrado2['Gold'], color='gray')
ax2.plot(filtrado2['Gold'], filtrado2['Sport'], "o", markersize=10, color=cor_dourada_clara)
ax2.plot(filtrado2['Gold'][maior2], filtrado2['Sport'][maior2], "o", markersize=20, color=cor_dourada)
ax2.set_facecolor(cor_fundo_gold)
ax2.tick_params(axis=u'both', which=u'both', length=0)
ax2.set_xlabel("Total Medals", fontfamily='monospace', loc='left', color='gray')
ax2.set_axisbelow(True)
for s in ['top', 'right', 'bottom', 'left']:
    ax2.spines[s].set_visible(False)
ax2.text(-3, len(filtrado2), 'Medalhas de Ouro por modalidade ( > 50 anos)', fontsize=15, fontweight='bold', fontfamily='serif', color='#323232')
x_coord2 = filtrado2['Gold'].iloc[maior2]
y_coord2 = filtrado2['Sport'].iloc[maior2]
ax2.annotate(filtrado2['Gold'][maior2], xy=(x_coord2, y_coord2), va='center', ha='center', fontweight='bold', fontfamily='monospace', fontsize=10, color='white', rotation=0)

plt.tight_layout()
plt.show()
 628:
import matplotlib.pyplot as plt

# Filtrando e preparando os dados para o primeiro gráfico
filtrado1 = medalhas_ouro.query('Age <= 15')\
    .groupby(['Sport', 'Medal'])['Medal'].count()\
    .unstack().fillna(0).astype(int).reset_index()\
    .sort_values(by='Gold', ascending=True)

# Filtrando e preparando os dados para o segundo gráfico
filtrado2 = medalhas_ouro.query('Age > 50')\
    .groupby(['Sport', 'Medal'])['Medal'].count()\
    .unstack().fillna(0).astype(int).reset_index()\
    .sort_values(by='Gold', ascending=True)

filtrado2.reset_index(drop=True, inplace=True)

# Criando subplots lado a lado
fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(14, 5), facecolor=cor_fundo_gold)

# Gráfico 1
maior1 = len(filtrado1) - 1
ax1.hlines(y=filtrado1['Sport'], xmin=0, xmax=filtrado1['Gold'], color='gray')
ax1.plot(filtrado1['Gold'], filtrado1['Sport'], "o", markersize=10, color=cor_dourada_clara)
ax1.plot(filtrado1['Gold'][maior1], filtrado1['Sport'][maior1], "o", markersize=20, color=cor_dourada)
ax1.set_facecolor(cor_fundo_gold)
ax1.tick_params(axis=u'both', which=u'both', length=0)
ax1.set_xlabel("Total Medals", fontfamily='monospace', loc='left', color='gray')
ax1.set_axisbelow(True)
for s in ['top', 'right', 'bottom', 'left']:
    ax1.spines[s].set_visible(False)
ax1.text(-10, len(filtrado1), 'Medalhas de Ouro por modalidade ( < 16 anos)', fontsize=15, fontweight='bold', fontfamily='serif', color='#323232')
x_coord1 = filtrado1['Gold'].iloc[maior1]
y_coord1 = filtrado1['Sport'].iloc[maior1]
ax1.annotate(filtrado1['Gold'][maior1], xy=(x_coord1, y_coord1), va='center', ha='center', fontweight='bold', fontfamily='monospace', fontsize=10, color='white', rotation=0)

# Gráfico 2
maior2 = len(filtrado2) - 1
ax2.hlines(y=filtrado2['Sport'], xmin=0, xmax=filtrado2['Gold'], color='gray')
ax2.plot(filtrado2['Gold'], filtrado2['Sport'], "o", markersize=10, color=cor_dourada_clara)
ax2.plot(filtrado2['Gold'][maior2], filtrado2['Sport'][maior2], "o", markersize=20, color=cor_dourada)
ax2.set_facecolor(cor_fundo_gold)
ax2.tick_params(axis=u'both', which=u'both', length=0)
ax2.set_xlabel("Total Medals", fontfamily='monospace', loc='left', color='gray')
ax2.set_axisbelow(True)
for s in ['top', 'right', 'bottom', 'left']:
    ax2.spines[s].set_visible(False)
ax2.text(-4, len(filtrado2), 'Medalhas de Ouro por modalidade ( > 50 anos)', fontsize=15, fontweight='bold', fontfamily='serif', color='#323232')
x_coord2 = filtrado2['Gold'].iloc[maior2]
y_coord2 = filtrado2['Sport'].iloc[maior2]
ax2.annotate(filtrado2['Gold'][maior2], xy=(x_coord2, y_coord2), va='center', ha='center', fontweight='bold', fontfamily='monospace', fontsize=10, color='white', rotation=0)

plt.tight_layout()
plt.show()
 629:
import matplotlib.pyplot as plt

# Filtrando e preparando os dados para o primeiro gráfico
filtrado1 = medalhas_ouro.query('Age <= 15')\
    .groupby(['Sport', 'Medal'])['Medal'].count()\
    .unstack().fillna(0).astype(int).reset_index()\
    .sort_values(by='Gold', ascending=True)

# Filtrando e preparando os dados para o segundo gráfico
filtrado2 = medalhas_ouro.query('Age > 50')\
    .groupby(['Sport', 'Medal'])['Medal'].count()\
    .unstack().fillna(0).astype(int).reset_index()\
    .sort_values(by='Gold', ascending=True)

filtrado2.reset_index(drop=True, inplace=True)

# Criando subplots lado a lado
fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(14, 5), facecolor=cor_fundo_gold)

# Gráfico 1
maior1 = len(filtrado1) - 1
ax1.hlines(y=filtrado1['Sport'], xmin=0, xmax=filtrado1['Gold'], color='gray')
ax1.plot(filtrado1['Gold'], filtrado1['Sport'], "o", markersize=10, color=cor_dourada_clara)
ax1.plot(filtrado1['Gold'][maior1], filtrado1['Sport'][maior1], "o", markersize=20, color=cor_dourada)
ax1.set_facecolor(cor_fundo_gold)
ax1.tick_params(axis=u'both', which=u'both', length=0)
ax1.set_xlabel("")
ax1.set_axisbelow(True)
for s in ['top', 'right', 'bottom', 'left']:
    ax1.spines[s].set_visible(False)
ax1.text(-10, len(filtrado1), 'Medalhas de Ouro por modalidade ( < 16 anos)', fontsize=15, fontweight='bold', fontfamily='serif', color='#323232')
x_coord1 = filtrado1['Gold'].iloc[maior1]
y_coord1 = filtrado1['Sport'].iloc[maior1]
ax1.annotate(filtrado1['Gold'][maior1], xy=(x_coord1, y_coord1), va='center', ha='center', fontweight='bold', fontfamily='monospace', fontsize=10, color='white', rotation=0)

# Gráfico 2
maior2 = len(filtrado2) - 1
ax2.hlines(y=filtrado2['Sport'], xmin=0, xmax=filtrado2['Gold'], color='gray')
ax2.plot(filtrado2['Gold'], filtrado2['Sport'], "o", markersize=10, color=cor_dourada_clara)
ax2.plot(filtrado2['Gold'][maior2], filtrado2['Sport'][maior2], "o", markersize=20, color=cor_dourada)
ax2.set_facecolor(cor_fundo_gold)
ax2.tick_params(axis=u'both', which=u'both', length=0)
ax2.set_xlabel("")
ax2.set_axisbelow(True)
for s in ['top', 'right', 'bottom', 'left']:
    ax2.spines[s].set_visible(False)
ax2.text(-4, len(filtrado2), 'Medalhas de Ouro por modalidade ( > 50 anos)', fontsize=15, fontweight='bold', fontfamily='serif', color='#323232')
x_coord2 = filtrado2['Gold'].iloc[maior2]
y_coord2 = filtrado2['Sport'].iloc[maior2]
ax2.annotate(filtrado2['Gold'][maior2], xy=(x_coord2, y_coord2), va='center', ha='center', fontweight='bold', fontfamily='monospace', fontsize=10, color='white', rotation=0)

plt.tight_layout()
plt.show()
 630:
import matplotlib.pyplot as plt

# Filtrando e preparando os dados para o primeiro gráfico
filtrado1 = medalhas_ouro.query('Age <= 15')\
    .groupby(['Sport', 'Medal'])['Medal'].count()\
    .unstack().fillna(0).astype(int).reset_index()\
    .sort_values(by='Gold', ascending=True)

# Filtrando e preparando os dados para o segundo gráfico
filtrado2 = medalhas_ouro.query('Age > 50')\
    .groupby(['Sport', 'Medal'])['Medal'].count()\
    .unstack().fillna(0).astype(int).reset_index()\
    .sort_values(by='Gold', ascending=True)

filtrado2.reset_index(drop=True, inplace=True)

# Criando subplots lado a lado
fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(14, 5), facecolor=cor_fundo_gold)

# Gráfico 1
maior1 = len(filtrado1) - 1
ax1.hlines(y=filtrado1['Sport'], xmin=0, xmax=filtrado1['Gold'], color='gray')
ax1.plot(filtrado1['Gold'], filtrado1['Sport'], "o", markersize=10, color='#244747')
ax1.plot(filtrado1['Gold'][maior1], filtrado1['Sport'][maior1], "o", markersize=20, color=cor_dourada)
ax1.set_facecolor(cor_fundo_gold)
ax1.tick_params(axis=u'both', which=u'both', length=0)
ax1.set_xlabel("")
ax1.set_axisbelow(True)
for s in ['top', 'right', 'bottom', 'left']:
    ax1.spines[s].set_visible(False)
ax1.text(-10, len(filtrado1), 'Medalhas de Ouro por modalidade ( < 16 anos)', fontsize=15, fontweight='bold', fontfamily='serif', color='#323232')
x_coord1 = filtrado1['Gold'].iloc[maior1]
y_coord1 = filtrado1['Sport'].iloc[maior1]
ax1.annotate(filtrado1['Gold'][maior1], xy=(x_coord1, y_coord1), va='center', ha='center', fontweight='bold', fontfamily='monospace', fontsize=10, color='white', rotation=0)

# Gráfico 2
maior2 = len(filtrado2) - 1
ax2.hlines(y=filtrado2['Sport'], xmin=0, xmax=filtrado2['Gold'], color='gray')
ax2.plot(filtrado2['Gold'], filtrado2['Sport'], "o", markersize=10, color='#244747')
ax2.plot(filtrado2['Gold'][maior2], filtrado2['Sport'][maior2], "o", markersize=20, color=cor_dourada)
ax2.set_facecolor(cor_fundo_gold)
ax2.tick_params(axis=u'both', which=u'both', length=0)
ax2.set_xlabel("")
ax2.set_axisbelow(True)
for s in ['top', 'right', 'bottom', 'left']:
    ax2.spines[s].set_visible(False)
ax2.text(-4, len(filtrado2), 'Medalhas de Ouro por modalidade ( > 50 anos)', fontsize=15, fontweight='bold', fontfamily='serif', color='#323232')
x_coord2 = filtrado2['Gold'].iloc[maior2]
y_coord2 = filtrado2['Sport'].iloc[maior2]
ax2.annotate(filtrado2['Gold'][maior2], xy=(x_coord2, y_coord2), va='center', ha='center', fontweight='bold', fontfamily='monospace', fontsize=10, color='white', rotation=0)

plt.tight_layout()
plt.show()
 631:

max_age = medalhas_ouro['Age'].value_counts().idxmax()

cor_dourada_clara = '#FFE976'
cor_dourada = '#F0C05A'
palette = ['#244747' if age != max_age else cor_dourada for age in sorted(medalhas_ouro['Age'].unique())]

plt.figure(figsize=(20, 10), facecolor=cor_fundo_gold)

ax = sns.countplot(x='Age', data=medalhas_ouro, palette=palette, ec='black')
ax.set_facecolor(cor_fundo_gold)
plt.title('Distribuição de medalhas de ouro por idade', fontsize=15,fontweight='bold',fontfamily='serif',color='#323232')
plt.tight_layout()
plt.ylabel('')
plt.xlabel('')
plt.tight_layout()
 632:

max_age = medalhas_ouro['Age'].value_counts().idxmax()

cor_dourada_clara = '#FFE976'
cor_dourada = '#F0C05A'
palette = ['6F9898' if age != max_age else cor_dourada for age in sorted(medalhas_ouro['Age'].unique())]

plt.figure(figsize=(20, 10), facecolor=cor_fundo_gold)

ax = sns.countplot(x='Age', data=medalhas_ouro, palette=palette, ec='black')
ax.set_facecolor(cor_fundo_gold)
plt.title('Distribuição de medalhas de ouro por idade', fontsize=15,fontweight='bold',fontfamily='serif',color='#323232')
plt.tight_layout()
plt.ylabel('')
plt.xlabel('')
plt.tight_layout()
 633:

max_age = medalhas_ouro['Age'].value_counts().idxmax()

cor_dourada_clara = '#FFE976'
cor_dourada = '#F0C05A'
palette = ['#6F9898' if age != max_age else cor_dourada for age in sorted(medalhas_ouro['Age'].unique())]

plt.figure(figsize=(20, 10), facecolor=cor_fundo_gold)

ax = sns.countplot(x='Age', data=medalhas_ouro, palette=palette, ec='black')
ax.set_facecolor(cor_fundo_gold)
plt.title('Distribuição de medalhas de ouro por idade', fontsize=15,fontweight='bold',fontfamily='serif',color='#323232')
plt.tight_layout()
plt.ylabel('')
plt.xlabel('')
plt.tight_layout()
 634:

max_age = medalhas_ouro['Age'].value_counts().idxmax()

cor_dourada_clara = '#FFE976'
cor_dourada = '#F0C05A'
palette = ['#C3D7D7' if age != max_age else cor_dourada for age in sorted(medalhas_ouro['Age'].unique())]

plt.figure(figsize=(20, 10), facecolor=cor_fundo_gold)

ax = sns.countplot(x='Age', data=medalhas_ouro, palette=palette, ec='black')
ax.set_facecolor(cor_fundo_gold)
plt.title('Distribuição de medalhas de ouro por idade', fontsize=15,fontweight='bold',fontfamily='serif',color='#323232')
plt.tight_layout()
plt.ylabel('')
plt.xlabel('')
plt.tight_layout()
 635:

max_age = medalhas_ouro['Age'].value_counts().idxmax()

cor_dourada_clara = '#FFE976'
cor_dourada = '#F0C05A'
palette = ['#E5E1BC' if age != max_age else cor_dourada for age in sorted(medalhas_ouro['Age'].unique())]

plt.figure(figsize=(20, 10), facecolor=cor_fundo_gold)

ax = sns.countplot(x='Age', data=medalhas_ouro, palette=palette, ec='black')
ax.set_facecolor(cor_fundo_gold)
plt.title('Distribuição de medalhas de ouro por idade', fontsize=15,fontweight='bold',fontfamily='serif',color='#323232')
plt.tight_layout()
plt.ylabel('')
plt.xlabel('')
plt.tight_layout()
 636:

max_age = medalhas_ouro['Age'].value_counts().idxmax()

cor_dourada_clara = '#FFE976'
cor_dourada = '#F0C05A'
palette = ['#E5E1BC' if age != max_age else cor_dourada for age in sorted(medalhas_ouro['Age'].unique())]

plt.figure(figsize=(20, 10), facecolor=cor_fundo_gold)

ax = sns.countplot(x='Age', data=medalhas_ouro, palette=palette, ec='black')
ax.set_facecolor(cor_fundo_gold)
plt.title('Distribuição de medalhas de ouro por idade', fontsize=15,fontweight='bold',fontfamily='serif',color='#323232')
plt.tight_layout()
plt.ylabel('')
plt.xlabel('')

max_medals = medalhas_ouro['Age'].value_counts().max()
ax.annotate(f'{max_medals}', 
            xy=(max_age, max_medals), 
            xytext=(0, 3), 
            textcoords="offset points", 
            ha='center', va='bottom', 
            fontweight='bold', fontfamily='monospace', fontsize=10, color='white')


plt.tight_layout()
 637:

max_age = medalhas_ouro['Age'].value_counts().idxmax()

cor_dourada_clara = '#FFE976'
cor_dourada = '#F0C05A'
palette = ['#E5E1BC' if age != max_age else cor_dourada for age in sorted(medalhas_ouro['Age'].unique())]

plt.figure(figsize=(20, 10), facecolor=cor_fundo_gold)

ax = sns.countplot(x='Age', data=medalhas_ouro, palette=palette, ec='black')
ax.set_facecolor(cor_fundo_gold)
plt.title('Distribuição de medalhas de ouro por idade', fontsize=15,fontweight='bold',fontfamily='serif',color='#323232')
plt.tight_layout()
plt.ylabel('')
plt.xlabel('')

max_medals = medalhas_ouro['Age'].value_counts().max()
ax.annotate(f'{max_medals}', 
            xy=(max_age, max_medals), 
            xytext=(0, 3), 
            textcoords="offset points", 
            ha='center', va='bottom', 
            fontweight='bold', fontfamily='monospace', fontsize=10, color='black')


plt.tight_layout()
 638:

max_age = medalhas_ouro['Age'].value_counts().idxmax()

cor_dourada_clara = '#FFE976'
cor_dourada = '#F0C05A'
palette = ['#E5E1BC' if age != max_age else cor_dourada for age in sorted(medalhas_ouro['Age'].unique())]

plt.figure(figsize=(20, 10), facecolor=cor_fundo_gold)

ax = sns.countplot(x='Age', data=medalhas_ouro, palette=palette, ec='black')
ax.set_facecolor(cor_fundo_gold)
plt.title('Distribuição de medalhas de ouro por idade', fontsize=15,fontweight='bold',fontfamily='serif',color='#323232')
plt.tight_layout()
plt.ylabel('')
plt.xlabel('')

max_medals = medalhas_ouro['Age'].value_counts().max()
ax.annotate(f'{max_medals}', 
            xy=(max_age, max_medals), 
            xytext=(0, 3), 
            textcoords="offset points", 
            ha='center', va='bottom', 
            fontweight='bold', fontfamily='monospace', fontsize=10, color='gray')


plt.tight_layout()
 639:

max_age = medalhas_ouro['Age'].value_counts().idxmax()

cor_dourada_clara = '#FFE976'
cor_dourada = '#F0C05A'
palette = ['#E5E1BC' if age != max_age else cor_dourada for age in sorted(medalhas_ouro['Age'].unique())]

plt.figure(figsize=(20, 10), facecolor=cor_fundo_gold)

ax = sns.countplot(x='Age', data=medalhas_ouro, palette=palette, ec='black')
ax.set_facecolor(cor_fundo_gold)
plt.title('Distribuição de medalhas de ouro por idade', fontsize=15,fontweight='bold',fontfamily='serif',color='#323232')
plt.tight_layout()
plt.ylabel('')
plt.xlabel('')

for p in ax.patches:
    if p.get_x() + p.get_width() / 2 == max_age:
        max_medals = int(p.get_height())
        ax.annotate(f'{max_medals}', 
                    (p.get_x() + p.get_width() / 2, p.get_height()), 
                    ha='center', va='bottom', 
                    fontsize=12, fontweight='bold', color='black')


plt.tight_layout()
 640:

max_age = medalhas_ouro['Age'].value_counts().idxmax()

cor_dourada_clara = '#FFE976'
cor_dourada = '#F0C05A'
palette = ['#E5E1BC' if age != max_age else cor_dourada for age in sorted(medalhas_ouro['Age'].unique())]

plt.figure(figsize=(20, 10), facecolor=cor_fundo_gold)

ax = sns.countplot(x='Age', data=medalhas_ouro, palette=palette, ec='black')
ax.set_facecolor(cor_fundo_gold)
plt.title('Distribuição de medalhas de ouro por idade', fontsize=15,fontweight='bold',fontfamily='serif',color='#323232')
plt.tight_layout()
plt.ylabel('')
plt.xlabel('')

for p in ax.patches:
    if p.get_x() == max_age:
        max_medals = int(p.get_height())
        ax.annotate(f'{max_medals}', 
                    (p.get_x() + p.get_width() / 2, p.get_height()), 
                    ha='center', va='bottom', 
                    fontsize=12, fontweight='bold', color='black')


plt.tight_layout()
 641:

max_age = medalhas_ouro['Age'].value_counts().idxmax()

cor_dourada_clara = '#FFE976'
cor_dourada = '#F0C05A'
palette = ['#E5E1BC' if age != max_age else cor_dourada for age in sorted(medalhas_ouro['Age'].unique())]

plt.figure(figsize=(20, 10), facecolor=cor_fundo_gold)

ax = sns.countplot(x='Age', data=medalhas_ouro, palette=palette, ec='black')
ax.set_facecolor(cor_fundo_gold)
plt.title('Distribuição de medalhas de ouro por idade', fontsize=15,fontweight='bold',fontfamily='serif',color='#323232')
plt.tight_layout()
plt.ylabel('')
plt.xlabel('')

for p in ax.patches:
    if p.contains(max_age):
        max_medals = int(p.get_height())
        ax.annotate(f'{max_medals}', 
                    (p.get_x() + p.get_width() / 2, p.get_height()), 
                    ha='center', va='bottom', 
                    fontsize=12, fontweight='bold', color='black')


plt.tight_layout()
 642:

max_age = medalhas_ouro['Age'].value_counts().idxmax()

cor_dourada_clara = '#FFE976'
cor_dourada = '#F0C05A'
palette = ['#E5E1BC' if age != max_age else cor_dourada for age in sorted(medalhas_ouro['Age'].unique())]

plt.figure(figsize=(20, 10), facecolor=cor_fundo_gold)

ax = sns.countplot(x='Age', data=medalhas_ouro, palette=palette, ec='black')
ax.set_facecolor(cor_fundo_gold)
plt.title('Distribuição de medalhas de ouro por idade', fontsize=15,fontweight='bold',fontfamily='serif',color='#323232')
plt.tight_layout()
plt.ylabel('')
plt.xlabel('')

for p in ax.patches:
    print(p)


plt.tight_layout()
 643:

max_age = medalhas_ouro['Age'].value_counts().idxmax()

cor_dourada_clara = '#FFE976'
cor_dourada = '#F0C05A'
palette = ['#E5E1BC' if age != max_age else cor_dourada for age in sorted(medalhas_ouro['Age'].unique())]

plt.figure(figsize=(20, 10), facecolor=cor_fundo_gold)

ax = sns.countplot(x='Age', data=medalhas_ouro, palette=palette, ec='black')
ax.set_facecolor(cor_fundo_gold)
plt.title('Distribuição de medalhas de ouro por idade', fontsize=15,fontweight='bold',fontfamily='serif',color='#323232')
plt.tight_layout()
plt.ylabel('')
plt.xlabel('')

for p in ax.patches:
    print(p.get_height())


plt.tight_layout()
 644:

max_age = medalhas_ouro['Age'].value_counts().idxmax()

cor_dourada_clara = '#FFE976'
cor_dourada = '#F0C05A'
palette = ['#E5E1BC' if age != max_age else cor_dourada for age in sorted(medalhas_ouro['Age'].unique())]

plt.figure(figsize=(20, 10), facecolor=cor_fundo_gold)

ax = sns.countplot(x='Age', data=medalhas_ouro, palette=palette, ec='black')
ax.set_facecolor(cor_fundo_gold)
plt.title('Distribuição de medalhas de ouro por idade', fontsize=15,fontweight='bold',fontfamily='serif',color='#323232')
plt.tight_layout()
plt.ylabel('')
plt.xlabel('')

max_medals = medalhas_ouro['Age'].value_counts().max()
for p in ax.patches:
    if int(p.get_height()) == max_medals:
        print(int(p.get_height()))


plt.tight_layout()
 645:

max_age = medalhas_ouro['Age'].value_counts().idxmax()

cor_dourada_clara = '#FFE976'
cor_dourada = '#F0C05A'
palette = ['#E5E1BC' if age != max_age else cor_dourada for age in sorted(medalhas_ouro['Age'].unique())]

plt.figure(figsize=(20, 10), facecolor=cor_fundo_gold)

ax = sns.countplot(x='Age', data=medalhas_ouro, palette=palette, ec='black')
ax.set_facecolor(cor_fundo_gold)
plt.title('Distribuição de medalhas de ouro por idade', fontsize=15,fontweight='bold',fontfamily='serif',color='#323232')
plt.tight_layout()
plt.ylabel('')
plt.xlabel('')

max_medals = medalhas_ouro['Age'].value_counts().max()
for p in ax.patches:
    if int(p.get_height()) == max_medals:
        ax.annotate(
            f'{max_medals}', 
            (p.get_x() + p.get_width() / 2, p.get_height()), 
            ha='center', va='bottom', 
            fontsize=12, fontweight='bold', color='black'
        )


plt.tight_layout()
 646:

max_age = medalhas_ouro['Age'].value_counts().idxmax()

cor_dourada_clara = '#FFE976'
cor_dourada = '#F0C05A'
palette = ['#E5E1BC' if age != max_age else cor_dourada for age in sorted(medalhas_ouro['Age'].unique())]

plt.figure(figsize=(20, 10), facecolor=cor_fundo_gold)

ax = sns.countplot(x='Age', data=medalhas_ouro, palette=palette, ec='black')
ax.set_facecolor(cor_fundo_gold)
plt.title('Distribuição de medalhas de ouro por idade', fontsize=15,fontweight='bold',fontfamily='serif',color='#323232')
plt.tight_layout()
plt.ylabel('')
plt.xlabel('')

max_medals = medalhas_ouro['Age'].value_counts().max()
for p in ax.patches:
    if int(p.get_height()) == max_medals:
        ax.annotate(
            f'{max_medals}', 
            (p.get_x() + p.get_width() / 2, p.get_height()), 
            ha='top', va='bottom', 
            fontsize=12, fontweight='bold', color='black'
        )


plt.tight_layout()
 647:

max_age = medalhas_ouro['Age'].value_counts().idxmax()

cor_dourada_clara = '#FFE976'
cor_dourada = '#F0C05A'
palette = ['#E5E1BC' if age != max_age else cor_dourada for age in sorted(medalhas_ouro['Age'].unique())]

plt.figure(figsize=(20, 10), facecolor=cor_fundo_gold)

ax = sns.countplot(x='Age', data=medalhas_ouro, palette=palette, ec='black')
ax.set_facecolor(cor_fundo_gold)
plt.title('Distribuição de medalhas de ouro por idade', fontsize=15,fontweight='bold',fontfamily='serif',color='#323232')
plt.tight_layout()
plt.ylabel('')
plt.xlabel('')

max_medals = medalhas_ouro['Age'].value_counts().max()
for p in ax.patches:
    if int(p.get_height()) == max_medals:
        ax.annotate(
            f'{max_medals}', 
            (p.get_x() + p.get_width() / 2, p.get_height()), 
            ha='center', va='bottom', 
            fontsize=12, fontweight='bold', color='black'
        )


plt.tight_layout()
 648:

max_age = medalhas_ouro['Age'].value_counts().idxmax()

cor_dourada_clara = '#FFE976'
cor_dourada = '#F0C05A'
palette = ['#E5E1BC' if age != max_age else cor_dourada for age in sorted(medalhas_ouro['Age'].unique())]

plt.figure(figsize=(20, 10), facecolor=cor_fundo_gold)

ax = sns.countplot(x='Age', data=medalhas_ouro, palette=palette, ec='black')
ax.set_facecolor(cor_fundo_gold)
plt.title('Distribuição de medalhas de ouro por idade', fontsize=15,fontweight='bold',fontfamily='serif',color='#323232')
plt.tight_layout()
plt.ylabel('')
plt.xlabel('')

max_medals = medalhas_ouro['Age'].value_counts().max()
for p in ax.patches:
    if int(p.get_height()) == max_medals:
        ax.annotate(
            f'{max_medals}', 
            (p.get_x() + p.get_width() / 2, p.get_height()), 
            ha='center', va='top', 
            fontsize=12, fontweight='bold', color='black'
        )


plt.tight_layout()
 649:

max_age = medalhas_ouro['Age'].value_counts().idxmax()

cor_dourada_clara = '#FFE976'
cor_dourada = '#F0C05A'
palette = ['#E5E1BC' if age != max_age else cor_dourada for age in sorted(medalhas_ouro['Age'].unique())]

plt.figure(figsize=(20, 10), facecolor=cor_fundo_gold)

ax = sns.countplot(x='Age', data=medalhas_ouro, palette=palette, ec='black')
ax.set_facecolor(cor_fundo_gold)
plt.title('Distribuição de medalhas de ouro por idade', fontsize=15,fontweight='bold',fontfamily='serif',color='#323232')
plt.tight_layout()
plt.ylabel('')
plt.xlabel('')

max_medals = medalhas_ouro['Age'].value_counts().max()
for p in ax.patches:
    if int(p.get_height()) == max_medals:
        ax.annotate(
            f'{max_medals}', 
            (p.get_x() + p.get_width() / 2, p.get_height()), 
            ha='center', va='bottom', 
            fontsize=12, fontweight='bold', color='black'
        )


plt.tight_layout()
 650:

max_age = medalhas_ouro['Age'].value_counts().idxmax()

cor_dourada_clara = '#FFE976'
cor_dourada = '#F0C05A'
palette = ['#E5E1BC' if age != max_age else cor_dourada for age in sorted(medalhas_ouro['Age'].unique())]

plt.figure(figsize=(20, 10), facecolor=cor_fundo_gold)

ax = sns.countplot(x='Age', data=medalhas_ouro, palette=palette, ec='black')
ax.set_facecolor(cor_fundo_gold)
plt.title('Distribuição de medalhas de ouro por idade', fontsize=15,fontweight='bold',fontfamily='serif',color='#323232')
plt.tight_layout()
plt.ylabel('')
plt.xlabel('')

max_medals = medalhas_ouro['Age'].value_counts().max()
for p in ax.patches:
    if int(p.get_height()) == max_medals:
        ax.annotate(
            f'{max_medals}', 
            (p.get_x() + p.get_width() / 2, p.get_height() + 10), 
            ha='center', va='bottom', 
            fontsize=12, fontweight='bold', color='black'
        )


plt.tight_layout()
 651:

max_age = medalhas_ouro['Age'].value_counts().idxmax()

cor_dourada_clara = '#FFE976'
cor_dourada = '#F0C05A'
palette = ['#E5E1BC' if age != max_age else cor_dourada for age in sorted(medalhas_ouro['Age'].unique())]

plt.figure(figsize=(20, 10), facecolor=cor_fundo_gold)

ax = sns.countplot(x='Age', data=medalhas_ouro, palette=palette, ec='black')
ax.set_facecolor(cor_fundo_gold)
plt.title('Distribuição de medalhas de ouro por idade', fontsize=15,fontweight='bold',fontfamily='serif',color='#323232')
plt.tight_layout()
plt.ylabel('')
plt.xlabel('')

max_medals = medalhas_ouro['Age'].value_counts().max()
for p in ax.patches:
    if int(p.get_height()) == max_medals:
        ax.annotate(
            f'{max_medals}', 
            (p.get_x() + p.get_width() / 2, p.get_height() + 10), 
            ha='center', va='bottom', 
            fontsize=12, fontweight='bold', color= cores_medalhas.get('Gold')
        )


plt.tight_layout()
 652:

max_age = medalhas_ouro['Age'].value_counts().idxmax()

cor_dourada_clara = '#FFE976'
cor_dourada = '#F0C05A'
palette = ['#E5E1BC' if age != max_age else cor_dourada for age in sorted(medalhas_ouro['Age'].unique())]

plt.figure(figsize=(20, 10), facecolor=cor_fundo_gold)

ax = sns.countplot(x='Age', data=medalhas_ouro, palette=palette, ec='black')
ax.set_facecolor(cor_fundo_gold)
plt.title('Distribuição de medalhas de ouro por idade', fontsize=15,fontweight='bold',fontfamily='serif',color='#323232')
plt.tight_layout()
plt.ylabel('')
plt.xlabel('')

max_medals = medalhas_ouro['Age'].value_counts().max()
for p in ax.patches:
    if int(p.get_height()) == max_medals:
        ax.annotate(
            f'{max_medals}', 
            (p.get_x() + p.get_width() / 2, p.get_height() + 10), 
            ha='center', va='bottom', 
            fontsize=12, fontweight='bold', color= 'gray'
        )


plt.tight_layout()
 653:

max_age = medalhas_ouro['Age'].value_counts().idxmax()

cor_dourada_clara = '#FFE976'
cor_dourada = '#F0C05A'
palette = ['#E5E1BC' if age != max_age else cor_dourada for age in sorted(medalhas_ouro['Age'].unique())]

plt.figure(figsize=(20, 10), facecolor=cor_fundo_gold)

ax = sns.countplot(x='Age', data=medalhas_ouro, palette=palette, ec='black')
ax.set_facecolor(cor_fundo_gold)
plt.title('Distribuição de medalhas de ouro por idade', fontsize=15,fontweight='bold',fontfamily='serif',color='#323232')
plt.tight_layout()
plt.ylabel('')
plt.xlabel('')

max_medals = medalhas_ouro['Age'].value_counts().max()
for p in ax.patches:
    if int(p.get_height()) == max_medals:
        ax.annotate(
            f'{max_medals}', 
            (p.get_x() + p.get_width() / 2, p.get_height() + 10), 
            ha='center', va='bottom', 
            fontsize=15, fontweight='bold', color='gray'
        )


plt.tight_layout()
 654:
import matplotlib.pyplot as plt

# Filtrando e preparando os dados para o primeiro gráfico
filtrado1 = medalhas_ouro.query('Age <= 15')\
    .groupby(['Sport', 'Medal'])['Medal'].count()\
    .unstack().fillna(0).astype(int).reset_index()\
    .sort_values(by='Gold', ascending=True)

# Filtrando e preparando os dados para o segundo gráfico
filtrado2 = medalhas_ouro.query('Age > 50')\
    .groupby(['Sport', 'Medal'])['Medal'].count()\
    .unstack().fillna(0).astype(int).reset_index()\
    .sort_values(by='Gold', ascending=True)

filtrado2.reset_index(drop=True, inplace=True)

# Criando subplots lado a lado
fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(14, 5), facecolor=cor_fundo_gold)

# Gráfico 1
maior1 = len(filtrado1) - 1
ax1.hlines(y=filtrado1['Sport'], xmin=0, xmax=filtrado1['Gold'], color='gray')
ax1.plot(filtrado1['Gold'], filtrado1['Sport'], "o", markersize=10, color='#244747')
ax1.plot(filtrado1['Gold'][maior1], filtrado1['Sport'][maior1], "o", markersize=20, color=cor_dourada)
ax1.set_facecolor(cor_fundo_gold)
ax1.tick_params(axis=u'both', which=u'both', length=0)
ax1.set_xlabel("")
ax1.set_axisbelow(True)

for s in ['top', 'right', 'bottom', 'left']:
    ax1.spines[s].set_visible(False)

ax1.text(-10, len(filtrado1), 'Medalhas de Ouro por modalidade ( < 16 anos)', fontsize=15, fontweight='bold', fontfamily='serif', color='#323232')
x_coord1 = filtrado1['Gold'].iloc[maior1]
y_coord1 = filtrado1['Sport'].iloc[maior1]
ax1.annotate(filtrado1['Gold'][maior1], xy=(x_coord1, y_coord1), va='center', ha='center', fontweight='bold', fontfamily='monospace', fontsize=10, color='white', rotation=0)

# Gráfico 2
maior2 = len(filtrado2) - 1
ax2.hlines(y=filtrado2['Sport'], xmin=0, xmax=filtrado2['Gold'], color='gray')
ax2.plot(filtrado2['Gold'], filtrado2['Sport'], "o", markersize=10, color='#244747')
ax2.plot(filtrado2['Gold'][maior2], filtrado2['Sport'][maior2], "o", markersize=20, color=cor_dourada)
ax2.set_facecolor(cor_fundo_gold)
ax2.tick_params(axis=u'both', which=u'both', length=0)
ax2.set_xlabel("")
ax2.set_axisbelow(True)
for s in ['top', 'right', 'bottom', 'left']:
    ax2.spines[s].set_visible(False)
ax2.text(-4, len(filtrado2)+ 1, 'Medalhas de Ouro por modalidade ( > 50 anos)', fontsize=15, fontweight='bold', fontfamily='serif', color='#323232')
x_coord2 = filtrado2['Gold'].iloc[maior2]
y_coord2 = filtrado2['Sport'].iloc[maior2]
ax2.annotate(filtrado2['Gold'][maior2], xy=(x_coord2, y_coord2), va='center', ha='center', fontweight='bold', fontfamily='monospace', fontsize=10, color='white', rotation=0)

plt.tight_layout()
plt.show()
 655:
import matplotlib.pyplot as plt

# Filtrando e preparando os dados para o primeiro gráfico
filtrado1 = medalhas_ouro.query('Age <= 15')\
    .groupby(['Sport', 'Medal'])['Medal'].count()\
    .unstack().fillna(0).astype(int).reset_index()\
    .sort_values(by='Gold', ascending=True)

# Filtrando e preparando os dados para o segundo gráfico
filtrado2 = medalhas_ouro.query('Age > 50')\
    .groupby(['Sport', 'Medal'])['Medal'].count()\
    .unstack().fillna(0).astype(int).reset_index()\
    .sort_values(by='Gold', ascending=True)

filtrado2.reset_index(drop=True, inplace=True)

# Criando subplots lado a lado
fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(14, 5), facecolor=cor_fundo_gold)

# Gráfico 1
maior1 = len(filtrado1) - 1
ax1.hlines(y=filtrado1['Sport'], xmin=0, xmax=filtrado1['Gold'], color='gray')
ax1.plot(filtrado1['Gold'], filtrado1['Sport'], "o", markersize=10, color='#244747')
ax1.plot(filtrado1['Gold'][maior1], filtrado1['Sport'][maior1], "o", markersize=20, color=cor_dourada)
ax1.set_facecolor(cor_fundo_gold)
ax1.tick_params(axis=u'both', which=u'both', length=0)
ax1.set_xlabel("")
ax1.set_axisbelow(True)

for s in ['top', 'right', 'bottom', 'left']:
    ax1.spines[s].set_visible(False)

ax1.text(-10, len(filtrado1), 'Medalhas de Ouro por modalidade ( < 16 anos)', fontsize=15, fontweight='bold', fontfamily='serif', color='#323232')
x_coord1 = filtrado1['Gold'].iloc[maior1]
y_coord1 = filtrado1['Sport'].iloc[maior1]
ax1.annotate(filtrado1['Gold'][maior1], xy=(x_coord1, y_coord1), va='center', ha='center', fontweight='bold', fontfamily='monospace', fontsize=10, color='white', rotation=0)

# Gráfico 2
maior2 = len(filtrado2) - 1
ax2.hlines(y=filtrado2['Sport'], xmin=0, xmax=filtrado2['Gold'], color='gray')
ax2.plot(filtrado2['Gold'], filtrado2['Sport'], "o", markersize=10, color='#244747')
ax2.plot(filtrado2['Gold'][maior2], filtrado2['Sport'][maior2], "o", markersize=20, color=cor_dourada)
ax2.set_facecolor(cor_fundo_gold)
ax2.tick_params(axis=u'both', which=u'both', length=0)
ax2.set_xlabel("")
ax2.set_axisbelow(True)
for s in ['top', 'right', 'bottom', 'left']:
    ax2.spines[s].set_visible(False)
ax2.text(-4, len(filtrado2) - 1, 'Medalhas de Ouro por modalidade ( > 50 anos)', fontsize=15, fontweight='bold', fontfamily='serif', color='#323232')
x_coord2 = filtrado2['Gold'].iloc[maior2]
y_coord2 = filtrado2['Sport'].iloc[maior2]
ax2.annotate(filtrado2['Gold'][maior2], xy=(x_coord2, y_coord2), va='center', ha='center', fontweight='bold', fontfamily='monospace', fontsize=10, color='white', rotation=0)

plt.tight_layout()
plt.show()
 656:
import matplotlib.pyplot as plt

# Filtrando e preparando os dados para o primeiro gráfico
filtrado1 = medalhas_ouro.query('Age <= 15')\
    .groupby(['Sport', 'Medal'])['Medal'].count()\
    .unstack().fillna(0).astype(int).reset_index()\
    .sort_values(by='Gold', ascending=True)

# Filtrando e preparando os dados para o segundo gráfico
filtrado2 = medalhas_ouro.query('Age > 50')\
    .groupby(['Sport', 'Medal'])['Medal'].count()\
    .unstack().fillna(0).astype(int).reset_index()\
    .sort_values(by='Gold', ascending=True)

filtrado2.reset_index(drop=True, inplace=True)

# Criando subplots lado a lado
fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(14, 5), facecolor=cor_fundo_gold)

# Gráfico 1
maior1 = len(filtrado1) - 1
ax1.hlines(y=filtrado1['Sport'], xmin=0, xmax=filtrado1['Gold'], color='gray')
ax1.plot(filtrado1['Gold'], filtrado1['Sport'], "o", markersize=10, color='#244747')
ax1.plot(filtrado1['Gold'][maior1], filtrado1['Sport'][maior1], "o", markersize=20, color=cor_dourada)
ax1.set_facecolor(cor_fundo_gold)
ax1.tick_params(axis=u'both', which=u'both', length=0)
ax1.set_xlabel("")
ax1.set_axisbelow(True)

for s in ['top', 'right', 'bottom', 'left']:
    ax1.spines[s].set_visible(False)

ax1.text(-10, len(filtrado1), 'Medalhas de Ouro por modalidade ( < 16 anos)', fontsize=15, fontweight='bold', fontfamily='serif', color='#323232')
x_coord1 = filtrado1['Gold'].iloc[maior1]
y_coord1 = filtrado1['Sport'].iloc[maior1]
ax1.annotate(filtrado1['Gold'][maior1], xy=(x_coord1, y_coord1), va='center', ha='center', fontweight='bold', fontfamily='monospace', fontsize=10, color='white', rotation=0)

# Gráfico 2
maior2 = len(filtrado2) - 1
ax2.hlines(y=filtrado2['Sport'], xmin=0, xmax=filtrado2['Gold'], color='gray')
ax2.plot(filtrado2['Gold'], filtrado2['Sport'], "o", markersize=10, color='#244747')
ax2.plot(filtrado2['Gold'][maior2], filtrado2['Sport'][maior2], "o", markersize=20, color=cor_dourada)
ax2.set_facecolor(cor_fundo_gold)
ax2.tick_params(axis=u'both', which=u'both', length=0)
ax2.set_xlabel("")
ax2.set_axisbelow(True)
for s in ['top', 'right', 'bottom', 'left']:
    ax2.spines[s].set_visible(False)
ax2.text(-4, len(filtrado2) - 0.4, 'Medalhas de Ouro por modalidade ( > 50 anos)', fontsize=15, fontweight='bold', fontfamily='serif', color='#323232')
x_coord2 = filtrado2['Gold'].iloc[maior2]
y_coord2 = filtrado2['Sport'].iloc[maior2]
ax2.annotate(filtrado2['Gold'][maior2], xy=(x_coord2, y_coord2), va='center', ha='center', fontweight='bold', fontfamily='monospace', fontsize=10, color='white', rotation=0)

plt.tight_layout()
plt.show()
 657:
import matplotlib.pyplot as plt

# Filtrando e preparando os dados para o primeiro gráfico
filtrado1 = medalhas_ouro.query('Age <= 15')\
    .groupby(['Sport', 'Medal'])['Medal'].count()\
    .unstack().fillna(0).astype(int).reset_index()\
    .sort_values(by='Gold', ascending=True)

# Filtrando e preparando os dados para o segundo gráfico
filtrado2 = medalhas_ouro.query('Age > 50')\
    .groupby(['Sport', 'Medal'])['Medal'].count()\
    .unstack().fillna(0).astype(int).reset_index()\
    .sort_values(by='Gold', ascending=True)

filtrado2.reset_index(drop=True, inplace=True)

# Criando subplots lado a lado
fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(14, 5), facecolor=cor_fundo_gold)

# Gráfico 1
maior1 = len(filtrado1) - 1
ax1.hlines(y=filtrado1['Sport'], xmin=0, xmax=filtrado1['Gold'], color='gray')
ax1.plot(filtrado1['Gold'], filtrado1['Sport'], "o", markersize=10, color='#244747')
ax1.plot(filtrado1['Gold'][maior1], filtrado1['Sport'][maior1], "o", markersize=20, color=cor_dourada)
ax1.set_facecolor(cor_fundo_gold)
ax1.tick_params(axis=u'both', which=u'both', length=0)
ax1.set_xlabel("")
ax1.set_axisbelow(True)

for s in ['top', 'right', 'bottom', 'left']:
    ax1.spines[s].set_visible(False)

ax1.text(-10, len(filtrado1), 'Medalhas de Ouro por modalidade ( < 16 anos)', fontsize=15, fontweight='bold', fontfamily='serif', color='#323232')
x_coord1 = filtrado1['Gold'].iloc[maior1]
y_coord1 = filtrado1['Sport'].iloc[maior1]
ax1.annotate(filtrado1['Gold'][maior1], xy=(x_coord1, y_coord1), va='center', ha='center', fontweight='bold', fontfamily='monospace', fontsize=10, color='white', rotation=0)

# Gráfico 2
maior2 = len(filtrado2) - 1
ax2.hlines(y=filtrado2['Sport'], xmin=0, xmax=filtrado2['Gold'], color='gray')
ax2.plot(filtrado2['Gold'], filtrado2['Sport'], "o", markersize=10, color='#244747')
ax2.plot(filtrado2['Gold'][maior2], filtrado2['Sport'][maior2], "o", markersize=20, color=cor_dourada)
ax2.set_facecolor(cor_fundo_gold)
ax2.tick_params(axis=u'both', which=u'both', length=0)
ax2.set_xlabel("")
ax2.set_axisbelow(True)
for s in ['top', 'right', 'bottom', 'left']:
    ax2.spines[s].set_visible(False)
ax2.text(-4, len(filtrado2) - 0.1, 'Medalhas de Ouro por modalidade ( > 50 anos)', fontsize=15, fontweight='bold', fontfamily='serif', color='#323232')
x_coord2 = filtrado2['Gold'].iloc[maior2]
y_coord2 = filtrado2['Sport'].iloc[maior2]
ax2.annotate(filtrado2['Gold'][maior2], xy=(x_coord2, y_coord2), va='center', ha='center', fontweight='bold', fontfamily='monospace', fontsize=10, color='white', rotation=0)

plt.tight_layout()
plt.show()
 658:
import matplotlib.pyplot as plt

# Filtrando e preparando os dados para o primeiro gráfico
filtrado1 = medalhas_ouro.query('Age <= 15')\
    .groupby(['Sport', 'Medal'])['Medal'].count()\
    .unstack().fillna(0).astype(int).reset_index()\
    .sort_values(by='Gold', ascending=True)

# Filtrando e preparando os dados para o segundo gráfico
filtrado2 = medalhas_ouro.query('Age > 50')\
    .groupby(['Sport', 'Medal'])['Medal'].count()\
    .unstack().fillna(0).astype(int).reset_index()\
    .sort_values(by='Gold', ascending=True)

filtrado2.reset_index(drop=True, inplace=True)

# Criando subplots lado a lado
fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(14, 5), facecolor=cor_fundo_gold)

# Gráfico 1
maior1 = len(filtrado1) - 1
ax1.hlines(y=filtrado1['Sport'], xmin=0, xmax=filtrado1['Gold'], color='gray')
ax1.plot(filtrado1['Gold'], filtrado1['Sport'], "o", markersize=10, color='#244747')
ax1.plot(filtrado1['Gold'][maior1], filtrado1['Sport'][maior1], "o", markersize=20, color=cor_dourada)
ax1.set_facecolor(cor_fundo_gold)
ax1.tick_params(axis=u'both', which=u'both', length=0)
ax1.set_xlabel("")
ax1.set_axisbelow(True)

for s in ['top', 'right', 'bottom', 'left']:
    ax1.spines[s].set_visible(False)

ax1.text(-10, len(filtrado1), 'Medalhas de Ouro por modalidade ( < 16 anos)', fontsize=15, fontweight='bold', fontfamily='serif', color='#323232')
x_coord1 = filtrado1['Gold'].iloc[maior1]
y_coord1 = filtrado1['Sport'].iloc[maior1]
ax1.annotate(filtrado1['Gold'][maior1], xy=(x_coord1, y_coord1), va='center', ha='center', fontweight='bold', fontfamily='monospace', fontsize=10, color='white', rotation=0)

# Gráfico 2
maior2 = len(filtrado2) - 1
ax2.hlines(y=filtrado2['Sport'], xmin=0, xmax=filtrado2['Gold'], color='gray')
ax2.plot(filtrado2['Gold'], filtrado2['Sport'], "o", markersize=10, color='#244747')
ax2.plot(filtrado2['Gold'][maior2], filtrado2['Sport'][maior2], "o", markersize=20, color=cor_dourada)
ax2.set_facecolor(cor_fundo_gold)
ax2.tick_params(axis=u'both', which=u'both', length=0)
ax2.set_xlabel("")
ax2.set_axisbelow(True)
for s in ['top', 'right', 'bottom', 'left']:
    ax2.spines[s].set_visible(False)
ax2.text(-4, len(filtrado2) - 0.2, 'Medalhas de Ouro por modalidade ( > 50 anos)', fontsize=15, fontweight='bold', fontfamily='serif', color='#323232')
x_coord2 = filtrado2['Gold'].iloc[maior2]
y_coord2 = filtrado2['Sport'].iloc[maior2]
ax2.annotate(filtrado2['Gold'][maior2], xy=(x_coord2, y_coord2), va='center', ha='center', fontweight='bold', fontfamily='monospace', fontsize=10, color='white', rotation=0)

plt.tight_layout()
plt.show()
 659:
cores_douradas = ["#d4af37", "#ffd700", "#f0e68c"]
cor_medalhas_array = ["#f0c05a", "lightgray", '#a97142']
cores_medalhas = {'Gold': '#f0c05a', 'Silver': 'Lightgray', 'Bronze': '#a97142'}
cores_olimpicas = ["#4A90D9", "#F0E4A1", "#6D6E71", "#8BCC8C", "#FF5E5E", "#3A78C2", "#F7E5A5", "#8C8C8C", "#7ABF7A", "#FF4D4D", "#5D8AB4", "#F5D787", "#6D6E6E", "#9BCC9B", "#FF4C4C", "#3C8CC2", "#F7E7A2", "#7F7F7F", "#7EBF7E", "#FF6D6D"]

cor_fundo_padrao = '#F9F9F9'
cor_fundo_gold = '#FFFEF9'

mapa_dourado = LinearSegmentedColormap.from_list("golden", cores_douradas, N=100)
mapa_olimpico = LinearSegmentedColormap.from_list("olimpic", cores_olimpicas, N=100)
 660:
filtrado = mesclado.query("Season == 'Summer'").groupby(['Year','NOC','Medal'])['Medal'].count().unstack().fillna(0).astype(int).reset_index()

compt_verao = filtrado[['Year','Bronze', 'Silver', 'Gold']].groupby(['Year']).sum().reset_index()

fig, ax = plt.subplots(1, 1, figsize=(18, 5), facecolor=cor_fundo_padrao)

ax.set_facecolor(cor_fundo_padrao)

medals_list = ['Bronze', 'Silver', 'Gold']
width = 0.75

for i, medal in enumerate(np.array(medals_list)):
    ax.bar(compt_verao['Year']+(width*(i-1.5)), compt_verao[medal], width, color=cor_medalhas_array[i], label=medal, ec='black')
    
for s in ['top', 'right']:
    ax.spines[s].set_visible(False)

Xstart, Xend = ax.get_xlim()
Ystart, Yend = ax.get_ylim()

ax.text(Xstart+3,Yend+50, 'Medalhas na competição de Verão distribuídas pelos anos', fontsize=15,fontweight='bold',fontfamily='serif',color='#323232')
ax.set_xlim(Xstart+3, Xend)
ax.grid(which='both', axis='x', zorder=5, color='gray', linestyle=':', dashes=(1,5))
ax.set_axisbelow(True)
ax.legend(facecolor='white')
 661:
cores_douradas = ["#d4af37", "#ffd700", "#f0e68c"]
cor_medalhas_array = ["#a97142", "lightgray", '#f0c05a']
cores_medalhas = {'Gold': '#f0c05a', 'Silver': 'Lightgray', 'Bronze': '#a97142'}
cores_olimpicas = ["#4A90D9", "#F0E4A1", "#6D6E71", "#8BCC8C", "#FF5E5E", "#3A78C2", "#F7E5A5", "#8C8C8C", "#7ABF7A", "#FF4D4D", "#5D8AB4", "#F5D787", "#6D6E6E", "#9BCC9B", "#FF4C4C", "#3C8CC2", "#F7E7A2", "#7F7F7F", "#7EBF7E", "#FF6D6D"]

cor_fundo_padrao = '#F9F9F9'
cor_fundo_gold = '#FFFEF9'

mapa_dourado = LinearSegmentedColormap.from_list("golden", cores_douradas, N=100)
mapa_olimpico = LinearSegmentedColormap.from_list("olimpic", cores_olimpicas, N=100)
 662:
filtrado = mesclado.query("Season == 'Summer'").groupby(['Year','NOC','Medal'])['Medal'].count().unstack().fillna(0).astype(int).reset_index()

compt_verao = filtrado[['Year','Bronze', 'Silver', 'Gold']].groupby(['Year']).sum().reset_index()

fig, ax = plt.subplots(1, 1, figsize=(18, 5), facecolor=cor_fundo_padrao)

ax.set_facecolor(cor_fundo_padrao)

medals_list = ['Bronze', 'Silver', 'Gold']
width = 0.75

for i, medal in enumerate(np.array(medals_list)):
    ax.bar(compt_verao['Year']+(width*(i-1.5)), compt_verao[medal], width, color=cor_medalhas_array[i], label=medal, ec='black')
    
for s in ['top', 'right']:
    ax.spines[s].set_visible(False)

Xstart, Xend = ax.get_xlim()
Ystart, Yend = ax.get_ylim()

ax.text(Xstart+3,Yend+50, 'Medalhas na competição de Verão distribuídas pelos anos', fontsize=15,fontweight='bold',fontfamily='serif',color='#323232')
ax.set_xlim(Xstart+3, Xend)
ax.grid(which='both', axis='x', zorder=5, color='gray', linestyle=':', dashes=(1,5))
ax.set_axisbelow(True)
ax.legend(facecolor='white')
 663:
filtrado = mesclado.query("Season == 'Summer'").groupby(['Year','NOC','Medal'])['Medal'].count().unstack().fillna(0).astype(int).reset_index()

compt_verao = filtrado[['Year','Bronze', 'Silver', 'Gold']].groupby(['Year']).sum().reset_index()

fig, ax = plt.subplots(1, 1, figsize=(18, 5), facecolor=cor_fundo_padrao)

ax.set_facecolor(cor_fundo_padrao)

medals_list = ['Bronze', 'Silver', 'Gold']
width = 0.75

for i, medal in enumerate(np.array(medals_list)):
    ax.bar(compt_verao['Year']+(width*(i-1.5)), compt_verao[medal], width, color=cor_medalhas_array[i], label=medal, ec='gray')
    
for s in ['top', 'right']:
    ax.spines[s].set_visible(False)

Xstart, Xend = ax.get_xlim()
Ystart, Yend = ax.get_ylim()

ax.text(Xstart+3,Yend+50, 'Medalhas na competição de Verão distribuídas pelos anos', fontsize=15,fontweight='bold',fontfamily='serif',color='#323232')
ax.set_xlim(Xstart+3, Xend)
ax.grid(which='both', axis='x', zorder=5, color='gray', linestyle=':', dashes=(1,5))
ax.set_axisbelow(True)
ax.legend(facecolor='white')
 664:
filtrado = mesclado.query("Season == 'Winter'").groupby(['Year','NOC','Medal'])['Medal'].count().unstack().fillna(0).astype(int).reset_index()

compt_inverno = filtrado[['Year','Bronze', 'Silver', 'Gold']].groupby(['Year']).sum().reset_index()

fig, ax = plt.subplots(1, 1, figsize=(18, 5), facecolor=cor_fundo_padrao)

ax.set_facecolor(cor_fundo_padrao)

medals_list = ['Bronze', 'Silver', 'Gold']
width = 0.75

for i, medal in enumerate(np.array(medals_list)):
    ax.bar(compt_inverno['Year']+(width*(i-1.5)), compt_inverno[medal], width, color=cor_medalhas_array[i], label=medal, ec='gray')
    
for s in ['top', 'right']:
    ax.spines[s].set_visible(False)

Xstart, Xend = ax.get_xlim()
Ystart, Yend = ax.get_ylim()

ax.text(Xstart+3,Yend+50, 'Medalhas na competição de Inverno distribuídas pelos anos', fontsize=15,fontweight='bold',fontfamily='serif',color='#323232')
ax.set_xlim(Xstart+3, Xend)
ax.grid(which='both', axis='x', zorder=5, color='gray', linestyle=':', dashes=(1,5))
ax.set_axisbelow(True)
ax.legend(facecolor='white')
 665:
medalhas = mesclado.groupby(['region', 'Medal'])['Medal'].value_counts().unstack().fillna(0).astype(int)
medalhas['Total'] = medalhas['Bronze'] + medalhas['Silver'] + medalhas['Gold']
medals = medalhas[['Bronze','Silver','Gold','Total']].sort_values(by='Total', ascending=False)
medals.iloc[:20].style.set_caption('Medalhas por países [Top 20]')\
.bar(subset=['Gold'], color=cores_medalhas.get('Gold'))\
.bar(subset=['Silver'], color=cores_medalhas.get('Silver'))\
.bar(subset=['Bronze'], color=cores_medalhas.get('Bronze'), ec='gray')
 666:
medalhas = mesclado.groupby(['region', 'Medal'])['Medal'].value_counts().unstack().fillna(0).astype(int)
medalhas['Total'] = medalhas['Bronze'] + medalhas['Silver'] + medalhas['Gold']
medals = medalhas[['Bronze','Silver','Gold','Total']].sort_values(by='Total', ascending=False)
medals.iloc[:20].style.set_caption('Medalhas por países [Top 20]')\
.bar(subset=['Gold'], color=cores_medalhas.get('Gold'))\
.bar(subset=['Silver'], color=cores_medalhas.get('Silver'))\
.bar(subset=['Bronze'], color=cores_medalhas.get('Bronze'))
 667:
medalhas = mesclado.groupby(['region', 'Medal'])['Medal'].value_counts().unstack().fillna(0).astype(int)
medalhas['Total'] = medalhas['Bronze'] + medalhas['Silver'] + medalhas['Gold']
medals = medalhas[['Bronze','Silver','Gold','Total']].sort_values(by='Total', ascending=False)
medals.iloc[:20].style.set_caption('Medalhas por País [Top 20]')\
.bar(subset=['Gold'], color=cores_medalhas.get('Gold'))\
.bar(subset=['Silver'], color=cores_medalhas.get('Silver'))\
.bar(subset=['Bronze'], color=cores_medalhas.get('Bronze'))
 668:
medalhas = mesclado.groupby(['region', 'Medal'])['Medal'].value_counts().unstack().fillna(0).astype(int)
medalhas['Total'] = medalhas['Bronze'] + medalhas['Silver'] + medalhas['Gold']
medals = medalhas[['Bronze','Silver','Gold','Total']].sort_values(by='Total', ascending=False)
medals.iloc[:20].style.set_caption('Medalhas por País (Top 20)')\
.bar(subset=['Gold'], color=cores_medalhas.get('Gold'))\
.bar(subset=['Silver'], color=cores_medalhas.get('Silver'))\
.bar(subset=['Bronze'], color=cores_medalhas.get('Bronze'))
 669:
heatmap_data = medalhas_ouro.groupby(['NOC', 'Medal'])['Medal'].count().unstack().fillna(0).astype(int)
heatmap_data
 670:
heatmap_data = medalhas_ouro.groupby(['NOC', 'Medal'])['Medal'].count().unstack().fillna(0).astype(int)
heatmap_data.columns = ['Bronze', 'Gold', 'Silver']
heatmap_data
 671:
heatmap_data = mesclado.groupby(['NOC', 'Medal'])['Medal'].count().unstack().fillna(0).astype(int)
heatmap_data.columns = ['Bronze', 'Gold', 'Silver']
heatmap_data
 672:
heatmap_data = mesclado.groupby(['NOC', 'Medal'])['Medal'].count().unstack().fillna(0).astype(int)
heatmap_data.columns = ['Bronze', 'Gold', 'Silver']
heatmap_data['Total'] = heatmap_data['Bronze'] + heatmap_data['Silver'] + heatmap_data['Gold']

heatmap_data
 673:
heatmap_data = mesclado.groupby(['NOC', 'Medal'])['Medal'].count().unstack().fillna(0).astype(int)
heatmap_data.columns = ['Bronze', 'Gold', 'Silver']
heatmap_data['Total'] = heatmap_data['Bronze'] + heatmap_data['Silver'] + heatmap_data['Gold']

heatmap_data.sort_values(by='Total')
 674:
heatmap_data = mesclado.groupby(['NOC', 'Medal'])['Medal'].count().unstack().fillna(0).astype(int)
heatmap_data.columns = ['Bronze', 'Gold', 'Silver']
heatmap_data['Total'] = heatmap_data['Bronze'] + heatmap_data['Silver'] + heatmap_data['Gold']

heatmap_data.sort_values(by='Total', ascending=False)
 675:
heatmap_data = mesclado.groupby(['NOC', 'Medal'])['Medal'].count().unstack().fillna(0).astype(int)
heatmap_data.columns = ['Bronze', 'Gold', 'Silver']
heatmap_data['Total'] = heatmap_data['Bronze'] + heatmap_data['Silver'] + heatmap_data['Gold']

heatmap_data.sort_values(by='Total', ascending=False)

top_10 = heatmap_data[:10]

top_10
 676:
data_sub = mesclado.groupby('NOC')['Year']

data_sub
 677:
data_sub =  medalhas_ouro

data_sub
 678:
data_sub =  medalhas_ouro.groupby(['region'])['medal']

data_sub
 679:
data_sub =  medalhas_ouro.groupby(['region'])['Medal']

data_sub
 680:
data_sub =  medalhas_ouro.groupby(['region'])['Medal'].count()

data_sub
 681:
data_sub =  medalhas_ouro.groupby(['region'])['Medal'].count().unstack()

data_sub
 682:
data_sub =  medalhas_ouro.groupby(['region'])['Medal'].count()

data_sub
 683:
data_sub =  medalhas_ouro.groupby(['region'])['Medal'].count().reset_index()

data_sub
 684:
data_sub =  medalhas_ouro.groupby(['region'])['Medal'].count().reset_index().sort_values(by='Medal')

data_sub
 685:
data_sub =  medalhas_ouro.groupby(['region'])['Medal'].count().reset_index().sort_values(by='Medal', ascending=False)

data_sub
 686:
data_sub =  medalhas_ouro.groupby(['region'])['Medal'].count().reset_index().sort_values(by='Medal', ascending=False).reset_index()

data_sub
 687:
data_sub =  medalhas_ouro.groupby(['region'])['Medal'].count().reset_index().sort_values(by='Medal', ascending=False).reset_index()

data_sub = data_sub[:10]
 688:
data_sub =  medalhas_ouro.groupby(['region'])['Medal'].count().reset_index().sort_values(by='Medal', ascending=False).reset_index()

data_sub = data_sub[:10]

data_sub
 689:
data_sub =  medalhas_ouro.groupby(['region'])['Medal'].count().reset_index().sort_values(by='Medal', ascending=False).reset_index()

data_sub = data_sub[:10]

data_sub

color_map = ['#221f1f' for _ in range(0, 9)]
color_map[0] = color_map[9] =  '#b20710' # color highlight
color_map[0] = color_map[9] =  '#b20710' # color highlight

color_map
 690:
data_sub =  medalhas_ouro.groupby(['region'])['Medal'].count().reset_index().sort_values(by='Medal', ascending=False).reset_index()

data_sub = data_sub[:10]

data_sub

color_map = ['#221f1f' for _ in range(0, 9)]


color_map
 691:
data_sub =  medalhas_ouro.groupby(['region'])['Medal'].count().reset_index().sort_values(by='Medal', ascending=False).reset_index()

data_sub = data_sub[:10]

data_sub

color_map = ['#221f1f' for _ in range(0, 10)]
color_map[0] = color_map[9] =  '#b20710' # color highlight
color_map[0] = color_map[9] =  '#b20710' # color highlight

color_map
 692:
data_sub =  medalhas_ouro.groupby(['region'])['Medal'].count().reset_index().sort_values(by='Medal', ascending=False).reset_index()

data_sub = data_sub[:10]

data_sub

color_map = ['#221f1f' for _ in range(0, 10)]
color_map[9] = color_map[9] =  '#b20710' # color highlight
color_map[9] = color_map[9] =  '#b20710' # color highlight

color_map
 693:
data_sub =  medalhas_ouro.groupby(['region'])['Medal'].count().reset_index().sort_values(by='Medal', ascending=False).reset_index()

data_sub = data_sub[:10]

data_sub

color_map = ['#221f1f' for _ in range(0, 10)]
color_map[9] = color_map[9] =  '#b20710' # color highlight

color_map
 694:
data_sub =  medalhas_ouro.groupby(['region'])['Medal'].count().reset_index().sort_values(by='Medal', ascending=False).reset_index()

data_sub = data_sub[:10]

data_sub

color_map = ['#221f1f' for _ in range(0, 10)]
color_map[0] = color_map[9] =  '#b20710' # color highlight

color_map
 695:
data_sub =  medalhas_ouro.groupby(['region'])['Medal'].count().reset_index().sort_values(by='Medal', ascending=False).reset_index()

data_sub = data_sub[:10]

data_sub

color_map = ['#221f1f' for _ in range(0, 10)]
color_map[len(color_map)-1] = color_map[len(color_map)] =  '#b20710' # color highlight

color_map
 696:
data_sub =  medalhas_ouro.groupby(['region'])['Medal'].count().reset_index().sort_values(by='Medal', ascending=False).reset_index()

data_sub = data_sub[:10]

data_sub

color_map = ['#221f1f' for _ in range(0, 10)]
color_map[len(color_map)-2] = color_map[len(color_map) - 1] =  '#b20710' # color highlight

color_map
 697:
data_sub =  medalhas_ouro.groupby(['region'])['Medal'].count().reset_index().sort_values(by='Medal', ascending=False).reset_index()

data_sub = data_sub[:10]

data_sub

color_map = ['#221f1f' for _ in range(0, 10)]
color_map[len(color_map)-2] = color_map[len(color_map) - 1] =  '#b20710' # color highlight

plt.figure(figsize=(8,8))
ax = plt.subplot(111, polar=True)
 698:
data_sub =  medalhas_ouro.groupby(['region'])['Medal'].count().reset_index().sort_values(by='Medal', ascending=False).reset_index()

data_sub = data_sub[:10]

data_sub

color_map = ['#221f1f' for _ in range(0, 10)]
color_map[len(color_map)-2] = color_map[len(color_map) - 1] =  '#b20710' # color highlight

plt.figure(figsize=(8,8))
ax = plt.subplot(111, polar=True)
 699:
data_sub =  medalhas_ouro.groupby(['region'])['Medal'].count().reset_index().sort_values(by='Medal', ascending=False).reset_index()

data_sub = data_sub[:10]

data_sub

color_map = ['#221f1f' for _ in range(0, 10)]
color_map[len(color_map)-2] = color_map[len(color_map) - 1] =  '#b20710' # color highlight

plt.figure(figsize=(8,8))
ax = plt.subplot(111, polar=True)
plt.axis('off')
 700:
data_sub =  medalhas_ouro.groupby(['region'])['Medal'].count().reset_index().sort_values(by='Medal', ascending=False).reset_index()

data_sub = data_sub[:10]

data_sub

color_map = ['#221f1f' for _ in range(0, 10)]
color_map[len(color_map)-2] = color_map[len(color_map) - 1] =  '#b20710' # color highlight

plt.figure(figsize=(8,8))
ax = plt.subplot(111, polar=True)
plt.axis('off')

upperLimit = 30
lowerLimit = 1
labelPadding = 30

max_ = data_sub['Medal'].max()

max_
 701:
data_sub =  medalhas_ouro.groupby(['region'])['Medal'].count().reset_index().sort_values(by='Medal', ascending=False).reset_index()

data_sub = data_sub[:10]

data_sub

color_map = ['#221f1f' for _ in range(0, 10)]
color_map[len(color_map)-2] = color_map[len(color_map) - 1] =  '#b20710' # color highlight

plt.figure(figsize=(8,8))
ax = plt.subplot(111, polar=True)
plt.axis('off')

upperLimit = 30
lowerLimit = 1
labelPadding = 30

max_ = data_sub['Medal'].max()

slope = (max - lowerLimit) / max

slope
 702:
data_sub =  medalhas_ouro.groupby(['region'])['Medal'].count().reset_index().sort_values(by='Medal', ascending=False).reset_index()

data_sub = data_sub[:10]

data_sub

color_map = ['#221f1f' for _ in range(0, 10)]
color_map[len(color_map)-2] = color_map[len(color_map) - 1] =  '#b20710' # color highlight

plt.figure(figsize=(8,8))
ax = plt.subplot(111, polar=True)
plt.axis('off')

upperLimit = 30
lowerLimit = 1
labelPadding = 30

max_ = data_sub['Medal'].max()

slope = (max_ - lowerLimit) / max_

slope
 703:
data_sub =  medalhas_ouro.groupby(['region'])['Medal'].count().reset_index().sort_values(by='Medal', ascending=False).reset_index()

data_sub = data_sub[:10]

data_sub

color_map = ['#221f1f' for _ in range(0, 10)]
color_map[len(color_map)-2] = color_map[len(color_map) - 1] =  '#b20710' # color highlight

plt.figure(figsize=(8,8))
ax = plt.subplot(111, polar=True)
plt.axis('off')

upperLimit = 30
lowerLimit = 1
labelPadding = 30

max_ = data_sub['Medal'].max()

slope = (max_ - lowerLimit) / max_

heights = slope * data_sub.Value + lowerLimit

heights
 704:
data_sub =  medalhas_ouro.groupby(['region'])['Medal'].count().reset_index().sort_values(by='Medal', ascending=False).reset_index()

data_sub = data_sub[:10]

data_sub

color_map = ['#221f1f' for _ in range(0, 10)]
color_map[len(color_map)-2] = color_map[len(color_map) - 1] =  '#b20710' # color highlight

plt.figure(figsize=(8,8))
ax = plt.subplot(111, polar=True)
plt.axis('off')

upperLimit = 30
lowerLimit = 1
labelPadding = 30

max_ = data_sub['Medal'].max()

slope = (max_ - lowerLimit) / max_

heights = slope * data_sub.values + lowerLimit

heights
 705:
data_sub =  medalhas_ouro.groupby(['region'])['Medal'].count().reset_index().sort_values(by='Medal', ascending=False).reset_index()

data_sub = data_sub[:10]

data_sub

color_map = ['#221f1f' for _ in range(0, 10)]
color_map[len(color_map)-2] = color_map[len(color_map) - 1] =  '#b20710' # color highlight

plt.figure(figsize=(8,8))
ax = plt.subplot(111, polar=True)
plt.axis('off')

upperLimit = 30
lowerLimit = 1
labelPadding = 30

max_ = data_sub['Medal'].max()

slope = (max_ - lowerLimit) / max_

heights = slope * data_sub.Medal + lowerLimit

heights
 706:
data_sub =  medalhas_ouro.groupby(['region'])['Medal'].count().reset_index().sort_values(by='Medal', ascending=False).reset_index()

data_sub = data_sub[:10]

data_sub

color_map = ['#221f1f' for _ in range(0, 10)]
color_map[len(color_map)-2] = color_map[len(color_map) - 1] =  '#b20710' # color highlight

plt.figure(figsize=(8,8))
ax = plt.subplot(111, polar=True)
plt.axis('off')

upperLimit = 30
lowerLimit = 1
labelPadding = 30

max_ = data_sub['Medal'].max()

slope = (max_ - lowerLimit) / max_

heights = slope * data_sub.Medal + lowerLimit

width = 2*np.pi / len(data_sub.index)

width
 707:
data_sub =  medalhas_ouro.groupby(['region'])['Medal'].count().reset_index().sort_values(by='Medal', ascending=False).reset_index()

data_sub = data_sub[:10]

data_sub

color_map = ['#221f1f' for _ in range(0, 10)]
color_map[len(color_map)-2] = color_map[len(color_map) - 1] =  '#b20710' # color highlight

plt.figure(figsize=(8,8))
ax = plt.subplot(111, polar=True)
plt.axis('off')

upperLimit = 30
lowerLimit = 1
labelPadding = 30

max_ = data_sub['Medal'].max()

slope = (max_ - lowerLimit) / max_

heights = slope * data_sub.Medal + lowerLimit

width = 2*np.pi / len(data_sub.index)

indexes = list(range(1, len(data_sub.index)+1))

indexes
 708:
data_sub =  medalhas_ouro.groupby(['region'])['Medal'].count().reset_index().sort_values(by='Medal', ascending=False).reset_index()

data_sub = data_sub[:10]

data_sub

color_map = ['#221f1f' for _ in range(0, 10)]
color_map[len(color_map)-2] = color_map[len(color_map) - 1] =  '#b20710' # color highlight

plt.figure(figsize=(8,8))
ax = plt.subplot(111, polar=True)
plt.axis('off')

upperLimit = 30
lowerLimit = 1
labelPadding = 30

max_ = data_sub['Medal'].max()

slope = (max_ - lowerLimit) / max_

heights = slope * data_sub.Medal + lowerLimit

width = 2*np.pi / len(data_sub.index)

indexes = list(range(1, len(data_sub.index)+1))

angles = [element * width for element in indexes]

angles
 709:
data_sub =  medalhas_ouro.groupby(['region'])['Medal'].count().reset_index().sort_values(by='Medal', ascending=False).reset_index()

data_sub = data_sub[:10]

data_sub

color_map = ['#221f1f' for _ in range(0, 10)]
color_map[len(color_map)-2] = color_map[len(color_map) - 1] =  '#b20710' # color highlight

plt.figure(figsize=(8,8))
ax = plt.subplot(111, polar=True)
plt.axis('off')

upperLimit = 30
lowerLimit = 1
labelPadding = 30

max_ = data_sub['Medal'].max()

slope = (max_ - lowerLimit) / max_

heights = slope * data_sub.Medal + lowerLimit

width = 2*np.pi / len(data_sub.index)

indexes = list(range(1, len(data_sub.index)+1))

angles = [element * width for element in indexes]

bars = ax.bar(
    x=angles, 
    height=heights, 
    width=width, 
    bottom=lowerLimit,
    linewidth=2, 
    edgecolor="white",
    color=color_map,alpha=0.8
)
 710:
data_sub =  medalhas_ouro.groupby(['region'])['Medal'].count().reset_index().sort_values(by='Medal', ascending=False).reset_index()

data_sub = data_sub[:10]

data_sub

color_map = ['#221f1f' for _ in range(0, 10)]
color_map[0] = color_map[1] =  '#b20710' # color highlight

plt.figure(figsize=(8,8))
ax = plt.subplot(111, polar=True)
plt.axis('off')

upperLimit = 30
lowerLimit = 1
labelPadding = 30

max_ = data_sub['Medal'].max()

slope = (max_ - lowerLimit) / max_

heights = slope * data_sub.Medal + lowerLimit

width = 2*np.pi / len(data_sub.index)

indexes = list(range(1, len(data_sub.index)+1))

angles = [element * width for element in indexes]

bars = ax.bar(
    x=angles, 
    height=heights, 
    width=width, 
    bottom=lowerLimit,
    linewidth=2, 
    edgecolor="white",
    color=color_map,alpha=0.8
)
 711:
data_sub =  medalhas_ouro.groupby(['region'])['Medal'].count().reset_index().sort_values(by='Medal', ascending=False).reset_index()

data_sub = data_sub[:10]

data_sub

color_map = ['#221f1f' for _ in range(0, 10)]
color_map[0] = color_map[1] =  '#b20710' # color highlight

plt.figure(figsize=(8,8))
ax = plt.subplot(111, polar=True)
plt.axis('off')

upperLimit = 30
lowerLimit = 1
labelPadding = 30

max_ = data_sub['Medal'].max()

slope = (max_ - lowerLimit) / max_

heights = slope * data_sub.Medal + lowerLimit

width = 2*np.pi / len(data_sub.index)

indexes = list(range(1, len(data_sub.index)+1))

angles = [element * width for element in indexes]

bars = ax.bar(
    x=angles, 
    height=heights, 
    width=width, 
    bottom=lowerLimit,
    linewidth=2, 
    edgecolor="white",
    color=color_map,alpha=0.8
)


for bar, angle, height, label in zip(bars,angles, heights, data_sub["region"]):

    # Labels are rotated. Rotation must be specified in degrees :(
    rotation = np.rad2deg(angle)

    # Flip some labels upside down
    alignment = ""
    if angle >= np.pi/2 and angle < 3*np.pi/2:
        alignment = "right"
        rotation = rotation + 180
    else: 
        alignment = "left"

    # Finally add the labels
    ax.text(
        x=angle, 
        y=lowerLimit + bar.get_height() + labelPadding, 
        s=label, 
        ha=alignment, fontsize=10,fontfamily='serif',
        va='center', 
        rotation=rotation, 
        rotation_mode="anchor")
 712:
data_sub =  medalhas_ouro.groupby(['region'])['Medal'].count().reset_index().sort_values(by='Medal', ascending=False).reset_index()

data_sub = data_sub[:10]

data_sub

color_map = ['#221f1f' for _ in range(0, 10)]
color_map[0] = color_map[1] = color_map[2] '#b20710' # color highlight

plt.figure(figsize=(8,8))
ax = plt.subplot(111, polar=True)
plt.axis('off')

upperLimit = 30
lowerLimit = 1
labelPadding = 30

max_ = data_sub['Medal'].max()

slope = (max_ - lowerLimit) / max_

heights = slope * data_sub.Medal + lowerLimit

width = 2*np.pi / len(data_sub.index)

indexes = list(range(1, len(data_sub.index)+1))

angles = [element * width for element in indexes]

bars = ax.bar(
    x=angles, 
    height=heights, 
    width=width, 
    bottom=lowerLimit,
    linewidth=2, 
    edgecolor="white",
    color=color_map,alpha=0.8
)


for bar, angle, height, label in zip(bars,angles, heights, data_sub["region"]):

    # Labels are rotated. Rotation must be specified in degrees :(
    rotation = np.rad2deg(angle)

    # Flip some labels upside down
    alignment = ""
    if angle >= np.pi/2 and angle < 3*np.pi/2:
        alignment = "right"
        rotation = rotation + 180
    else: 
        alignment = "left"

    # Finally add the labels
    ax.text(
        x=angle, 
        y=lowerLimit + bar.get_height() + labelPadding, 
        s=label, 
        ha=alignment, fontsize=10,fontfamily='serif',
        va='center', 
        rotation=rotation, 
        rotation_mode="anchor")
 713:
data_sub =  medalhas_ouro.groupby(['region'])['Medal'].count().reset_index().sort_values(by='Medal', ascending=False).reset_index()

data_sub = data_sub[:10]

data_sub

color_map = ['#221f1f' for _ in range(0, 10)]
color_map[0] = color_map[1] = color_map[2] = '#b20710' # color highlight

plt.figure(figsize=(8,8))
ax = plt.subplot(111, polar=True)
plt.axis('off')

upperLimit = 30
lowerLimit = 1
labelPadding = 30

max_ = data_sub['Medal'].max()

slope = (max_ - lowerLimit) / max_

heights = slope * data_sub.Medal + lowerLimit

width = 2*np.pi / len(data_sub.index)

indexes = list(range(1, len(data_sub.index)+1))

angles = [element * width for element in indexes]

bars = ax.bar(
    x=angles, 
    height=heights, 
    width=width, 
    bottom=lowerLimit,
    linewidth=2, 
    edgecolor="white",
    color=color_map,alpha=0.8
)


for bar, angle, height, label in zip(bars,angles, heights, data_sub["region"]):

    # Labels are rotated. Rotation must be specified in degrees :(
    rotation = np.rad2deg(angle)

    # Flip some labels upside down
    alignment = ""
    if angle >= np.pi/2 and angle < 3*np.pi/2:
        alignment = "right"
        rotation = rotation + 180
    else: 
        alignment = "left"

    # Finally add the labels
    ax.text(
        x=angle, 
        y=lowerLimit + bar.get_height() + labelPadding, 
        s=label, 
        ha=alignment, fontsize=10,fontfamily='serif',
        va='center', 
        rotation=rotation, 
        rotation_mode="anchor")
 714:
data_sub =  medalhas_ouro.groupby(['region'])['Medal'].count().reset_index().sort_values(by='Medal', ascending=False).reset_index()

data_sub = data_sub[:10]

data_sub

color_map = ['#221f1f' for _ in range(0, 10)]
color_map[0] = color_map[1] = color_map[2] = '#b20710' # color highlight

plt.figure(figsize=(10,5))
ax = plt.subplot(111, polar=True)
plt.axis('off')

upperLimit = 30
lowerLimit = 1
labelPadding = 30

max_ = data_sub['Medal'].max()

slope = (max_ - lowerLimit) / max_

heights = slope * data_sub.Medal + lowerLimit

width = 2*np.pi / len(data_sub.index)

indexes = list(range(1, len(data_sub.index)+1))

angles = [element * width for element in indexes]

bars = ax.bar(
    x=angles, 
    height=heights, 
    width=width, 
    bottom=lowerLimit,
    linewidth=2, 
    edgecolor="white",
    color=color_map,alpha=0.8
)


for bar, angle, height, label in zip(bars,angles, heights, data_sub["region"]):

    # Labels are rotated. Rotation must be specified in degrees :(
    rotation = np.rad2deg(angle)

    # Flip some labels upside down
    alignment = ""
    if angle >= np.pi/2 and angle < 3*np.pi/2:
        alignment = "right"
        rotation = rotation + 180
    else: 
        alignment = "left"

    # Finally add the labels
    ax.text(
        x=angle, 
        y=lowerLimit + bar.get_height() + labelPadding, 
        s=label, 
        ha=alignment, fontsize=10,fontfamily='serif',
        va='center', 
        rotation=rotation, 
        rotation_mode="anchor")
 715:
data_sub =  medalhas_ouro.groupby(['region'])['Medal'].count().reset_index().sort_values(by='Medal', ascending=False).reset_index()

data_sub = data_sub[:10]

data_sub

color_map = ['#221f1f' for _ in range(0, 10)]
color_map[0] = color_map[1] = color_map[2] = '#b20710' # color highlight

plt.figure(figsize=(10,10))
ax = plt.subplot(111, polar=True)
plt.axis('off')

upperLimit = 30
lowerLimit = 1
labelPadding = 30

max_ = data_sub['Medal'].max()

slope = (max_ - lowerLimit) / max_

heights = slope * data_sub.Medal + lowerLimit

width = 2*np.pi / len(data_sub.index)

indexes = list(range(1, len(data_sub.index)+1))

angles = [element * width for element in indexes]

bars = ax.bar(
    x=angles, 
    height=heights, 
    width=width, 
    bottom=lowerLimit,
    linewidth=2, 
    edgecolor="white",
    color=color_map,alpha=0.8
)


for bar, angle, height, label in zip(bars,angles, heights, data_sub["region"]):

    # Labels are rotated. Rotation must be specified in degrees :(
    rotation = np.rad2deg(angle)

    # Flip some labels upside down
    alignment = ""
    if angle >= np.pi/2 and angle < 3*np.pi/2:
        alignment = "right"
        rotation = rotation + 180
    else: 
        alignment = "left"

    # Finally add the labels
    ax.text(
        x=angle, 
        y=lowerLimit + bar.get_height() + labelPadding, 
        s=label, 
        ha=alignment, fontsize=10,fontfamily='serif',
        va='center', 
        rotation=rotation, 
        rotation_mode="anchor")
 716:
data_sub =  medalhas_ouro.groupby(['region'])['Medal'].count().reset_index().sort_values(by='Medal', ascending=False).reset_index()

data_sub = data_sub[:10]

data_sub

color_map = ['#221f1f' for _ in range(0, 10)]
color_map[0] = color_map[1] = color_map[2] = '#b20710' # color highlight

plt.figure(figsize=(10,10))
ax = plt.subplot(111, polar=True)
plt.axis('off')

upperLimit = 20
lowerLimit = 1
labelPadding = 30

max_ = data_sub['Medal'].max()

slope = (max_ - lowerLimit) / max_

heights = slope * data_sub.Medal + lowerLimit

width = 2*np.pi / len(data_sub.index)

indexes = list(range(1, len(data_sub.index)+1))

angles = [element * width for element in indexes]

bars = ax.bar(
    x=angles, 
    height=heights, 
    width=width, 
    bottom=lowerLimit,
    linewidth=2, 
    edgecolor="white",
    color=color_map,alpha=0.8
)


for bar, angle, height, label in zip(bars,angles, heights, data_sub["region"]):

    # Labels are rotated. Rotation must be specified in degrees :(
    rotation = np.rad2deg(angle)

    # Flip some labels upside down
    alignment = ""
    if angle >= np.pi/2 and angle < 3*np.pi/2:
        alignment = "right"
        rotation = rotation + 180
    else: 
        alignment = "left"

    # Finally add the labels
    ax.text(
        x=angle, 
        y=lowerLimit + bar.get_height() + labelPadding, 
        s=label, 
        ha=alignment, fontsize=10,fontfamily='serif',
        va='center', 
        rotation=rotation, 
        rotation_mode="anchor")
 717:
data_sub =  medalhas_ouro.groupby(['region'])['Medal'].count().reset_index().sort_values(by='Medal', ascending=False).reset_index()

data_sub = data_sub[:10]

data_sub

color_map = ['#221f1f' for _ in range(0, 10)]
color_map[0] = color_map[1] = color_map[2] = '#b20710' # color highlight

plt.figure(figsize=(10,10))
ax = plt.subplot(111, polar=True)
plt.axis('off')

upperLimit = 10
lowerLimit = 1
labelPadding = 30

max_ = data_sub['Medal'].max()

slope = (max_ - lowerLimit) / max_

heights = slope * data_sub.Medal + lowerLimit

width = 2*np.pi / len(data_sub.index)

indexes = list(range(1, len(data_sub.index)+1))

angles = [element * width for element in indexes]

bars = ax.bar(
    x=angles, 
    height=heights, 
    width=width, 
    bottom=lowerLimit,
    linewidth=2, 
    edgecolor="white",
    color=color_map,alpha=0.8
)


for bar, angle, height, label in zip(bars,angles, heights, data_sub["region"]):

    # Labels are rotated. Rotation must be specified in degrees :(
    rotation = np.rad2deg(angle)

    # Flip some labels upside down
    alignment = ""
    if angle >= np.pi/2 and angle < 3*np.pi/2:
        alignment = "right"
        rotation = rotation + 180
    else: 
        alignment = "left"

    # Finally add the labels
    ax.text(
        x=angle, 
        y=lowerLimit + bar.get_height() + labelPadding, 
        s=label, 
        ha=alignment, fontsize=10,fontfamily='serif',
        va='center', 
        rotation=rotation, 
        rotation_mode="anchor")
 718:
data_sub =  medalhas_ouro.groupby(['region'])['Medal'].count().reset_index().sort_values(by='Medal', ascending=False).reset_index()

data_sub = data_sub[:10]

data_sub

color_map = ['#221f1f' for _ in range(0, 10)]
color_map[0] = color_map[1] = color_map[2] = '#b20710' # color highlight

plt.figure(figsize=(10,10))
ax = plt.subplot(111, polar=True)
plt.axis('off')

upperLimit = 30
lowerLimit = 10
labelPadding = 30

max_ = data_sub['Medal'].max()

slope = (max_ - lowerLimit) / max_

heights = slope * data_sub.Medal + lowerLimit

width = 2*np.pi / len(data_sub.index)

indexes = list(range(1, len(data_sub.index)+1))

angles = [element * width for element in indexes]

bars = ax.bar(
    x=angles, 
    height=heights, 
    width=width, 
    bottom=lowerLimit,
    linewidth=2, 
    edgecolor="white",
    color=color_map,alpha=0.8
)


for bar, angle, height, label in zip(bars,angles, heights, data_sub["region"]):

    # Labels are rotated. Rotation must be specified in degrees :(
    rotation = np.rad2deg(angle)

    # Flip some labels upside down
    alignment = ""
    if angle >= np.pi/2 and angle < 3*np.pi/2:
        alignment = "right"
        rotation = rotation + 180
    else: 
        alignment = "left"

    # Finally add the labels
    ax.text(
        x=angle, 
        y=lowerLimit + bar.get_height() + labelPadding, 
        s=label, 
        ha=alignment, fontsize=10,fontfamily='serif',
        va='center', 
        rotation=rotation, 
        rotation_mode="anchor")
 719:
data_sub =  medalhas_ouro.groupby(['region'])['Medal'].count().reset_index().sort_values(by='Medal', ascending=False).reset_index()

data_sub = data_sub[:10]

data_sub

color_map = ['#221f1f' for _ in range(0, 10)]
color_map[0] = color_map[1] = color_map[2] = '#b20710' # color highlight

plt.figure(figsize=(10,10))
ax = plt.subplot(111, polar=True)
plt.axis('off')

upperLimit = 10
lowerLimit = 10
labelPadding = 30

max_ = data_sub['Medal'].max()

slope = (max_ - lowerLimit) / max_

heights = slope * data_sub.Medal + lowerLimit

width = 2*np.pi / len(data_sub.index)

indexes = list(range(1, len(data_sub.index)+1))

angles = [element * width for element in indexes]

bars = ax.bar(
    x=angles, 
    height=heights, 
    width=width, 
    bottom=lowerLimit,
    linewidth=2, 
    edgecolor="white",
    color=color_map,alpha=0.8
)


for bar, angle, height, label in zip(bars,angles, heights, data_sub["region"]):

    # Labels are rotated. Rotation must be specified in degrees :(
    rotation = np.rad2deg(angle)

    # Flip some labels upside down
    alignment = ""
    if angle >= np.pi/2 and angle < 3*np.pi/2:
        alignment = "right"
        rotation = rotation + 180
    else: 
        alignment = "left"

    # Finally add the labels
    ax.text(
        x=angle, 
        y=lowerLimit + bar.get_height() + labelPadding, 
        s=label, 
        ha=alignment, fontsize=10,fontfamily='serif',
        va='center', 
        rotation=rotation, 
        rotation_mode="anchor")
 720:
data_sub =  medalhas_ouro.groupby(['region'])['Medal'].count().reset_index().sort_values(by='Medal', ascending=False).reset_index()

data_sub = data_sub[:10]

data_sub

color_map = ['#221f1f' for _ in range(0, 10)]
color_map[0] = color_map[1] = color_map[2] = '#b20710' # color highlight

plt.figure(figsize=(10,10))
ax = plt.subplot(111, polar=True)
plt.axis('off')

upperLimit = 30
lowerLimit = 10
labelPadding = 30

max_ = data_sub['Medal'].max()

slope = (max_ - lowerLimit) / max_

heights = slope * data_sub.Medal + lowerLimit

width = 2*np.pi / len(data_sub.index)

indexes = list(range(1, len(data_sub.index)+1))

angles = [element * width for element in indexes]

bars = ax.bar(
    x=angles, 
    height=heights, 
    width=width, 
    bottom=lowerLimit,
    linewidth=2, 
    edgecolor="white",
    color=color_map,alpha=0.8
)


for bar, angle, height, label in zip(bars,angles, heights, data_sub["region"]):

    # Labels are rotated. Rotation must be specified in degrees :(
    rotation = np.rad2deg(angle)

    # Flip some labels upside down
    alignment = ""
    if angle >= np.pi/2 and angle < 3*np.pi/2:
        alignment = "right"
        rotation = rotation + 180
    else: 
        alignment = "left"

    # Finally add the labels
    ax.text(
        x=angle, 
        y=lowerLimit + bar.get_height() + labelPadding, 
        s=label, 
        ha=alignment, fontsize=10,fontfamily='serif',
        va='center', 
        rotation=rotation, 
        rotation_mode="anchor")
 721:
data_sub =  medalhas_ouro.groupby(['region'])['Medal'].count().reset_index().sort_values(by='Medal', ascending=False).reset_index()

data_sub = data_sub[:10]

data_sub

color_map = ['#221f1f' for _ in range(0, 10)]
color_map[0] = color_map[1] = color_map[2] = '#b20710' # color highlight

plt.figure(figsize=(10,10))
ax = plt.subplot(111, polar=True)
plt.axis('off')

upperLimit = 30
lowerLimit = 100
labelPadding = 30

max_ = data_sub['Medal'].max()

slope = (max_ - lowerLimit) / max_

heights = slope * data_sub.Medal + lowerLimit

width = 2*np.pi / len(data_sub.index)

indexes = list(range(1, len(data_sub.index)+1))

angles = [element * width for element in indexes]

bars = ax.bar(
    x=angles, 
    height=heights, 
    width=width, 
    bottom=lowerLimit,
    linewidth=2, 
    edgecolor="white",
    color=color_map,alpha=0.8
)


for bar, angle, height, label in zip(bars,angles, heights, data_sub["region"]):

    # Labels are rotated. Rotation must be specified in degrees :(
    rotation = np.rad2deg(angle)

    # Flip some labels upside down
    alignment = ""
    if angle >= np.pi/2 and angle < 3*np.pi/2:
        alignment = "right"
        rotation = rotation + 180
    else: 
        alignment = "left"

    # Finally add the labels
    ax.text(
        x=angle, 
        y=lowerLimit + bar.get_height() + labelPadding, 
        s=label, 
        ha=alignment, fontsize=10,fontfamily='serif',
        va='center', 
        rotation=rotation, 
        rotation_mode="anchor")
 722:
data_sub =  medalhas_ouro.groupby(['region'])['Medal'].count().reset_index().sort_values(by='Medal', ascending=False).reset_index()

data_sub = data_sub[:10]

data_sub

color_map = ['#221f1f' for _ in range(0, 10)]
color_map[0] = color_map[1] = color_map[2] = '#b20710' # color highlight

plt.figure(figsize=(10,10))
ax = plt.subplot(111, polar=True)
plt.axis('off')

upperLimit = 20
lowerLimit = 5
labelPadding = 30

max_ = data_sub['Medal'].max()
min_ = data_sub['Medal'].min()

slope = (max_ - lowerLimit) / (max_ - min_)

heights = slope * data_sub.Medal + lowerLimit

width = 2*np.pi / len(data_sub.index)

indexes = list(range(1, len(data_sub.index)+1))

angles = [element * width for element in indexes]

bars = ax.bar(
    x=angles, 
    height=heights, 
    width=width, 
    bottom=lowerLimit,
    linewidth=2, 
    edgecolor="white",
    color=color_map,alpha=0.8
)


for bar, angle, height, label in zip(bars,angles, heights, data_sub["region"]):

    # Labels are rotated. Rotation must be specified in degrees :(
    rotation = np.rad2deg(angle)

    # Flip some labels upside down
    alignment = ""
    if angle >= np.pi/2 and angle < 3*np.pi/2:
        alignment = "right"
        rotation = rotation + 180
    else: 
        alignment = "left"

    # Finally add the labels
    ax.text(
        x=angle, 
        y=lowerLimit + bar.get_height() + labelPadding, 
        s=label, 
        ha=alignment, fontsize=10,fontfamily='serif',
        va='center', 
        rotation=rotation, 
        rotation_mode="anchor")
 723:
data_sub =  medalhas_ouro.groupby(['region'])['Medal'].count().reset_index().sort_values(by='Medal', ascending=False).reset_index()

data_sub = data_sub[:10]

data_sub

color_map = ['#221f1f' for _ in range(0, 10)]
color_map[0] = color_map[1] = color_map[2] = '#b20710' # color highlight

plt.figure(figsize=(10,10))
ax = plt.subplot(111, polar=True)
plt.axis('off')

upperLimit = 20
lowerLimit = 5
labelPadding = 30

max_ = data_sub['Medal'].max()
min_ = data_sub['Medal'].min()

slope = (max_ - lowerLimit) / (max_ - min_)

heights = slope * data_sub.Medal + lowerLimit

width = 2*np.pi / len(data_sub.index)

indexes = list(range(1, len(data_sub.index)+1))

angles = [element * width for element in indexes]

bars = ax.bar(
    x=angles, 
    height=heights-1000, 
    width=width, 
    bottom=lowerLimit,
    linewidth=2, 
    edgecolor="white",
    color=color_map,alpha=0.8
)


for bar, angle, height, label in zip(bars,angles, heights, data_sub["region"]):

    # Labels are rotated. Rotation must be specified in degrees :(
    rotation = np.rad2deg(angle)

    # Flip some labels upside down
    alignment = ""
    if angle >= np.pi/2 and angle < 3*np.pi/2:
        alignment = "right"
        rotation = rotation + 180
    else: 
        alignment = "left"

    # Finally add the labels
    ax.text(
        x=angle, 
        y=lowerLimit + bar.get_height() + labelPadding, 
        s=label, 
        ha=alignment, fontsize=10,fontfamily='serif',
        va='center', 
        rotation=rotation, 
        rotation_mode="anchor")
 724:
data_sub =  medalhas_ouro.groupby(['region'])['Medal'].count().reset_index().sort_values(by='Medal', ascending=False).reset_index()

data_sub = data_sub[:10]

data_sub

color_map = ['#221f1f' for _ in range(0, 10)]
color_map[0] = color_map[1] = color_map[2] = '#b20710' # color highlight

plt.figure(figsize=(10,10))
ax = plt.subplot(111, polar=True)
plt.axis('off')

upperLimit = 20
lowerLimit = 5
labelPadding = 30

max_ = data_sub['Medal'].max()
min_ = data_sub['Medal'].min()

slope = (max_ - lowerLimit) / (max_ - min_)

heights = slope * data_sub.Medal + lowerLimit

width = 2*np.pi / len(data_sub.index)

indexes = list(range(1, len(data_sub.index)+1))

angles = [element * width for element in indexes]

bars = ax.bar(
    x=angles, 
    height=heights-10, 
    width=width, 
    bottom=lowerLimit,
    linewidth=2, 
    edgecolor="white",
    color=color_map,alpha=0.8
)


for bar, angle, height, label in zip(bars,angles, heights, data_sub["region"]):

    # Labels are rotated. Rotation must be specified in degrees :(
    rotation = np.rad2deg(angle)

    # Flip some labels upside down
    alignment = ""
    if angle >= np.pi/2 and angle < 3*np.pi/2:
        alignment = "right"
        rotation = rotation + 180
    else: 
        alignment = "left"

    # Finally add the labels
    ax.text(
        x=angle, 
        y=lowerLimit + bar.get_height() + labelPadding, 
        s=label, 
        ha=alignment, fontsize=10,fontfamily='serif',
        va='center', 
        rotation=rotation, 
        rotation_mode="anchor")
 725:
data_sub =  medalhas_ouro.groupby(['region'])['Medal'].count().reset_index().sort_values(by='Medal', ascending=False).reset_index()

data_sub = data_sub[:10]

data_sub

color_map = ['#221f1f' for _ in range(0, 10)]
color_map[0] = color_map[1] = color_map[2] = '#b20710' # color highlight

plt.figure(figsize=(10,10))
ax = plt.subplot(111, polar=True)
plt.axis('off')

upperLimit = 20
lowerLimit = 5
labelPadding = 30

max_ = data_sub['Medal'].max()
min_ = data_sub['Medal'].min()

slope = (max_ - lowerLimit) / (max_ - min_)

heights = slope * data_sub.Medal + lowerLimit

width = 2*np.pi / len(data_sub.index)

indexes = list(range(1, len(data_sub.index)+1))

angles = [element * width for element in indexes]

bars = ax.bar(
    x=angles, 
    height=heights, 
    width=width+100, 
    bottom=lowerLimit,
    linewidth=2, 
    edgecolor="white",
    color=color_map,alpha=0.8
)


for bar, angle, height, label in zip(bars,angles, heights, data_sub["region"]):

    # Labels are rotated. Rotation must be specified in degrees :(
    rotation = np.rad2deg(angle)

    # Flip some labels upside down
    alignment = ""
    if angle >= np.pi/2 and angle < 3*np.pi/2:
        alignment = "right"
        rotation = rotation + 180
    else: 
        alignment = "left"

    # Finally add the labels
    ax.text(
        x=angle, 
        y=lowerLimit + bar.get_height() + labelPadding, 
        s=label, 
        ha=alignment, fontsize=10,fontfamily='serif',
        va='center', 
        rotation=rotation, 
        rotation_mode="anchor")
 726:
data_sub =  medalhas_ouro.groupby(['region'])['Medal'].count().reset_index().sort_values(by='Medal', ascending=False).reset_index()

data_sub = data_sub[:10]

data_sub

color_map = ['#221f1f' for _ in range(0, 10)]
color_map[0] = color_map[1] = color_map[2] = '#b20710' # color highlight

plt.figure(figsize=(10,10))
ax = plt.subplot(111, polar=True)
plt.axis('off')

upperLimit = 20
lowerLimit = 100
labelPadding = 30

max_ = data_sub['Medal'].max()
min_ = data_sub['Medal'].min()

slope = (max_ - lowerLimit) / (max_ - min_)

heights = slope * data_sub.Medal + lowerLimit

width = 2*np.pi / len(data_sub.index)

indexes = list(range(1, len(data_sub.index)+1))

angles = [element * width for element in indexes]

bars = ax.bar(
    x=angles, 
    height=heights, 
    width=width, 
    bottom=lowerLimit,
    linewidth=2, 
    edgecolor="white",
    color=color_map,alpha=0.8
)


for bar, angle, height, label in zip(bars,angles, heights, data_sub["region"]):

    # Labels are rotated. Rotation must be specified in degrees :(
    rotation = np.rad2deg(angle)

    # Flip some labels upside down
    alignment = ""
    if angle >= np.pi/2 and angle < 3*np.pi/2:
        alignment = "right"
        rotation = rotation + 180
    else: 
        alignment = "left"

    # Finally add the labels
    ax.text(
        x=angle, 
        y=lowerLimit + bar.get_height() + labelPadding, 
        s=label, 
        ha=alignment, fontsize=10,fontfamily='serif',
        va='center', 
        rotation=rotation, 
        rotation_mode="anchor")
 727:
data_sub =  medalhas_ouro.groupby(['region'])['Medal'].count().reset_index().sort_values(by='Medal', ascending=False).reset_index()

data_sub = data_sub[:10]

data_sub

color_map = ['#221f1f' for _ in range(0, 10)]
color_map[0] = color_map[1] = color_map[2] = '#b20710' # color highlight

plt.figure(figsize=(10,10))
ax = plt.subplot(111, polar=True)
plt.axis('off')

upperLimit = 20
lowerLimit = 1000
labelPadding = 30

max_ = data_sub['Medal'].max()
min_ = data_sub['Medal'].min()

slope = (max_ - lowerLimit) / (max_ - min_)

heights = slope * data_sub.Medal + lowerLimit

width = 2*np.pi / len(data_sub.index)

indexes = list(range(1, len(data_sub.index)+1))

angles = [element * width for element in indexes]

bars = ax.bar(
    x=angles, 
    height=heights, 
    width=width, 
    bottom=lowerLimit,
    linewidth=2, 
    edgecolor="white",
    color=color_map,alpha=0.8
)


for bar, angle, height, label in zip(bars,angles, heights, data_sub["region"]):

    # Labels are rotated. Rotation must be specified in degrees :(
    rotation = np.rad2deg(angle)

    # Flip some labels upside down
    alignment = ""
    if angle >= np.pi/2 and angle < 3*np.pi/2:
        alignment = "right"
        rotation = rotation + 180
    else: 
        alignment = "left"

    # Finally add the labels
    ax.text(
        x=angle, 
        y=lowerLimit + bar.get_height() + labelPadding, 
        s=label, 
        ha=alignment, fontsize=10,fontfamily='serif',
        va='center', 
        rotation=rotation, 
        rotation_mode="anchor")
 728:
data_sub =  medalhas_ouro.groupby(['region'])['Medal'].count().reset_index().sort_values(by='Medal', ascending=False).reset_index()

data_sub = data_sub[:10]

data_sub

color_map = ['#221f1f' for _ in range(0, 10)]
color_map[0] = color_map[1] = color_map[2] = '#b20710' # color highlight

plt.figure(figsize=(10,10))
ax = plt.subplot(111, polar=True)
plt.axis('off')

upperLimit = 2
lowerLimit = 1000
labelPadding = 30

max_ = data_sub['Medal'].max()
min_ = data_sub['Medal'].min()

slope = (max_ - lowerLimit) / (max_ - min_)

heights = slope * data_sub.Medal + lowerLimit

width = 2*np.pi / len(data_sub.index)

indexes = list(range(1, len(data_sub.index)+1))

angles = [element * width for element in indexes]

bars = ax.bar(
    x=angles, 
    height=heights, 
    width=width, 
    bottom=lowerLimit,
    linewidth=2, 
    edgecolor="white",
    color=color_map,alpha=0.8
)


for bar, angle, height, label in zip(bars,angles, heights, data_sub["region"]):

    # Labels are rotated. Rotation must be specified in degrees :(
    rotation = np.rad2deg(angle)

    # Flip some labels upside down
    alignment = ""
    if angle >= np.pi/2 and angle < 3*np.pi/2:
        alignment = "right"
        rotation = rotation + 180
    else: 
        alignment = "left"

    # Finally add the labels
    ax.text(
        x=angle, 
        y=lowerLimit + bar.get_height() + labelPadding, 
        s=label, 
        ha=alignment, fontsize=10,fontfamily='serif',
        va='center', 
        rotation=rotation, 
        rotation_mode="anchor")
 729:
data_sub =  medalhas_ouro.groupby(['region'])['Medal'].count().reset_index().sort_values(by='Medal', ascending=False).reset_index()

data_sub = data_sub[:10]

data_sub

color_map = ['#221f1f' for _ in range(0, 10)]
color_map[0] = color_map[1] = color_map[2] = '#b20710' # color highlight

plt.figure(figsize=(10,10))
ax = plt.subplot(111, polar=True)
plt.axis('off')

upperLimit = -10
lowerLimit = 1000
labelPadding = 30

max_ = data_sub['Medal'].max()
min_ = data_sub['Medal'].min()

slope = (max_ - lowerLimit) / (max_ - min_)

heights = slope * data_sub.Medal + lowerLimit

width = 2*np.pi / len(data_sub.index)

indexes = list(range(1, len(data_sub.index)+1))

angles = [element * width for element in indexes]

bars = ax.bar(
    x=angles, 
    height=heights, 
    width=width, 
    bottom=lowerLimit,
    linewidth=2, 
    edgecolor="white",
    color=color_map,alpha=0.8
)


for bar, angle, height, label in zip(bars,angles, heights, data_sub["region"]):

    # Labels are rotated. Rotation must be specified in degrees :(
    rotation = np.rad2deg(angle)

    # Flip some labels upside down
    alignment = ""
    if angle >= np.pi/2 and angle < 3*np.pi/2:
        alignment = "right"
        rotation = rotation + 180
    else: 
        alignment = "left"

    # Finally add the labels
    ax.text(
        x=angle, 
        y=lowerLimit + bar.get_height() + labelPadding, 
        s=label, 
        ha=alignment, fontsize=10,fontfamily='serif',
        va='center', 
        rotation=rotation, 
        rotation_mode="anchor")
 730:
data_sub =  medalhas_ouro.groupby(['region'])['Medal'].count().reset_index().sort_values(by='Medal', ascending=False).reset_index()

data_sub = data_sub[:10]

data_sub

color_map = ['#221f1f' for _ in range(0, 10)]
color_map[0] = color_map[1] = color_map[2] = '#b20710' # color highlight

plt.figure(figsize=(10,10))
ax = plt.subplot(111, polar=True)
plt.axis('off')

upperLimit = -10
lowerLimit = 500
labelPadding = 30

max_ = data_sub['Medal'].max()
min_ = data_sub['Medal'].min()

slope = (max_ - lowerLimit) / (max_ - min_)

heights = slope * data_sub.Medal + lowerLimit

width = 2*np.pi / len(data_sub.index)

indexes = list(range(1, len(data_sub.index)+1))

angles = [element * width for element in indexes]

bars = ax.bar(
    x=angles, 
    height=heights, 
    width=width, 
    bottom=lowerLimit,
    linewidth=2, 
    edgecolor="white",
    color=color_map,alpha=0.8
)


for bar, angle, height, label in zip(bars,angles, heights, data_sub["region"]):

    # Labels are rotated. Rotation must be specified in degrees :(
    rotation = np.rad2deg(angle)

    # Flip some labels upside down
    alignment = ""
    if angle >= np.pi/2 and angle < 3*np.pi/2:
        alignment = "right"
        rotation = rotation + 180
    else: 
        alignment = "left"

    # Finally add the labels
    ax.text(
        x=angle, 
        y=lowerLimit + bar.get_height() + labelPadding, 
        s=label, 
        ha=alignment, fontsize=10,fontfamily='serif',
        va='center', 
        rotation=rotation, 
        rotation_mode="anchor")
 731:
data_sub =  medalhas_ouro.groupby(['region'])['Medal'].count().reset_index().sort_values(by='Medal', ascending=False).reset_index()

data_sub = data_sub[:10]

data_sub

color_map = ['#221f1f' for _ in range(0, 10)]
color_map[0] = color_map[1] = color_map[2] = '#b20710' # color highlight

plt.figure(figsize=(10,10))
ax = plt.subplot(111, polar=True)
plt.axis('off')

upperLimit = -10
lowerLimit = 800
labelPadding = 30

max_ = data_sub['Medal'].max()
min_ = data_sub['Medal'].min()

slope = (max_ - lowerLimit) / (max_ - min_)

heights = slope * data_sub.Medal + lowerLimit

width = 2*np.pi / len(data_sub.index)

indexes = list(range(1, len(data_sub.index)+1))

angles = [element * width for element in indexes]

bars = ax.bar(
    x=angles, 
    height=heights, 
    width=width, 
    bottom=lowerLimit,
    linewidth=2, 
    edgecolor="white",
    color=color_map,alpha=0.8
)


for bar, angle, height, label in zip(bars,angles, heights, data_sub["region"]):

    # Labels are rotated. Rotation must be specified in degrees :(
    rotation = np.rad2deg(angle)

    # Flip some labels upside down
    alignment = ""
    if angle >= np.pi/2 and angle < 3*np.pi/2:
        alignment = "right"
        rotation = rotation + 180
    else: 
        alignment = "left"

    # Finally add the labels
    ax.text(
        x=angle, 
        y=lowerLimit + bar.get_height() + labelPadding, 
        s=label, 
        ha=alignment, fontsize=10,fontfamily='serif',
        va='center', 
        rotation=rotation, 
        rotation_mode="anchor")
 732:
data_sub =  medalhas_ouro.groupby(['region'])['Medal'].count().reset_index().sort_values(by='Medal', ascending=False).reset_index()

data_sub = data_sub[:10]

data_sub

color_map = ['#221f1f' for _ in range(0, 10)]
color_map[0] = color_map[1] = color_map[2] = '#b20710' # color highlight

plt.figure(figsize=(10,10))
ax = plt.subplot(111, polar=True)
plt.axis('off')

upperLimit = 1000
lowerLimit = 800
labelPadding = 30

max_ = data_sub['Medal'].max()
min_ = data_sub['Medal'].min()

slope = (max_ - lowerLimit) / (max_ - min_)

heights = slope * data_sub.Medal + lowerLimit

width = 2*np.pi / len(data_sub.index)

indexes = list(range(1, len(data_sub.index)+1))

angles = [element * width for element in indexes]

bars = ax.bar(
    x=angles, 
    height=heights, 
    width=width, 
    bottom=lowerLimit,
    linewidth=2, 
    edgecolor="white",
    color=color_map,alpha=0.8
)


for bar, angle, height, label in zip(bars,angles, heights, data_sub["region"]):

    # Labels are rotated. Rotation must be specified in degrees :(
    rotation = np.rad2deg(angle)

    # Flip some labels upside down
    alignment = ""
    if angle >= np.pi/2 and angle < 3*np.pi/2:
        alignment = "right"
        rotation = rotation + 180
    else: 
        alignment = "left"

    # Finally add the labels
    ax.text(
        x=angle, 
        y=lowerLimit + bar.get_height() + labelPadding, 
        s=label, 
        ha=alignment, fontsize=10,fontfamily='serif',
        va='center', 
        rotation=rotation, 
        rotation_mode="anchor")
 733:
data_sub =  medalhas_ouro.groupby(['region'])['Medal'].count().reset_index().sort_values(by='Medal', ascending=False).reset_index()

data_sub = data_sub[:10]

data_sub

color_map = ['#221f1f' for _ in range(0, 10)]
color_map[0] = color_map[1] = color_map[2] = '#b20710' # color highlight

plt.figure(figsize=(10,10))
ax = plt.subplot(111, polar=True)
plt.axis('off')

upperLimit = 1000
lowerLimit = 800
labelPadding = 30

max_ = data_sub['Medal'].max()
min_ = data_sub['Medal'].min()

slope = (max_ - lowerLimit) / (max_ - min_)

heights = slope * data_sub.Medal + (upperLimit- lowerLimit)

width = 2*np.pi / len(data_sub.index)

indexes = list(range(1, len(data_sub.index)+1))

angles = [element * width for element in indexes]

bars = ax.bar(
    x=angles, 
    height=heights, 
    width=width, 
    bottom=lowerLimit,
    linewidth=2, 
    edgecolor="white",
    color=color_map,alpha=0.8
)


for bar, angle, height, label in zip(bars,angles, heights, data_sub["region"]):

    # Labels are rotated. Rotation must be specified in degrees :(
    rotation = np.rad2deg(angle)

    # Flip some labels upside down
    alignment = ""
    if angle >= np.pi/2 and angle < 3*np.pi/2:
        alignment = "right"
        rotation = rotation + 180
    else: 
        alignment = "left"

    # Finally add the labels
    ax.text(
        x=angle, 
        y=lowerLimit + bar.get_height() + labelPadding, 
        s=label, 
        ha=alignment, fontsize=10,fontfamily='serif',
        va='center', 
        rotation=rotation, 
        rotation_mode="anchor")
 734:
data_sub =  medalhas_ouro.groupby(['region'])['Medal'].count().reset_index().sort_values(by='Medal', ascending=False).reset_index()

data_sub = data_sub[:10]

data_sub

color_map = ['#221f1f' for _ in range(0, 10)]
color_map[0] = color_map[1] = color_map[2] = '#b20710' # color highlight

plt.figure(figsize=(10,10))
ax = plt.subplot(111, polar=True)
plt.axis('off')

upperLimit = 1000
lowerLimit = 10
labelPadding = 30

max_ = data_sub['Medal'].max()
min_ = data_sub['Medal'].min()

slope = (max_ - lowerLimit) / (max_ - min_)

heights = slope * data_sub.Medal + (upperLimit- lowerLimit)

width = 2*np.pi / len(data_sub.index)

indexes = list(range(1, len(data_sub.index)+1))

angles = [element * width for element in indexes]

bars = ax.bar(
    x=angles, 
    height=heights, 
    width=width, 
    bottom=lowerLimit,
    linewidth=2, 
    edgecolor="white",
    color=color_map,alpha=0.8
)


for bar, angle, height, label in zip(bars,angles, heights, data_sub["region"]):

    # Labels are rotated. Rotation must be specified in degrees :(
    rotation = np.rad2deg(angle)

    # Flip some labels upside down
    alignment = ""
    if angle >= np.pi/2 and angle < 3*np.pi/2:
        alignment = "right"
        rotation = rotation + 180
    else: 
        alignment = "left"

    # Finally add the labels
    ax.text(
        x=angle, 
        y=lowerLimit + bar.get_height() + labelPadding, 
        s=label, 
        ha=alignment, fontsize=10,fontfamily='serif',
        va='center', 
        rotation=rotation, 
        rotation_mode="anchor")
 735:
data_sub =  medalhas_ouro.groupby(['region'])['Medal'].count().reset_index().sort_values(by='Medal', ascending=False).reset_index()

data_sub = data_sub[:10]

data_sub

color_map = ['#221f1f' for _ in range(0, 10)]
color_map[0] = color_map[1] = color_map[2] = '#b20710' # color highlight

plt.figure(figsize=(10,10))
ax = plt.subplot(111, polar=True)
plt.axis('off')

upperLimit = 20
lowerLimit = 10
labelPadding = 30

max_ = data_sub['Medal'].max()
min_ = data_sub['Medal'].min()

slope = (max_ - lowerLimit) / (max_ - min_)

heights = slope * data_sub.Medal + (upperLimit- lowerLimit)

width = 2*np.pi / len(data_sub.index)

indexes = list(range(1, len(data_sub.index)+1))

angles = [element * width for element in indexes]

bars = ax.bar(
    x=angles, 
    height=heights, 
    width=width, 
    bottom=lowerLimit,
    linewidth=2, 
    edgecolor="white",
    color=color_map,alpha=0.8
)


for bar, angle, height, label in zip(bars,angles, heights, data_sub["region"]):

    # Labels are rotated. Rotation must be specified in degrees :(
    rotation = np.rad2deg(angle)

    # Flip some labels upside down
    alignment = ""
    if angle >= np.pi/2 and angle < 3*np.pi/2:
        alignment = "right"
        rotation = rotation + 180
    else: 
        alignment = "left"

    # Finally add the labels
    ax.text(
        x=angle, 
        y=lowerLimit + bar.get_height() + labelPadding, 
        s=label, 
        ha=alignment, fontsize=10,fontfamily='serif',
        va='center', 
        rotation=rotation, 
        rotation_mode="anchor")
 736:
data_sub =  medalhas_ouro.groupby(['region'])['Medal'].count().reset_index().sort_values(by='Medal', ascending=False).reset_index()

data_sub = data_sub[:10]

data_sub

color_map = ['#221f1f' for _ in range(0, 10)]
color_map[0] = color_map[1] = color_map[2] = '#b20710' # color highlight

plt.figure(figsize=(10,10))
ax = plt.subplot(111, polar=True)
plt.axis('off')

upperLimit = 500
lowerLimit = 10
labelPadding = 30

max_ = data_sub['Medal'].max()
min_ = data_sub['Medal'].min()

slope = (max_ - lowerLimit) / (max_ - min_)

heights = slope * data_sub.Medal + (upperLimit- lowerLimit)

width = 2*np.pi / len(data_sub.index)

indexes = list(range(1, len(data_sub.index)+1))

angles = [element * width for element in indexes]

bars = ax.bar(
    x=angles, 
    height=heights, 
    width=width, 
    bottom=lowerLimit,
    linewidth=2, 
    edgecolor="white",
    color=color_map,alpha=0.8
)


for bar, angle, height, label in zip(bars,angles, heights, data_sub["region"]):

    # Labels are rotated. Rotation must be specified in degrees :(
    rotation = np.rad2deg(angle)

    # Flip some labels upside down
    alignment = ""
    if angle >= np.pi/2 and angle < 3*np.pi/2:
        alignment = "right"
        rotation = rotation + 180
    else: 
        alignment = "left"

    # Finally add the labels
    ax.text(
        x=angle, 
        y=lowerLimit + bar.get_height() + labelPadding, 
        s=label, 
        ha=alignment, fontsize=10,fontfamily='serif',
        va='center', 
        rotation=rotation, 
        rotation_mode="anchor")
 737:
data_sub =  medalhas_ouro.groupby(['region'])['Medal'].count().reset_index().sort_values(by='Medal', ascending=False).reset_index()

data_sub = data_sub[:10]

data_sub

color_map = ['#221f1f' for _ in range(0, 10)]
color_map[0] = color_map[1] = color_map[2] = '#b20710' # color highlight

plt.figure(figsize=(10,10))
ax = plt.subplot(111, polar=True)
plt.axis('off')

upperLimit = 1000
lowerLimit = 10
labelPadding = 30

max_ = data_sub['Medal'].max()
min_ = data_sub['Medal'].min()

slope = (max_ - lowerLimit) / (max_ - min_)

heights = slope * data_sub.Medal + (upperLimit- lowerLimit)

width = 2*np.pi / len(data_sub.index)

indexes = list(range(1, len(data_sub.index)+1))

angles = [element * width for element in indexes]

bars = ax.bar(
    x=angles, 
    height=heights, 
    width=width, 
    bottom=lowerLimit,
    linewidth=2, 
    edgecolor="white",
    color=color_map,alpha=0.8
)


for bar, angle, height, label in zip(bars,angles, heights, data_sub["region"]):

    # Labels are rotated. Rotation must be specified in degrees :(
    rotation = np.rad2deg(angle)

    # Flip some labels upside down
    alignment = ""
    if angle >= np.pi/2 and angle < 3*np.pi/2:
        alignment = "right"
        rotation = rotation + 180
    else: 
        alignment = "left"

    # Finally add the labels
    ax.text(
        x=angle, 
        y=lowerLimit + bar.get_height() + labelPadding, 
        s=label, 
        ha=alignment, fontsize=10,fontfamily='serif',
        va='center', 
        rotation=rotation, 
        rotation_mode="anchor")
 738:
data_sub =  medalhas_ouro.groupby(['region'])['Medal'].count().reset_index().sort_values(by='Medal', ascending=False).reset_index()

data_sub = data_sub[:10]

data_sub

color_map = ['#221f1f' for _ in range(0, 10)]
color_map[0] = color_map[1] = color_map[2] = '#b20710' # color highlight

plt.figure(figsize=(10,10))
ax = plt.subplot(111, polar=True)
plt.axis('off')

upperLimit = 10000
lowerLimit = 10
labelPadding = 30

max_ = data_sub['Medal'].max()
min_ = data_sub['Medal'].min()

slope = (max_ - lowerLimit) / (max_ - min_)

heights = slope * data_sub.Medal + (upperLimit- lowerLimit)

width = 2*np.pi / len(data_sub.index)

indexes = list(range(1, len(data_sub.index)+1))

angles = [element * width for element in indexes]

bars = ax.bar(
    x=angles, 
    height=heights, 
    width=width, 
    bottom=lowerLimit,
    linewidth=2, 
    edgecolor="white",
    color=color_map,alpha=0.8
)


for bar, angle, height, label in zip(bars,angles, heights, data_sub["region"]):

    # Labels are rotated. Rotation must be specified in degrees :(
    rotation = np.rad2deg(angle)

    # Flip some labels upside down
    alignment = ""
    if angle >= np.pi/2 and angle < 3*np.pi/2:
        alignment = "right"
        rotation = rotation + 180
    else: 
        alignment = "left"

    # Finally add the labels
    ax.text(
        x=angle, 
        y=lowerLimit + bar.get_height() + labelPadding, 
        s=label, 
        ha=alignment, fontsize=10,fontfamily='serif',
        va='center', 
        rotation=rotation, 
        rotation_mode="anchor")
 739:
data_sub =  medalhas_ouro.groupby(['region'])['Medal'].count().reset_index().sort_values(by='Medal', ascending=False).reset_index()

data_sub = data_sub[:10]

data_sub

color_map = ['#221f1f' for _ in range(0, 10)]
color_map[0] = color_map[1] = color_map[2] = '#b20710' # color highlight

plt.figure(figsize=(10,10))
ax = plt.subplot(111, polar=True)
plt.axis('off')

upperLimit = 5000
lowerLimit = 10
labelPadding = 30

max_ = data_sub['Medal'].max()
min_ = data_sub['Medal'].min()

slope = (max_ - lowerLimit) / (max_ - min_)

heights = slope * data_sub.Medal + (upperLimit- lowerLimit)

width = 2*np.pi / len(data_sub.index)

indexes = list(range(1, len(data_sub.index)+1))

angles = [element * width for element in indexes]

bars = ax.bar(
    x=angles, 
    height=heights, 
    width=width, 
    bottom=lowerLimit,
    linewidth=2, 
    edgecolor="white",
    color=color_map,alpha=0.8
)


for bar, angle, height, label in zip(bars,angles, heights, data_sub["region"]):

    # Labels are rotated. Rotation must be specified in degrees :(
    rotation = np.rad2deg(angle)

    # Flip some labels upside down
    alignment = ""
    if angle >= np.pi/2 and angle < 3*np.pi/2:
        alignment = "right"
        rotation = rotation + 180
    else: 
        alignment = "left"

    # Finally add the labels
    ax.text(
        x=angle, 
        y=lowerLimit + bar.get_height() + labelPadding, 
        s=label, 
        ha=alignment, fontsize=10,fontfamily='serif',
        va='center', 
        rotation=rotation, 
        rotation_mode="anchor")
 740:
data_sub =  medalhas_ouro.groupby(['region'])['Medal'].count().reset_index().sort_values(by='Medal', ascending=False).reset_index()

data_sub = data_sub[:10]

data_sub

color_map = ['#221f1f' for _ in range(0, 10)]
color_map[0] = color_map[1] = color_map[2] = '#b20710' # color highlight

plt.figure(figsize=(10,10))
ax = plt.subplot(111, polar=True)
plt.axis('off')

upperLimit = 3000
lowerLimit = 10
labelPadding = 30

max_ = data_sub['Medal'].max()
min_ = data_sub['Medal'].min()

slope = (max_ - lowerLimit) / (max_ - min_)

heights = slope * data_sub.Medal + (upperLimit- lowerLimit)

width = 2*np.pi / len(data_sub.index)

indexes = list(range(1, len(data_sub.index)+1))

angles = [element * width for element in indexes]

bars = ax.bar(
    x=angles, 
    height=heights, 
    width=width, 
    bottom=lowerLimit,
    linewidth=2, 
    edgecolor="white",
    color=color_map,alpha=0.8
)


for bar, angle, height, label in zip(bars,angles, heights, data_sub["region"]):

    # Labels are rotated. Rotation must be specified in degrees :(
    rotation = np.rad2deg(angle)

    # Flip some labels upside down
    alignment = ""
    if angle >= np.pi/2 and angle < 3*np.pi/2:
        alignment = "right"
        rotation = rotation + 180
    else: 
        alignment = "left"

    # Finally add the labels
    ax.text(
        x=angle, 
        y=lowerLimit + bar.get_height() + labelPadding, 
        s=label, 
        ha=alignment, fontsize=10,fontfamily='serif',
        va='center', 
        rotation=rotation, 
        rotation_mode="anchor")
 741:
data_sub =  medalhas_ouro.groupby(['region'])['Medal'].count().reset_index().sort_values(by='Medal', ascending=False).reset_index()

data_sub = data_sub[:10]

data_sub

color_map = ['#221f1f' for _ in range(0, 10)]
color_map[0] = color_map[1] = color_map[2] = '#b20710' # color highlight

plt.figure(figsize=(10,10))
ax = plt.subplot(111, polar=True)
plt.axis('off')

upperLimit = 3000
lowerLimit = 10
labelPadding = 30

max_ = data_sub['Medal'].max()
min_ = data_sub['Medal'].min()

slope = (max_ - lowerLimit) / (max_ - min_)

heights = slope * data_sub.Medal + (upperLimit- lowerLimit)

width = 2*np.pi / len(data_sub.index)

indexes = list(range(1, len(data_sub.index)+1))

angles = [element * width for element in indexes]

bars = ax.bar(
    x=angles, 
    height=heights, 
    width=width, 
    bottom=lowerLimit,
    linewidth=2, 
    edgecolor="white",
    color=color_map,alpha=0.8
)


for bar, angle, height, label in zip(bars,angles, heights, data_sub["region"]):

    # Labels are rotated. Rotation must be specified in degrees :(
    rotation = np.rad2deg(angle)

    # Flip some labels upside down
    alignment = ""
    if angle >= np.pi/2 and angle < 3*np.pi/2:
        alignment = "right"
        rotation = rotation + 180
    else: 
        alignment = "left"

    # Finally add the labels
    ax.text(
        x=angle, 
        y=lowerLimit + bar.get_height() + labelPadding, 
        s=label, 
        ha=alignment, fontsize=10,fontfamily='serif',
        va='center', 
        rotation=rotation, 
        rotation_mode="anchor")
    
ax.text('Distribuição de Medalhas de ouro por País (top 10)')
 742:
data_sub =  medalhas_ouro.groupby(['region'])['Medal'].count().reset_index().sort_values(by='Medal', ascending=False).reset_index()

data_sub = data_sub[:10]

data_sub

color_map = ['#221f1f' for _ in range(0, 10)]
color_map[0] = color_map[1] = color_map[2] = '#b20710' # color highlight

plt.figure(figsize=(10,10))
ax = plt.subplot(111, polar=True)
plt.axis('off')

upperLimit = 3000
lowerLimit = 10
labelPadding = 30

max_ = data_sub['Medal'].max()
min_ = data_sub['Medal'].min()

slope = (max_ - lowerLimit) / (max_ - min_)

heights = slope * data_sub.Medal + (upperLimit- lowerLimit)

width = 2*np.pi / len(data_sub.index)

indexes = list(range(1, len(data_sub.index)+1))

angles = [element * width for element in indexes]

bars = ax.bar(
    x=angles, 
    height=heights, 
    width=width, 
    bottom=lowerLimit,
    linewidth=2, 
    edgecolor="white",
    color=color_map,alpha=0.8
)


for bar, angle, height, label in zip(bars,angles, heights, data_sub["region"]):

    # Labels are rotated. Rotation must be specified in degrees :(
    rotation = np.rad2deg(angle)

    # Flip some labels upside down
    alignment = ""
    if angle >= np.pi/2 and angle < 3*np.pi/2:
        alignment = "right"
        rotation = rotation + 180
    else: 
        alignment = "left"

    # Finally add the labels
    ax.text(
        x=angle, 
        y=lowerLimit + bar.get_height() + labelPadding, 
        s=label, 
        ha=alignment, fontsize=10,fontfamily='serif',
        va='center', 
        rotation=rotation, 
        rotation_mode="anchor")
    
ax.text(x=0.5, y= 0, text='Distribuição de Medalhas de ouro por País (top 10)')
 743:
data_sub =  medalhas_ouro.groupby(['region'])['Medal'].count().reset_index().sort_values(by='Medal', ascending=False).reset_index()

data_sub = data_sub[:10]

data_sub

color_map = ['#221f1f' for _ in range(0, 10)]
color_map[0] = color_map[1] = color_map[2] = '#b20710' # color highlight

plt.figure(figsize=(10,10))
ax = plt.subplot(111, polar=True)
plt.axis('off')

upperLimit = 3000
lowerLimit = 10
labelPadding = 30

max_ = data_sub['Medal'].max()
min_ = data_sub['Medal'].min()

slope = (max_ - lowerLimit) / (max_ - min_)

heights = slope * data_sub.Medal + (upperLimit- lowerLimit)

width = 2*np.pi / len(data_sub.index)

indexes = list(range(1, len(data_sub.index)+1))

angles = [element * width for element in indexes]

bars = ax.bar(
    x=angles, 
    height=heights, 
    width=width, 
    bottom=lowerLimit,
    linewidth=2, 
    edgecolor="white",
    color=color_map,alpha=0.8
)


for bar, angle, height, label in zip(bars,angles, heights, data_sub["region"]):

    # Labels are rotated. Rotation must be specified in degrees :(
    rotation = np.rad2deg(angle)

    # Flip some labels upside down
    alignment = ""
    if angle >= np.pi/2 and angle < 3*np.pi/2:
        alignment = "right"
        rotation = rotation + 180
    else: 
        alignment = "left"

    # Finally add the labels
    ax.text(
        x=angle, 
        y=lowerLimit + bar.get_height() + labelPadding, 
        s=label, 
        ha=alignment, fontsize=10,fontfamily='serif',
        va='center', 
        rotation=rotation, 
        rotation_mode="anchor")
    
ax.text(x=0.5, y= 0, s='Distribuição de Medalhas de ouro por País (top 10)')
 744:
data_sub =  medalhas_ouro.groupby(['region'])['Medal'].count().reset_index().sort_values(by='Medal', ascending=False).reset_index()

data_sub = data_sub[:10]

data_sub

color_map = ['#221f1f' for _ in range(0, 10)]
color_map[0] = color_map[1] = color_map[2] = '#b20710' # color highlight

plt.figure(figsize=(10,10))
ax = plt.subplot(111, polar=True)
plt.axis('off')

upperLimit = 3000
lowerLimit = 10
labelPadding = 30

max_ = data_sub['Medal'].max()
min_ = data_sub['Medal'].min()

slope = (max_ - lowerLimit) / (max_ - min_)

heights = slope * data_sub.Medal + (upperLimit- lowerLimit)

width = 2*np.pi / len(data_sub.index)

indexes = list(range(1, len(data_sub.index)+1))

angles = [element * width for element in indexes]

bars = ax.bar(
    x=angles, 
    height=heights, 
    width=width, 
    bottom=lowerLimit,
    linewidth=2, 
    edgecolor="white",
    color=color_map,alpha=0.8
)


for bar, angle, height, label in zip(bars,angles, heights, data_sub["region"]):

    # Labels are rotated. Rotation must be specified in degrees :(
    rotation = np.rad2deg(angle)

    # Flip some labels upside down
    alignment = ""
    if angle >= np.pi/2 and angle < 3*np.pi/2:
        alignment = "right"
        rotation = rotation + 180
    else: 
        alignment = "left"

    # Finally add the labels
    ax.text(
        x=angle, 
        y=lowerLimit + bar.get_height() + labelPadding, 
        s=label, 
        ha=alignment, fontsize=10,fontfamily='serif',
        va='center', 
        rotation=rotation, 
        rotation_mode="anchor")
    
ax.text(x=0.5, y= 0.1, s='Distribuição de Medalhas de ouro por País (top 10)')
 745:
data_sub =  medalhas_ouro.groupby(['region'])['Medal'].count().reset_index().sort_values(by='Medal', ascending=False).reset_index()

data_sub = data_sub[:10]

data_sub

color_map = ['#221f1f' for _ in range(0, 10)]
color_map[0] = color_map[1] = color_map[2] = '#b20710' # color highlight

plt.figure(figsize=(10,10))
ax = plt.subplot(111, polar=True)
plt.axis('off')

upperLimit = 3000
lowerLimit = 10
labelPadding = 30

max_ = data_sub['Medal'].max()
min_ = data_sub['Medal'].min()

slope = (max_ - lowerLimit) / (max_ - min_)

heights = slope * data_sub.Medal + (upperLimit- lowerLimit)

width = 2*np.pi / len(data_sub.index)

indexes = list(range(1, len(data_sub.index)+1))

angles = [element * width for element in indexes]

bars = ax.bar(
    x=angles, 
    height=heights, 
    width=width, 
    bottom=lowerLimit,
    linewidth=2, 
    edgecolor="white",
    color=color_map,alpha=0.8
)


for bar, angle, height, label in zip(bars,angles, heights, data_sub["region"]):

    # Labels are rotated. Rotation must be specified in degrees :(
    rotation = np.rad2deg(angle)

    # Flip some labels upside down
    alignment = ""
    if angle >= np.pi/2 and angle < 3*np.pi/2:
        alignment = "right"
        rotation = rotation + 180
    else: 
        alignment = "left"

    # Finally add the labels
    ax.text(
        x=angle, 
        y=lowerLimit + bar.get_height() + labelPadding, 
        s=label, 
        ha=alignment, fontsize=10,fontfamily='serif',
        va='center', 
        rotation=rotation, 
        rotation_mode="anchor")
    
ax.text(x=0.5, y= -2, s='Distribuição de Medalhas de ouro por País (top 10)')
 746:
data_sub =  medalhas_ouro.groupby(['region'])['Medal'].count().reset_index().sort_values(by='Medal', ascending=False).reset_index()

data_sub = data_sub[:10]

data_sub

color_map = ['#221f1f' for _ in range(0, 10)]
color_map[0] = color_map[1] = color_map[2] = '#b20710' # color highlight

plt.figure(figsize=(10,10))
ax = plt.subplot(111, polar=True)
plt.axis('off')

upperLimit = 3000
lowerLimit = 10
labelPadding = 30

max_ = data_sub['Medal'].max()
min_ = data_sub['Medal'].min()

slope = (max_ - lowerLimit) / (max_ - min_)

heights = slope * data_sub.Medal + (upperLimit- lowerLimit)

width = 2*np.pi / len(data_sub.index)

indexes = list(range(1, len(data_sub.index)+1))

angles = [element * width for element in indexes]

bars = ax.bar(
    x=angles, 
    height=heights, 
    width=width, 
    bottom=lowerLimit,
    linewidth=2, 
    edgecolor="white",
    color=color_map,alpha=0.8
)


for bar, angle, height, label in zip(bars,angles, heights, data_sub["region"]):

    # Labels are rotated. Rotation must be specified in degrees :(
    rotation = np.rad2deg(angle)

    # Flip some labels upside down
    alignment = ""
    if angle >= np.pi/2 and angle < 3*np.pi/2:
        alignment = "right"
        rotation = rotation + 180
    else: 
        alignment = "left"

    # Finally add the labels
    ax.text(
        x=angle, 
        y=lowerLimit + bar.get_height() + labelPadding, 
        s=label, 
        ha=alignment, fontsize=10,fontfamily='serif',
        va='center', 
        rotation=rotation, 
        rotation_mode="anchor")
    
ax.text(x=0.5, y= 2, s='Distribuição de Medalhas de ouro por País (top 10)')
 747:
data_sub =  medalhas_ouro.groupby(['region'])['Medal'].count().reset_index().sort_values(by='Medal', ascending=False).reset_index()

data_sub = data_sub[:10]

data_sub

color_map = ['#221f1f' for _ in range(0, 10)]
color_map[0] = color_map[1] = color_map[2] = '#b20710' # color highlight

plt.figure(figsize=(10,10))
ax = plt.subplot(111, polar=True)
plt.axis('off')

upperLimit = 3000
lowerLimit = 10
labelPadding = 30

max_ = data_sub['Medal'].max()
min_ = data_sub['Medal'].min()

slope = (max_ - lowerLimit) / (max_ - min_)

heights = slope * data_sub.Medal + (upperLimit- lowerLimit)

width = 2*np.pi / len(data_sub.index)

indexes = list(range(1, len(data_sub.index)+1))

angles = [element * width for element in indexes]

bars = ax.bar(
    x=angles, 
    height=heights, 
    width=width, 
    bottom=lowerLimit,
    linewidth=2, 
    edgecolor="white",
    color=color_map,alpha=0.8
)


for bar, angle, height, label in zip(bars,angles, heights, data_sub["region"]):

    # Labels are rotated. Rotation must be specified in degrees :(
    rotation = np.rad2deg(angle)

    # Flip some labels upside down
    alignment = ""
    if angle >= np.pi/2 and angle < 3*np.pi/2:
        alignment = "right"
        rotation = rotation + 180
    else: 
        alignment = "left"

    # Finally add the labels
    ax.text(
        x=angle, 
        y=lowerLimit + bar.get_height() + labelPadding, 
        s=label, 
        ha=alignment, fontsize=10,fontfamily='serif',
        va='center', 
        rotation=rotation, 
        rotation_mode="anchor")
    
ax.text(x=0.5, y= 0.5, s='Distribuição de Medalhas de ouro por País (top 10)')
 748:
data_sub =  medalhas_ouro.groupby(['region'])['Medal'].count().reset_index().sort_values(by='Medal', ascending=False).reset_index()

data_sub = data_sub[:10]

data_sub

color_map = ['#221f1f' for _ in range(0, 10)]
color_map[0] = color_map[1] = color_map[2] = '#b20710' # color highlight

plt.figure(figsize=(10,10))
ax = plt.subplot(111, polar=True)
plt.axis('off')

upperLimit = 3000
lowerLimit = 10
labelPadding = 30

max_ = data_sub['Medal'].max()
min_ = data_sub['Medal'].min()

slope = (max_ - lowerLimit) / (max_ - min_)

heights = slope * data_sub.Medal + (upperLimit- lowerLimit)

width = 2*np.pi / len(data_sub.index)

indexes = list(range(1, len(data_sub.index)+1))

angles = [element * width for element in indexes]

bars = ax.bar(
    x=angles, 
    height=heights, 
    width=width, 
    bottom=lowerLimit,
    linewidth=2, 
    edgecolor="white",
    color=color_map,alpha=0.8
)


for bar, angle, height, label in zip(bars,angles, heights, data_sub["region"]):

    # Labels are rotated. Rotation must be specified in degrees :(
    rotation = np.rad2deg(angle)

    # Flip some labels upside down
    alignment = ""
    if angle >= np.pi/2 and angle < 3*np.pi/2:
        alignment = "right"
        rotation = rotation + 180
    else: 
        alignment = "left"

    # Finally add the labels
    ax.text(
        x=angle, 
        y=lowerLimit + bar.get_height() + labelPadding, 
        s=label, 
        ha=alignment, fontsize=10,fontfamily='serif',
        va='center', 
        rotation=rotation, 
        rotation_mode="anchor")
    
ax.text(x=0.5, y= 5, s='Distribuição de Medalhas de ouro por País (top 10)')
 749:
data_sub =  medalhas_ouro.groupby(['region'])['Medal'].count().reset_index().sort_values(by='Medal', ascending=False).reset_index()

data_sub = data_sub[:10]

data_sub

color_map = ['#221f1f' for _ in range(0, 10)]
color_map[0] = color_map[1] = color_map[2] = '#b20710' # color highlight

plt.figure(figsize=(10,10))
ax = plt.subplot(111, polar=True)
plt.axis('off')

upperLimit = 3000
lowerLimit = 10
labelPadding = 30

max_ = data_sub['Medal'].max()
min_ = data_sub['Medal'].min()

slope = (max_ - lowerLimit) / (max_ - min_)

heights = slope * data_sub.Medal + (upperLimit- lowerLimit)

width = 2*np.pi / len(data_sub.index)

indexes = list(range(1, len(data_sub.index)+1))

angles = [element * width for element in indexes]

bars = ax.bar(
    x=angles, 
    height=heights, 
    width=width, 
    bottom=lowerLimit,
    linewidth=2, 
    edgecolor="white",
    color=color_map,alpha=0.8
)


for bar, angle, height, label in zip(bars,angles, heights, data_sub["region"]):

    # Labels are rotated. Rotation must be specified in degrees :(
    rotation = np.rad2deg(angle)

    # Flip some labels upside down
    alignment = ""
    if angle >= np.pi/2 and angle < 3*np.pi/2:
        alignment = "right"
        rotation = rotation + 180
    else: 
        alignment = "left"

    # Finally add the labels
    ax.text(
        x=angle, 
        y=lowerLimit + bar.get_height() + labelPadding, 
        s=label, 
        ha=alignment, fontsize=10,fontfamily='serif',
        va='center', 
        rotation=rotation, 
        rotation_mode="anchor")
    
plt.title('Distribuição de medalhas de Ouro por País (Top 10)')
 750:
data_sub =  medalhas_ouro.groupby(['region'])['Medal'].count().reset_index().sort_values(by='Medal', ascending=False).reset_index()

data_sub = data_sub[:10]

data_sub

color_map = ['#221f1f' for _ in range(0, 10)]
color_map[0] = color_map[1] = color_map[2] = '#b20710' # color highlight

plt.figure(figsize=(10,10))
ax = plt.subplot(111, polar=True)
plt.axis('off')

upperLimit = 3000
lowerLimit = 10
labelPadding = 30

max_ = data_sub['Medal'].max()
min_ = data_sub['Medal'].min()

slope = (max_ - lowerLimit) / (max_ - min_)

heights = slope * data_sub.Medal + (upperLimit- lowerLimit)

width = 2*np.pi / len(data_sub.index)

indexes = list(range(1, len(data_sub.index)+1))

angles = [element * width for element in indexes]

bars = ax.bar(
    x=angles, 
    height=heights, 
    width=width, 
    bottom=lowerLimit,
    linewidth=2, 
    edgecolor="white",
    color=color_map,alpha=0.8
)


for bar, angle, height, label in zip(bars,angles, heights, data_sub["region"]):

    # Labels are rotated. Rotation must be specified in degrees :(
    rotation = np.rad2deg(angle)

    # Flip some labels upside down
    alignment = ""
    if angle >= np.pi/2 and angle < 3*np.pi/2:
        alignment = "right"
        rotation = rotation + 180
    else: 
        alignment = "left"

    # Finally add the labels
    ax.text(
        x=angle, 
        y=lowerLimit + bar.get_height() + labelPadding, 
        s=label, 
        ha=alignment, fontsize=10,fontfamily='serif',
        va='center', 
        rotation=rotation, 
        rotation_mode="anchor")
    
plt.title('Distribuição de medalhas de Ouro por País (Top 10)', fontsize=15, fontweight='bold', fontfamily='serif', color='#323232')
 751:
data_sub =  medalhas_ouro.groupby(['region'])['Medal'].count().reset_index().sort_values(by='Medal', ascending=False).reset_index()

data_sub = data_sub[:10]

data_sub

color_map = ['#221f1f' for _ in range(0, 10)]
color_map[0] = color_map[1] = color_map[2] = '#b20710' # color highlight

plt.figure(figsize=(10,10), facecolor=cor_fundo_gold)
ax = plt.subplot(111, polar=True)
plt.axis('off')

upperLimit = 3000
lowerLimit = 10
labelPadding = 30

max_ = data_sub['Medal'].max()
min_ = data_sub['Medal'].min()

slope = (max_ - lowerLimit) / (max_ - min_)

heights = slope * data_sub.Medal + (upperLimit- lowerLimit)

width = 2*np.pi / len(data_sub.index)

indexes = list(range(1, len(data_sub.index)+1))

angles = [element * width for element in indexes]

bars = ax.bar(
    x=angles, 
    height=heights, 
    width=width, 
    bottom=lowerLimit,
    linewidth=2, 
    edgecolor="white",
    color=color_map,alpha=0.8
)


for bar, angle, height, label in zip(bars,angles, heights, data_sub["region"]):

    # Labels are rotated. Rotation must be specified in degrees :(
    rotation = np.rad2deg(angle)

    # Flip some labels upside down
    alignment = ""
    if angle >= np.pi/2 and angle < 3*np.pi/2:
        alignment = "right"
        rotation = rotation + 180
    else: 
        alignment = "left"

    # Finally add the labels
    ax.text(
        x=angle, 
        y=lowerLimit + bar.get_height() + labelPadding, 
        s=label, 
        ha=alignment, fontsize=10,fontfamily='serif',
        va='center', 
        rotation=rotation, 
        rotation_mode="anchor")
    
plt.title('Distribuição de medalhas de Ouro por País (Top 10)', fontsize=15, fontweight='bold', fontfamily='serif', color='#323232')
ax.set_facecolor(cor_fundo_gold)
 752:
data_sub =  medalhas_ouro.groupby(['region'])['Medal'].count().reset_index().sort_values(by='Medal', ascending=False).reset_index()

data_sub = data_sub[:10]

data_sub

color_map = ['#221f1f' for _ in range(0, 10)]
color_map[0] = color_map[1] = color_map[2] = cores_medalhas.get('Gold') # color highlight

plt.figure(figsize=(10,10), facecolor=cor_fundo_gold)
ax = plt.subplot(111, polar=True)
plt.axis('off')

upperLimit = 3000
lowerLimit = 10
labelPadding = 30

max_ = data_sub['Medal'].max()
min_ = data_sub['Medal'].min()

slope = (max_ - lowerLimit) / (max_ - min_)

heights = slope * data_sub.Medal + (upperLimit- lowerLimit)

width = 2*np.pi / len(data_sub.index)

indexes = list(range(1, len(data_sub.index)+1))

angles = [element * width for element in indexes]

bars = ax.bar(
    x=angles, 
    height=heights, 
    width=width, 
    bottom=lowerLimit,
    linewidth=2, 
    edgecolor="white",
    color=color_map,alpha=0.8
)


for bar, angle, height, label in zip(bars,angles, heights, data_sub["region"]):

    # Labels are rotated. Rotation must be specified in degrees :(
    rotation = np.rad2deg(angle)

    # Flip some labels upside down
    alignment = ""
    if angle >= np.pi/2 and angle < 3*np.pi/2:
        alignment = "right"
        rotation = rotation + 180
    else: 
        alignment = "left"

    # Finally add the labels
    ax.text(
        x=angle, 
        y=lowerLimit + bar.get_height() + labelPadding, 
        s=label, 
        ha=alignment, fontsize=10,fontfamily='serif',
        va='center', 
        rotation=rotation, 
        rotation_mode="anchor")
    
plt.title('Distribuição de medalhas de Ouro por País (Top 10)', fontsize=15, fontweight='bold', fontfamily='serif', color='#323232')
ax.set_facecolor(cor_fundo_gold)
 753:
data_sub =  medalhas_ouro.groupby(['region'])['Medal'].count().reset_index().sort_values(by='Medal', ascending=False).reset_index()

data_sub = data_sub[:10]

data_sub

color_map = ['#244747' for _ in range(0, 10)]
color_map[0] = color_map[1] = color_map[2] = cores_medalhas.get('Gold') # color highlight

plt.figure(figsize=(10,10), facecolor=cor_fundo_gold)
ax = plt.subplot(111, polar=True)
plt.axis('off')

upperLimit = 3000
lowerLimit = 10
labelPadding = 30

max_ = data_sub['Medal'].max()
min_ = data_sub['Medal'].min()

slope = (max_ - lowerLimit) / (max_ - min_)

heights = slope * data_sub.Medal + (upperLimit- lowerLimit)

width = 2*np.pi / len(data_sub.index)

indexes = list(range(1, len(data_sub.index)+1))

angles = [element * width for element in indexes]

bars = ax.bar(
    x=angles, 
    height=heights, 
    width=width, 
    bottom=lowerLimit,
    linewidth=2, 
    edgecolor="white",
    color=color_map,alpha=0.8
)


for bar, angle, height, label in zip(bars,angles, heights, data_sub["region"]):

    # Labels are rotated. Rotation must be specified in degrees :(
    rotation = np.rad2deg(angle)

    # Flip some labels upside down
    alignment = ""
    if angle >= np.pi/2 and angle < 3*np.pi/2:
        alignment = "right"
        rotation = rotation + 180
    else: 
        alignment = "left"

    # Finally add the labels
    ax.text(
        x=angle, 
        y=lowerLimit + bar.get_height() + labelPadding, 
        s=label, 
        ha=alignment, fontsize=10,fontfamily='serif',
        va='center', 
        rotation=rotation, 
        rotation_mode="anchor")
    
plt.title('Distribuição de medalhas de Ouro por País (Top 10)', fontsize=15, fontweight='bold', fontfamily='serif', color='#323232')
ax.set_facecolor(cor_fundo_gold)
 754:
data_sub =  medalhas_ouro.groupby(['region'])['Medal'].count().reset_index().sort_values(by='Medal', ascending=False).reset_index()

data_sub = data_sub[:10]

data_sub

color_map = ['#244747' for _ in range(0, 10)]
color_map[0] = color_map[1] = color_map[2] = cores_medalhas.get('Gold') # color highlight

plt.figure(figsize=(13,13), facecolor=cor_fundo_gold)
ax = plt.subplot(111, polar=True)
plt.axis('off')

upperLimit = 3000
lowerLimit = 10
labelPadding = 30

max_ = data_sub['Medal'].max()
min_ = data_sub['Medal'].min()

slope = (max_ - lowerLimit) / (max_ - min_)

heights = slope * data_sub.Medal + (upperLimit- lowerLimit)

width = 2*np.pi / len(data_sub.index)

indexes = list(range(1, len(data_sub.index)+1))

angles = [element * width for element in indexes]

bars = ax.bar(
    x=angles, 
    height=heights, 
    width=width, 
    bottom=lowerLimit,
    linewidth=2, 
    edgecolor="white",
    color=color_map,alpha=0.8
)


for bar, angle, height, label in zip(bars,angles, heights, data_sub["region"]):

    # Labels are rotated. Rotation must be specified in degrees :(
    rotation = np.rad2deg(angle)

    # Flip some labels upside down
    alignment = ""
    if angle >= np.pi/2 and angle < 3*np.pi/2:
        alignment = "right"
        rotation = rotation + 180
    else: 
        alignment = "left"

    # Finally add the labels
    ax.text(
        x=angle, 
        y=lowerLimit + bar.get_height() + labelPadding, 
        s=label, 
        ha=alignment, fontsize=10,fontfamily='serif',
        va='center', 
        rotation=rotation, 
        rotation_mode="anchor")
    
plt.title('Distribuição de medalhas de Ouro por País (Top 10)', fontsize=15, fontweight='bold', fontfamily='serif', color='#323232')
ax.set_facecolor(cor_fundo_gold)
 755:
data_sub =  medalhas_ouro.groupby(['region'])['Medal'].count().reset_index().sort_values(by='Medal', ascending=False).reset_index()

data_sub = data_sub[:10]

data_sub

color_map = ['#244747' for _ in range(0, 10)]
color_map[0] = color_map[1] = color_map[2] = cores_medalhas.get('Gold') # color highlight

plt.figure(figsize=(13,13), facecolor=cor_fundo_gold)
ax = plt.subplot(111, polar=True)
plt.axis('off')

upperLimit = 3000
lowerLimit = 10
labelPadding = 30

max_ = data_sub['Medal'].max()
min_ = data_sub['Medal'].min()

slope = (max_ - lowerLimit) / (max_ - min_)

heights = slope * data_sub.Medal + (upperLimit- lowerLimit)

width = 2*np.pi / len(data_sub.index)

indexes = list(range(1, len(data_sub.index)+1))

angles = [element * width for element in indexes]

bars = ax.bar(
    x=angles, 
    height=heights, 
    width=width, 
    bottom=lowerLimit,
    linewidth=2, 
    edgecolor="white",
    color=color_map,alpha=0.8
)


for bar, angle, height, label in zip(bars,angles, heights, data_sub["region"]):

    # Labels are rotated. Rotation must be specified in degrees :(
    rotation = np.rad2deg(angle)

    # Flip some labels upside down
    alignment = ""
    if angle >= np.pi/2 and angle < 3*np.pi/2:
        alignment = "right"
        rotation = rotation + 180
    else: 
        alignment = "left"

    # Finally add the labels
    ax.text(
        x=angle, 
        y=lowerLimit + bar.get_height() + labelPadding, 
        s=label, 
        ha=alignment, fontsize=10,fontfamily='serif',
        va='center', 
        rotation=rotation, 
        rotation_mode="anchor")
    
     # Add the data labels inside the bars
    ax.text(
        x=angle, 
        y=lowerLimit + bar.get_height()/2,  # Positioned at the middle of the bar
        s=f"{int(bar.get_height() / slope)}", 
        ha='center', fontsize=10, fontfamily='serif',
        va='center', 
        color='white', 
        rotation=rotation, 
        rotation_mode="anchor")
    
plt.title('Distribuição de medalhas de Ouro por País (Top 10)', fontsize=15, fontweight='bold', fontfamily='serif', color='#323232')
ax.set_facecolor(cor_fundo_gold)
 756:
data_sub =  medalhas_ouro.groupby(['region'])['Medal'].count().reset_index().sort_values(by='Medal', ascending=False).reset_index()

data_sub = data_sub[:10]

data_sub

color_map = ['#244747' for _ in range(0, 10)]
color_map[0] = color_map[1] = color_map[2] = cores_medalhas.get('Gold') # color highlight

plt.figure(figsize=(13,13), facecolor=cor_fundo_gold)
ax = plt.subplot(111, polar=True)
plt.axis('off')

upperLimit = 3000
lowerLimit = 10
labelPadding = 30

max_ = data_sub['Medal'].max()
min_ = data_sub['Medal'].min()

slope = (max_ - lowerLimit) / (max_ - min_)

heights = slope * data_sub.Medal + (upperLimit- lowerLimit)

width = 2*np.pi / len(data_sub.index)

indexes = list(range(1, len(data_sub.index)+1))

angles = [element * width for element in indexes]

bars = ax.bar(
    x=angles, 
    height=heights, 
    width=width, 
    bottom=lowerLimit,
    linewidth=2, 
    edgecolor="white",
    color=color_map,alpha=0.8
)


for bar, angle, height, label in zip(bars,angles, heights, data_sub["region"]):

    rotation = np.rad2deg(angle)

    alignment = ""
    if angle >= np.pi/2 and angle < 3*np.pi/2:
        alignment = "right"
        rotation = rotation + 180
    else: 
        alignment = "left"

    ax.text(
        x=angle, 
        y=lowerLimit + bar.get_height() + labelPadding, 
        s=label, 
        ha=alignment, fontsize=10,fontfamily='serif',
        va='center', 
        rotation=rotation, 
        rotation_mode="anchor")

    ax.text(
        x=angle, 
        y=lowerLimit + bar.get_height()/2,  # Positioned at the middle of the bar
        s=f"{int(bar.get_height() / slope)}", 
        ha='center', fontsize=10, fontfamily='serif',
        va='center', 
        color='white', 
        rotation=rotation, 
        rotation_mode="anchor")
    
plt.title('Distribuição de medalhas de Ouro por País (Top 10)', fontsize=15, fontweight='bold', fontfamily='serif', color='#323232')
ax.set_facecolor(cor_fundo_gold)

plt.tight_layout()
 757:
data_sub =  medalhas_ouro.groupby(['region'])['Medal'].count().reset_index().sort_values(by='Medal', ascending=False).reset_index()

data_sub = data_sub[:10]

data_sub

color_map = ['#244747' for _ in range(0, 10)]
color_map[0] = color_map[1] = color_map[2] = cores_medalhas.get('Gold') # color highlight

plt.figure(figsize=(10,10), facecolor=cor_fundo_gold)
ax = plt.subplot(111, polar=True)
plt.axis('off')

upperLimit = 3000
lowerLimit = 10
labelPadding = 30

max_ = data_sub['Medal'].max()
min_ = data_sub['Medal'].min()

slope = (max_ - lowerLimit) / (max_ - min_)

heights = slope * data_sub.Medal + (upperLimit- lowerLimit)

width = 2*np.pi / len(data_sub.index)

indexes = list(range(1, len(data_sub.index)+1))

angles = [element * width for element in indexes]

bars = ax.bar(
    x=angles, 
    height=heights, 
    width=width, 
    bottom=lowerLimit,
    linewidth=2, 
    edgecolor="white",
    color=color_map,alpha=0.8
)


for bar, angle, height, label in zip(bars,angles, heights, data_sub["region"]):

    rotation = np.rad2deg(angle)

    alignment = ""
    if angle >= np.pi/2 and angle < 3*np.pi/2:
        alignment = "right"
        rotation = rotation + 180
    else: 
        alignment = "left"

    ax.text(
        x=angle, 
        y=lowerLimit + bar.get_height() + labelPadding, 
        s=label, 
        ha=alignment, fontsize=10,fontfamily='serif',
        va='center', 
        rotation=rotation, 
        rotation_mode="anchor")

    ax.text(
        x=angle, 
        y=lowerLimit + bar.get_height()/2,
        s=f"{int(bar.get_height() / slope)}", 
        ha='center', fontsize=10, fontfamily='serif',
        va='center', 
        color='white', 
        rotation=rotation, 
        rotation_mode="anchor")
    
plt.title('Distribuição de medalhas de Ouro por País (Top 10)', fontsize=15, fontweight='bold', fontfamily='serif', color='#323232')
ax.set_facecolor(cor_fundo_gold)

plt.tight_layout()
 758:
# A costrução aqui é um pouco mais complexa, por isso irei explicar melhor essa célula.

top_10_medalhas_ouro =  medalhas_ouro.groupby(['region'])['Medal'].count().reset_index().sort_values(by='Medal', ascending=False).reset_index()[:10]

color_map = ['#244747' for _ in range(0, 10)]   # Defindo as cores
color_map[0] = color_map[1] = color_map[2] = cores_medalhas.get('Gold') # Definido as cores de highlight

plt.figure(figsize=(10,10), facecolor=cor_fundo_gold)
ax = plt.subplot(111, polar=True)
plt.axis('off')

upperLimit = 3000   # Limite superior das fatias
lowerLimit = 10     # Limite inferior das fatias (onde começam em relação ao eixo cartesiano)
labelPadding = 30   # Define a distância minima do rótulo do país

max_ = top_10_medalhas_ouro['Medal'].max()
min_ = top_10_medalhas_ouro['Medal'].min()

# Calcula a angulatura da barra. A slope é dada pela formula dy/dx = (ymax-ymin)/(xmax-xmin)
slope = (top_10_medalhas_ouro.Medal - lowerLimit) / (max_ - min_)

heights = slope * top_10_medalhas_ouro.Medal + (upperLimit- lowerLimit)

width = 2*np.pi / len(top_10_medalhas_ouro.index)

indexes = list(range(1, len(top_10_medalhas_ouro.index)+1))

angles = [element * width for element in indexes]

bars = ax.bar(
    x=angles, 
    height=heights, 
    width=width, 
    bottom=lowerLimit,
    linewidth=2, 
    edgecolor="white",
    color=color_map,alpha=0.8
)


for bar, angle, height, label in zip(bars,angles, heights, top_10_medalhas_ouro["region"]):

    rotation = np.rad2deg(angle)

    alignment = ""
    if angle >= np.pi/2 and angle < 3*np.pi/2:
        alignment = "right"
        rotation = rotation + 180
    else: 
        alignment = "left"

    ax.text(
        x=angle, 
        y=lowerLimit + bar.get_height() + labelPadding, 
        s=label, 
        ha=alignment, fontsize=10,fontfamily='serif',
        va='center', 
        rotation=rotation, 
        rotation_mode="anchor")

    ax.text(
        x=angle, 
        y=lowerLimit + bar.get_height()/2,
        s=f"{int(bar.get_height() / slope)}", 
        ha='center', fontsize=10, fontfamily='serif',
        va='center', 
        color='white', 
        rotation=rotation, 
        rotation_mode="anchor")
    
plt.title('Distribuição de medalhas de Ouro por País (Top 10)', fontsize=15, fontweight='bold', fontfamily='serif', color='#323232')
ax.set_facecolor(cor_fundo_gold)

plt.tight_layout()
 759:
# A costrução aqui é um pouco mais complexa, por isso irei explicar melhor essa célula.

top_10_medalhas_ouro =  medalhas_ouro.groupby(['region'])['Medal'].count().reset_index().sort_values(by='Medal', ascending=False).reset_index()[:10]

color_map = ['#244747' for _ in range(0, 10)]   # Defindo as cores
color_map[0] = color_map[1] = color_map[2] = cores_medalhas.get('Gold') # Definido as cores de highlight

plt.figure(figsize=(10,10), facecolor=cor_fundo_gold)
ax = plt.subplot(111, polar=True)
plt.axis('off')

upperLimit = 3000   # Limite superior das fatias
lowerLimit = 10     # Limite inferior das fatias (onde começam em relação ao eixo cartesiano)
labelPadding = 30   # Define a distância minima do rótulo do país

max_ = top_10_medalhas_ouro['Medal'].max()
min_ = top_10_medalhas_ouro['Medal'].min()

# Calcula a angulatura da barra. A slope é dada pela formula dy/dx = (ymax-ymin)/(xmax-xmin)
slope = (max_ - lowerLimit) / (max_ - min_)

heights = slope * top_10_medalhas_ouro.Medal + (upperLimit- lowerLimit)

width = 2*np.pi / len(top_10_medalhas_ouro.index)

indexes = list(range(1, len(top_10_medalhas_ouro.index)+1))

angles = [element * width for element in indexes]

bars = ax.bar(
    x=angles, 
    height=heights, 
    width=width, 
    bottom=lowerLimit,
    linewidth=2, 
    edgecolor="white",
    color=color_map,alpha=0.8
)


for bar, angle, height, label in zip(bars,angles, heights, top_10_medalhas_ouro["region"]):

    rotation = np.rad2deg(angle)

    alignment = ""
    if angle >= np.pi/2 and angle < 3*np.pi/2:
        alignment = "right"
        rotation = rotation + 180
    else: 
        alignment = "left"

    ax.text(
        x=angle, 
        y=lowerLimit + bar.get_height() + labelPadding, 
        s=label, 
        ha=alignment, fontsize=10,fontfamily='serif',
        va='center', 
        rotation=rotation, 
        rotation_mode="anchor")

    ax.text(
        x=angle, 
        y=lowerLimit + bar.get_height()/2,
        s=f"{int(bar.get_height() / slope)}", 
        ha='center', fontsize=10, fontfamily='serif',
        va='center', 
        color='white', 
        rotation=rotation, 
        rotation_mode="anchor")
    
plt.title('Distribuição de medalhas de Ouro por País (Top 10)', fontsize=15, fontweight='bold', fontfamily='serif', color='#323232')
ax.set_facecolor(cor_fundo_gold)

plt.tight_layout()
 760:
# A costrução aqui é um pouco mais complexa, por isso irei explicar melhor essa célula.

top_10_medalhas_ouro =  medalhas_ouro.groupby(['region'])['Medal'].count().reset_index().sort_values(by='Medal', ascending=False).reset_index()[:10]

color_map = ['#244747' for _ in range(0, 10)]   # Defindo as cores
color_map[0] = color_map[1] = color_map[2] = cores_medalhas.get('Gold') # Definido as cores de highlight

plt.figure(figsize=(10,10), facecolor=cor_fundo_gold)
ax = plt.subplot(111, polar=True)
plt.axis('off')

upperLimit = 3000   # Limite superior das fatias
lowerLimit = 10     # Limite inferior das fatias (onde começam em relação ao eixo cartesiano)
labelPadding = 30   # Define a distância minima do rótulo do país

max_ = top_10_medalhas_ouro['Medal'].max()
min_ = top_10_medalhas_ouro['Medal'].min()

# Calcula a angulatura da barra. A slope é dada pela formula dy/dx = (ymax-ymin)/(xmax-xmin)
slope = (max_ - lowerLimit) / (max_ - min_)

alturas = slope * top_10_medalhas_ouro.Medal + (upperLimit- lowerLimit)


indexes = list(range(1, len(top_10_medalhas_ouro.index)+1))

angles = [element * width for element in indexes]

bars = ax.bar(
    x=angles, 
    height=alturas, 
    width=width, 
    bottom=lowerLimit,
    linewidth=2, 
    edgecolor="white",
    color=color_map,alpha=0.8
)


for bar, angle, height, label in zip(bars,angles, alturas, top_10_medalhas_ouro["region"]):

    rotation = np.rad2deg(angle)

    alignment = ""
    if angle >= np.pi/2 and angle < 3*np.pi/2:
        alignment = "right"
        rotation = rotation + 180
    else: 
        alignment = "left"

    ax.text(
        x=angle, 
        y=lowerLimit + bar.get_height() + labelPadding, 
        s=label, 
        ha=alignment, fontsize=10,fontfamily='serif',
        va='center', 
        rotation=rotation, 
        rotation_mode="anchor")

    ax.text(
        x=angle, 
        y=lowerLimit + bar.get_height()/2,
        s=f"{int(bar.get_height() / slope)}", 
        ha='center', fontsize=10, fontfamily='serif',
        va='center', 
        color='white', 
        rotation=rotation, 
        rotation_mode="anchor")
    
plt.title('Distribuição de medalhas de Ouro por País (Top 10)', fontsize=15, fontweight='bold', fontfamily='serif', color='#323232')
ax.set_facecolor(cor_fundo_gold)

plt.tight_layout()
 761:
# A costrução aqui é um pouco mais complexa, por isso irei explicar melhor essa célula.

top_10_medalhas_ouro =  medalhas_ouro.groupby(['region'])['Medal'].count().reset_index().sort_values(by='Medal', ascending=False).reset_index()[:10]

color_map = ['#244747' for _ in range(0, 10)]   # Defindo as cores
color_map[0] = color_map[1] = color_map[2] = cores_medalhas.get('Gold') # Definido as cores de highlight

plt.figure(figsize=(10,10), facecolor=cor_fundo_gold)
ax = plt.subplot(111, polar=True)
plt.axis('off')

upperLimit = 3000   # Limite superior das fatias
lowerLimit = 10     # Limite inferior das fatias (onde começam em relação ao eixo cartesiano)
labelPadding = 30   # Define a distância minima do rótulo do país

max_ = top_10_medalhas_ouro['Medal'].max()
min_ = top_10_medalhas_ouro['Medal'].min()

# Calcula a angulatura da barra. A slope é dada pela formula dy/dx = (ymax-ymin)/(xmax-xmin)
slope = (max_ - lowerLimit) / (max_ - min_)

alturas = slope * top_10_medalhas_ouro.Medal + (upperLimit- lowerLimit)

indexes = list(range(1, len(top_10_medalhas_ouro.index)+1))

angulos = [element * width for element in indexes]

bars = ax.bar(
    x=angulos, 
    height=alturas, 
    width=width, 
    bottom=lowerLimit,
    linewidth=2, 
    edgecolor="white",
    color=color_map,alpha=0.8
)


for bar, angle, height, label in zip(bars,angulos, alturas, top_10_medalhas_ouro["region"]):

    rotation = np.rad2deg(angle)

    alignment = ""
    if angle >= np.pi/2 and angle < 3*np.pi/2:
        alignment = "right"
        rotation = rotation + 180
    else: 
        alignment = "left"

    ax.text(
        x=angle, 
        y=lowerLimit + bar.get_height() + labelPadding, 
        s=label, 
        ha=alignment, fontsize=10,fontfamily='serif',
        va='center', 
        rotation=rotation, 
        rotation_mode="anchor")

    ax.text(
        x=angle, 
        y=lowerLimit + bar.get_height()/2,
        s=f"{int(bar.get_height() / slope)}", 
        ha='center', fontsize=10, fontfamily='serif',
        va='center', 
        color='white', 
        rotation=rotation, 
        rotation_mode="anchor")
    
plt.title('Distribuição de medalhas de Ouro por País (Top 10)', fontsize=15, fontweight='bold', fontfamily='serif', color='#323232')
ax.set_facecolor(cor_fundo_gold)

plt.tight_layout()
 762:
# A costrução aqui é um pouco mais complexa, por isso irei explicar melhor essa célula.

top_10_medalhas_ouro =  medalhas_ouro.groupby(['region'])['Medal'].count().reset_index().sort_values(by='Medal', ascending=False).reset_index()[:10]

color_map = ['#244747' for _ in range(0, 10)]   # Defindo as cores
color_map[0] = color_map[1] = color_map[2] = cores_medalhas.get('Gold') # Definido as cores de highlight

plt.figure(figsize=(10,10), facecolor=cor_fundo_gold)
ax = plt.subplot(111, polar=True)
plt.axis('off')

upperLimit = 3000   # Limite superior das fatias
lowerLimit = 10     # Limite inferior das fatias (onde começam em relação ao eixo cartesiano)
labelPadding = 30   # Define a distância minima do rótulo do país

max_ = top_10_medalhas_ouro['Medal'].max()
min_ = top_10_medalhas_ouro['Medal'].min()

# Calcula a angulatura da barra. A slope é dada pela formula dy/dx = (ymax-ymin)/(xmax-xmin)
slope = (max_ - lowerLimit) / (max_ - min_)

# aplicando a transformação linear y = mx + b onde y é a altura, m é a inclinação (slope), x é o numero de medalhas e b é o ajuste
alturas = slope * top_10_medalhas_ouro.Medal

indexes = list(range(1, len(top_10_medalhas_ouro.index)+1))

angulos = [element * width for element in indexes]

bars = ax.bar(
    x=angulos, 
    height=alturas, 
    width=width, 
    bottom=lowerLimit,
    linewidth=2, 
    edgecolor="white",
    color=color_map,alpha=0.8
)

for barra, angulo, altura, label in zip(bars,angulos, alturas, top_10_medalhas_ouro["region"]):

    rotation = np.rad2deg(angulo)

    alignment = ""
    if angulo >= np.pi/2 and angulo < 3*np.pi/2:
        alignment = "right"
        rotation = rotation + 180
    else: 
        alignment = "left"

    ax.text(
        x=angulo, 
        y=lowerLimit + barra.get_height() + labelPadding, 
        s=label, 
        ha=alignment, fontsize=10,fontfamily='serif',
        va='center', 
        rotation=rotation, 
        rotation_mode="anchor")

    ax.text(
        x=angulo, 
        y=lowerLimit + barra.get_height()/2,
        s=f"{int(barra.get_height() / slope)}", 
        ha='center', fontsize=10, fontfamily='serif',
        va='center', 
        color='white', 
        rotation=rotation, 
        rotation_mode="anchor")
    
plt.title('Distribuição de medalhas de Ouro por País (Top 10)', fontsize=15, fontweight='bold', fontfamily='serif', color='#323232')
ax.set_facecolor(cor_fundo_gold)

plt.tight_layout()
 763:
# A costrução aqui é um pouco mais complexa, por isso irei explicar melhor essa célula.

top_10_medalhas_ouro =  medalhas_ouro.groupby(['region'])['Medal'].count().reset_index().sort_values(by='Medal', ascending=False).reset_index()[:10]

color_map = ['#244747' for _ in range(0, 10)]   # Defindo as cores
color_map[0] = color_map[1] = color_map[2] = cores_medalhas.get('Gold') # Definido as cores de highlight

plt.figure(figsize=(10,10), facecolor=cor_fundo_gold)
ax = plt.subplot(111, polar=True)
plt.axis('off')

upperLimit = 3000   # Limite superior das fatias
lowerLimit = 10     # Limite inferior das fatias (onde começam em relação ao eixo cartesiano)
labelPadding = 30   # Define a distância minima do rótulo do país

max_ = top_10_medalhas_ouro['Medal'].max()
min_ = top_10_medalhas_ouro['Medal'].min()

# Calcula a angulatura da barra. A slope é dada pela formula dy/dx = (ymax-ymin)/(xmax-xmin)
slope = (max_ - lowerLimit) / (max_ - min_)

# aplicando a transformação linear y = mx + b onde y é a altura, m é a inclinação (slope), x é o numero de medalhas e b é o ajuste
alturas = slope * top_10_medalhas_ouro.Medal + (upperLimit- lowerLimit)

indexes = list(range(1, len(top_10_medalhas_ouro.index)+1))

angulos = [element * width for element in indexes]

bars = ax.bar(
    x=angulos, 
    height=alturas, 
    width=width, 
    bottom=lowerLimit,
    linewidth=2, 
    edgecolor="white",
    color=color_map,alpha=0.8
)

for barra, angulo, altura, label in zip(bars,angulos, alturas, top_10_medalhas_ouro["region"]):

    rotation = np.rad2deg(angulo)

    alignment = ""
    if angulo >= np.pi/2 and angulo < 3*np.pi/2:
        alignment = "right"
        rotation = rotation + 180
    else: 
        alignment = "left"

    ax.text(
        x=angulo, 
        y=lowerLimit + barra.get_height() + labelPadding, 
        s=label, 
        ha=alignment, fontsize=10,fontfamily='serif',
        va='center', 
        rotation=rotation, 
        rotation_mode="anchor")

    ax.text(
        x=angulo, 
        y=lowerLimit + barra.get_height()/2,
        s=f"{int(barra.get_height() / slope)}", 
        ha='center', fontsize=10, fontfamily='serif',
        va='center', 
        color='white', 
        rotation=rotation, 
        rotation_mode="anchor")
    
plt.title('Distribuição de medalhas de Ouro por País (Top 10)', fontsize=15, fontweight='bold', fontfamily='serif', color='#323232')
ax.set_facecolor(cor_fundo_gold)

plt.tight_layout()
 764:
# A costrução aqui é um pouco mais complexa, por isso irei explicar melhor essa célula.

top_10_medalhas_ouro =  medalhas_ouro.groupby(['region'])['Medal'].count().reset_index().sort_values(by='Medal', ascending=False).reset_index()[:10]

color_map = ['#244747' for _ in range(0, 10)]   # Defindo as cores
color_map[0] = color_map[1] = color_map[2] = cores_medalhas.get('Gold') # Definido as cores de highlight

plt.figure(figsize=(10,10), facecolor=cor_fundo_gold)
ax = plt.subplot(111, polar=True)
plt.axis('off')

upperLimit = 3000   # Limite superior das fatias
lowerLimit = 10     # Limite inferior das fatias (onde começam em relação ao eixo cartesiano)
labelPadding = 30   # Define a distância minima do rótulo do país

max_ = top_10_medalhas_ouro['Medal'].max()
min_ = top_10_medalhas_ouro['Medal'].min()

# Calcula a angulatura da barra. A slope é dada pela formula dy/dx = (ymax-ymin)/(xmax-xmin)
slope = (max_ - lowerLimit) / (max_ - min_)  

# aplicando a transformação linear y = mx + b onde y é a altura, m é a inclinação (slope), x é o numero de medalhas e b é o ajuste
alturas = slope * top_10_medalhas_ouro.Medal + (upperLimit- lowerLimit)

indexes = list(range(1, len(top_10_medalhas_ouro.index)+1))

# calcula a largura de cada barra. No total temos 2*Pi = 360°
# Divindo para o total de linhas na tabela, teremos:
largura = 2*np.pi / len(top_10_medalhas_ouro.index)

angulos = [element * largura for element in indexes]

bars = ax.bar(
    x=angulos, 
    height=alturas, 
    width=width, 
    bottom=lowerLimit,
    linewidth=2, 
    edgecolor="white",
    color=color_map,alpha=0.8
)

for barra, angulo, altura, label in zip(bars,angulos, alturas, top_10_medalhas_ouro["region"]):

    rotation = np.rad2deg(angulo)

    alignment = ""
    if angulo >= np.pi/2 and angulo < 3*np.pi/2:
        alignment = "right"
        rotation = rotation + 180
    else: 
        alignment = "left"

    ax.text(
        x=angulo, 
        y=lowerLimit + barra.get_height() + labelPadding, 
        s=label, 
        ha=alignment, fontsize=10,fontfamily='serif',
        va='center', 
        rotation=rotation, 
        rotation_mode="anchor")

    ax.text(
        x=angulo, 
        y=lowerLimit + barra.get_height()/2,
        s=f"{int(barra.get_height() / slope)}", 
        ha='center', fontsize=10, fontfamily='serif',
        va='center', 
        color='white', 
        rotation=rotation, 
        rotation_mode="anchor")
    
plt.title('Distribuição de medalhas de Ouro por País (Top 10)', fontsize=15, fontweight='bold', fontfamily='serif', color='#323232')
ax.set_facecolor(cor_fundo_gold)

plt.tight_layout()
 765:
ouro_paises = medalhas_ouro['Event'].value_counts().head(15)
ouro_paises = ouro_paises.sort_values(ascending=True)
y = ouro_paises.index
x = ouro_paises.values


ouro_paises
 766:
ouro_paises = medalhas_ouro.groupby(['Event'])['Medal'].count()
ouro_paises
 767:
ouro_paises = medalhas_ouro.groupby(['Event'])['Medal'].count().reset_index()
ouro_paises
 768:
ouro_paises = medalhas_ouro.groupby(['Event'])['Medal'].count().reset_index().sort_values(by='Medal', ascending=False)
ouro_paises
 769:
ouro_paises = medalhas_ouro.groupby(['Event'])['Medal'].count().reset_index().sort_values(by='Medal', ascending=False)
ouro_paises
 770:
ouro_paises = medalhas_ouro.groupby(['Event'])['Medal'].count().sort_values(by='Value')
ouro_paises
 771:
ouro_paises = medalhas_ouro.groupby(['Event'])['Medal'].count().sort_values()
ouro_paises
 772:
ouro_paises = medalhas_ouro.groupby(['Event'])['Medal'].count().sort_values(ascending=False)
ouro_paises
 773:
ouro_paises = medalhas_ouro.groupby(['Event'])['Medal'].count().sort_values(ascending=False).reset_index()
ouro_paises
 774:
ouro_paises = medalhas_ouro.groupby(['Event'])['Medal'].count().sort_values(ascending=False).reset_index()
ouro_paises[:15]
 775: ouro_paises = medalhas_ouro.groupby(['Year', 'Event'])['Medal'].count().sort_values(ascending=False).reset_index()[:15]
 776:
ouro_paises = medalhas_ouro.groupby(['Year', 'Event'])['Medal'].count().sort_values(ascending=False).reset_index()[:15]

ouro_paises
 777:
ouro_paises = medalhas_ouro.groupby(['Year', 'Event'])['Medal'].first()[:15]

ouro_paises
 778:
ouro_paises = medalhas_ouro.groupby(['Year', 'Event'])['Medal'].first()

top_15 = ouro_paises
 779:
ouro_paises = medalhas_ouro.groupby(['Year', 'Event'])['Medal'].first()

top_15 = ouro_paises.groupby('Event').size()

top_15
 780:
ouro_paises = medalhas_ouro.groupby(['Year', 'Event'])['Medal'].first()

top_15 = ouro_paises.groupby('Event').size().reset_index()

top_15
 781:
ouro_paises = medalhas_ouro.groupby(['Year', 'Event'])['Medal'].first()

top_15 = ouro_paises.groupby('Event').size().sort_values(ascending=False).reset_index()

top_15
 782:
ouro_paises = medalhas_ouro.groupby(['Year', 'Event'])['Medal'].first()

top_15 = ouro_paises.groupby('Event').size().sort_values(ascending=False).reset_index()

top_15[':20']
 783:
ouro_paises = medalhas_ouro.groupby(['Year', 'Event'])['Medal'].first()

top_15 = ouro_paises.groupby('Event').size().sort_values(ascending=False).reset_index()

top_15[:20]
 784:
ouro_paises = medalhas_ouro.groupby(['Year', 'Event'])['Medal'].first()

top_10 = ouro_paises.groupby('Event').size().sort_values(ascending=False).reset_index()
 785:
ouro_paises = medalhas_ouro.groupby(['Year', 'Event'])['Medal'].first()

top_10 = ouro_paises.groupby('Event').size().sort_values(ascending=False).reset_index()

top_10
 786:
ouro_paises = medalhas_ouro.groupby(['Year', 'Event'])['Medal'].first()

top_10 = ouro_paises.groupby('Event').size().sort_values(ascending=False).reset_index()[:10]

top_10
 787:
mulheres_verao = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Summer")]
mulhes_inverno = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Winter")]

mulheres_unicas_verao = mulheres_verao.drop_duplicates(subset=['ID', 'Year'])
mulheres_unicas_inverno = mulhes_inverno.drop_duplicates(subset=['ID', 'Year'])

fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(14, 16))

fig.patch.set_facecolor(cor_fundo_padrao)
ax1.set_facecolor(cor_fundo_padrao)
ax2.set_facecolor(cor_fundo_padrao)

sns.countplot(x=mulheres_unicas_verao['Year'], hue=mulheres_unicas_verao['Year'], legend=False, data=mulheres_unicas_verao, palette='Set2', ax=ax1)
ax1.set_title('Distribuição de medalhas por ano - Verão', fontsize=15, fontweight="bold")
ax1.set_ylabel('Medalhas')
ax1.set_xlabel('')

sns.countplot(x=mulheres_unicas_inverno['Year'],hue=mulheres_unicas_inverno['Year'], legend=False, data=mulheres_unicas_inverno, palette='Set2', ax=ax2)
ax2.set_title('Distribuição de medalhas por ano - Inverno', fontsize=15, fontweight="bold")
ax2.set_ylabel('Medalhas')
ax2.set_xlabel('')
 788:
mulheres_verao = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Summer")]
mulhes_inverno = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Winter")]

mulheres_unicas_verao = mulheres_verao.drop_duplicates(subset=['ID', 'Year'])
mulheres_unicas_inverno = mulhes_inverno.drop_duplicates(subset=['ID', 'Year'])

fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(14, 16))

fig.patch.set_facecolor(cor_fundo_padrao)
ax1.set_facecolor(cor_fundo_padrao)
ax2.set_facecolor(cor_fundo_padrao)

sns.countplot(x=mulheres_unicas_verao['Year'], hue=mulheres_unicas_verao['Year'], legend=False, data=mulheres_unicas_verao, palette='Set2', ax=ax1)
ax1.set_title('Distribuição de medalhas por ano - Verão', fontsize=15, fontweight='bold', fontfamily='serif', color='#323232')
ax1.set_ylabel('Medalhas')
ax1.set_xlabel('')

sns.countplot(x=mulheres_unicas_inverno['Year'],hue=mulheres_unicas_inverno['Year'], legend=False, data=mulheres_unicas_inverno, palette='Set2', ax=ax2)
ax2.set_title('Distribuição de medalhas por ano - Inverno',fontsize=15, fontweight='bold', fontfamily='serif', color='#323232')
ax2.set_ylabel('Medalhas')
ax2.set_xlabel('')
 789:
mulheres_verao = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Summer")]
mulhes_inverno = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Winter")]

mulheres_unicas_verao = mulheres_verao.drop_duplicates(subset=['ID', 'Year'])
mulheres_unicas_inverno = mulhes_inverno.drop_duplicates(subset=['ID', 'Year'])

fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(14, 16))

fig.patch.set_facecolor(cor_fundo_padrao)
ax1.set_facecolor(cor_fundo_padrao)
ax2.set_facecolor(cor_fundo_padrao)

sns.countplot(x=mulheres_unicas_verao['Year'], hue=mulheres_unicas_verao['Year'], legend=False, data=mulheres_unicas_verao, palette='Set2', ax=ax1)
ax1.set_title('Distribuição de medalhas por ano - Verão', fontsize=15, fontweight='bold', fontfamily='serif', color='#323232')
ax1.set_ylabel('')
ax1.set_xlabel('')

sns.countplot(x=mulheres_unicas_inverno['Year'],hue=mulheres_unicas_inverno['Year'], legend=False, data=mulheres_unicas_inverno, palette='Set2', ax=ax2)
ax2.set_title('Distribuição de medalhas por ano - Inverno',fontsize=15, fontweight='bold', fontfamily='serif', color='#323232')
ax2.set_ylabel('')
ax2.set_xlabel('')
 790:
mulheres_verao = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Summer")]
mulhes_inverno = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Winter")]

mulheres_unicas_verao = mulheres_verao.drop_duplicates(subset=['ID', 'Year'])
mulheres_unicas_inverno = mulhes_inverno.drop_duplicates(subset=['ID', 'Year'])

fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(14, 16))

fig.patch.set_facecolor(cor_fundo_padrao)
ax1.set_facecolor(cor_fundo_padrao)
ax2.set_facecolor(cor_fundo_padrao)

sns.countplot(x=mulheres_unicas_verao['Year'], hue=mulheres_unicas_verao['Year'], legend=False, data=mulheres_unicas_verao, palette='Set2', ax=ax1, ec='gray')
ax1.set_title('Distribuição de medalhas por ano - Verão', fontsize=15, fontweight='bold', fontfamily='serif', color='#323232')
ax1.set_ylabel('')
ax1.set_xlabel('')

sns.countplot(x=mulheres_unicas_inverno['Year'],hue=mulheres_unicas_inverno['Year'], legend=False, data=mulheres_unicas_inverno, palette='Set2', ax=ax2, ec='gray')
ax2.set_title('Distribuição de medalhas por ano - Inverno',fontsize=15, fontweight='bold', fontfamily='serif', color='#323232')
ax2.set_ylabel('')
ax2.set_xlabel('')
 791:
# Calcular o número de participantes femininas por ano
participacao_verao = mulheres_unicas_verao.groupby('Year').size()
participacao_inverno = mulheres_unicas_inverno.groupby('Year').size()

# Calcular a taxa de crescimento anual
taxa_crescimento_verao = participacao_verao.pct_change().dropna() * 100
taxa_crescimento_inverno = participacao_inverno.pct_change().dropna() * 100

participacao_verao
 792:
# Calcular o número de participantes femininas por ano
participacao_verao = mulheres_unicas_verao.groupby('Year').size()
participacao_inverno = mulheres_unicas_inverno.groupby('Year').size()

# Calcular a taxa de crescimento anual
taxa_crescimento_verao = participacao_verao.pct_change().dropna() * 100
taxa_crescimento_inverno = participacao_inverno.pct_change().dropna() * 100

taxa_crescimento_verao
 793:
# Calcular o número de participantes femininas por ano
participacao_verao = mulheres_unicas_verao.groupby('Year').size()
participacao_inverno = mulheres_unicas_inverno.groupby('Year').size()

# Calcular a taxa de crescimento anual
taxa_crescimento_verao = participacao_verao.pct_change().dropna() * 100
taxa_crescimento_inverno = participacao_inverno.pct_change().dropna() * 100

participacao_verao
 794:
# Calcular o número de participantes femininas por ano
participacao_verao = mulheres_unicas_verao.groupby('Year').size()
participacao_inverno = mulheres_unicas_inverno.groupby('Year').size()

# Calcular a taxa de crescimento anual
taxa_crescimento_verao = participacao_verao.pct_change().dropna() * 100
taxa_crescimento_inverno = participacao_inverno.pct_change().dropna() * 100

participacao_verao


fig, (ax3, ax4) = plt.subplots(2, 1, figsize=(14, 16))
fig.patch.set_facecolor(cor_fundo_padrao)
ax3.set_facecolor(cor_fundo_padrao)
ax4.set_facecolor(cor_fundo_padrao)

taxa_crescimento_verao.plot(kind='bar', ax=ax3, color='skyblue', edgecolor='gray')
ax3.set_title('Taxa de Crescimento Anual da Participação Feminina - Jogos de Verão', fontsize=15, fontweight='bold', fontfamily='serif', color='#323232')
ax3.set_ylabel('Taxa de Crescimento (%)')
ax3.set_xlabel('Ano')

taxa_crescimento_inverno.plot(kind='bar', ax=ax4, color='skyblue', edgecolor='gray')
ax4.set_title('Taxa de Crescimento Anual da Participação Feminina - Jogos de Inverno', fontsize=15, fontweight='bold', fontfamily='serif', color='#323232')
ax4.set_ylabel('Taxa de Crescimento (%)')
ax4.set_xlabel('Ano')
 795:
# Calcular o número de participantes femininas por ano
participacao_verao = mulheres_unicas_verao.groupby('Year').size()
participacao_inverno = mulheres_unicas_inverno.groupby('Year').size()

# Calcular a taxa de crescimento anual
taxa_crescimento_verao = participacao_verao.pct_change().dropna() * 100
taxa_crescimento_inverno = participacao_inverno.pct_change().dropna() * 100



fig, (ax3, ax4) = plt.subplots(2, 1, figsize=(14, 16))
fig.patch.set_facecolor(cor_fundo_padrao)
ax3.set_facecolor(cor_fundo_padrao)
ax4.set_facecolor(cor_fundo_padrao)

taxa_crescimento_verao.plot(kind='bar', ax=ax3, color='skyblue', edgecolor='gray')
ax3.set_title('Taxa de Crescimento Anual da Participação Feminina - Jogos de Verão', fontsize=15, fontweight='bold', fontfamily='serif', color='#323232')
ax3.set_ylabel('Taxa de Crescimento (%)')
ax3.set_xlabel('Ano')

taxa_crescimento_inverno.plot(kind='bar', ax=ax4, color='skyblue', edgecolor='gray')
ax4.set_title('Taxa de Crescimento Anual da Participação Feminina - Jogos de Inverno', fontsize=15, fontweight='bold', fontfamily='serif', color='#323232')
ax4.set_ylabel('Taxa de Crescimento (%)')
ax4.set_xlabel('Ano')

participacao_verao
 796:
# Calcular o número de participantes femininas por ano
participacao_verao = mulheres_unicas_verao.groupby('Year').size()
participacao_inverno = mulheres_unicas_inverno.groupby('Year').size()

# Calcular a taxa de crescimento anual
taxa_crescimento_verao = participacao_verao.pct_change().dropna() * 100
taxa_crescimento_inverno = participacao_inverno.pct_change().dropna() * 100



fig, (ax3, ax4) = plt.subplots(2, 1, figsize=(14, 16))
fig.patch.set_facecolor(cor_fundo_padrao)
ax3.set_facecolor(cor_fundo_padrao)
ax4.set_facecolor(cor_fundo_padrao)

taxa_crescimento_verao.plot(kind='bar', ax=ax3, color='skyblue', edgecolor='gray')
ax3.set_title('Taxa de Crescimento Anual da Participação Feminina - Jogos de Verão', fontsize=15, fontweight='bold', fontfamily='serif', color='#323232')
ax3.set_ylabel('Taxa de Crescimento (%)')
ax3.set_xlabel('Ano')

taxa_crescimento_inverno.plot(kind='bar', ax=ax4, color='skyblue', edgecolor='gray')
ax4.set_title('Taxa de Crescimento Anual da Participação Feminina - Jogos de Inverno', fontsize=15, fontweight='bold', fontfamily='serif', color='#323232')
ax4.set_ylabel('Taxa de Crescimento (%)')
ax4.set_xlabel('Ano')

taxa_crescimento_verao
 797:
# Calcular o número de participantes femininas por ano
participacao_verao = mulheres_unicas_verao.groupby('Year').size()
participacao_inverno = mulheres_unicas_inverno.groupby('Year').size()

# Calcular a taxa de crescimento anual
taxa_crescimento_verao = participacao_verao[:4].pct_change().dropna() * 100
taxa_crescimento_inverno = participacao_inverno.pct_change().dropna() * 100



fig, (ax3, ax4) = plt.subplots(2, 1, figsize=(14, 16))
fig.patch.set_facecolor(cor_fundo_padrao)
ax3.set_facecolor(cor_fundo_padrao)
ax4.set_facecolor(cor_fundo_padrao)

taxa_crescimento_verao.plot(kind='bar', ax=ax3, color='skyblue', edgecolor='gray')
ax3.set_title('Taxa de Crescimento Anual da Participação Feminina - Jogos de Verão', fontsize=15, fontweight='bold', fontfamily='serif', color='#323232')
ax3.set_ylabel('Taxa de Crescimento (%)')
ax3.set_xlabel('Ano')

taxa_crescimento_inverno.plot(kind='bar', ax=ax4, color='skyblue', edgecolor='gray')
ax4.set_title('Taxa de Crescimento Anual da Participação Feminina - Jogos de Inverno', fontsize=15, fontweight='bold', fontfamily='serif', color='#323232')
ax4.set_ylabel('Taxa de Crescimento (%)')
ax4.set_xlabel('Ano')

taxa_crescimento_verao
 798:
# Calcular o número de participantes femininas por ano
participacao_verao = mulheres_unicas_verao.groupby('Year').size()
participacao_inverno = mulheres_unicas_inverno.groupby('Year').size()

# Calcular a taxa de crescimento anual
taxa_crescimento_verao = participacao_verao[:-4].pct_change().dropna() * 100
taxa_crescimento_inverno = participacao_inverno.pct_change().dropna() * 100



fig, (ax3, ax4) = plt.subplots(2, 1, figsize=(14, 16))
fig.patch.set_facecolor(cor_fundo_padrao)
ax3.set_facecolor(cor_fundo_padrao)
ax4.set_facecolor(cor_fundo_padrao)

taxa_crescimento_verao.plot(kind='bar', ax=ax3, color='skyblue', edgecolor='gray')
ax3.set_title('Taxa de Crescimento Anual da Participação Feminina - Jogos de Verão', fontsize=15, fontweight='bold', fontfamily='serif', color='#323232')
ax3.set_ylabel('Taxa de Crescimento (%)')
ax3.set_xlabel('Ano')

taxa_crescimento_inverno.plot(kind='bar', ax=ax4, color='skyblue', edgecolor='gray')
ax4.set_title('Taxa de Crescimento Anual da Participação Feminina - Jogos de Inverno', fontsize=15, fontweight='bold', fontfamily='serif', color='#323232')
ax4.set_ylabel('Taxa de Crescimento (%)')
ax4.set_xlabel('Ano')

taxa_crescimento_verao
 799:
# Calcular o número de participantes femininas por ano
participacao_verao = mulheres_unicas_verao.groupby('Year').size()
participacao_inverno = mulheres_unicas_inverno.groupby('Year').size()

# Calcular a taxa de crescimento anual
taxa_crescimento_verao = participacao_verao.query('Year > 1924').pct_change().dropna() * 100
taxa_crescimento_inverno = participacao_inverno.pct_change().dropna() * 100



fig, (ax3, ax4) = plt.subplots(2, 1, figsize=(14, 16))
fig.patch.set_facecolor(cor_fundo_padrao)
ax3.set_facecolor(cor_fundo_padrao)
ax4.set_facecolor(cor_fundo_padrao)

taxa_crescimento_verao.plot(kind='bar', ax=ax3, color='skyblue', edgecolor='gray')
ax3.set_title('Taxa de Crescimento Anual da Participação Feminina - Jogos de Verão', fontsize=15, fontweight='bold', fontfamily='serif', color='#323232')
ax3.set_ylabel('Taxa de Crescimento (%)')
ax3.set_xlabel('Ano')

taxa_crescimento_inverno.plot(kind='bar', ax=ax4, color='skyblue', edgecolor='gray')
ax4.set_title('Taxa de Crescimento Anual da Participação Feminina - Jogos de Inverno', fontsize=15, fontweight='bold', fontfamily='serif', color='#323232')
ax4.set_ylabel('Taxa de Crescimento (%)')
ax4.set_xlabel('Ano')

taxa_crescimento_verao
 800:
# Calcular o número de participantes femininas por ano
participacao_verao = mulheres_unicas_verao.groupby('Year').size()
participacao_inverno = mulheres_unicas_inverno.groupby('Year').size()

# Calcular a taxa de crescimento anual
taxa_crescimento_verao = participacao_verao.pct_change().dropna() * 100
taxa_crescimento_inverno = participacao_inverno.pct_change().dropna() * 100



fig, (ax3, ax4) = plt.subplots(2, 1, figsize=(14, 16))
fig.patch.set_facecolor(cor_fundo_padrao)
ax3.set_facecolor(cor_fundo_padrao)
ax4.set_facecolor(cor_fundo_padrao)

taxa_crescimento_verao.plot(kind='bar', ax=ax3, color='skyblue', edgecolor='gray')
ax3.set_title('Taxa de Crescimento Anual da Participação Feminina - Jogos de Verão', fontsize=15, fontweight='bold', fontfamily='serif', color='#323232')
ax3.set_ylabel('Taxa de Crescimento (%)')
ax3.set_xlabel('Ano')

taxa_crescimento_inverno.plot(kind='bar', ax=ax4, color='skyblue', edgecolor='gray')
ax4.set_title('Taxa de Crescimento Anual da Participação Feminina - Jogos de Inverno', fontsize=15, fontweight='bold', fontfamily='serif', color='#323232')
ax4.set_ylabel('Taxa de Crescimento (%)')
ax4.set_xlabel('Ano')

taxa_crescimento_verao
 801:
# Calcular o número de participantes femininas por ano
participacao_verao = mulheres_unicas_verao.groupby('Year').size()
participacao_inverno = mulheres_unicas_inverno.groupby('Year').size()

# Calcular a taxa de crescimento anual
taxa_crescimento_verao = participacao_verao[4:].pct_change().dropna() * 100
taxa_crescimento_inverno = participacao_inverno.pct_change().dropna() * 100



fig, (ax3, ax4) = plt.subplots(2, 1, figsize=(14, 16))
fig.patch.set_facecolor(cor_fundo_padrao)
ax3.set_facecolor(cor_fundo_padrao)
ax4.set_facecolor(cor_fundo_padrao)

taxa_crescimento_verao.plot(kind='bar', ax=ax3, color='skyblue', edgecolor='gray')
ax3.set_title('Taxa de Crescimento Anual da Participação Feminina - Jogos de Verão', fontsize=15, fontweight='bold', fontfamily='serif', color='#323232')
ax3.set_ylabel('Taxa de Crescimento (%)')
ax3.set_xlabel('Ano')

taxa_crescimento_inverno.plot(kind='bar', ax=ax4, color='skyblue', edgecolor='gray')
ax4.set_title('Taxa de Crescimento Anual da Participação Feminina - Jogos de Inverno', fontsize=15, fontweight='bold', fontfamily='serif', color='#323232')
ax4.set_ylabel('Taxa de Crescimento (%)')
ax4.set_xlabel('Ano')

taxa_crescimento_verao
 802:
# Calcular o número de participantes femininas por ano
participacao_verao = mulheres_unicas_verao.groupby('Year').size()
participacao_inverno = mulheres_unicas_inverno.groupby('Year').size()

# Calcular a taxa de crescimento anual
taxa_crescimento_verao = participacao_verao[5:].pct_change().dropna() * 100
taxa_crescimento_inverno = participacao_inverno.pct_change().dropna() * 100



fig, (ax3, ax4) = plt.subplots(2, 1, figsize=(14, 16))
fig.patch.set_facecolor(cor_fundo_padrao)
ax3.set_facecolor(cor_fundo_padrao)
ax4.set_facecolor(cor_fundo_padrao)

taxa_crescimento_verao.plot(kind='bar', ax=ax3, color='skyblue', edgecolor='gray')
ax3.set_title('Taxa de Crescimento Anual da Participação Feminina - Jogos de Verão', fontsize=15, fontweight='bold', fontfamily='serif', color='#323232')
ax3.set_ylabel('Taxa de Crescimento (%)')
ax3.set_xlabel('Ano')

taxa_crescimento_inverno.plot(kind='bar', ax=ax4, color='skyblue', edgecolor='gray')
ax4.set_title('Taxa de Crescimento Anual da Participação Feminina - Jogos de Inverno', fontsize=15, fontweight='bold', fontfamily='serif', color='#323232')
ax4.set_ylabel('Taxa de Crescimento (%)')
ax4.set_xlabel('Ano')

taxa_crescimento_verao
 803:
mulheres_verao = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Summer")]
mulheres_verao
 804:
mulheres_verao = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Summer")]
mulheres_unicas_verao = mulheres_verao.drop_duplicates(subset=['ID', 'Year'])
 805:
mulheres_verao = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Summer")]
mulheres_unicas_verao = mulheres_verao.drop_duplicates(subset=['ID', 'Year'])
mulheres_unicas_verao
 806:
mulheres_verao = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Summer")]
mulheres_unicas_verao = mulheres_verao.drop_duplicates(subset=['ID', 'Year'])
mulheres_unicas_verao.groupby('Year')['Medal'].count()
 807:
mulheres_verao = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Summer")]
mulheres_unicas_verao = mulheres_verao.drop_duplicates(subset=['ID', 'Year'])
mulheres_unicas_verao.groupby('Year')['Medal'].count().sort_values(ascending=False).reset_index()
 808:
mulheres_verao = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Summer")]
mulheres_unicas_verao = mulheres_verao.drop_duplicates(subset=['ID', 'Year'])
mulheres_unicas_verao.groupby('Year')['Medal'].count().sort_values(ascending=False).reset_index().unstack()
 809:
mulheres_verao = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Summer")]
mulheres_unicas_verao = mulheres_verao.drop_duplicates(subset=['ID', 'Year'])
mulheres_unicas_verao.groupby('Year')['Medal'].count().sort_values(ascending=False).reset_index()
 810:
mulheres_verao = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Summer")]
mulheres_unicas_verao = mulheres_verao.drop_duplicates(subset=['ID', 'Year'])
mulheres_unicas_verao.groupby('Year')['Medal'].unstack()
 811:
mulheres_verao = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Summer")]
mulheres_unicas_verao = mulheres_verao.drop_duplicates(subset=['ID', 'Year'])
mulheres_unicas_verao.groupby('Year')['Medal'].count().unstack()
 812:
mulheres_verao = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Summer")]
mulheres_unicas_verao = mulheres_verao.drop_duplicates(subset=['ID', 'Year'])
mulheres_unicas_verao.groupby(['Year', 'Medal'])['Medal']

mulheres_unicas_verao
 813:
mulheres_verao = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Summer")]
mulheres_unicas_verao = mulheres_verao.drop_duplicates(subset=['ID', 'Year'])
mulheres_unicas_verao.groupby(['Year', 'Medal'])['Medal'].count()

mulheres_unicas_verao
 814:
mulheres_verao = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Summer")]
mulheres_unicas_verao = mulheres_verao.drop_duplicates(subset=['ID', 'Year'])
mulheres_unicas_verao.groupby(['Year', 'Medal'])['Medal'].count()
 815:
mulheres_verao = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Summer")]
mulheres_unicas_verao = mulheres_verao.drop_duplicates(subset=['ID', 'Year'])
mulheres_unicas_verao.groupby(['Year', 'Medal'])['Medal'].count().unstack()
 816:
mulheres_verao = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Summer")]
mulheres_unicas_verao = mulheres_verao.drop_duplicates(subset=['ID', 'Year'])
mulheres_unicas_verao.groupby(['Year', 'Medal'])['Medal'].count().unstack()

mulheres_unicas_verao['Total']= mulheres_unicas_verao['Gold'] + mulheres_unicas_verao['Silver'] + mulheres_unicas_verao['Bronze']
 817:
mulheres_verao = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Summer")]
mulheres_unicas_verao = mulheres_verao.drop_duplicates(subset=['ID', 'Year'])
mulheres_unicas_verao.groupby(['Year', 'Medal'])['Medal'].count().unstack()
 818:
mulheres_verao = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Summer")]
mulheres_unicas_verao = mulheres_verao.drop_duplicates(subset=['ID', 'Year'])
mulheres_unicas_verao.groupby(['Year', 'Medal'])['Medal'].count().unstack().reset_index()
 819:
mulheres_verao = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Summer")]
mulheres_unicas_verao = mulheres_verao.drop_duplicates(subset=['ID', 'Year'])
mulheres_unicas_verao.groupby(['Year', 'Medal'])['Medal'].count().unstack().reset_index()

mulheres_unicas_verao['Total']= mulheres_unicas_verao['Gold'] + mulheres_unicas_verao['Silver'] + mulheres_unicas_verao['Bronze']
 820:
mulheres_verao = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Summer")]
mulheres_unicas_verao = mulheres_verao.drop_duplicates(subset=['ID', 'Year'])
mulheres_unicas_verao.groupby(['Year', 'Medal'])['Medal'].count().unstack().reset_index()
 821:
mulheres_verao = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Summer")]
mulheres_unicas_verao = mulheres_verao.drop_duplicates(subset=['ID', 'Year'])
mulheres_unicas_verao = mulheres_unicas_verao.groupby(['Year', 'Medal'])['Medal'].count().unstack().reset_index()
 822:
mulheres_verao = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Summer")]
mulheres_unicas_verao = mulheres_verao.drop_duplicates(subset=['ID', 'Year'])
mulheres_unicas_verao = mulheres_unicas_verao.groupby(['Year', 'Medal'])['Medal'].count().unstack().reset_index()

mulheres_unicas_verao['Total'] = mulheres_unicas_verao['Gold'] + mulheres_unicas_verao['Silver'] + mulheres_unicas_verao['Bronze']
 823:
mulheres_verao = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Summer")]
mulheres_unicas_verao = mulheres_verao.drop_duplicates(subset=['ID', 'Year'])
mulheres_unicas_verao = mulheres_unicas_verao.groupby(['Year', 'Medal'])['Medal'].count().unstack().reset_index()

mulheres_unicas_verao['Total'] = mulheres_unicas_verao['Gold'] + mulheres_unicas_verao['Silver'] + mulheres_unicas_verao['Bronze']
mulheres_unicas_verao
 824:
mulheres_verao = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Summer")]
mulheres_unicas_verao = mulheres_unicas_verao.groupby(['Year', 'Medal'])['Medal'].count().unstack().reset_index()

mulheres_unicas_verao['Total'] = mulheres_unicas_verao['Gold'] + mulheres_unicas_verao['Silver'] + mulheres_unicas_verao['Bronze']
mulheres_unicas_verao
 825:
mulheres_verao = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Summer")]
mulheres_verao = mulheres_verao.groupby(['Year', 'Medal'])['Medal'].count().unstack().reset_index()

mulheres_verao['Total'] = mulheres_verao['Gold'] + mulheres_verao['Silver'] + mulheres_verao['Bronze']
mulheres_verao
 826:
mulheres_verao = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Summer")]
mulheres_verao = mulheres_verao.groupby(['Year', 'Medal'])['Medal'].count().unstack().reset_index()

mulheres_verao['Total'] = mulheres_verao['Gold'] + mulheres_verao['Silver'] + mulheres_verao['Bronze']
mulheres_verao
 827:
mulheres_verao = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Summer")]
mulheres_verao = mulheres_verao.groupby(['Year', 'Medal'])['Medal'].count().unstack().reset_index()

mulheres_verao['Total'] = mulheres_verao['Gold'] + mulheres_verao['Silver'] + mulheres_verao['Bronze']
stack_temp = mulheres_verao.groupby('Year')[['Bronze', 'Silver', 'Gold']].sum()
 828:
mulheres_verao = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Summer")]
mulheres_verao = mulheres_verao.groupby(['Year', 'Medal'])['Medal'].count().unstack().reset_index()

mulheres_verao['Total'] = mulheres_verao['Gold'] + mulheres_verao['Silver'] + mulheres_verao['Bronze']
stack_temp = mulheres_verao.groupby('Year')[['Bronze', 'Silver', 'Gold']].sum()

stack_temp
 829:
mulheres_verao = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Summer")]
mulheres_verao = mulheres_verao.groupby(['Year', 'Medal'])['Medal'].count().unstack().reset_index()

mulheres_verao['Total'] = mulheres_verao['Gold'] + mulheres_verao['Silver'] + mulheres_verao['Bronze']
stack_temp = mulheres_verao.groupby('Year')[['Bronze', 'Silver', 'Gold']].sum()
stack_temp = stack_temp.divide(stack_temp.sum(axis=1), axis=0)
stack_temp
 830:
mulheres_verao = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Summer")]
mulheres_verao = mulheres_verao.groupby(['Year', 'Medal'])['Medal'].count().unstack().reset_index()

mulheres_verao['Total'] = mulheres_verao['Gold'] + mulheres_verao['Silver'] + mulheres_verao['Bronze']
stack_temp = mulheres_verao.groupby('Year')[['Bronze', 'Silver', 'Gold']].sum()
stack_temp = stack_temp.divide(stack_temp.sum(axis=1), axis=0)

fig, ax = plt.subplots(1, 1, figsize=(18, 5), facecolor=cor_fundo_padrao)

medals_list = ['Bronze', 'Silver', 'Gold']

for i, medal in enumerate(medals_list):
    ax.bar(stack_temp.index, stack_temp[medal], color=cor_medalhas_array[i],
        label=medal, width=2.55, edgecolor='black',
        bottom=stack_temp[medals_list[:i]].sum(axis=1) if i > 0 else None
    )
 831:
mulheres_verao = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Summer")]
mulheres_verao = mulheres_verao.groupby(['Year', 'Medal'])['Medal'].count().unstack().reset_index()

mulheres_verao['Total'] = mulheres_verao['Gold'] + mulheres_verao['Silver'] + mulheres_verao['Bronze']
stack_temp = mulheres_verao.groupby('Year')[['Bronze', 'Silver', 'Gold']].sum()
stack_temp = stack_temp.divide(stack_temp.sum(axis=1), axis=0)

fig, ax = plt.subplots(1, 1, figsize=(18, 5), facecolor=cor_fundo_padrao)

medals_list = ['Bronze', 'Silver', 'Gold']

for i, medal in enumerate(medals_list):
    ax.bar(stack_temp.index, stack_temp[medal], color=cor_medalhas_array[i],
        label=medal, width=2.55, edgecolor='black',
        bottom=stack_temp[medals_list[:i]].sum(axis=1) if i > 0 else None
    )

ax.set_facecolor(cor_fundo_padrao)
 832:
mulheres_verao = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Summer")]
mulheres_verao = mulheres_verao.groupby(['Year', 'Medal'])['Medal'].count().unstack().reset_index()

mulheres_verao['Total'] = mulheres_verao['Gold'] + mulheres_verao['Silver'] + mulheres_verao['Bronze']
stack_temp = mulheres_verao.groupby('Year')[['Bronze', 'Silver', 'Gold']].sum()
stack_temp = stack_temp.divide(stack_temp.sum(axis=1), axis=0)

fig, ax = plt.subplots(1, 1, figsize=(18, 5), facecolor=cor_fundo_padrao)

medals_list = ['Bronze', 'Silver', 'Gold']

for i, medal in enumerate(medals_list):
    ax.bar(stack_temp.index, stack_temp[medal], color=cor_medalhas_array[i],
        label=medal, width=1, edgecolor='black',
        bottom=stack_temp[medals_list[:i]].sum(axis=1) if i > 0 else None
    )

ax.set_facecolor(cor_fundo_padrao)
 833:
mulheres_verao = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Summer")]
mulheres_verao = mulheres_verao.groupby(['Year', 'Medal'])['Medal'].count().unstack().reset_index()

mulheres_verao['Total'] = mulheres_verao['Gold'] + mulheres_verao['Silver'] + mulheres_verao['Bronze']
stack_temp = mulheres_verao.groupby('Year')[['Bronze', 'Silver', 'Gold']].sum()
stack_temp = stack_temp.divide(stack_temp.sum(axis=1), axis=0)

fig, ax = plt.subplots(1, 1, figsize=(18, 5), facecolor=cor_fundo_padrao)

medals_list = ['Bronze', 'Silver', 'Gold']

for i, medal in enumerate(medals_list):
    ax.bar(stack_temp.index, stack_temp[medal], color=cor_medalhas_array[i],
        label=medal, width=2, edgecolor='black',
        bottom=stack_temp[medals_list[:i]].sum(axis=1) if i > 0 else None
    )

ax.set_facecolor(cor_fundo_padrao)
 834:
mulheres_verao = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Summer")]
mulheres_verao = mulheres_verao.groupby(['Year', 'Medal'])['Medal'].count().unstack().reset_index()

mulheres_verao['Total'] = mulheres_verao['Gold'] + mulheres_verao['Silver'] + mulheres_verao['Bronze']
stack_temp = mulheres_verao.groupby('Year')[['Bronze', 'Silver', 'Gold']].sum()
stack_temp = stack_temp.divide(stack_temp.sum(axis=1), axis=0)

fig, ax = plt.subplots(1, 1, figsize=(18, 5), facecolor=cor_fundo_padrao)

medals_list = ['Bronze', 'Silver', 'Gold']

for i, medal in enumerate(medals_list):
    ax.bar(stack_temp.index, stack_temp[medal], color=cor_medalhas_array[i],
        label=medal, width=2, edgecolor='black',
        bottom=stack_temp[medals_list[:i]].sum(axis=1) if i > 0 else None
    )

ax.set_facecolor(cor_fundo_padrao)

for s in ['top', 'right']:
    ax.spines[s].set_visible(False)
 835:
mulheres_verao = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Summer")]
mulheres_verao = mulheres_verao.groupby(['Year', 'Medal'])['Medal'].count().unstack().reset_index()

mulheres_verao['Total'] = mulheres_verao['Gold'] + mulheres_verao['Silver'] + mulheres_verao['Bronze']
stack_temp = mulheres_verao.groupby('Year')[['Bronze', 'Silver', 'Gold']].sum()
stack_temp = stack_temp.divide(stack_temp.sum(axis=1), axis=0)

fig, ax = plt.subplots(1, 1, figsize=(18, 5), facecolor=cor_fundo_padrao)

medals_list = ['Bronze', 'Silver', 'Gold']

for i, medal in enumerate(medals_list):
    ax.bar(stack_temp.index, stack_temp[medal], color=cor_medalhas_array[i],
        label=medal, width=2, edgecolor='black',
        bottom=stack_temp[medals_list[:i]].sum(axis=1) if i > 0 else None
    )

ax.set_facecolor(cor_fundo_padrao)

for s in ['top', 'right']:
    ax.spines[s].set_visible(False)

Xstart, Xend = ax.get_xlim()
Ystart, Yend = ax.get_ylim()

ax.set_xlim(Xstart, Xend)
ax.grid(which='both', axis='x', zorder=5, color='gray', linestyle=':', dashes=(1, 5))

ax.set_axisbelow(True)
ax.get_yaxis().set_visible(False)

ax.text(Xstart + 3, Yend + 0.13, 'Olympic Medals for the United Kingdom', fontsize=15, fontweight='bold', fontfamily='serif', color='#323232')

plt.legend(loc='upper left', bbox_to_anchor=(1, 1), title='Medal Type')
 836:
mulheres_verao = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Summer")]
mulheres_verao = mulheres_verao.groupby(['Year', 'Medal'])['Medal'].count().unstack().reset_index()

mulheres_verao['Total'] = mulheres_verao['Gold'] + mulheres_verao['Silver'] + mulheres_verao['Bronze']
stack_temp = mulheres_verao.groupby('Year')[['Bronze', 'Silver', 'Gold']].sum()
stack_temp = stack_temp.divide(stack_temp.sum(axis=1), axis=0)

fig, ax = plt.subplots(1, 1, figsize=(18, 5), facecolor=cor_fundo_padrao)

medals_list = ['Bronze', 'Silver', 'Gold']

for i, medal in enumerate(medals_list):
    ax.bar(stack_temp.index, stack_temp[medal], color=cor_medalhas_array[i],
        label=medal, width=2, edgecolor='black',
        bottom=stack_temp[medals_list[:i]].sum(axis=1) if i > 0 else None
    )

ax.set_facecolor(cor_fundo_padrao)

for s in ['top', 'right']:
    ax.spines[s].set_visible(False)

Xstart, Xend = ax.get_xlim()
Ystart, Yend = ax.get_ylim()

ax.set_xlim(Xstart, Xend)
ax.grid(which='both', axis='x', zorder=5, color='gray', linestyle=':', dashes=(1, 5))

ax.set_axisbelow(True)
ax.get_yaxis().set_visible(False)

ax.text(Xstart + 3, Yend + 0.13, 'Distribuição de Medlhas através do anos (Verão)', fontsize=15, fontweight='bold', fontfamily='serif', color='#323232')

plt.legend(loc='upper left', bbox_to_anchor=(1, 1), title='Medal Type')
 837:
mulheres_verao = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Summer")]
mulheres_verao = mulheres_verao.groupby(['Year', 'Medal'])['Medal'].count().unstack().reset_index()

mulheres_verao['Total'] = mulheres_verao['Gold'] + mulheres_verao['Silver'] + mulheres_verao['Bronze']
mulheres_verao = mulheres_verao.groupby('Year')[['Bronze', 'Silver', 'Gold']].sum()
mulheres_verao = mulheres_verao.divide(mulheres_verao.sum(axis=1), axis=0)

fig, ax = plt.subplots(1, 1, figsize=(18, 5), facecolor=cor_fundo_padrao)

medals_list = ['Bronze', 'Silver', 'Gold']

for i, medal in enumerate(medals_list):
    ax.bar(mulheres_verao.index, mulheres_verao[medal], color=cor_medalhas_array[i],
        label=medal, width=2, edgecolor='black',
        bottom=mulheres_verao[medals_list[:i]].sum(axis=1) if i > 0 else None
    )

ax.set_facecolor(cor_fundo_padrao)

for s in ['top', 'right']:
    ax.spines[s].set_visible(False)

Xstart, Xend = ax.get_xlim()
Ystart, Yend = ax.get_ylim()

ax.set_xlim(Xstart, Xend)
ax.grid(which='both', axis='x', zorder=5, color='gray', linestyle=':', dashes=(1, 5))

ax.set_axisbelow(True)
ax.get_yaxis().set_visible(False)

ax.text(Xstart + 3, Yend + 0.13, 'Distribuição de Medlhas através do anos (Verão)', fontsize=15, fontweight='bold', fontfamily='serif', color='#323232')

plt.legend(loc='upper left', bbox_to_anchor=(1, 1), title='Medal Type')
 838:
mulheres_verao = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Summer")]
mulheres_verao = mulheres_verao.groupby(['Year', 'Medal'])['Medal'].count().unstack().reset_index()
mulheres_verao['Total'] = mulheres_verao['Gold'] + mulheres_verao['Silver'] + mulheres_verao['Bronze']
mulheres_verao = mulheres_verao.groupby('Year')[['Bronze', 'Silver', 'Gold']].sum()
mulheres_verao = mulheres_verao.divide(mulheres_verao.sum(axis=1), axis=0)

mulhes_inverno = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Winter")]
mulhes_inverno = mulhes_inverno.groupby(['Year', 'Medal'])['Medal'].count().unstack().reset_index()
mulhes_inverno['Total'] = mulhes_inverno['Gold'] + mulhes_inverno['Silver'] + mulhes_inverno['Bronze']
mulhes_inverno = mulhes_inverno.groupby('Year')[['Bronze', 'Silver', 'Gold']].sum()
mulhes_inverno = mulhes_inverno.divide(mulhes_inverno.sum(axis=1), axis=0)

fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(18, 5), facecolor=cor_fundo_padrao)

medals_list = ['Bronze', 'Silver', 'Gold']

for i, medal in enumerate(medals_list):
    ax1.bar(mulheres_verao.index, mulheres_verao[medal], color=cor_medalhas_array[i],
        label=medal, width=2, edgecolor='black',
        bottom=mulheres_verao[medals_list[:i]].sum(axis=1) if i > 0 else None
    )

    ax1.bar(mulhes_inverno.index, mulhes_inverno[medal], color=cor_medalhas_array[i],
        label=medal, width=2, edgecolor='black',
        bottom=mulhes_inverno[medals_list[:i]].sum(axis=1) if i > 0 else None
    )


ax1.set_facecolor(cor_fundo_padrao)
ax2.set_facecolor(cor_fundo_padrao)

for s in ['top', 'right']:
    ax1.spines[s].set_visible(False)
    ax2.spines[s].set_visible(False)

Xstart1, Xend1 = ax1.get_xlim()
Ystart1, Yend1 = ax1.get_ylim()

Xstart2, Xend2 = ax2.get_xlim()
Ystart2, Yend2 = ax2.get_ylim()

ax1.set_xlim(Xstart, Xend)
ax1.grid(which='both', axis='x', zorder=5, color='gray', linestyle=':', dashes=(1, 5))
ax1.set_axisbelow(True)
ax1.get_yaxis().set_visible(False)
ax1.text(Xstart + 3, Yend + 0.13, 'Distribuição de Medlhas através do anos (Verão)', fontsize=15, fontweight='bold', fontfamily='serif', color='#323232')


ax2.set_xlim(Xstart2, Xend2)
ax2.grid(which='both', axis='x', zorder=5, color='gray', linestyle=':', dashes=(1, 5))
ax2.set_axisbelow(True)
ax2.get_yaxis().set_visible(False)
ax2.text(Xstart + 3, Yend + 0.13, 'Distribuição de Medlhas através do anos (Verão)', fontsize=15, fontweight='bold', fontfamily='serif', color='#323232')


plt.legend(loc='upper left', bbox_to_anchor=(1, 1), title='Medal Type')
 839:
mulheres_verao = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Summer")]
mulheres_verao = mulheres_verao.groupby(['Year', 'Medal'])['Medal'].count().unstack().reset_index()
mulheres_verao['Total'] = mulheres_verao['Gold'] + mulheres_verao['Silver'] + mulheres_verao['Bronze']
mulheres_verao = mulheres_verao.groupby('Year')[['Bronze', 'Silver', 'Gold']].sum()
mulheres_verao = mulheres_verao.divide(mulheres_verao.sum(axis=1), axis=0)

mulhes_inverno = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Winter")]
mulhes_inverno = mulhes_inverno.groupby(['Year', 'Medal'])['Medal'].count().unstack().reset_index()
mulhes_inverno['Total'] = mulhes_inverno['Gold'] + mulhes_inverno['Silver'] + mulhes_inverno['Bronze']
mulhes_inverno = mulhes_inverno.groupby('Year')[['Bronze', 'Silver', 'Gold']].sum()
mulhes_inverno = mulhes_inverno.divide(mulhes_inverno.sum(axis=1), axis=0)

fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(18, 5), facecolor=cor_fundo_padrao)

medals_list = ['Bronze', 'Silver', 'Gold']

for i, medal in enumerate(medals_list):
    ax1.bar(mulheres_verao.index, mulheres_verao[medal], color=cor_medalhas_array[i],
        label=medal, width=2, edgecolor='black',
        bottom=mulheres_verao[medals_list[:i]].sum(axis=1) if i > 0 else None
    )

    ax1.bar(mulhes_inverno.index, mulhes_inverno[medal], color=cor_medalhas_array[i],
        label=medal, width=2, edgecolor='black',
        bottom=mulhes_inverno[medals_list[:i]].sum(axis=1) if i > 0 else None
    )


ax1.set_facecolor(cor_fundo_padrao)
ax2.set_facecolor(cor_fundo_padrao)

for s in ['top', 'right']:
    ax1.spines[s].set_visible(False)
    ax2.spines[s].set_visible(False)

Xstart1, Xend1 = ax1.get_xlim()
Ystart1, Yend1 = ax1.get_ylim()

Xstart2, Xend2 = ax2.get_xlim()
Ystart2, Yend2 = ax2.get_ylim()

ax1.set_xlim(Xstart, Xend)
ax1.grid(which='both', axis='x', zorder=5, color='gray', linestyle=':', dashes=(1, 5))
ax1.set_axisbelow(True)
ax1.get_yaxis().set_visible(False)
ax1.text(Xstart + 3, Yend + 0.13, 'Distribuição de Medlhas através do anos (Verão)', fontsize=15, fontweight='bold', fontfamily='serif', color='#323232')


ax2.set_xlim(Xstart2, Xend2)
ax2.grid(which='both', axis='x', zorder=5, color='gray', linestyle=':', dashes=(1, 5))
ax2.set_axisbelow(True)
ax2.get_yaxis().set_visible(False)
ax2.text(Xstart + 3, Yend + 0.13, 'Distribuição de Medlhas através do anos (Verão)', fontsize=15, fontweight='bold', fontfamily='serif', color='#323232')


plt.legend(loc='upper left', bbox_to_anchor=(1, 1), title='Medal Type')
 840:
mulheres_verao = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Summer")]
mulheres_verao = mulheres_verao.groupby(['Year', 'Medal'])['Medal'].count().unstack().reset_index()
mulheres_verao['Total'] = mulheres_verao['Gold'] + mulheres_verao['Silver'] + mulheres_verao['Bronze']
mulheres_verao = mulheres_verao.groupby('Year')[['Bronze', 'Silver', 'Gold']].sum()
mulheres_verao = mulheres_verao.divide(mulheres_verao.sum(axis=1), axis=0)

mulhes_inverno = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Winter")]
mulhes_inverno = mulhes_inverno.groupby(['Year', 'Medal'])['Medal'].count().unstack().reset_index()
mulhes_inverno['Total'] = mulhes_inverno['Gold'] + mulhes_inverno['Silver'] + mulhes_inverno['Bronze']
mulhes_inverno = mulhes_inverno.groupby('Year')[['Bronze', 'Silver', 'Gold']].sum()
mulhes_inverno = mulhes_inverno.divide(mulhes_inverno.sum(axis=1), axis=0)

fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(10, 5), facecolor=cor_fundo_padrao)

medals_list = ['Bronze', 'Silver', 'Gold']

for i, medal in enumerate(medals_list):
    ax1.bar(mulheres_verao.index, mulheres_verao[medal], color=cor_medalhas_array[i],
        label=medal, width=2, edgecolor='black',
        bottom=mulheres_verao[medals_list[:i]].sum(axis=1) if i > 0 else None
    )

    ax1.bar(mulhes_inverno.index, mulhes_inverno[medal], color=cor_medalhas_array[i],
        label=medal, width=2, edgecolor='black',
        bottom=mulhes_inverno[medals_list[:i]].sum(axis=1) if i > 0 else None
    )


ax1.set_facecolor(cor_fundo_padrao)
ax2.set_facecolor(cor_fundo_padrao)

for s in ['top', 'right']:
    ax1.spines[s].set_visible(False)
    ax2.spines[s].set_visible(False)

Xstart1, Xend1 = ax1.get_xlim()
Ystart1, Yend1 = ax1.get_ylim()

Xstart2, Xend2 = ax2.get_xlim()
Ystart2, Yend2 = ax2.get_ylim()

ax1.set_xlim(Xstart, Xend)
ax1.grid(which='both', axis='x', zorder=5, color='gray', linestyle=':', dashes=(1, 5))
ax1.set_axisbelow(True)
ax1.get_yaxis().set_visible(False)
ax1.text(Xstart + 3, Yend + 0.13, 'Distribuição de Medlhas através do anos (Verão)', fontsize=15, fontweight='bold', fontfamily='serif', color='#323232')


ax2.set_xlim(Xstart2, Xend2)
ax2.grid(which='both', axis='x', zorder=5, color='gray', linestyle=':', dashes=(1, 5))
ax2.set_axisbelow(True)
ax2.get_yaxis().set_visible(False)
ax2.text(Xstart + 3, Yend + 0.13, 'Distribuição de Medlhas através do anos (Verão)', fontsize=15, fontweight='bold', fontfamily='serif', color='#323232')


plt.legend(loc='upper left', bbox_to_anchor=(1, 1), title='Medal Type')
 841:
mulheres_verao = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Summer")]
mulheres_verao = mulheres_verao.groupby(['Year', 'Medal'])['Medal'].count().unstack().reset_index()
mulheres_verao['Total'] = mulheres_verao['Gold'] + mulheres_verao['Silver'] + mulheres_verao['Bronze']
mulheres_verao = mulheres_verao.groupby('Year')[['Bronze', 'Silver', 'Gold']].sum()
mulheres_verao = mulheres_verao.divide(mulheres_verao.sum(axis=1), axis=0)

mulhes_inverno = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Winter")]
mulhes_inverno = mulhes_inverno.groupby(['Year', 'Medal'])['Medal'].count().unstack().reset_index()
mulhes_inverno['Total'] = mulhes_inverno['Gold'] + mulhes_inverno['Silver'] + mulhes_inverno['Bronze']
mulhes_inverno = mulhes_inverno.groupby('Year')[['Bronze', 'Silver', 'Gold']].sum()
mulhes_inverno = mulhes_inverno.divide(mulhes_inverno.sum(axis=1), axis=0)

fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(7, 5), facecolor=cor_fundo_padrao)

medals_list = ['Bronze', 'Silver', 'Gold']

for i, medal in enumerate(medals_list):
    ax1.bar(mulheres_verao.index, mulheres_verao[medal], color=cor_medalhas_array[i],
        label=medal, width=2, edgecolor='black',
        bottom=mulheres_verao[medals_list[:i]].sum(axis=1) if i > 0 else None
    )

    ax1.bar(mulhes_inverno.index, mulhes_inverno[medal], color=cor_medalhas_array[i],
        label=medal, width=2, edgecolor='black',
        bottom=mulhes_inverno[medals_list[:i]].sum(axis=1) if i > 0 else None
    )


ax1.set_facecolor(cor_fundo_padrao)
ax2.set_facecolor(cor_fundo_padrao)

for s in ['top', 'right']:
    ax1.spines[s].set_visible(False)
    ax2.spines[s].set_visible(False)

Xstart1, Xend1 = ax1.get_xlim()
Ystart1, Yend1 = ax1.get_ylim()

Xstart2, Xend2 = ax2.get_xlim()
Ystart2, Yend2 = ax2.get_ylim()

ax1.set_xlim(Xstart, Xend)
ax1.grid(which='both', axis='x', zorder=5, color='gray', linestyle=':', dashes=(1, 5))
ax1.set_axisbelow(True)
ax1.get_yaxis().set_visible(False)
ax1.text(Xstart + 3, Yend + 0.13, 'Distribuição de Medlhas através do anos (Verão)', fontsize=15, fontweight='bold', fontfamily='serif', color='#323232')


ax2.set_xlim(Xstart2, Xend2)
ax2.grid(which='both', axis='x', zorder=5, color='gray', linestyle=':', dashes=(1, 5))
ax2.set_axisbelow(True)
ax2.get_yaxis().set_visible(False)
ax2.text(Xstart + 3, Yend + 0.13, 'Distribuição de Medlhas através do anos (Verão)', fontsize=15, fontweight='bold', fontfamily='serif', color='#323232')


plt.legend(loc='upper left', bbox_to_anchor=(1, 1), title='Medal Type')
 842:
mulheres_verao = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Summer")]
mulheres_verao = mulheres_verao.groupby(['Year', 'Medal'])['Medal'].count().unstack().reset_index()
mulheres_verao['Total'] = mulheres_verao['Gold'] + mulheres_verao['Silver'] + mulheres_verao['Bronze']
mulheres_verao = mulheres_verao.groupby('Year')[['Bronze', 'Silver', 'Gold']].sum()
mulheres_verao = mulheres_verao.divide(mulheres_verao.sum(axis=1), axis=0)

mulhes_inverno = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Winter")]
mulhes_inverno = mulhes_inverno.groupby(['Year', 'Medal'])['Medal'].count().unstack().reset_index()
mulhes_inverno['Total'] = mulhes_inverno['Gold'] + mulhes_inverno['Silver'] + mulhes_inverno['Bronze']
mulhes_inverno = mulhes_inverno.groupby('Year')[['Bronze', 'Silver', 'Gold']].sum()
mulhes_inverno = mulhes_inverno.divide(mulhes_inverno.sum(axis=1), axis=0)

fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(14, 16), facecolor=cor_fundo_padrao)

medals_list = ['Bronze', 'Silver', 'Gold']

for i, medal in enumerate(medals_list):
    ax1.bar(mulheres_verao.index, mulheres_verao[medal], color=cor_medalhas_array[i],
        label=medal, width=2, edgecolor='black',
        bottom=mulheres_verao[medals_list[:i]].sum(axis=1) if i > 0 else None
    )

    ax1.bar(mulhes_inverno.index, mulhes_inverno[medal], color=cor_medalhas_array[i],
        label=medal, width=2, edgecolor='black',
        bottom=mulhes_inverno[medals_list[:i]].sum(axis=1) if i > 0 else None
    )


ax1.set_facecolor(cor_fundo_padrao)
ax2.set_facecolor(cor_fundo_padrao)

for s in ['top', 'right']:
    ax1.spines[s].set_visible(False)
    ax2.spines[s].set_visible(False)

Xstart1, Xend1 = ax1.get_xlim()
Ystart1, Yend1 = ax1.get_ylim()

Xstart2, Xend2 = ax2.get_xlim()
Ystart2, Yend2 = ax2.get_ylim()

ax1.set_xlim(Xstart, Xend)
ax1.grid(which='both', axis='x', zorder=5, color='gray', linestyle=':', dashes=(1, 5))
ax1.set_axisbelow(True)
ax1.get_yaxis().set_visible(False)
ax1.text(Xstart + 3, Yend + 0.13, 'Distribuição de Medlhas através do anos (Verão)', fontsize=15, fontweight='bold', fontfamily='serif', color='#323232')


ax2.set_xlim(Xstart2, Xend2)
ax2.grid(which='both', axis='x', zorder=5, color='gray', linestyle=':', dashes=(1, 5))
ax2.set_axisbelow(True)
ax2.get_yaxis().set_visible(False)
ax2.text(Xstart + 3, Yend + 0.13, 'Distribuição de Medlhas através do anos (Verão)', fontsize=15, fontweight='bold', fontfamily='serif', color='#323232')


plt.legend(loc='upper left', bbox_to_anchor=(1, 1), title='Medal Type')
 843:
mulheres_verao = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Summer")]
mulheres_verao = mulheres_verao.groupby(['Year', 'Medal'])['Medal'].count().unstack().reset_index()
mulheres_verao['Total'] = mulheres_verao['Gold'] + mulheres_verao['Silver'] + mulheres_verao['Bronze']
mulheres_verao = mulheres_verao.groupby('Year')[['Bronze', 'Silver', 'Gold']].sum()
mulheres_verao = mulheres_verao.divide(mulheres_verao.sum(axis=1), axis=0)

mulhes_inverno = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Winter")]
mulhes_inverno = mulhes_inverno.groupby(['Year', 'Medal'])['Medal'].count().unstack().reset_index()
mulhes_inverno['Total'] = mulhes_inverno['Gold'] + mulhes_inverno['Silver'] + mulhes_inverno['Bronze']
mulhes_inverno = mulhes_inverno.groupby('Year')[['Bronze', 'Silver', 'Gold']].sum()
mulhes_inverno = mulhes_inverno.divide(mulhes_inverno.sum(axis=1), axis=0)

fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(14, 16), facecolor=cor_fundo_padrao)

medals_list = ['Bronze', 'Silver', 'Gold']

for i, medal in enumerate(medals_list):
    ax1.bar(mulheres_verao.index, mulheres_verao[medal], color=cor_medalhas_array[i],
        label=medal, width=2, edgecolor='black',
        bottom=mulheres_verao[medals_list[:i]].sum(axis=1) if i > 0 else None
    )

    ax1.bar(mulhes_inverno.index, mulhes_inverno[medal], color=cor_medalhas_array[i],
        label=medal, width=2, edgecolor='black',
        bottom=mulhes_inverno[medals_list[:i]].sum(axis=1) if i > 0 else None
    )


ax1.set_facecolor(cor_fundo_padrao)
ax2.set_facecolor(cor_fundo_padrao)

for s in ['top', 'right']:
    ax1.spines[s].set_visible(False)
    ax2.spines[s].set_visible(False)

Xstart1, Xend1 = ax1.get_xlim()
Ystart1, Yend1 = ax1.get_ylim()

Xstart2, Xend2 = ax2.get_xlim()
Ystart2, Yend2 = ax2.get_ylim()


plt.legend(loc='upper left', bbox_to_anchor=(1, 1), title='Medal Type')
 844:
mulheres_verao = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Summer")]
mulheres_verao = mulheres_verao.groupby(['Year', 'Medal'])['Medal'].count().unstack().reset_index()
mulheres_verao['Total'] = mulheres_verao['Gold'] + mulheres_verao['Silver'] + mulheres_verao['Bronze']
mulheres_verao = mulheres_verao.groupby('Year')[['Bronze', 'Silver', 'Gold']].sum()
mulheres_verao = mulheres_verao.divide(mulheres_verao.sum(axis=1), axis=0)

mulhes_inverno = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Winter")]
mulhes_inverno = mulhes_inverno.groupby(['Year', 'Medal'])['Medal'].count().unstack().reset_index()
mulhes_inverno['Total'] = mulhes_inverno['Gold'] + mulhes_inverno['Silver'] + mulhes_inverno['Bronze']
mulhes_inverno = mulhes_inverno.groupby('Year')[['Bronze', 'Silver', 'Gold']].sum()
mulhes_inverno = mulhes_inverno.divide(mulhes_inverno.sum(axis=1), axis=0)

fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(14, 16), facecolor=cor_fundo_padrao)

medals_list = ['Bronze', 'Silver', 'Gold']

for i, medal in enumerate(medals_list):
    ax1.bar(mulheres_verao.index, mulheres_verao[medal], color=cor_medalhas_array[i],
        label=medal, width=2, edgecolor='black',
        bottom=mulheres_verao[medals_list[:i]].sum(axis=1) if i > 0 else None
    )

    ax2.bar(mulhes_inverno.index, mulhes_inverno[medal], color=cor_medalhas_array[i],
        label=medal, width=2, edgecolor='black',
        bottom=mulhes_inverno[medals_list[:i]].sum(axis=1) if i > 0 else None
    )


ax1.set_facecolor(cor_fundo_padrao)
ax2.set_facecolor(cor_fundo_padrao)

for s in ['top', 'right']:
    ax1.spines[s].set_visible(False)
    ax2.spines[s].set_visible(False)

Xstart1, Xend1 = ax1.get_xlim()
Ystart1, Yend1 = ax1.get_ylim()

Xstart2, Xend2 = ax2.get_xlim()
Ystart2, Yend2 = ax2.get_ylim()


plt.legend(loc='upper left', bbox_to_anchor=(1, 1), title='Medal Type')
 845:
mulheres_verao = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Summer")]
mulheres_verao = mulheres_verao.groupby(['Year', 'Medal'])['Medal'].count().unstack().reset_index()
mulheres_verao['Total'] = mulheres_verao['Gold'] + mulheres_verao['Silver'] + mulheres_verao['Bronze']
mulheres_verao = mulheres_verao.groupby('Year')[['Bronze', 'Silver', 'Gold']].sum()
mulheres_verao = mulheres_verao.divide(mulheres_verao.sum(axis=1), axis=0)

mulhes_inverno = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Winter")]
mulhes_inverno = mulhes_inverno.groupby(['Year', 'Medal'])['Medal'].count().unstack().reset_index()
mulhes_inverno['Total'] = mulhes_inverno['Gold'] + mulhes_inverno['Silver'] + mulhes_inverno['Bronze']
mulhes_inverno = mulhes_inverno.groupby('Year')[['Bronze', 'Silver', 'Gold']].sum()
mulhes_inverno = mulhes_inverno.divide(mulhes_inverno.sum(axis=1), axis=0)

fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(14, 16), facecolor=cor_fundo_padrao)

medals_list = ['Bronze', 'Silver', 'Gold']

for i, medal in enumerate(medals_list):
    ax1.bar(mulheres_verao.index, mulheres_verao[medal], color=cor_medalhas_array[i],
        label=medal, width=2, edgecolor='black',
        bottom=mulheres_verao[medals_list[:i]].sum(axis=1) if i > 0 else None
    )

    ax2.bar(mulhes_inverno.index, mulhes_inverno[medal], color=cor_medalhas_array[i],
        label=medal, width=2, edgecolor='black',
        bottom=mulhes_inverno[medals_list[:i]].sum(axis=1) if i > 0 else None
    )


ax1.set_facecolor(cor_fundo_padrao)
ax2.set_facecolor(cor_fundo_padrao)

for s in ['top', 'right']:
    ax1.spines[s].set_visible(False)
    ax2.spines[s].set_visible(False)

Xstart1, Xend1 = ax1.get_xlim()
Ystart1, Yend1 = ax1.get_ylim()

Xstart2, Xend2 = ax2.get_xlim()
Ystart2, Yend2 = ax2.get_ylim()

ax1.set_xlim(Xstart, Xend)
ax1.grid(which='both', axis='x', zorder=5, color='gray', linestyle=':', dashes=(1, 5))
ax1.set_axisbelow(True)
ax1.get_yaxis().set_visible(False)
ax1.text(Xstart + 3, Yend + 0.13, 'Distribuição de Medlhas através do anos (Verão)', fontsize=15, fontweight='bold', fontfamily='serif', color='#323232')


ax2.set_xlim(Xstart2, Xend2)
ax2.grid(which='both', axis='x', zorder=5, color='gray', linestyle=':', dashes=(1, 5))
ax2.set_axisbelow(True)
ax2.get_yaxis().set_visible(False)
ax2.text(Xstart + 3, Yend + 0.13, 'Distribuição de Medlhas através do anos (Verão)', fontsize=15, fontweight='bold', fontfamily='serif', color='#323232')



plt.legend(loc='upper left', bbox_to_anchor=(1, 1), title='Medal Type')
 846:
mulheres_verao = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Summer")]
mulheres_verao = mulheres_verao.groupby(['Year', 'Medal'])['Medal'].count().unstack().reset_index()
mulheres_verao['Total'] = mulheres_verao['Gold'] + mulheres_verao['Silver'] + mulheres_verao['Bronze']
mulheres_verao = mulheres_verao.groupby('Year')[['Bronze', 'Silver', 'Gold']].sum()
mulheres_verao = mulheres_verao.divide(mulheres_verao.sum(axis=1), axis=0)

mulhes_inverno = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Winter")]
mulhes_inverno = mulhes_inverno.groupby(['Year', 'Medal'])['Medal'].count().unstack().reset_index()
mulhes_inverno['Total'] = mulhes_inverno['Gold'] + mulhes_inverno['Silver'] + mulhes_inverno['Bronze']
mulhes_inverno = mulhes_inverno.groupby('Year')[['Bronze', 'Silver', 'Gold']].sum()
mulhes_inverno = mulhes_inverno.divide(mulhes_inverno.sum(axis=1), axis=0)

fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(14, 16), facecolor=cor_fundo_padrao)

medals_list = ['Bronze', 'Silver', 'Gold']

for i, medal in enumerate(medals_list):
    ax1.bar(mulheres_verao.index, mulheres_verao[medal], color=cor_medalhas_array[i],
        label=medal, width=2, edgecolor='black',
        bottom=mulheres_verao[medals_list[:i]].sum(axis=1) if i > 0 else None
    )

    ax2.bar(mulhes_inverno.index, mulhes_inverno[medal], color=cor_medalhas_array[i],
        label=medal, width=2, edgecolor='black',
        bottom=mulhes_inverno[medals_list[:i]].sum(axis=1) if i > 0 else None
    )


ax1.set_facecolor(cor_fundo_padrao)
ax2.set_facecolor(cor_fundo_padrao)

for s in ['top', 'right']:
    ax1.spines[s].set_visible(False)
    ax2.spines[s].set_visible(False)

Xstart1, Xend1 = ax1.get_xlim()
Ystart1, Yend1 = ax1.get_ylim()

Xstart2, Xend2 = ax2.get_xlim()
Ystart2, Yend2 = ax2.get_ylim()

ax1.set_xlim(Xstart, Xend)
ax1.grid(which='both', axis='x', zorder=5, color='gray', linestyle=':', dashes=(1, 5))
ax1.set_axisbelow(True)
ax1.get_yaxis().set_visible(False)
ax1.text(Xstart1 + 3, Yend + 0.13, 'Distribuição de Medlhas através do anos (Verão)', fontsize=15, fontweight='bold', fontfamily='serif', color='#323232')


ax2.set_xlim(Xstart2, Xend2)
ax2.grid(which='both', axis='x', zorder=5, color='gray', linestyle=':', dashes=(1, 5))
ax2.set_axisbelow(True)
ax2.get_yaxis().set_visible(False)
ax2.text(Xstart2 + 3, Yend + 0.13, 'Distribuição de Medlhas através do anos (Verão)', fontsize=15, fontweight='bold', fontfamily='serif', color='#323232')



plt.legend(loc='upper left', bbox_to_anchor=(1, 1), title='Medal Type')
 847:
mulheres_verao = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Summer")]
mulheres_verao = mulheres_verao.groupby(['Year', 'Medal'])['Medal'].count().unstack().reset_index()
mulheres_verao['Total'] = mulheres_verao['Gold'] + mulheres_verao['Silver'] + mulheres_verao['Bronze']
mulheres_verao = mulheres_verao.groupby('Year')[['Bronze', 'Silver', 'Gold']].sum()
mulheres_verao = mulheres_verao.divide(mulheres_verao.sum(axis=1), axis=0)

mulhes_inverno = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Winter")]
mulhes_inverno = mulhes_inverno.groupby(['Year', 'Medal'])['Medal'].count().unstack().reset_index()
mulhes_inverno['Total'] = mulhes_inverno['Gold'] + mulhes_inverno['Silver'] + mulhes_inverno['Bronze']
mulhes_inverno = mulhes_inverno.groupby('Year')[['Bronze', 'Silver', 'Gold']].sum()
mulhes_inverno = mulhes_inverno.divide(mulhes_inverno.sum(axis=1), axis=0)

fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(14, 16), facecolor=cor_fundo_padrao)

medals_list = ['Bronze', 'Silver', 'Gold']

for i, medal in enumerate(medals_list):
    ax1.bar(mulheres_verao.index, mulheres_verao[medal], color=cor_medalhas_array[i],
        label=medal, width=2, edgecolor='black',
        bottom=mulheres_verao[medals_list[:i]].sum(axis=1) if i > 0 else None
    )

    ax2.bar(mulhes_inverno.index, mulhes_inverno[medal], color=cor_medalhas_array[i],
        label=medal, width=2, edgecolor='black',
        bottom=mulhes_inverno[medals_list[:i]].sum(axis=1) if i > 0 else None
    )


ax1.set_facecolor(cor_fundo_padrao)
ax2.set_facecolor(cor_fundo_padrao)

for s in ['top', 'right']:
    ax1.spines[s].set_visible(False)
    ax2.spines[s].set_visible(False)

Xstart1, Xend1 = ax1.get_xlim()
Ystart1, Yend1 = ax1.get_ylim()

Xstart2, Xend2 = ax2.get_xlim()
Ystart2, Yend2 = ax2.get_ylim()

ax1.set_xlim(Xstart, Xend)
ax1.grid(which='both', axis='x', zorder=5, color='gray', linestyle=':', dashes=(1, 5))
ax1.set_axisbelow(True)
ax1.get_yaxis().set_visible(False)
ax1.text(Xstart1 + 3, Yend1 + 0.13, 'Distribuição de Medlhas através do anos (Verão)', fontsize=15, fontweight='bold', fontfamily='serif', color='#323232')


ax2.set_xlim(Xstart2, Xend2)
ax2.grid(which='both', axis='x', zorder=5, color='gray', linestyle=':', dashes=(1, 5))
ax2.set_axisbelow(True)
ax2.get_yaxis().set_visible(False)
ax2.text(Xstart2 + 3, Yend2 + 0.13, 'Distribuição de Medlhas através do anos (Verão)', fontsize=15, fontweight='bold', fontfamily='serif', color='#323232')



plt.legend(loc='upper left', bbox_to_anchor=(1, 1), title='Medal Type')
 848:
mulheres_verao = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Summer")]
mulheres_verao = mulheres_verao.groupby(['Year', 'Medal'])['Medal'].count().unstack().reset_index()
mulheres_verao['Total'] = mulheres_verao['Gold'] + mulheres_verao['Silver'] + mulheres_verao['Bronze']
mulheres_verao = mulheres_verao.groupby('Year')[['Bronze', 'Silver', 'Gold']].sum()
mulheres_verao = mulheres_verao.divide(mulheres_verao.sum(axis=1), axis=0)

mulhes_inverno = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Winter")]
mulhes_inverno = mulhes_inverno.groupby(['Year', 'Medal'])['Medal'].count().unstack().reset_index()
mulhes_inverno['Total'] = mulhes_inverno['Gold'] + mulhes_inverno['Silver'] + mulhes_inverno['Bronze']
mulhes_inverno = mulhes_inverno.groupby('Year')[['Bronze', 'Silver', 'Gold']].sum()
mulhes_inverno = mulhes_inverno.divide(mulhes_inverno.sum(axis=1), axis=0)

fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(14, 16), facecolor=cor_fundo_padrao)

medals_list = ['Bronze', 'Silver', 'Gold']

for i, medal in enumerate(medals_list):
    ax1.bar(mulheres_verao.index, mulheres_verao[medal], color=cor_medalhas_array[i],
        label=medal, width=2, edgecolor='black',
        bottom=mulheres_verao[medals_list[:i]].sum(axis=1) if i > 0 else None
    )

    ax2.bar(mulhes_inverno.index, mulhes_inverno[medal], color=cor_medalhas_array[i],
        label=medal, width=2, edgecolor='black',
        bottom=mulhes_inverno[medals_list[:i]].sum(axis=1) if i > 0 else None
    )


ax1.set_facecolor(cor_fundo_padrao)
ax2.set_facecolor(cor_fundo_padrao)

for s in ['top', 'right']:
    ax1.spines[s].set_visible(False)
    ax2.spines[s].set_visible(False)

Xstart1, Xend1 = ax1.get_xlim()
Ystart1, Yend1 = ax1.get_ylim()

Xstart2, Xend2 = ax2.get_xlim()
Ystart2, Yend2 = ax2.get_ylim()

ax1.set_xlim(Xstart, Xend)
ax1.grid(which='both', axis='x', zorder=5, color='gray', linestyle=':', dashes=(1, 5))
ax1.set_axisbelow(True)
ax1.get_yaxis().set_visible(False)
ax1.text(Xstart1 + 3, Yend1 + 0.13, 'Distribuição de Medlhas através do anos (Verão)', fontsize=15, fontweight='bold', fontfamily='serif', color='#323232')


ax2.set_xlim(Xstart2, Xend2)
ax2.grid(which='both', axis='x', zorder=5, color='gray', linestyle=':', dashes=(1, 5))
ax2.set_axisbelow(True)
ax2.get_yaxis().set_visible(False)
ax2.text(Xstart2 + 3, Yend2 + 1, 'Distribuição de Medlhas através do anos (Verão)', fontsize=15, fontweight='bold', fontfamily='serif', color='#323232')



plt.legend(loc='upper left', bbox_to_anchor=(1, 1), title='Medal Type')
 849:
mulheres_verao = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Summer")]
mulheres_verao = mulheres_verao.groupby(['Year', 'Medal'])['Medal'].count().unstack().reset_index()
mulheres_verao['Total'] = mulheres_verao['Gold'] + mulheres_verao['Silver'] + mulheres_verao['Bronze']
mulheres_verao = mulheres_verao.groupby('Year')[['Bronze', 'Silver', 'Gold']].sum()
mulheres_verao = mulheres_verao.divide(mulheres_verao.sum(axis=1), axis=0)

mulhes_inverno = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Winter")]
mulhes_inverno = mulhes_inverno.groupby(['Year', 'Medal'])['Medal'].count().unstack().reset_index()
mulhes_inverno['Total'] = mulhes_inverno['Gold'] + mulhes_inverno['Silver'] + mulhes_inverno['Bronze']
mulhes_inverno = mulhes_inverno.groupby('Year')[['Bronze', 'Silver', 'Gold']].sum()
mulhes_inverno = mulhes_inverno.divide(mulhes_inverno.sum(axis=1), axis=0)

fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(14, 16), facecolor=cor_fundo_padrao)

medals_list = ['Bronze', 'Silver', 'Gold']

for i, medal in enumerate(medals_list):
    ax1.bar(mulheres_verao.index, mulheres_verao[medal], color=cor_medalhas_array[i],
        label=medal, width=2, edgecolor='black',
        bottom=mulheres_verao[medals_list[:i]].sum(axis=1) if i > 0 else None
    )

    ax2.bar(mulhes_inverno.index, mulhes_inverno[medal], color=cor_medalhas_array[i],
        label=medal, width=2, edgecolor='black',
        bottom=mulhes_inverno[medals_list[:i]].sum(axis=1) if i > 0 else None
    )


ax1.set_facecolor(cor_fundo_padrao)
ax2.set_facecolor(cor_fundo_padrao)

for s in ['top', 'right']:
    ax1.spines[s].set_visible(False)
    ax2.spines[s].set_visible(False)

Xstart1, Xend1 = ax1.get_xlim()
Ystart1, Yend1 = ax1.get_ylim()

Xstart2, Xend2 = ax2.get_xlim()
Ystart2, Yend2 = ax2.get_ylim()

ax1.set_xlim(Xstart, Xend)
ax1.grid(which='both', axis='x', zorder=5, color='gray', linestyle=':', dashes=(1, 5))
ax1.set_axisbelow(True)
ax1.get_yaxis().set_visible(False)
ax1.text(Xstart1 + 3, Yend1 + 0.13, 'Distribuição de Medlhas através do anos (Verão)', fontsize=15, fontweight='bold', fontfamily='serif', color='#323232')


ax2.set_xlim(Xstart2, Xend2)
ax2.grid(which='both', axis='x', zorder=5, color='gray', linestyle=':', dashes=(1, 5))
ax2.set_axisbelow(True)
ax2.get_yaxis().set_visible(False)
ax2.text(Xstart2 + 3, Yend2 - 0.3, 'Distribuição de Medlhas através do anos (Verão)', fontsize=15, fontweight='bold', fontfamily='serif', color='#323232')



plt.legend(loc='upper left', bbox_to_anchor=(1, 1), title='Medal Type')
 850:
mulheres_verao = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Summer")]
mulheres_verao = mulheres_verao.groupby(['Year', 'Medal'])['Medal'].count().unstack().reset_index()
mulheres_verao['Total'] = mulheres_verao['Gold'] + mulheres_verao['Silver'] + mulheres_verao['Bronze']
mulheres_verao = mulheres_verao.groupby('Year')[['Bronze', 'Silver', 'Gold']].sum()
mulheres_verao = mulheres_verao.divide(mulheres_verao.sum(axis=1), axis=0)

mulhes_inverno = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Winter")]
mulhes_inverno = mulhes_inverno.groupby(['Year', 'Medal'])['Medal'].count().unstack().reset_index()
mulhes_inverno['Total'] = mulhes_inverno['Gold'] + mulhes_inverno['Silver'] + mulhes_inverno['Bronze']
mulhes_inverno = mulhes_inverno.groupby('Year')[['Bronze', 'Silver', 'Gold']].sum()
mulhes_inverno = mulhes_inverno.divide(mulhes_inverno.sum(axis=1), axis=0)

fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(14, 16), facecolor=cor_fundo_padrao)

medals_list = ['Bronze', 'Silver', 'Gold']

for i, medal in enumerate(medals_list):
    ax1.bar(mulheres_verao.index, mulheres_verao[medal], color=cor_medalhas_array[i],
        label=medal, width=2, edgecolor='black',
        bottom=mulheres_verao[medals_list[:i]].sum(axis=1) if i > 0 else None
    )

    ax2.bar(mulhes_inverno.index, mulhes_inverno[medal], color=cor_medalhas_array[i],
        label=medal, width=2, edgecolor='black',
        bottom=mulhes_inverno[medals_list[:i]].sum(axis=1) if i > 0 else None
    )


ax1.set_facecolor(cor_fundo_padrao)
ax2.set_facecolor(cor_fundo_padrao)

for s in ['top', 'right']:
    ax1.spines[s].set_visible(False)
    ax2.spines[s].set_visible(False)

Xstart1, Xend1 = ax1.get_xlim()
Ystart1, Yend1 = ax1.get_ylim()

Xstart2, Xend2 = ax2.get_xlim()
Ystart2, Yend2 = ax2.get_ylim()

ax1.set_xlim(Xstart, Xend)
ax1.grid(which='both', axis='x', zorder=5, color='gray', linestyle=':', dashes=(1, 5))
ax1.set_axisbelow(True)
ax1.get_yaxis().set_visible(False)
ax1.text(Xstart1 + 3, Yend1 + 0.13, 'Distribuição de Medlhas através do anos (Verão)', fontsize=15, fontweight='bold', fontfamily='serif', color='#323232')


ax2.set_xlim(Xstart2, Xend2)
ax2.grid(which='both', axis='x', zorder=5, color='gray', linestyle=':', dashes=(1, 5))
ax2.set_axisbelow(True)
ax2.get_yaxis().set_visible(False)
ax2.text(Xstart2 + 3, Yend2 - 0.13, 'Distribuição de Medlhas através do anos (Verão)', fontsize=15, fontweight='bold', fontfamily='serif', color='#323232')



plt.legend(loc='upper left', bbox_to_anchor=(1, 1), title='Medal Type')
 851:
mulheres_verao = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Summer")]
mulheres_verao = mulheres_verao.groupby(['Year', 'Medal'])['Medal'].count().unstack().reset_index()
mulheres_verao['Total'] = mulheres_verao['Gold'] + mulheres_verao['Silver'] + mulheres_verao['Bronze']
mulheres_verao = mulheres_verao.groupby('Year')[['Bronze', 'Silver', 'Gold']].sum()
mulheres_verao = mulheres_verao.divide(mulheres_verao.sum(axis=1), axis=0)

mulhes_inverno = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Winter")]
mulhes_inverno = mulhes_inverno.groupby(['Year', 'Medal'])['Medal'].count().unstack().reset_index()
mulhes_inverno['Total'] = mulhes_inverno['Gold'] + mulhes_inverno['Silver'] + mulhes_inverno['Bronze']
mulhes_inverno = mulhes_inverno.groupby('Year')[['Bronze', 'Silver', 'Gold']].sum()
mulhes_inverno = mulhes_inverno.divide(mulhes_inverno.sum(axis=1), axis=0)

fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(14, 16), facecolor=cor_fundo_padrao)

medals_list = ['Bronze', 'Silver', 'Gold']

for i, medal in enumerate(medals_list):
    ax1.bar(mulheres_verao.index, mulheres_verao[medal], color=cor_medalhas_array[i],
        label=medal, width=2, edgecolor='black',
        bottom=mulheres_verao[medals_list[:i]].sum(axis=1) if i > 0 else None
    )

    ax2.bar(mulhes_inverno.index, mulhes_inverno[medal], color=cor_medalhas_array[i],
        label=medal, width=2, edgecolor='black',
        bottom=mulhes_inverno[medals_list[:i]].sum(axis=1) if i > 0 else None
    )


ax1.set_facecolor(cor_fundo_padrao)
ax2.set_facecolor(cor_fundo_padrao)

for s in ['top', 'right']:
    ax1.spines[s].set_visible(False)
    ax2.spines[s].set_visible(False)

Xstart1, Xend1 = ax1.get_xlim()
Ystart1, Yend1 = ax1.get_ylim()

Xstart2, Xend2 = ax2.get_xlim()
Ystart2, Yend2 = ax2.get_ylim()

ax1.set_xlim(Xstart, Xend)
ax1.grid(which='both', axis='x', zorder=5, color='gray', linestyle=':', dashes=(1, 5))
ax1.set_axisbelow(True)
ax1.get_yaxis().set_visible(False)
ax1.text(Xstart1 + 3, Yend1 + 0.13, 'Distribuição de Medlhas através do anos (Verão)', fontsize=15, fontweight='bold', fontfamily='serif', color='#323232')


ax2.set_xlim(Xstart2, Xend2)
ax2.grid(which='both', axis='x', zorder=5, color='gray', linestyle=':', dashes=(1, 5))
ax2.set_axisbelow(True)
ax2.get_yaxis().set_visible(False)
ax2.text(Xstart2 + 3, Yend2 - 0.11, 'Distribuição de Medlhas através do anos (Verão)', fontsize=15, fontweight='bold', fontfamily='serif', color='#323232')



plt.legend(loc='upper left', bbox_to_anchor=(1, 1), title='Medal Type')
 852:
mulheres_verao = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Summer")]
mulheres_verao = mulheres_verao.groupby(['Year', 'Medal'])['Medal'].count().unstack().reset_index()
mulheres_verao['Total'] = mulheres_verao['Gold'] + mulheres_verao['Silver'] + mulheres_verao['Bronze']
mulheres_verao = mulheres_verao.groupby('Year')[['Bronze', 'Silver', 'Gold']].sum()
mulheres_verao = mulheres_verao.divide(mulheres_verao.sum(axis=1), axis=0)

mulhes_inverno = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Winter")]
mulhes_inverno = mulhes_inverno.groupby(['Year', 'Medal'])['Medal'].count().unstack().reset_index()
mulhes_inverno['Total'] = mulhes_inverno['Gold'] + mulhes_inverno['Silver'] + mulhes_inverno['Bronze']
mulhes_inverno = mulhes_inverno.groupby('Year')[['Bronze', 'Silver', 'Gold']].sum()
mulhes_inverno = mulhes_inverno.divide(mulhes_inverno.sum(axis=1), axis=0)

fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(14, 16), facecolor=cor_fundo_padrao)

medals_list = ['Bronze', 'Silver', 'Gold']

for i, medal in enumerate(medals_list):
    ax1.bar(mulheres_verao.index, mulheres_verao[medal], color=cor_medalhas_array[i],
        label=medal, width=2, edgecolor='black',
        bottom=mulheres_verao[medals_list[:i]].sum(axis=1) if i > 0 else None
    )

    ax2.bar(mulhes_inverno.index, mulhes_inverno[medal], color=cor_medalhas_array[i],
        label=medal, width=2, edgecolor='black',
        bottom=mulhes_inverno[medals_list[:i]].sum(axis=1) if i > 0 else None
    )


ax1.set_facecolor(cor_fundo_padrao)
ax2.set_facecolor(cor_fundo_padrao)

for s in ['top', 'right']:
    ax1.spines[s].set_visible(False)
    ax2.spines[s].set_visible(False)

Xstart1, Xend1 = ax1.get_xlim()
Ystart1, Yend1 = ax1.get_ylim()

Xstart2, Xend2 = ax2.get_xlim()
Ystart2, Yend2 = ax2.get_ylim()

ax1.set_xlim(Xstart, Xend)
ax1.grid(which='both', axis='x', zorder=5, color='gray', linestyle=':', dashes=(1, 5))
ax1.set_axisbelow(True)
ax1.get_yaxis().set_visible(False)
ax1.text(Xstart1 + 3, Yend1 + 0.13, 'Distribuição de Medlhas através do anos (Verão)', fontsize=15, fontweight='bold', fontfamily='serif', color='#323232')


ax2.set_xlim(Xstart2, Xend2)
ax2.grid(which='both', axis='x', zorder=5, color='gray', linestyle=':', dashes=(1, 5))
ax2.set_axisbelow(True)
ax2.get_yaxis().set_visible(False)
ax2.text(Xstart2 + 3, Yend2 - 0.105, 'Distribuição de Medlhas através do anos (Verão)', fontsize=15, fontweight='bold', fontfamily='serif', color='#323232')



plt.legend(loc='upper left', bbox_to_anchor=(1, 1), title='Medal Type')
 853:
mulheres_verao = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Summer")]
mulheres_verao = mulheres_verao.groupby(['Year', 'Medal'])['Medal'].count().unstack().reset_index()
mulheres_verao['Total'] = mulheres_verao['Gold'] + mulheres_verao['Silver'] + mulheres_verao['Bronze']
mulheres_verao = mulheres_verao.groupby('Year')[['Bronze', 'Silver', 'Gold']].sum()
mulheres_verao = mulheres_verao.divide(mulheres_verao.sum(axis=1), axis=0)

mulhes_inverno = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Winter")]
mulhes_inverno = mulhes_inverno.groupby(['Year', 'Medal'])['Medal'].count().unstack().reset_index()
mulhes_inverno['Total'] = mulhes_inverno['Gold'] + mulhes_inverno['Silver'] + mulhes_inverno['Bronze']
mulhes_inverno = mulhes_inverno.groupby('Year')[['Bronze', 'Silver', 'Gold']].sum()
mulhes_inverno = mulhes_inverno.divide(mulhes_inverno.sum(axis=1), axis=0)

fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(14, 16), facecolor=cor_fundo_padrao)

medals_list = ['Bronze', 'Silver', 'Gold']

for i, medal in enumerate(medals_list):
    ax1.bar(mulheres_verao.index, mulheres_verao[medal], color=cor_medalhas_array[i],
        label=medal, width=2, edgecolor='black',
        bottom=mulheres_verao[medals_list[:i]].sum(axis=1) if i > 0 else None
    )

    ax2.bar(mulhes_inverno.index, mulhes_inverno[medal], color=cor_medalhas_array[i],
        label=medal, width=2, edgecolor='black',
        bottom=mulhes_inverno[medals_list[:i]].sum(axis=1) if i > 0 else None
    )


ax1.set_facecolor(cor_fundo_padrao)
ax2.set_facecolor(cor_fundo_padrao)

for s in ['top', 'right']:
    ax1.spines[s].set_visible(False)
    ax2.spines[s].set_visible(False)

Xstart1, Xend1 = ax1.get_xlim()
Ystart1, Yend1 = ax1.get_ylim()

Xstart2, Xend2 = ax2.get_xlim()
Ystart2, Yend2 = ax2.get_ylim()

ax1.set_xlim(Xstart, Xend)
ax1.grid(which='both', axis='x', zorder=5, color='gray', linestyle=':', dashes=(1, 5))
ax1.set_axisbelow(True)
ax1.get_yaxis().set_visible(False)
ax1.text(Xstart1 + 3, Yend1 + 0.13, 'Distribuição de Medlhas através do anos (Verão)', fontsize=15, fontweight='bold', fontfamily='serif', color='#323232')


ax2.set_xlim(Xstart2, Xend2)
ax2.grid(which='both', axis='x', zorder=5, color='gray', linestyle=':', dashes=(1, 5))
ax2.set_axisbelow(True)
ax2.get_yaxis().set_visible(False)
ax2.text(Xstart2 + 3, Yend2 - 0.05, 'Distribuição de Medlhas através do anos (Verão)', fontsize=15, fontweight='bold', fontfamily='serif', color='#323232')



plt.legend(loc='upper left', bbox_to_anchor=(1, 1), title='Medal Type')
 854:
mulheres_verao = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Summer")]
mulheres_verao = mulheres_verao.groupby(['Year', 'Medal'])['Medal'].count().unstack().reset_index()
mulheres_verao['Total'] = mulheres_verao['Gold'] + mulheres_verao['Silver'] + mulheres_verao['Bronze']
mulheres_verao = mulheres_verao.groupby('Year')[['Bronze', 'Silver', 'Gold']].sum()
mulheres_verao = mulheres_verao.divide(mulheres_verao.sum(axis=1), axis=0)

mulhes_inverno = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Winter")]
mulhes_inverno = mulhes_inverno.groupby(['Year', 'Medal'])['Medal'].count().unstack().reset_index()
mulhes_inverno['Total'] = mulhes_inverno['Gold'] + mulhes_inverno['Silver'] + mulhes_inverno['Bronze']
mulhes_inverno = mulhes_inverno.groupby('Year')[['Bronze', 'Silver', 'Gold']].sum()
mulhes_inverno = mulhes_inverno.divide(mulhes_inverno.sum(axis=1), axis=0)

fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(14, 16), facecolor=cor_fundo_padrao)

medals_list = ['Bronze', 'Silver', 'Gold']

for i, medal in enumerate(medals_list):
    ax1.bar(mulheres_verao.index, mulheres_verao[medal], color=cor_medalhas_array[i],
        label=medal, width=2, edgecolor='black',
        bottom=mulheres_verao[medals_list[:i]].sum(axis=1) if i > 0 else None
    )

    ax2.bar(mulhes_inverno.index, mulhes_inverno[medal], color=cor_medalhas_array[i],
        label=medal, width=2, edgecolor='black',
        bottom=mulhes_inverno[medals_list[:i]].sum(axis=1) if i > 0 else None
    )


ax1.set_facecolor(cor_fundo_padrao)
ax2.set_facecolor(cor_fundo_padrao)

for s in ['top', 'right']:
    ax1.spines[s].set_visible(False)
    ax2.spines[s].set_visible(False)

Xstart1, Xend1 = ax1.get_xlim()
Ystart1, Yend1 = ax1.get_ylim()

Xstart2, Xend2 = ax2.get_xlim()
Ystart2, Yend2 = ax2.get_ylim()

ax1.set_xlim(Xstart, Xend)
ax1.grid(which='both', axis='x', zorder=5, color='gray', linestyle=':', dashes=(1, 5))
ax1.set_axisbelow(True)
ax1.get_yaxis().set_visible(False)
ax1.text(Xstart1 + 3, Yend1 + 0.13, 'Distribuição de Medlhas através do anos (Verão)', fontsize=15, fontweight='bold', fontfamily='serif', color='#323232')


ax2.set_xlim(Xstart2, Xend2)
ax2.grid(which='both', axis='x', zorder=5, color='gray', linestyle=':', dashes=(1, 5))
ax2.set_axisbelow(True)
ax2.get_yaxis().set_visible(False)
ax2.text(Xstart2 + 3, Yend2 - 0.02, 'Distribuição de Medlhas através do anos (Verão)', fontsize=15, fontweight='bold', fontfamily='serif', color='#323232')



plt.legend(loc='upper left', bbox_to_anchor=(1, 1), title='Medal Type')
 855:
mulheres_verao = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Summer")]
mulheres_verao = mulheres_verao.groupby(['Year', 'Medal'])['Medal'].count().unstack().reset_index()
mulheres_verao['Total'] = mulheres_verao['Gold'] + mulheres_verao['Silver'] + mulheres_verao['Bronze']
mulheres_verao = mulheres_verao.groupby('Year')[['Bronze', 'Silver', 'Gold']].sum()
mulheres_verao = mulheres_verao.divide(mulheres_verao.sum(axis=1), axis=0)

mulhes_inverno = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Winter")]
mulhes_inverno = mulhes_inverno.groupby(['Year', 'Medal'])['Medal'].count().unstack().reset_index()
mulhes_inverno['Total'] = mulhes_inverno['Gold'] + mulhes_inverno['Silver'] + mulhes_inverno['Bronze']
mulhes_inverno = mulhes_inverno.groupby('Year')[['Bronze', 'Silver', 'Gold']].sum()
mulhes_inverno = mulhes_inverno.divide(mulhes_inverno.sum(axis=1), axis=0)

fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(14, 16), facecolor=cor_fundo_padrao)

medals_list = ['Bronze', 'Silver', 'Gold']

for i, medal in enumerate(medals_list):
    ax1.bar(mulheres_verao.index, mulheres_verao[medal], color=cor_medalhas_array[i],
        label=medal, width=2, edgecolor='black',
        bottom=mulheres_verao[medals_list[:i]].sum(axis=1) if i > 0 else None
    )

    ax2.bar(mulhes_inverno.index, mulhes_inverno[medal], color=cor_medalhas_array[i],
        label=medal, width=2, edgecolor='black',
        bottom=mulhes_inverno[medals_list[:i]].sum(axis=1) if i > 0 else None
    )


ax1.set_facecolor(cor_fundo_padrao)
ax2.set_facecolor(cor_fundo_padrao)

for s in ['top', 'right']:
    ax1.spines[s].set_visible(False)
    ax2.spines[s].set_visible(False)

Xstart1, Xend1 = ax1.get_xlim()
Ystart1, Yend1 = ax1.get_ylim()

Xstart2, Xend2 = ax2.get_xlim()
Ystart2, Yend2 = ax2.get_ylim()

ax1.set_xlim(Xstart, Xend)
ax1.grid(which='both', axis='x', zorder=5, color='gray', linestyle=':', dashes=(1, 5))
ax1.set_axisbelow(True)
ax1.get_yaxis().set_visible(False)
ax1.text(Xstart1 + 3, Yend1 + 0.13, 'Distribuição de Medlhas através do anos (Verão)', fontsize=15, fontweight='bold', fontfamily='serif', color='#323232')


ax2.set_xlim(Xstart2, Xend2)
ax2.grid(which='both', axis='x', zorder=5, color='gray', linestyle=':', dashes=(1, 5))
ax2.set_axisbelow(True)
ax2.get_yaxis().set_visible(False)
ax2.text(Xstart2 + 3, Yend2 - 0.01, 'Distribuição de Medlhas através do anos (Verão)', fontsize=15, fontweight='bold', fontfamily='serif', color='#323232')



plt.legend(loc='upper left', bbox_to_anchor=(1, 1), title='Medal Type')
 856:
mulheres_verao = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Summer")]
mulheres_verao = mulheres_verao.groupby(['Year', 'Medal'])['Medal'].count().unstack().reset_index()
mulheres_verao['Total'] = mulheres_verao['Gold'] + mulheres_verao['Silver'] + mulheres_verao['Bronze']
mulheres_verao = mulheres_verao.groupby('Year')[['Bronze', 'Silver', 'Gold']].sum()
mulheres_verao = mulheres_verao.divide(mulheres_verao.sum(axis=1), axis=0)

mulhes_inverno = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Winter")]
mulhes_inverno = mulhes_inverno.groupby(['Year', 'Medal'])['Medal'].count().unstack().reset_index()
mulhes_inverno['Total'] = mulhes_inverno['Gold'] + mulhes_inverno['Silver'] + mulhes_inverno['Bronze']
mulhes_inverno = mulhes_inverno.groupby('Year')[['Bronze', 'Silver', 'Gold']].sum()
mulhes_inverno = mulhes_inverno.divide(mulhes_inverno.sum(axis=1), axis=0)

fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(14, 16), facecolor=cor_fundo_padrao)

medals_list = ['Bronze', 'Silver', 'Gold']

for i, medal in enumerate(medals_list):
    ax1.bar(mulheres_verao.index, mulheres_verao[medal], color=cor_medalhas_array[i],
        label=medal, width=2, edgecolor='black',
        bottom=mulheres_verao[medals_list[:i]].sum(axis=1) if i > 0 else None
    )

    ax2.bar(mulhes_inverno.index, mulhes_inverno[medal], color=cor_medalhas_array[i],
        label=medal, width=2, edgecolor='black',
        bottom=mulhes_inverno[medals_list[:i]].sum(axis=1) if i > 0 else None
    )


ax1.set_facecolor(cor_fundo_padrao)
ax2.set_facecolor(cor_fundo_padrao)

for s in ['top', 'right']:
    ax1.spines[s].set_visible(False)
    ax2.spines[s].set_visible(False)

Xstart1, Xend1 = ax1.get_xlim()
Ystart1, Yend1 = ax1.get_ylim()

Xstart2, Xend2 = ax2.get_xlim()
Ystart2, Yend2 = ax2.get_ylim()

ax1.set_xlim(Xstart, Xend)
ax1.grid(which='both', axis='x', zorder=5, color='gray', linestyle=':', dashes=(1, 5))
ax1.set_axisbelow(True)
ax1.get_yaxis().set_visible(False)
ax1.text(Xstart1 + 3, Yend1 + 0.13, 'Distribuição de Medlhas através do anos (Verão)', fontsize=15, fontweight='bold', fontfamily='serif', color='#323232')


ax2.set_xlim(Xstart2, Xend2)
ax2.grid(which='both', axis='x', zorder=5, color='gray', linestyle=':', dashes=(1, 5))
ax2.set_axisbelow(True)
ax2.get_yaxis().set_visible(False)
ax2.text(Xstart2 + 3, Yend2 - 0.005, 'Distribuição de Medlhas através do anos (Verão)', fontsize=15, fontweight='bold', fontfamily='serif', color='#323232')



plt.legend(loc='upper left', bbox_to_anchor=(1, 1), title='Medal Type')
 857:
mulheres_verao = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Summer")]
mulheres_verao = mulheres_verao.groupby(['Year', 'Medal'])['Medal'].count().unstack().reset_index()
mulheres_verao['Total'] = mulheres_verao['Gold'] + mulheres_verao['Silver'] + mulheres_verao['Bronze']
mulheres_verao = mulheres_verao.groupby('Year')[['Bronze', 'Silver', 'Gold']].sum()
mulheres_verao = mulheres_verao.divide(mulheres_verao.sum(axis=1), axis=0)

mulhes_inverno = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Winter")]
mulhes_inverno = mulhes_inverno.groupby(['Year', 'Medal'])['Medal'].count().unstack().reset_index()
mulhes_inverno['Total'] = mulhes_inverno['Gold'] + mulhes_inverno['Silver'] + mulhes_inverno['Bronze']
mulhes_inverno = mulhes_inverno.groupby('Year')[['Bronze', 'Silver', 'Gold']].sum()
mulhes_inverno = mulhes_inverno.divide(mulhes_inverno.sum(axis=1), axis=0)

fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(14, 16), facecolor=cor_fundo_padrao)

medals_list = ['Bronze', 'Silver', 'Gold']

for i, medal in enumerate(medals_list):
    ax1.bar(mulheres_verao.index, mulheres_verao[medal], color=cor_medalhas_array[i],
        label=medal, width=2, edgecolor='black',
        bottom=mulheres_verao[medals_list[:i]].sum(axis=1) if i > 0 else None
    )

    ax2.bar(mulhes_inverno.index, mulhes_inverno[medal], color=cor_medalhas_array[i],
        label=medal, width=2, edgecolor='black',
        bottom=mulhes_inverno[medals_list[:i]].sum(axis=1) if i > 0 else None
    )


ax1.set_facecolor(cor_fundo_padrao)
ax2.set_facecolor(cor_fundo_padrao)

for s in ['top', 'right']:
    ax1.spines[s].set_visible(False)
    ax2.spines[s].set_visible(False)

Xstart1, Xend1 = ax1.get_xlim()
Ystart1, Yend1 = ax1.get_ylim()

Xstart2, Xend2 = ax2.get_xlim()
Ystart2, Yend2 = ax2.get_ylim()

ax1.set_xlim(Xstart, Xend)
ax1.grid(which='both', axis='x', zorder=5, color='gray', linestyle=':', dashes=(1, 5))
ax1.set_axisbelow(True)
ax1.get_yaxis().set_visible(False)
ax1.text(Xstart1 + 3, Yend1 + 0.13, 'Distribuição de Medlhas através do anos (Verão)', fontsize=15, fontweight='bold', fontfamily='serif', color='#323232')


ax2.set_xlim(Xstart2, Xend2)
ax2.grid(which='both', axis='x', zorder=5, color='gray', linestyle=':', dashes=(1, 5))
ax2.set_axisbelow(True)
ax2.get_yaxis().set_visible(False)
ax2.text(Xstart2 + 3, Yend2 - 0.002, 'Distribuição de Medlhas através do anos (Verão)', fontsize=15, fontweight='bold', fontfamily='serif', color='#323232')



plt.legend(loc='upper left', bbox_to_anchor=(1, 1), title='Medal Type')
 858:
mulheres_verao = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Summer")]
mulheres_verao = mulheres_verao.groupby(['Year', 'Medal'])['Medal'].count().unstack().reset_index()
mulheres_verao['Total'] = mulheres_verao['Gold'] + mulheres_verao['Silver'] + mulheres_verao['Bronze']
mulheres_verao = mulheres_verao.groupby('Year')[['Bronze', 'Silver', 'Gold']].sum()
mulheres_verao = mulheres_verao.divide(mulheres_verao.sum(axis=1), axis=0)

mulhes_inverno = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Winter")]
mulhes_inverno = mulhes_inverno.groupby(['Year', 'Medal'])['Medal'].count().unstack().reset_index()
mulhes_inverno['Total'] = mulhes_inverno['Gold'] + mulhes_inverno['Silver'] + mulhes_inverno['Bronze']
mulhes_inverno = mulhes_inverno.groupby('Year')[['Bronze', 'Silver', 'Gold']].sum()
mulhes_inverno = mulhes_inverno.divide(mulhes_inverno.sum(axis=1), axis=0)

fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(10, 12), facecolor=cor_fundo_padrao)

medals_list = ['Bronze', 'Silver', 'Gold']

for i, medal in enumerate(medals_list):
    ax1.bar(mulheres_verao.index, mulheres_verao[medal], color=cor_medalhas_array[i],
        label=medal, width=2, edgecolor='black',
        bottom=mulheres_verao[medals_list[:i]].sum(axis=1) if i > 0 else None
    )

    ax2.bar(mulhes_inverno.index, mulhes_inverno[medal], color=cor_medalhas_array[i],
        label=medal, width=2, edgecolor='black',
        bottom=mulhes_inverno[medals_list[:i]].sum(axis=1) if i > 0 else None
    )


ax1.set_facecolor(cor_fundo_padrao)
ax2.set_facecolor(cor_fundo_padrao)

for s in ['top', 'right']:
    ax1.spines[s].set_visible(False)
    ax2.spines[s].set_visible(False)

Xstart1, Xend1 = ax1.get_xlim()
Ystart1, Yend1 = ax1.get_ylim()

Xstart2, Xend2 = ax2.get_xlim()
Ystart2, Yend2 = ax2.get_ylim()

ax1.set_xlim(Xstart, Xend)
ax1.grid(which='both', axis='x', zorder=5, color='gray', linestyle=':', dashes=(1, 5))
ax1.set_axisbelow(True)
ax1.get_yaxis().set_visible(False)
ax1.text(Xstart1 + 3, Yend1 + 0.13, 'Distribuição de Medlhas através do anos (Verão)', fontsize=15, fontweight='bold', fontfamily='serif', color='#323232')


ax2.set_xlim(Xstart2, Xend2)
ax2.grid(which='both', axis='x', zorder=5, color='gray', linestyle=':', dashes=(1, 5))
ax2.set_axisbelow(True)
ax2.get_yaxis().set_visible(False)
ax2.text(Xstart2 + 3, Yend2 - 0.002, 'Distribuição de Medlhas através do anos (Verão)', fontsize=15, fontweight='bold', fontfamily='serif', color='#323232')



plt.legend(loc='upper left', bbox_to_anchor=(1, 1), title='Medal Type')
 859:
mulheres_verao = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Summer")]
mulheres_verao = mulheres_verao.groupby(['Year', 'Medal'])['Medal'].count().unstack().reset_index()
mulheres_verao['Total'] = mulheres_verao['Gold'] + mulheres_verao['Silver'] + mulheres_verao['Bronze']
mulheres_verao = mulheres_verao.groupby('Year')[['Bronze', 'Silver', 'Gold']].sum()
mulheres_verao = mulheres_verao.divide(mulheres_verao.sum(axis=1), axis=0)

mulhes_inverno = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Winter")]
mulhes_inverno = mulhes_inverno.groupby(['Year', 'Medal'])['Medal'].count().unstack().reset_index()
mulhes_inverno['Total'] = mulhes_inverno['Gold'] + mulhes_inverno['Silver'] + mulhes_inverno['Bronze']
mulhes_inverno = mulhes_inverno.groupby('Year')[['Bronze', 'Silver', 'Gold']].sum()
mulhes_inverno = mulhes_inverno.divide(mulhes_inverno.sum(axis=1), axis=0)

fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(10, 5), facecolor=cor_fundo_padrao)

medals_list = ['Bronze', 'Silver', 'Gold']

for i, medal in enumerate(medals_list):
    ax1.bar(mulheres_verao.index, mulheres_verao[medal], color=cor_medalhas_array[i],
        label=medal, width=2, edgecolor='black',
        bottom=mulheres_verao[medals_list[:i]].sum(axis=1) if i > 0 else None
    )

    ax2.bar(mulhes_inverno.index, mulhes_inverno[medal], color=cor_medalhas_array[i],
        label=medal, width=2, edgecolor='black',
        bottom=mulhes_inverno[medals_list[:i]].sum(axis=1) if i > 0 else None
    )


ax1.set_facecolor(cor_fundo_padrao)
ax2.set_facecolor(cor_fundo_padrao)

for s in ['top', 'right']:
    ax1.spines[s].set_visible(False)
    ax2.spines[s].set_visible(False)

Xstart1, Xend1 = ax1.get_xlim()
Ystart1, Yend1 = ax1.get_ylim()

Xstart2, Xend2 = ax2.get_xlim()
Ystart2, Yend2 = ax2.get_ylim()

ax1.set_xlim(Xstart, Xend)
ax1.grid(which='both', axis='x', zorder=5, color='gray', linestyle=':', dashes=(1, 5))
ax1.set_axisbelow(True)
ax1.get_yaxis().set_visible(False)
ax1.text(Xstart1 + 3, Yend1 + 0.13, 'Distribuição de Medlhas através do anos (Verão)', fontsize=15, fontweight='bold', fontfamily='serif', color='#323232')


ax2.set_xlim(Xstart2, Xend2)
ax2.grid(which='both', axis='x', zorder=5, color='gray', linestyle=':', dashes=(1, 5))
ax2.set_axisbelow(True)
ax2.get_yaxis().set_visible(False)
ax2.text(Xstart2 + 3, Yend2 - 0.002, 'Distribuição de Medlhas através do anos (Verão)', fontsize=15, fontweight='bold', fontfamily='serif', color='#323232')



plt.legend(loc='upper left', bbox_to_anchor=(1, 1), title='Medal Type')
 860:
mulheres_verao = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Summer")]
mulheres_verao = mulheres_verao.groupby(['Year', 'Medal'])['Medal'].count().unstack().reset_index()
mulheres_verao['Total'] = mulheres_verao['Gold'] + mulheres_verao['Silver'] + mulheres_verao['Bronze']
mulheres_verao = mulheres_verao.groupby('Year')[['Bronze', 'Silver', 'Gold']].sum()
mulheres_verao = mulheres_verao.divide(mulheres_verao.sum(axis=1), axis=0)

mulhes_inverno = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Winter")]
mulhes_inverno = mulhes_inverno.groupby(['Year', 'Medal'])['Medal'].count().unstack().reset_index()
mulhes_inverno['Total'] = mulhes_inverno['Gold'] + mulhes_inverno['Silver'] + mulhes_inverno['Bronze']
mulhes_inverno = mulhes_inverno.groupby('Year')[['Bronze', 'Silver', 'Gold']].sum()
mulhes_inverno = mulhes_inverno.divide(mulhes_inverno.sum(axis=1), axis=0)

fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(15, 5), facecolor=cor_fundo_padrao)

medals_list = ['Bronze', 'Silver', 'Gold']

for i, medal in enumerate(medals_list):
    ax1.bar(mulheres_verao.index, mulheres_verao[medal], color=cor_medalhas_array[i],
        label=medal, width=2, edgecolor='black',
        bottom=mulheres_verao[medals_list[:i]].sum(axis=1) if i > 0 else None
    )

    ax2.bar(mulhes_inverno.index, mulhes_inverno[medal], color=cor_medalhas_array[i],
        label=medal, width=2, edgecolor='black',
        bottom=mulhes_inverno[medals_list[:i]].sum(axis=1) if i > 0 else None
    )


ax1.set_facecolor(cor_fundo_padrao)
ax2.set_facecolor(cor_fundo_padrao)

for s in ['top', 'right']:
    ax1.spines[s].set_visible(False)
    ax2.spines[s].set_visible(False)

Xstart1, Xend1 = ax1.get_xlim()
Ystart1, Yend1 = ax1.get_ylim()

Xstart2, Xend2 = ax2.get_xlim()
Ystart2, Yend2 = ax2.get_ylim()

ax1.set_xlim(Xstart, Xend)
ax1.grid(which='both', axis='x', zorder=5, color='gray', linestyle=':', dashes=(1, 5))
ax1.set_axisbelow(True)
ax1.get_yaxis().set_visible(False)
ax1.text(Xstart1 + 3, Yend1 + 0.13, 'Distribuição de Medlhas através do anos (Verão)', fontsize=15, fontweight='bold', fontfamily='serif', color='#323232')


ax2.set_xlim(Xstart2, Xend2)
ax2.grid(which='both', axis='x', zorder=5, color='gray', linestyle=':', dashes=(1, 5))
ax2.set_axisbelow(True)
ax2.get_yaxis().set_visible(False)
ax2.text(Xstart2 + 3, Yend2 - 0.002, 'Distribuição de Medlhas através do anos (Verão)', fontsize=15, fontweight='bold', fontfamily='serif', color='#323232')



plt.legend(loc='upper left', bbox_to_anchor=(1, 1), title='Medal Type')
 861:
mulheres_verao = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Summer")]
mulheres_verao = mulheres_verao.groupby(['Year', 'Medal'])['Medal'].count().unstack().reset_index()
mulheres_verao['Total'] = mulheres_verao['Gold'] + mulheres_verao['Silver'] + mulheres_verao['Bronze']
mulheres_verao = mulheres_verao.groupby('Year')[['Bronze', 'Silver', 'Gold']].sum()
mulheres_verao = mulheres_verao.divide(mulheres_verao.sum(axis=1), axis=0)

mulhes_inverno = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Winter")]
mulhes_inverno = mulhes_inverno.groupby(['Year', 'Medal'])['Medal'].count().unstack().reset_index()
mulhes_inverno['Total'] = mulhes_inverno['Gold'] + mulhes_inverno['Silver'] + mulhes_inverno['Bronze']
mulhes_inverno = mulhes_inverno.groupby('Year')[['Bronze', 'Silver', 'Gold']].sum()
mulhes_inverno = mulhes_inverno.divide(mulhes_inverno.sum(axis=1), axis=0)

fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(15, 7), facecolor=cor_fundo_padrao)

medals_list = ['Bronze', 'Silver', 'Gold']

for i, medal in enumerate(medals_list):
    ax1.bar(mulheres_verao.index, mulheres_verao[medal], color=cor_medalhas_array[i],
        label=medal, width=2, edgecolor='black',
        bottom=mulheres_verao[medals_list[:i]].sum(axis=1) if i > 0 else None
    )

    ax2.bar(mulhes_inverno.index, mulhes_inverno[medal], color=cor_medalhas_array[i],
        label=medal, width=2, edgecolor='black',
        bottom=mulhes_inverno[medals_list[:i]].sum(axis=1) if i > 0 else None
    )


ax1.set_facecolor(cor_fundo_padrao)
ax2.set_facecolor(cor_fundo_padrao)

for s in ['top', 'right']:
    ax1.spines[s].set_visible(False)
    ax2.spines[s].set_visible(False)

Xstart1, Xend1 = ax1.get_xlim()
Ystart1, Yend1 = ax1.get_ylim()

Xstart2, Xend2 = ax2.get_xlim()
Ystart2, Yend2 = ax2.get_ylim()

ax1.set_xlim(Xstart, Xend)
ax1.grid(which='both', axis='x', zorder=5, color='gray', linestyle=':', dashes=(1, 5))
ax1.set_axisbelow(True)
ax1.get_yaxis().set_visible(False)
ax1.text(Xstart1 + 3, Yend1 + 0.13, 'Distribuição de Medlhas através do anos (Verão)', fontsize=15, fontweight='bold', fontfamily='serif', color='#323232')


ax2.set_xlim(Xstart2, Xend2)
ax2.grid(which='both', axis='x', zorder=5, color='gray', linestyle=':', dashes=(1, 5))
ax2.set_axisbelow(True)
ax2.get_yaxis().set_visible(False)
ax2.text(Xstart2 + 3, Yend2 - 0.002, 'Distribuição de Medlhas através do anos (Verão)', fontsize=15, fontweight='bold', fontfamily='serif', color='#323232')



plt.legend(loc='upper left', bbox_to_anchor=(1, 1), title='Medal Type')
 862:
mulheres_verao = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Summer")]
mulheres_verao = mulheres_verao.groupby(['Year', 'Medal'])['Medal'].count().unstack().reset_index()
mulheres_verao['Total'] = mulheres_verao['Gold'] + mulheres_verao['Silver'] + mulheres_verao['Bronze']
mulheres_verao = mulheres_verao.groupby('Year')[['Bronze', 'Silver', 'Gold']].sum()
mulheres_verao = mulheres_verao.divide(mulheres_verao.sum(axis=1), axis=0)

mulhes_inverno = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Winter")]
mulhes_inverno = mulhes_inverno.groupby(['Year', 'Medal'])['Medal'].count().unstack().reset_index()
mulhes_inverno['Total'] = mulhes_inverno['Gold'] + mulhes_inverno['Silver'] + mulhes_inverno['Bronze']
mulhes_inverno = mulhes_inverno.groupby('Year')[['Bronze', 'Silver', 'Gold']].sum()
mulhes_inverno = mulhes_inverno.divide(mulhes_inverno.sum(axis=1), axis=0)

fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(15, 9), facecolor=cor_fundo_padrao)

medals_list = ['Bronze', 'Silver', 'Gold']

for i, medal in enumerate(medals_list):
    ax1.bar(mulheres_verao.index, mulheres_verao[medal], color=cor_medalhas_array[i],
        label=medal, width=2, edgecolor='black',
        bottom=mulheres_verao[medals_list[:i]].sum(axis=1) if i > 0 else None
    )

    ax2.bar(mulhes_inverno.index, mulhes_inverno[medal], color=cor_medalhas_array[i],
        label=medal, width=2, edgecolor='black',
        bottom=mulhes_inverno[medals_list[:i]].sum(axis=1) if i > 0 else None
    )


ax1.set_facecolor(cor_fundo_padrao)
ax2.set_facecolor(cor_fundo_padrao)

for s in ['top', 'right']:
    ax1.spines[s].set_visible(False)
    ax2.spines[s].set_visible(False)

Xstart1, Xend1 = ax1.get_xlim()
Ystart1, Yend1 = ax1.get_ylim()

Xstart2, Xend2 = ax2.get_xlim()
Ystart2, Yend2 = ax2.get_ylim()

ax1.set_xlim(Xstart, Xend)
ax1.grid(which='both', axis='x', zorder=5, color='gray', linestyle=':', dashes=(1, 5))
ax1.set_axisbelow(True)
ax1.get_yaxis().set_visible(False)
ax1.text(Xstart1 + 3, Yend1 + 0.13, 'Distribuição de Medlhas através do anos (Verão)', fontsize=15, fontweight='bold', fontfamily='serif', color='#323232')


ax2.set_xlim(Xstart2, Xend2)
ax2.grid(which='both', axis='x', zorder=5, color='gray', linestyle=':', dashes=(1, 5))
ax2.set_axisbelow(True)
ax2.get_yaxis().set_visible(False)
ax2.text(Xstart2 + 3, Yend2 - 0.002, 'Distribuição de Medlhas através do anos (Verão)', fontsize=15, fontweight='bold', fontfamily='serif', color='#323232')



plt.legend(loc='upper left', bbox_to_anchor=(1, 1), title='Medal Type')
 863:
mulheres_verao = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Summer")]
mulheres_verao = mulheres_verao.groupby(['Year', 'Medal'])['Medal'].count().unstack().reset_index()
mulheres_verao['Total'] = mulheres_verao['Gold'] + mulheres_verao['Silver'] + mulheres_verao['Bronze']
mulheres_verao = mulheres_verao.groupby('Year')[['Bronze', 'Silver', 'Gold']].sum()
mulheres_verao = mulheres_verao.divide(mulheres_verao.sum(axis=1), axis=0)

mulhes_inverno = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Winter")]
mulhes_inverno = mulhes_inverno.groupby(['Year', 'Medal'])['Medal'].count().unstack().reset_index()
mulhes_inverno['Total'] = mulhes_inverno['Gold'] + mulhes_inverno['Silver'] + mulhes_inverno['Bronze']
mulhes_inverno = mulhes_inverno.groupby('Year')[['Bronze', 'Silver', 'Gold']].sum()
mulhes_inverno = mulhes_inverno.divide(mulhes_inverno.sum(axis=1), axis=0)

fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(15, 9), facecolor=cor_fundo_padrao)

medals_list = ['Bronze', 'Silver', 'Gold']

for i, medal in enumerate(medals_list):
    ax1.bar(mulheres_verao.index, mulheres_verao[medal], color=cor_medalhas_array[i],
        label=medal, width=2, edgecolor='black',
        bottom=mulheres_verao[medals_list[:i]].sum(axis=1) if i > 0 else None
    )

    ax2.bar(mulhes_inverno.index, mulhes_inverno[medal], color=cor_medalhas_array[i],
        label=medal, width=2, edgecolor='black',
        bottom=mulhes_inverno[medals_list[:i]].sum(axis=1) if i > 0 else None
    )


ax1.set_facecolor(cor_fundo_padrao)
ax2.set_facecolor(cor_fundo_padrao)

for s in ['top', 'right']:
    ax1.spines[s].set_visible(False)
    ax2.spines[s].set_visible(False)

Xstart1, Xend1 = ax1.get_xlim()
Ystart1, Yend1 = ax1.get_ylim()

Xstart2, Xend2 = ax2.get_xlim()
Ystart2, Yend2 = ax2.get_ylim()

ax1.set_xlim(Xstart1, Xend1)
ax1.grid(which='both', axis='x', zorder=5, color='gray', linestyle=':', dashes=(1, 5))
ax1.set_axisbelow(True)
ax1.get_yaxis().set_visible(False)
ax1.text(Xstart1 + 3, Yend1 + 0.13, 'Distribuição de Medlhas através do anos (Verão)', fontsize=15, fontweight='bold', fontfamily='serif', color='#323232')


ax2.set_xlim(Xstart2, Xend2)
ax2.grid(which='both', axis='x', zorder=5, color='gray', linestyle=':', dashes=(1, 5))
ax2.set_axisbelow(True)
ax2.get_yaxis().set_visible(False)
ax2.text(Xstart2 + 3, Yend2 - 0.002, 'Distribuição de Medlhas através do anos (Verão)', fontsize=15, fontweight='bold', fontfamily='serif', color='#323232')



plt.legend(loc='upper left', bbox_to_anchor=(1, 1), title='Medal Type')
 864:
mulheres_verao = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Summer")]
mulheres_verao = mulheres_verao.groupby(['Year', 'Medal'])['Medal'].count().unstack().reset_index()
mulheres_verao['Total'] = mulheres_verao['Gold'] + mulheres_verao['Silver'] + mulheres_verao['Bronze']
mulheres_verao = mulheres_verao.groupby('Year')[['Bronze', 'Silver', 'Gold']].sum()
mulheres_verao = mulheres_verao.divide(mulheres_verao.sum(axis=1), axis=0)

mulhes_inverno = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Winter")]
mulhes_inverno = mulhes_inverno.groupby(['Year', 'Medal'])['Medal'].count().unstack().reset_index()
mulhes_inverno['Total'] = mulhes_inverno['Gold'] + mulhes_inverno['Silver'] + mulhes_inverno['Bronze']
mulhes_inverno = mulhes_inverno.groupby('Year')[['Bronze', 'Silver', 'Gold']].sum()
mulhes_inverno = mulhes_inverno.divide(mulhes_inverno.sum(axis=1), axis=0)

fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(15, 9), facecolor=cor_fundo_padrao)

medals_list = ['Bronze', 'Silver', 'Gold']

for i, medal in enumerate(medals_list):
    ax1.bar(mulheres_verao.index, mulheres_verao[medal], color=cor_medalhas_array[i],
        label=medal, width=2, edgecolor='black',
        bottom=mulheres_verao[medals_list[:i]].sum(axis=1) if i > 0 else None
    )

    ax2.bar(mulhes_inverno.index, mulhes_inverno[medal], color=cor_medalhas_array[i],
        label=medal, width=2, edgecolor='black',
        bottom=mulhes_inverno[medals_list[:i]].sum(axis=1) if i > 0 else None
    )


ax1.set_facecolor(cor_fundo_padrao)
ax2.set_facecolor(cor_fundo_padrao)

for s in ['top', 'right']:
    ax1.spines[s].set_visible(False)
    ax2.spines[s].set_visible(False)

Xstart1, Xend1 = ax1.get_xlim()
Ystart1, Yend1 = ax1.get_ylim()

Xstart2, Xend2 = ax2.get_xlim()
Ystart2, Yend2 = ax2.get_ylim()

ax1.set_xlim(Xstart1, Xend1)
ax1.grid(which='both', axis='x', zorder=5, color='gray', linestyle=':', dashes=(1, 5))
ax1.set_axisbelow(True)
ax1.get_yaxis().set_visible(False)
ax1.text(Xstart1 + 3, Yend1 + 0.13, 'Distribuição de Medlhas através do anos (Verão)', fontsize=15, fontweight='bold', fontfamily='serif', color='#323232')


ax2.set_xlim(Xstart2, Xend2)
ax2.grid(which='both', axis='x', zorder=5, color='gray', linestyle=':', dashes=(1, 5))
ax2.set_axisbelow(True)
ax2.get_yaxis().set_visible(False)
ax2.text(Xstart2 + 3, Yend2 - 0.002, 'Distribuição de Medlhas através do anos (Verão)', fontsize=15, fontweight='bold', fontfamily='serif', color='#323232')

plt.legend('Medalha')

plt.legend(loc='upper left', bbox_to_anchor=(1, 1), title='Medal Type')
 865:
mulheres_verao = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Summer")]
mulheres_verao = mulheres_verao.groupby(['Year', 'Medal'])['Medal'].count().unstack().reset_index()
mulheres_verao['Total'] = mulheres_verao['Gold'] + mulheres_verao['Silver'] + mulheres_verao['Bronze']
mulheres_verao = mulheres_verao.groupby('Year')[['Bronze', 'Silver', 'Gold']].sum()
mulheres_verao = mulheres_verao.divide(mulheres_verao.sum(axis=1), axis=0)

mulhes_inverno = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Winter")]
mulhes_inverno = mulhes_inverno.groupby(['Year', 'Medal'])['Medal'].count().unstack().reset_index()
mulhes_inverno['Total'] = mulhes_inverno['Gold'] + mulhes_inverno['Silver'] + mulhes_inverno['Bronze']
mulhes_inverno = mulhes_inverno.groupby('Year')[['Bronze', 'Silver', 'Gold']].sum()
mulhes_inverno = mulhes_inverno.divide(mulhes_inverno.sum(axis=1), axis=0)

fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(15, 9), facecolor=cor_fundo_padrao)

medals_list = ['Bronze', 'Silver', 'Gold']

for i, medal in enumerate(medals_list):
    ax1.bar(mulheres_verao.index, mulheres_verao[medal], color=cor_medalhas_array[i],
        label=medal, width=2, edgecolor='black',
        bottom=mulheres_verao[medals_list[:i]].sum(axis=1) if i > 0 else None
    )

    ax2.bar(mulhes_inverno.index, mulhes_inverno[medal], color=cor_medalhas_array[i],
        label=medal, width=2, edgecolor='black',
        bottom=mulhes_inverno[medals_list[:i]].sum(axis=1) if i > 0 else None
    )


ax1.set_facecolor(cor_fundo_padrao)
ax2.set_facecolor(cor_fundo_padrao)

for s in ['top', 'right']:
    ax1.spines[s].set_visible(False)
    ax2.spines[s].set_visible(False)

Xstart1, Xend1 = ax1.get_xlim()
Ystart1, Yend1 = ax1.get_ylim()

Xstart2, Xend2 = ax2.get_xlim()
Ystart2, Yend2 = ax2.get_ylim()

ax1.set_xlim(Xstart1, Xend1)
ax1.grid(which='both', axis='x', zorder=5, color='gray', linestyle=':', dashes=(1, 5))
ax1.set_axisbelow(True)
ax1.get_yaxis().set_visible(False)
ax1.text(Xstart1 + 3, Yend1 + 0.13, 'Distribuição de Medlhas através do anos (Verão)', fontsize=15, fontweight='bold', fontfamily='serif', color='#323232')


ax2.set_xlim(Xstart2, Xend2)
ax2.grid(which='both', axis='x', zorder=5, color='gray', linestyle=':', dashes=(1, 5))
ax2.set_axisbelow(True)
ax2.get_yaxis().set_visible(False)
ax2.text(Xstart2 + 3, Yend2, 'Distribuição de Medlhas através do anos (Verão)', fontsize=15, fontweight='bold', fontfamily='serif', color='#323232')


plt.legend(loc='upper left', bbox_to_anchor=(1, 1), title='Medal Type')
 866:
mulheres_verao = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Summer")]
mulheres_verao = mulheres_verao.groupby(['Year', 'Medal'])['Medal'].count().unstack().reset_index()
mulheres_verao['Total'] = mulheres_verao['Gold'] + mulheres_verao['Silver'] + mulheres_verao['Bronze']
mulheres_verao = mulheres_verao.groupby('Year')[['Bronze', 'Silver', 'Gold']].sum()
mulheres_verao = mulheres_verao.divide(mulheres_verao.sum(axis=1), axis=0)

mulhes_inverno = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Winter")]
mulhes_inverno = mulhes_inverno.groupby(['Year', 'Medal'])['Medal'].count().unstack().reset_index()
mulhes_inverno['Total'] = mulhes_inverno['Gold'] + mulhes_inverno['Silver'] + mulhes_inverno['Bronze']
mulhes_inverno = mulhes_inverno.groupby('Year')[['Bronze', 'Silver', 'Gold']].sum()
mulhes_inverno = mulhes_inverno.divide(mulhes_inverno.sum(axis=1), axis=0)

fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(15, 9), facecolor=cor_fundo_padrao)

medals_list = ['Bronze', 'Silver', 'Gold']

for i, medal in enumerate(medals_list):
    ax1.bar(mulheres_verao.index, mulheres_verao[medal], color=cor_medalhas_array[i],
        label=medal, width=2, edgecolor='black',
        bottom=mulheres_verao[medals_list[:i]].sum(axis=1) if i > 0 else None
    )

    ax2.bar(mulhes_inverno.index, mulhes_inverno[medal], color=cor_medalhas_array[i],
        label=medal, width=2, edgecolor='black',
        bottom=mulhes_inverno[medals_list[:i]].sum(axis=1) if i > 0 else None
    )


ax1.set_facecolor(cor_fundo_padrao)
ax2.set_facecolor(cor_fundo_padrao)

for s in ['top', 'right']:
    ax1.spines[s].set_visible(False)
    ax2.spines[s].set_visible(False)

Xstart1, Xend1 = ax1.get_xlim()
Ystart1, Yend1 = ax1.get_ylim()

Xstart2, Xend2 = ax2.get_xlim()
Ystart2, Yend2 = ax2.get_ylim()

ax1.set_xlim(Xstart1, Xend1)
ax1.grid(which='both', axis='x', zorder=5, color='gray', linestyle=':', dashes=(1, 5))
ax1.set_axisbelow(True)
ax1.get_yaxis().set_visible(False)
ax1.text(Xstart1 + 3, Yend1 + 0.13, 'Distribuição de Medlhas através do anos (Verão)', fontsize=15, fontweight='bold', fontfamily='serif', color='#323232')


ax2.set_xlim(Xstart2, Xend2)
ax2.set_ylim(Ystart2, Yend2+100)
ax2.grid(which='both', axis='x', zorder=5, color='gray', linestyle=':', dashes=(1, 5))
ax2.set_axisbelow(True)
ax2.get_yaxis().set_visible(False)
ax2.text(Xstart2 + 3, Yend2, 'Distribuição de Medlhas através do anos (Verão)', fontsize=15, fontweight='bold', fontfamily='serif', color='#323232')


plt.legend(loc='upper left', bbox_to_anchor=(1, 1), title='Medal Type')
 867:
mulheres_verao = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Summer")]
mulheres_verao = mulheres_verao.groupby(['Year', 'Medal'])['Medal'].count().unstack().reset_index()
mulheres_verao['Total'] = mulheres_verao['Gold'] + mulheres_verao['Silver'] + mulheres_verao['Bronze']
mulheres_verao = mulheres_verao.groupby('Year')[['Bronze', 'Silver', 'Gold']].sum()
mulheres_verao = mulheres_verao.divide(mulheres_verao.sum(axis=1), axis=0)

mulhes_inverno = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Winter")]
mulhes_inverno = mulhes_inverno.groupby(['Year', 'Medal'])['Medal'].count().unstack().reset_index()
mulhes_inverno['Total'] = mulhes_inverno['Gold'] + mulhes_inverno['Silver'] + mulhes_inverno['Bronze']
mulhes_inverno = mulhes_inverno.groupby('Year')[['Bronze', 'Silver', 'Gold']].sum()
mulhes_inverno = mulhes_inverno.divide(mulhes_inverno.sum(axis=1), axis=0)

fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(15, 9), facecolor=cor_fundo_padrao)

medals_list = ['Bronze', 'Silver', 'Gold']

for i, medal in enumerate(medals_list):
    ax1.bar(mulheres_verao.index, mulheres_verao[medal], color=cor_medalhas_array[i],
        label=medal, width=2, edgecolor='black',
        bottom=mulheres_verao[medals_list[:i]].sum(axis=1) if i > 0 else None
    )

    ax2.bar(mulhes_inverno.index, mulhes_inverno[medal], color=cor_medalhas_array[i],
        label=medal, width=2, edgecolor='black',
        bottom=mulhes_inverno[medals_list[:i]].sum(axis=1) if i > 0 else None
    )


ax1.set_facecolor(cor_fundo_padrao)
ax2.set_facecolor(cor_fundo_padrao)

for s in ['top', 'right']:
    ax1.spines[s].set_visible(False)
    ax2.spines[s].set_visible(False)

Xstart1, Xend1 = ax1.get_xlim()
Ystart1, Yend1 = ax1.get_ylim()

Xstart2, Xend2 = ax2.get_xlim()
Ystart2, Yend2 = ax2.get_ylim()

ax1.set_xlim(Xstart1, Xend1)
ax1.grid(which='both', axis='x', zorder=5, color='gray', linestyle=':', dashes=(1, 5))
ax1.set_axisbelow(True)
ax1.get_yaxis().set_visible(False)
ax1.text(Xstart1 + 3, Yend1 + 0.13, 'Distribuição de Medlhas através do anos (Verão)', fontsize=15, fontweight='bold', fontfamily='serif', color='#323232')


ax2.set_xlim(Xstart2, Xend2)
ax2.set_ylim(Ystart2, Yend2+2)
ax2.grid(which='both', axis='x', zorder=5, color='gray', linestyle=':', dashes=(1, 5))
ax2.set_axisbelow(True)
ax2.get_yaxis().set_visible(False)
ax2.text(Xstart2 + 3, Yend2, 'Distribuição de Medlhas através do anos (Verão)', fontsize=15, fontweight='bold', fontfamily='serif', color='#323232')


plt.legend(loc='upper left', bbox_to_anchor=(1, 1), title='Medal Type')
 868:
mulheres_verao = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Summer")]
mulheres_verao = mulheres_verao.groupby(['Year', 'Medal'])['Medal'].count().unstack().reset_index()
mulheres_verao['Total'] = mulheres_verao['Gold'] + mulheres_verao['Silver'] + mulheres_verao['Bronze']
mulheres_verao = mulheres_verao.groupby('Year')[['Bronze', 'Silver', 'Gold']].sum()
mulheres_verao = mulheres_verao.divide(mulheres_verao.sum(axis=1), axis=0)

mulhes_inverno = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Winter")]
mulhes_inverno = mulhes_inverno.groupby(['Year', 'Medal'])['Medal'].count().unstack().reset_index()
mulhes_inverno['Total'] = mulhes_inverno['Gold'] + mulhes_inverno['Silver'] + mulhes_inverno['Bronze']
mulhes_inverno = mulhes_inverno.groupby('Year')[['Bronze', 'Silver', 'Gold']].sum()
mulhes_inverno = mulhes_inverno.divide(mulhes_inverno.sum(axis=1), axis=0)

fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(15, 9), facecolor=cor_fundo_padrao)

medals_list = ['Bronze', 'Silver', 'Gold']

for i, medal in enumerate(medals_list):
    ax1.bar(mulheres_verao.index, mulheres_verao[medal], color=cor_medalhas_array[i],
        label=medal, width=2, edgecolor='black',
        bottom=mulheres_verao[medals_list[:i]].sum(axis=1) if i > 0 else None
    )

    ax2.bar(mulhes_inverno.index, mulhes_inverno[medal], color=cor_medalhas_array[i],
        label=medal, width=2, edgecolor='black',
        bottom=mulhes_inverno[medals_list[:i]].sum(axis=1) if i > 0 else None
    )


ax1.set_facecolor(cor_fundo_padrao)
ax2.set_facecolor(cor_fundo_padrao)

for s in ['top', 'right']:
    ax1.spines[s].set_visible(False)
    ax2.spines[s].set_visible(False)

Xstart1, Xend1 = ax1.get_xlim()
Ystart1, Yend1 = ax1.get_ylim()

Xstart2, Xend2 = ax2.get_xlim()
Ystart2, Yend2 = ax2.get_ylim()

ax1.set_xlim(Xstart1, Xend1)
ax1.grid(which='both', axis='x', zorder=5, color='gray', linestyle=':', dashes=(1, 5))
ax1.set_axisbelow(True)
ax1.get_yaxis().set_visible(False)
ax1.text(Xstart1 + 3, Yend1 + 0.13, 'Distribuição de Medlhas através do anos (Verão)', fontsize=15, fontweight='bold', fontfamily='serif', color='#323232')


ax2.set_xlim(Xstart2, Xend2)
ax2.set_ylim(Ystart2, Yend2+1)
ax2.grid(which='both', axis='x', zorder=5, color='gray', linestyle=':', dashes=(1, 5))
ax2.set_axisbelow(True)
ax2.get_yaxis().set_visible(False)
ax2.text(Xstart2 + 3, Yend2, 'Distribuição de Medlhas através do anos (Verão)', fontsize=15, fontweight='bold', fontfamily='serif', color='#323232')


plt.legend(loc='upper left', bbox_to_anchor=(1, 1), title='Medal Type')
 869:
mulheres_verao = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Summer")]
mulheres_verao = mulheres_verao.groupby(['Year', 'Medal'])['Medal'].count().unstack().reset_index()
mulheres_verao['Total'] = mulheres_verao['Gold'] + mulheres_verao['Silver'] + mulheres_verao['Bronze']
mulheres_verao = mulheres_verao.groupby('Year')[['Bronze', 'Silver', 'Gold']].sum()
mulheres_verao = mulheres_verao.divide(mulheres_verao.sum(axis=1), axis=0)

mulhes_inverno = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Winter")]
mulhes_inverno = mulhes_inverno.groupby(['Year', 'Medal'])['Medal'].count().unstack().reset_index()
mulhes_inverno['Total'] = mulhes_inverno['Gold'] + mulhes_inverno['Silver'] + mulhes_inverno['Bronze']
mulhes_inverno = mulhes_inverno.groupby('Year')[['Bronze', 'Silver', 'Gold']].sum()
mulhes_inverno = mulhes_inverno.divide(mulhes_inverno.sum(axis=1), axis=0)

fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(15, 9), facecolor=cor_fundo_padrao)

medals_list = ['Bronze', 'Silver', 'Gold']

for i, medal in enumerate(medals_list):
    ax1.bar(mulheres_verao.index, mulheres_verao[medal], color=cor_medalhas_array[i],
        label=medal, width=2, edgecolor='black',
        bottom=mulheres_verao[medals_list[:i]].sum(axis=1) if i > 0 else None
    )

    ax2.bar(mulhes_inverno.index, mulhes_inverno[medal], color=cor_medalhas_array[i],
        label=medal, width=2, edgecolor='black',
        bottom=mulhes_inverno[medals_list[:i]].sum(axis=1) if i > 0 else None
    )


ax1.set_facecolor(cor_fundo_padrao)
ax2.set_facecolor(cor_fundo_padrao)

for s in ['top', 'right']:
    ax1.spines[s].set_visible(False)
    ax2.spines[s].set_visible(False)

Xstart1, Xend1 = ax1.get_xlim()
Ystart1, Yend1 = ax1.get_ylim()

Xstart2, Xend2 = ax2.get_xlim()
Ystart2, Yend2 = ax2.get_ylim()

ax1.set_xlim(Xstart1, Xend1)
ax1.grid(which='both', axis='x', zorder=5, color='gray', linestyle=':', dashes=(1, 5))
ax1.set_axisbelow(True)
ax1.get_yaxis().set_visible(False)
ax1.text(Xstart1 + 3, Yend1 + 0.13, 'Distribuição de Medlhas através do anos (Verão)', fontsize=15, fontweight='bold', fontfamily='serif', color='#323232')


ax2.set_xlim(Xstart2, Xend2)
ax2.set_ylim(Ystart2, Yend2-1)
ax2.grid(which='both', axis='x', zorder=5, color='gray', linestyle=':', dashes=(1, 5))
ax2.set_axisbelow(True)
ax2.get_yaxis().set_visible(False)
ax2.text(Xstart2 + 3, Yend2, 'Distribuição de Medlhas através do anos (Verão)', fontsize=15, fontweight='bold', fontfamily='serif', color='#323232')


plt.legend(loc='upper left', bbox_to_anchor=(1, 1), title='Medal Type')
 870:
mulheres_verao = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Summer")]
mulheres_verao = mulheres_verao.groupby(['Year', 'Medal'])['Medal'].count().unstack().reset_index()
mulheres_verao['Total'] = mulheres_verao['Gold'] + mulheres_verao['Silver'] + mulheres_verao['Bronze']
mulheres_verao = mulheres_verao.groupby('Year')[['Bronze', 'Silver', 'Gold']].sum()
mulheres_verao = mulheres_verao.divide(mulheres_verao.sum(axis=1), axis=0)

mulhes_inverno = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Winter")]
mulhes_inverno = mulhes_inverno.groupby(['Year', 'Medal'])['Medal'].count().unstack().reset_index()
mulhes_inverno['Total'] = mulhes_inverno['Gold'] + mulhes_inverno['Silver'] + mulhes_inverno['Bronze']
mulhes_inverno = mulhes_inverno.groupby('Year')[['Bronze', 'Silver', 'Gold']].sum()
mulhes_inverno = mulhes_inverno.divide(mulhes_inverno.sum(axis=1), axis=0)

fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(15, 9), facecolor=cor_fundo_padrao)

medals_list = ['Bronze', 'Silver', 'Gold']

for i, medal in enumerate(medals_list):
    ax1.bar(mulheres_verao.index, mulheres_verao[medal], color=cor_medalhas_array[i],
        label=medal, width=2, edgecolor='black',
        bottom=mulheres_verao[medals_list[:i]].sum(axis=1) if i > 0 else None
    )

    ax2.bar(mulhes_inverno.index, mulhes_inverno[medal], color=cor_medalhas_array[i],
        label=medal, width=2, edgecolor='black',
        bottom=mulhes_inverno[medals_list[:i]].sum(axis=1) if i > 0 else None
    )


ax1.set_facecolor(cor_fundo_padrao)
ax2.set_facecolor(cor_fundo_padrao)

for s in ['top', 'right']:
    ax1.spines[s].set_visible(False)
    ax2.spines[s].set_visible(False)

Xstart1, Xend1 = ax1.get_xlim()
Ystart1, Yend1 = ax1.get_ylim()

Xstart2, Xend2 = ax2.get_xlim()
Ystart2, Yend2 = ax2.get_ylim()

ax1.set_xlim(Xstart1, Xend1)
ax1.grid(which='both', axis='x', zorder=5, color='gray', linestyle=':', dashes=(1, 5))
ax1.set_axisbelow(True)
ax1.get_yaxis().set_visible(False)
ax1.text(Xstart1 + 3, Yend1 + 0.13, 'Distribuição de Medlhas através do anos (Verão)', fontsize=15, fontweight='bold', fontfamily='serif', color='#323232')


ax2.set_xlim(Xstart2, Xend2)
ax2.set_ylim(Ystart2, Yend2+0.5)
ax2.grid(which='both', axis='x', zorder=5, color='gray', linestyle=':', dashes=(1, 5))
ax2.set_axisbelow(True)
ax2.get_yaxis().set_visible(False)
ax2.text(Xstart2 + 3, Yend2, 'Distribuição de Medlhas através do anos (Verão)', fontsize=15, fontweight='bold', fontfamily='serif', color='#323232')


plt.legend(loc='upper left', bbox_to_anchor=(1, 1), title='Medal Type')
 871:
mulheres_verao = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Summer")]
mulheres_verao = mulheres_verao.groupby(['Year', 'Medal'])['Medal'].count().unstack().reset_index()
mulheres_verao['Total'] = mulheres_verao['Gold'] + mulheres_verao['Silver'] + mulheres_verao['Bronze']
mulheres_verao = mulheres_verao.groupby('Year')[['Bronze', 'Silver', 'Gold']].sum()
mulheres_verao = mulheres_verao.divide(mulheres_verao.sum(axis=1), axis=0)

mulhes_inverno = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Winter")]
mulhes_inverno = mulhes_inverno.groupby(['Year', 'Medal'])['Medal'].count().unstack().reset_index()
mulhes_inverno['Total'] = mulhes_inverno['Gold'] + mulhes_inverno['Silver'] + mulhes_inverno['Bronze']
mulhes_inverno = mulhes_inverno.groupby('Year')[['Bronze', 'Silver', 'Gold']].sum()
mulhes_inverno = mulhes_inverno.divide(mulhes_inverno.sum(axis=1), axis=0)

fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(15, 9), facecolor=cor_fundo_padrao)

medals_list = ['Bronze', 'Silver', 'Gold']

for i, medal in enumerate(medals_list):
    ax1.bar(mulheres_verao.index, mulheres_verao[medal], color=cor_medalhas_array[i],
        label=medal, width=2, edgecolor='black',
        bottom=mulheres_verao[medals_list[:i]].sum(axis=1) if i > 0 else None
    )

    ax2.bar(mulhes_inverno.index, mulhes_inverno[medal], color=cor_medalhas_array[i],
        label=medal, width=2, edgecolor='black',
        bottom=mulhes_inverno[medals_list[:i]].sum(axis=1) if i > 0 else None
    )


ax1.set_facecolor(cor_fundo_padrao)
ax2.set_facecolor(cor_fundo_padrao)

for s in ['top', 'right']:
    ax1.spines[s].set_visible(False)
    ax2.spines[s].set_visible(False)

Xstart1, Xend1 = ax1.get_xlim()
Ystart1, Yend1 = ax1.get_ylim()

Xstart2, Xend2 = ax2.get_xlim()
Ystart2, Yend2 = ax2.get_ylim()

ax1.set_xlim(Xstart1, Xend1)
ax1.grid(which='both', axis='x', zorder=5, color='gray', linestyle=':', dashes=(1, 5))
ax1.set_axisbelow(True)
ax1.get_yaxis().set_visible(False)
ax1.text(Xstart1 + 3, Yend1 + 0.13, 'Distribuição de Medlhas através do anos (Verão)', fontsize=15, fontweight='bold', fontfamily='serif', color='#323232')


ax2.set_xlim(Xstart2, Xend2)
ax2.set_ylim(Ystart2, Yend2+0.1)
ax2.grid(which='both', axis='x', zorder=5, color='gray', linestyle=':', dashes=(1, 5))
ax2.set_axisbelow(True)
ax2.get_yaxis().set_visible(False)
ax2.text(Xstart2 + 3, Yend2, 'Distribuição de Medlhas através do anos (Verão)', fontsize=15, fontweight='bold', fontfamily='serif', color='#323232')


plt.legend(loc='upper left', bbox_to_anchor=(1, 1), title='Medal Type')
 872:
mulheres_verao = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Summer")]
mulheres_verao = mulheres_verao.groupby(['Year', 'Medal'])['Medal'].count().unstack().reset_index()
mulheres_verao['Total'] = mulheres_verao['Gold'] + mulheres_verao['Silver'] + mulheres_verao['Bronze']
mulheres_verao = mulheres_verao.groupby('Year')[['Bronze', 'Silver', 'Gold']].sum()
mulheres_verao = mulheres_verao.divide(mulheres_verao.sum(axis=1), axis=0)

mulhes_inverno = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Winter")]
mulhes_inverno = mulhes_inverno.groupby(['Year', 'Medal'])['Medal'].count().unstack().reset_index()
mulhes_inverno['Total'] = mulhes_inverno['Gold'] + mulhes_inverno['Silver'] + mulhes_inverno['Bronze']
mulhes_inverno = mulhes_inverno.groupby('Year')[['Bronze', 'Silver', 'Gold']].sum()
mulhes_inverno = mulhes_inverno.divide(mulhes_inverno.sum(axis=1), axis=0)

fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(15, 9), facecolor=cor_fundo_padrao)

medals_list = ['Bronze', 'Silver', 'Gold']

for i, medal in enumerate(medals_list):
    ax1.bar(mulheres_verao.index, mulheres_verao[medal], color=cor_medalhas_array[i],
        label=medal, width=2, edgecolor='black',
        bottom=mulheres_verao[medals_list[:i]].sum(axis=1) if i > 0 else None
    )

    ax2.bar(mulhes_inverno.index, mulhes_inverno[medal], color=cor_medalhas_array[i],
        label=medal, width=2, edgecolor='black',
        bottom=mulhes_inverno[medals_list[:i]].sum(axis=1) if i > 0 else None
    )


ax1.set_facecolor(cor_fundo_padrao)
ax2.set_facecolor(cor_fundo_padrao)

for s in ['top', 'right']:
    ax1.spines[s].set_visible(False)
    ax2.spines[s].set_visible(False)

Xstart1, Xend1 = ax1.get_xlim()
Ystart1, Yend1 = ax1.get_ylim()

Xstart2, Xend2 = ax2.get_xlim()
Ystart2, Yend2 = ax2.get_ylim()

ax1.set_xlim(Xstart1, Xend1)
ax1.grid(which='both', axis='x', zorder=5, color='gray', linestyle=':', dashes=(1, 5))
ax1.set_axisbelow(True)
ax1.get_yaxis().set_visible(False)
ax1.text(Xstart1 + 3, Yend1 + 0.13, 'Distribuição de Medlhas através do anos (Verão)', fontsize=15, fontweight='bold', fontfamily='serif', color='#323232')


ax2.set_xlim(Xstart2, Xend2)
ax2.set_ylim(Ystart2, Yend2+0.1)
ax2.grid(which='both', axis='x', zorder=5, color='gray', linestyle=':', dashes=(1, 5))
ax2.set_axisbelow(True)
ax2.get_yaxis().set_visible(False)
ax2.text(Xstart2 + 3, Yend2 + 0.13, 'Distribuição de Medlhas através do anos (Verão)', fontsize=15, fontweight='bold', fontfamily='serif', color='#323232')


plt.legend(loc='upper left', bbox_to_anchor=(1, 1), title='Medal Type')
 873:
mulheres_verao = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Summer")]
mulheres_verao = mulheres_verao.groupby(['Year', 'Medal'])['Medal'].count().unstack().reset_index()
mulheres_verao['Total'] = mulheres_verao['Gold'] + mulheres_verao['Silver'] + mulheres_verao['Bronze']
mulheres_verao = mulheres_verao.groupby('Year')[['Bronze', 'Silver', 'Gold']].sum()
mulheres_verao = mulheres_verao.divide(mulheres_verao.sum(axis=1), axis=0)

mulhes_inverno = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Winter")]
mulhes_inverno = mulhes_inverno.groupby(['Year', 'Medal'])['Medal'].count().unstack().reset_index()
mulhes_inverno['Total'] = mulhes_inverno['Gold'] + mulhes_inverno['Silver'] + mulhes_inverno['Bronze']
mulhes_inverno = mulhes_inverno.groupby('Year')[['Bronze', 'Silver', 'Gold']].sum()
mulhes_inverno = mulhes_inverno.divide(mulhes_inverno.sum(axis=1), axis=0)

fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(15, 9), facecolor=cor_fundo_padrao)

medals_list = ['Bronze', 'Silver', 'Gold']

for i, medal in enumerate(medals_list):
    ax1.bar(mulheres_verao.index, mulheres_verao[medal], color=cor_medalhas_array[i],
        label=medal, width=2, edgecolor='black',
        bottom=mulheres_verao[medals_list[:i]].sum(axis=1) if i > 0 else None
    )

    ax2.bar(mulhes_inverno.index, mulhes_inverno[medal], color=cor_medalhas_array[i],
        label=medal, width=2, edgecolor='black',
        bottom=mulhes_inverno[medals_list[:i]].sum(axis=1) if i > 0 else None
    )


ax1.set_facecolor(cor_fundo_padrao)
ax2.set_facecolor(cor_fundo_padrao)

for s in ['top', 'right']:
    ax1.spines[s].set_visible(False)
    ax2.spines[s].set_visible(False)

Xstart1, Xend1 = ax1.get_xlim()
Ystart1, Yend1 = ax1.get_ylim()

Xstart2, Xend2 = ax2.get_xlim()
Ystart2, Yend2 = ax2.get_ylim()

ax1.set_xlim(Xstart1, Xend1)
ax1.grid(which='both', axis='x', zorder=5, color='gray', linestyle=':', dashes=(1, 5))
ax1.set_axisbelow(True)
ax1.get_yaxis().set_visible(False)
ax1.text(Xstart1 + 3, Yend1 + 0.13, 'Distribuição de Medlhas através do anos (Verão)', fontsize=15, fontweight='bold', fontfamily='serif', color='#323232')


ax2.set_xlim(Xstart2, Xend2)
ax2.set_ylim(Ystart2, Yend2+0.1)
ax2.grid(which='both', axis='x', zorder=5, color='gray', linestyle=':', dashes=(1, 5))
ax2.set_axisbelow(True)
ax2.get_yaxis().set_visible(False)
ax2.text(Xstart2 + 3, Yend2 + 0.1, 'Distribuição de Medlhas através do anos (Verão)', fontsize=15, fontweight='bold', fontfamily='serif', color='#323232')


plt.legend(loc='upper left', bbox_to_anchor=(1, 1), title='Medal Type')
 874:
mulheres_verao = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Summer")]
mulheres_verao = mulheres_verao.groupby(['Year', 'Medal'])['Medal'].count().unstack().reset_index()
mulheres_verao['Total'] = mulheres_verao['Gold'] + mulheres_verao['Silver'] + mulheres_verao['Bronze']
mulheres_verao = mulheres_verao.groupby('Year')[['Bronze', 'Silver', 'Gold']].sum()
mulheres_verao = mulheres_verao.divide(mulheres_verao.sum(axis=1), axis=0)

mulhes_inverno = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Winter")]
mulhes_inverno = mulhes_inverno.groupby(['Year', 'Medal'])['Medal'].count().unstack().reset_index()
mulhes_inverno['Total'] = mulhes_inverno['Gold'] + mulhes_inverno['Silver'] + mulhes_inverno['Bronze']
mulhes_inverno = mulhes_inverno.groupby('Year')[['Bronze', 'Silver', 'Gold']].sum()
mulhes_inverno = mulhes_inverno.divide(mulhes_inverno.sum(axis=1), axis=0)

fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(15, 9), facecolor=cor_fundo_padrao)

medals_list = ['Bronze', 'Silver', 'Gold']

for i, medal in enumerate(medals_list):
    ax1.bar(mulheres_verao.index, mulheres_verao[medal], color=cor_medalhas_array[i],
        label=medal, width=2, edgecolor='black',
        bottom=mulheres_verao[medals_list[:i]].sum(axis=1) if i > 0 else None
    )

    ax2.bar(mulhes_inverno.index, mulhes_inverno[medal], color=cor_medalhas_array[i],
        label=medal, width=2, edgecolor='black',
        bottom=mulhes_inverno[medals_list[:i]].sum(axis=1) if i > 0 else None
    )


ax1.set_facecolor(cor_fundo_padrao)
ax2.set_facecolor(cor_fundo_padrao)

for s in ['top', 'right']:
    ax1.spines[s].set_visible(False)
    ax2.spines[s].set_visible(False)

Xstart1, Xend1 = ax1.get_xlim()
Ystart1, Yend1 = ax1.get_ylim()

Xstart2, Xend2 = ax2.get_xlim()
Ystart2, Yend2 = ax2.get_ylim()

ax1.set_xlim(Xstart1, Xend1)
ax1.set_ylim(Ystart1, Yend1+0.1)
ax1.grid(which='both', axis='x', zorder=5, color='gray', linestyle=':', dashes=(1, 5))
ax1.set_axisbelow(True)
ax1.get_yaxis().set_visible(False)
ax1.text(Xstart1 + 3, Yend1 + 0.13, 'Distribuição de Medlhas através do anos (Verão)', fontsize=15, fontweight='bold', fontfamily='serif', color='#323232')


ax2.set_xlim(Xstart2, Xend2)
ax2.set_ylim(Ystart2, Yend2+0.1)
ax2.grid(which='both', axis='x', zorder=5, color='gray', linestyle=':', dashes=(1, 5))
ax2.set_axisbelow(True)
ax2.get_yaxis().set_visible(False)
ax2.text(Xstart2 + 3, Yend2 + 0.1, 'Distribuição de Medlhas através do anos (Verão)', fontsize=15, fontweight='bold', fontfamily='serif', color='#323232')


plt.legend(loc='upper left', bbox_to_anchor=(1, 1), title='Medal Type')
 875:
mulheres_verao = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Summer")]
mulheres_verao = mulheres_verao.groupby(['Year', 'Medal'])['Medal'].count().unstack().reset_index()
mulheres_verao['Total'] = mulheres_verao['Gold'] + mulheres_verao['Silver'] + mulheres_verao['Bronze']
mulheres_verao = mulheres_verao.groupby('Year')[['Bronze', 'Silver', 'Gold']].sum()
mulheres_verao = mulheres_verao.divide(mulheres_verao.sum(axis=1), axis=0)

mulhes_inverno = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Winter")]
mulhes_inverno = mulhes_inverno.groupby(['Year', 'Medal'])['Medal'].count().unstack().reset_index()
mulhes_inverno['Total'] = mulhes_inverno['Gold'] + mulhes_inverno['Silver'] + mulhes_inverno['Bronze']
mulhes_inverno = mulhes_inverno.groupby('Year')[['Bronze', 'Silver', 'Gold']].sum()
mulhes_inverno = mulhes_inverno.divide(mulhes_inverno.sum(axis=1), axis=0)

fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(15, 9), facecolor=cor_fundo_padrao)

medals_list = ['Bronze', 'Silver', 'Gold']

for i, medal in enumerate(medals_list):
    ax1.bar(mulheres_verao.index, mulheres_verao[medal], color=cor_medalhas_array[i],
        label=medal, width=2, edgecolor='gray',
        bottom=mulheres_verao[medals_list[:i]].sum(axis=1) if i > 0 else None
    )

    ax2.bar(mulhes_inverno.index, mulhes_inverno[medal], color=cor_medalhas_array[i],
        label=medal, width=2, edgecolor='gray',
        bottom=mulhes_inverno[medals_list[:i]].sum(axis=1) if i > 0 else None
    )


ax1.set_facecolor(cor_fundo_padrao)
ax2.set_facecolor(cor_fundo_padrao)

for s in ['top', 'right']:
    ax1.spines[s].set_visible(False)
    ax2.spines[s].set_visible(False)

Xstart1, Xend1 = ax1.get_xlim()
Ystart1, Yend1 = ax1.get_ylim()

Xstart2, Xend2 = ax2.get_xlim()
Ystart2, Yend2 = ax2.get_ylim()

ax1.set_xlim(Xstart1, Xend1)
ax1.set_ylim(Ystart1, Yend1+0.1)
ax1.grid(which='both', axis='x', zorder=5, color='gray', linestyle=':', dashes=(1, 5))
ax1.set_axisbelow(True)
ax1.get_yaxis().set_visible(False)
ax1.text(Xstart1 + 3, Yend1 + 0.13, 'Distribuição de Medlhas através do anos (Verão)', fontsize=15, fontweight='bold', fontfamily='serif', color='#323232')


ax2.set_xlim(Xstart2, Xend2)
ax2.set_ylim(Ystart2, Yend2+0.1)
ax2.grid(which='both', axis='x', zorder=5, color='gray', linestyle=':', dashes=(1, 5))
ax2.set_axisbelow(True)
ax2.get_yaxis().set_visible(False)
ax2.text(Xstart2 + 3, Yend2 + 0.1, 'Distribuição de Medlhas através do anos (Verão)', fontsize=15, fontweight='bold', fontfamily='serif', color='#323232')


plt.legend(loc='upper left', bbox_to_anchor=(1, 1), title='Medal Type')
 876:
# A costrução aqui é um pouco mais complexa, por isso irei explicar melhor essa célula.

top_10_medalhas_ouro =  medalhas_ouro.groupby(['region'])['Medal'].count().reset_index().sort_values(by='Medal', ascending=False).reset_index()[:10]

color_map = ['#244747' for _ in range(0, 10)]   # Defindo as cores
color_map[0] = color_map[1] = color_map[2] = cores_medalhas.get('Gold') # Definido as cores de highlight

plt.figure(figsize=(8,8), facecolor=cor_fundo_gold)
ax = plt.subplot(111, polar=True)
plt.axis('off')

upperLimit = 3000   # Limite superior das fatias
lowerLimit = 10     # Limite inferior das fatias (onde começam em relação ao eixo cartesiano)
labelPadding = 30   # Define a distância minima do rótulo do país

max_ = top_10_medalhas_ouro['Medal'].max()
min_ = top_10_medalhas_ouro['Medal'].min()

# Calcula a angulatura da barra. A slope é dada pela formula dy/dx = (ymax-ymin)/(xmax-xmin)
slope = (max_ - lowerLimit) / (max_ - min_)  

# aplicando a transformação linear y = mx + b onde y é a altura, m é a inclinação (slope), x é o numero de medalhas e b é o ajuste
alturas = slope * top_10_medalhas_ouro.Medal + (upperLimit- lowerLimit)

indexes = list(range(1, len(top_10_medalhas_ouro.index)+1))

# Calcula a largura de cada barra. No total temos 2*Pi = 360°
# Divindo para o total de linhas na tabela, teremos:
largura = 2*np.pi / len(top_10_medalhas_ouro.index)

angulos = [element * largura for element in indexes]

# Configurando as barras (slices) do nosso grafico
bars = ax.bar(
    x=angulos, 
    height=alturas, 
    width=width, 
    bottom=lowerLimit,
    linewidth=2, 
    edgecolor="white",
    color=color_map,alpha=0.8
)

# Itera sobre as regiões para adicionas os rótulos de dados e labels dos países
for barra, angulo, altura, label in zip(bars,angulos, alturas, top_10_medalhas_ouro["region"]):

    rotacao = np.rad2deg(angulo)   # Converte radianos para graus

    alinhamento = ""
    if angulo >= np.pi/2 and angulo < 3*np.pi/2:    # Se estiver entre o segundo e terceiro quadrando, mudamos o alinhamento
        alinhamento = "right"
        rotacao = rotacao + 180
    else: 
        alinhamento = "left"

    # Acionamos o label
    ax.text(
        x=angulo, 
        y=lowerLimit + barra.get_height() + labelPadding, 
        s=label, 
        ha=alinhamento, fontsize=10,fontfamily='serif',
        va='center', 
        rotation=rotacao, 
        rotation_mode="anchor")

    # Adicionamos o rótulo de dados
    ax.text(
        x=angulo, 
        y=lowerLimit + barra.get_height()/2,
        s=f"{int(barra.get_height() / slope)}", 
        ha='center', fontsize=10, fontfamily='serif',
        va='center', 
        color='white', 
        rotation=rotacao, 
        rotation_mode="anchor")
    
plt.title('Distribuição de medalhas de Ouro por País (Top 10)', fontsize=15, fontweight='bold', fontfamily='serif', color='#323232')
ax.set_facecolor(cor_fundo_gold)

plt.tight_layout()
 877:
# A costrução aqui é um pouco mais complexa, por isso irei explicar melhor essa célula.

top_10_medalhas_ouro =  medalhas_ouro.groupby(['region'])['Medal'].count().reset_index().sort_values(by='Medal', ascending=False).reset_index()[:10]

color_map = ['#244747' for _ in range(0, 10)]   # Defindo as cores
color_map[0] = color_map[1] = color_map[2] = cores_medalhas.get('Gold') # Definido as cores de highlight

plt.figure(figsize=(8,7), facecolor=cor_fundo_gold)
ax = plt.subplot(111, polar=True)
plt.axis('off')

upperLimit = 3000   # Limite superior das fatias
lowerLimit = 10     # Limite inferior das fatias (onde começam em relação ao eixo cartesiano)
labelPadding = 30   # Define a distância minima do rótulo do país

max_ = top_10_medalhas_ouro['Medal'].max()
min_ = top_10_medalhas_ouro['Medal'].min()

# Calcula a angulatura da barra. A slope é dada pela formula dy/dx = (ymax-ymin)/(xmax-xmin)
slope = (max_ - lowerLimit) / (max_ - min_)  

# aplicando a transformação linear y = mx + b onde y é a altura, m é a inclinação (slope), x é o numero de medalhas e b é o ajuste
alturas = slope * top_10_medalhas_ouro.Medal + (upperLimit- lowerLimit)

indexes = list(range(1, len(top_10_medalhas_ouro.index)+1))

# Calcula a largura de cada barra. No total temos 2*Pi = 360°
# Divindo para o total de linhas na tabela, teremos:
largura = 2*np.pi / len(top_10_medalhas_ouro.index)

angulos = [element * largura for element in indexes]

# Configurando as barras (slices) do nosso grafico
bars = ax.bar(
    x=angulos, 
    height=alturas, 
    width=width, 
    bottom=lowerLimit,
    linewidth=2, 
    edgecolor="white",
    color=color_map,alpha=0.8
)

# Itera sobre as regiões para adicionas os rótulos de dados e labels dos países
for barra, angulo, altura, label in zip(bars,angulos, alturas, top_10_medalhas_ouro["region"]):

    rotacao = np.rad2deg(angulo)   # Converte radianos para graus

    alinhamento = ""
    if angulo >= np.pi/2 and angulo < 3*np.pi/2:    # Se estiver entre o segundo e terceiro quadrando, mudamos o alinhamento
        alinhamento = "right"
        rotacao = rotacao + 180
    else: 
        alinhamento = "left"

    # Acionamos o label
    ax.text(
        x=angulo, 
        y=lowerLimit + barra.get_height() + labelPadding, 
        s=label, 
        ha=alinhamento, fontsize=10,fontfamily='serif',
        va='center', 
        rotation=rotacao, 
        rotation_mode="anchor")

    # Adicionamos o rótulo de dados
    ax.text(
        x=angulo, 
        y=lowerLimit + barra.get_height()/2,
        s=f"{int(barra.get_height() / slope)}", 
        ha='center', fontsize=10, fontfamily='serif',
        va='center', 
        color='white', 
        rotation=rotacao, 
        rotation_mode="anchor")
    
plt.title('Distribuição de medalhas de Ouro por País (Top 10)', fontsize=15, fontweight='bold', fontfamily='serif', color='#323232')
ax.set_facecolor(cor_fundo_gold)

plt.tight_layout()
 878:
# A costrução aqui é um pouco mais complexa, por isso irei explicar melhor essa célula.

top_10_medalhas_ouro =  medalhas_ouro.groupby(['region'])['Medal'].count().reset_index().sort_values(by='Medal', ascending=False).reset_index()[:10]

color_map = ['#244747' for _ in range(0, 10)]   # Defindo as cores
color_map[0] = color_map[1] = color_map[2] = cores_medalhas.get('Gold') # Definido as cores de highlight

plt.figure(figsize=(10,7), facecolor=cor_fundo_gold)
ax = plt.subplot(111, polar=True)
plt.axis('off')

upperLimit = 3000   # Limite superior das fatias
lowerLimit = 10     # Limite inferior das fatias (onde começam em relação ao eixo cartesiano)
labelPadding = 30   # Define a distância minima do rótulo do país

max_ = top_10_medalhas_ouro['Medal'].max()
min_ = top_10_medalhas_ouro['Medal'].min()

# Calcula a angulatura da barra. A slope é dada pela formula dy/dx = (ymax-ymin)/(xmax-xmin)
slope = (max_ - lowerLimit) / (max_ - min_)  

# aplicando a transformação linear y = mx + b onde y é a altura, m é a inclinação (slope), x é o numero de medalhas e b é o ajuste
alturas = slope * top_10_medalhas_ouro.Medal + (upperLimit- lowerLimit)

indexes = list(range(1, len(top_10_medalhas_ouro.index)+1))

# Calcula a largura de cada barra. No total temos 2*Pi = 360°
# Divindo para o total de linhas na tabela, teremos:
largura = 2*np.pi / len(top_10_medalhas_ouro.index)

angulos = [element * largura for element in indexes]

# Configurando as barras (slices) do nosso grafico
bars = ax.bar(
    x=angulos, 
    height=alturas, 
    width=width, 
    bottom=lowerLimit,
    linewidth=2, 
    edgecolor="white",
    color=color_map,alpha=0.8
)

# Itera sobre as regiões para adicionas os rótulos de dados e labels dos países
for barra, angulo, altura, label in zip(bars,angulos, alturas, top_10_medalhas_ouro["region"]):

    rotacao = np.rad2deg(angulo)   # Converte radianos para graus

    alinhamento = ""
    if angulo >= np.pi/2 and angulo < 3*np.pi/2:    # Se estiver entre o segundo e terceiro quadrando, mudamos o alinhamento
        alinhamento = "right"
        rotacao = rotacao + 180
    else: 
        alinhamento = "left"

    # Acionamos o label
    ax.text(
        x=angulo, 
        y=lowerLimit + barra.get_height() + labelPadding, 
        s=label, 
        ha=alinhamento, fontsize=10,fontfamily='serif',
        va='center', 
        rotation=rotacao, 
        rotation_mode="anchor")

    # Adicionamos o rótulo de dados
    ax.text(
        x=angulo, 
        y=lowerLimit + barra.get_height()/2,
        s=f"{int(barra.get_height() / slope)}", 
        ha='center', fontsize=10, fontfamily='serif',
        va='center', 
        color='white', 
        rotation=rotacao, 
        rotation_mode="anchor")
    
plt.title('Distribuição de medalhas de Ouro por País (Top 10)', fontsize=15, fontweight='bold', fontfamily='serif', color='#323232')
ax.set_facecolor(cor_fundo_gold)

plt.tight_layout()
 879:
# A costrução aqui é um pouco mais complexa, por isso irei explicar melhor essa célula.

top_10_medalhas_ouro =  medalhas_ouro.groupby(['region'])['Medal'].count().reset_index().sort_values(by='Medal', ascending=False).reset_index()[:10]

color_map = ['#244747' for _ in range(0, 10)]   # Defindo as cores
color_map[0] = color_map[1] = color_map[2] = cores_medalhas.get('Gold') # Definido as cores de highlight

plt.figure(figsize=(7,10), facecolor=cor_fundo_gold)
ax = plt.subplot(111, polar=True)
plt.axis('off')

upperLimit = 3000   # Limite superior das fatias
lowerLimit = 10     # Limite inferior das fatias (onde começam em relação ao eixo cartesiano)
labelPadding = 30   # Define a distância minima do rótulo do país

max_ = top_10_medalhas_ouro['Medal'].max()
min_ = top_10_medalhas_ouro['Medal'].min()

# Calcula a angulatura da barra. A slope é dada pela formula dy/dx = (ymax-ymin)/(xmax-xmin)
slope = (max_ - lowerLimit) / (max_ - min_)  

# aplicando a transformação linear y = mx + b onde y é a altura, m é a inclinação (slope), x é o numero de medalhas e b é o ajuste
alturas = slope * top_10_medalhas_ouro.Medal + (upperLimit- lowerLimit)

indexes = list(range(1, len(top_10_medalhas_ouro.index)+1))

# Calcula a largura de cada barra. No total temos 2*Pi = 360°
# Divindo para o total de linhas na tabela, teremos:
largura = 2*np.pi / len(top_10_medalhas_ouro.index)

angulos = [element * largura for element in indexes]

# Configurando as barras (slices) do nosso grafico
bars = ax.bar(
    x=angulos, 
    height=alturas, 
    width=width, 
    bottom=lowerLimit,
    linewidth=2, 
    edgecolor="white",
    color=color_map,alpha=0.8
)

# Itera sobre as regiões para adicionas os rótulos de dados e labels dos países
for barra, angulo, altura, label in zip(bars,angulos, alturas, top_10_medalhas_ouro["region"]):

    rotacao = np.rad2deg(angulo)   # Converte radianos para graus

    alinhamento = ""
    if angulo >= np.pi/2 and angulo < 3*np.pi/2:    # Se estiver entre o segundo e terceiro quadrando, mudamos o alinhamento
        alinhamento = "right"
        rotacao = rotacao + 180
    else: 
        alinhamento = "left"

    # Acionamos o label
    ax.text(
        x=angulo, 
        y=lowerLimit + barra.get_height() + labelPadding, 
        s=label, 
        ha=alinhamento, fontsize=10,fontfamily='serif',
        va='center', 
        rotation=rotacao, 
        rotation_mode="anchor")

    # Adicionamos o rótulo de dados
    ax.text(
        x=angulo, 
        y=lowerLimit + barra.get_height()/2,
        s=f"{int(barra.get_height() / slope)}", 
        ha='center', fontsize=10, fontfamily='serif',
        va='center', 
        color='white', 
        rotation=rotacao, 
        rotation_mode="anchor")
    
plt.title('Distribuição de medalhas de Ouro por País (Top 10)', fontsize=15, fontweight='bold', fontfamily='serif', color='#323232')
ax.set_facecolor(cor_fundo_gold)

plt.tight_layout()
 880:
# A costrução aqui é um pouco mais complexa, por isso irei explicar melhor essa célula.

top_10_medalhas_ouro =  medalhas_ouro.groupby(['region'])['Medal'].count().reset_index().sort_values(by='Medal', ascending=False).reset_index()[:10]

color_map = ['#244747' for _ in range(0, 10)]   # Defindo as cores
color_map[0] = color_map[1] = color_map[2] = cores_medalhas.get('Gold') # Definido as cores de highlight

plt.figure(figsize=(7,15), facecolor=cor_fundo_gold)
ax = plt.subplot(111, polar=True)
plt.axis('off')

upperLimit = 3000   # Limite superior das fatias
lowerLimit = 10     # Limite inferior das fatias (onde começam em relação ao eixo cartesiano)
labelPadding = 30   # Define a distância minima do rótulo do país

max_ = top_10_medalhas_ouro['Medal'].max()
min_ = top_10_medalhas_ouro['Medal'].min()

# Calcula a angulatura da barra. A slope é dada pela formula dy/dx = (ymax-ymin)/(xmax-xmin)
slope = (max_ - lowerLimit) / (max_ - min_)  

# aplicando a transformação linear y = mx + b onde y é a altura, m é a inclinação (slope), x é o numero de medalhas e b é o ajuste
alturas = slope * top_10_medalhas_ouro.Medal + (upperLimit- lowerLimit)

indexes = list(range(1, len(top_10_medalhas_ouro.index)+1))

# Calcula a largura de cada barra. No total temos 2*Pi = 360°
# Divindo para o total de linhas na tabela, teremos:
largura = 2*np.pi / len(top_10_medalhas_ouro.index)

angulos = [element * largura for element in indexes]

# Configurando as barras (slices) do nosso grafico
bars = ax.bar(
    x=angulos, 
    height=alturas, 
    width=width, 
    bottom=lowerLimit,
    linewidth=2, 
    edgecolor="white",
    color=color_map,alpha=0.8
)

# Itera sobre as regiões para adicionas os rótulos de dados e labels dos países
for barra, angulo, altura, label in zip(bars,angulos, alturas, top_10_medalhas_ouro["region"]):

    rotacao = np.rad2deg(angulo)   # Converte radianos para graus

    alinhamento = ""
    if angulo >= np.pi/2 and angulo < 3*np.pi/2:    # Se estiver entre o segundo e terceiro quadrando, mudamos o alinhamento
        alinhamento = "right"
        rotacao = rotacao + 180
    else: 
        alinhamento = "left"

    # Acionamos o label
    ax.text(
        x=angulo, 
        y=lowerLimit + barra.get_height() + labelPadding, 
        s=label, 
        ha=alinhamento, fontsize=10,fontfamily='serif',
        va='center', 
        rotation=rotacao, 
        rotation_mode="anchor")

    # Adicionamos o rótulo de dados
    ax.text(
        x=angulo, 
        y=lowerLimit + barra.get_height()/2,
        s=f"{int(barra.get_height() / slope)}", 
        ha='center', fontsize=10, fontfamily='serif',
        va='center', 
        color='white', 
        rotation=rotacao, 
        rotation_mode="anchor")
    
plt.title('Distribuição de medalhas de Ouro por País (Top 10)', fontsize=15, fontweight='bold', fontfamily='serif', color='#323232')
ax.set_facecolor(cor_fundo_gold)

plt.tight_layout()
 881:
ouro_paises = medalhas_ouro.groupby(['Year', 'Event'])['Medal'].first()

top_10 = ouro_paises.groupby('Event').size().sort_values(ascending=False).reset_index()[:10]

top_10.style.set_caption('Medalhas de Ouro por Prova (Top 10)')
 882:
ouro_paises = medalhas_ouro.groupby(['Year', 'Event'])['Medal'].first()

top_10 = ouro_paises.groupby('Event').size().sort_values(ascending=False).reset_index()[:10]

top_10.style.set_caption('Medalhas de Ouro por Prova (Top 10)').background_gradient('gray')
 883:
ouro_paises = medalhas_ouro.groupby(['Year', 'Event'])['Medal'].first()

top_10 = ouro_paises.groupby('Event').size().sort_values(ascending=False).reset_index()[:10]

top_10.style.set_caption('Medalhas de Ouro por Prova (Top 10)').background_gradient('yellow')
 884:
ouro_paises = medalhas_ouro.groupby(['Year', 'Event'])['Medal'].first()

top_10 = ouro_paises.groupby('Event').size().sort_values(ascending=False).reset_index()[:10]

top_10.style.set_caption('Medalhas de Ouro por Prova (Top 10)').background_gradient(cmap=cores_medalhas.get('Gold'))
 885:
ouro_paises = medalhas_ouro.groupby(['Year', 'Event'])['Medal'].first()

top_10 = ouro_paises.groupby('Event').size().sort_values(ascending=False).reset_index()[:10]

top_10.style.set_caption('Medalhas de Ouro por Prova (Top 10)').background_gradient(cmap='summer')
 886:
ouro_paises = medalhas_ouro.groupby(['Year', 'Event'])['Medal'].first()

top_10 = ouro_paises.groupby('Event').size().sort_values(ascending=False).reset_index()[:10]

top_10.style.set_caption('Medalhas de Ouro por Prova (Top 10)').background_gradient(cmap='Grays')
 887:
ouro_paises = medalhas_ouro.groupby(['Year', 'Event'])['Medal'].first()

top_10 = ouro_paises.groupby('Event').size().sort_values(ascending=False).reset_index()[:20]

top_10.style.set_caption('Medalhas de Ouro por Prova (Top 10)').background_gradient(cmap='Grays')
 888:
ouro_paises = medalhas_ouro.groupby(['Year', 'Event'])['Medal'].first()

top_10 = ouro_paises.groupby('Event').size().sort_values(ascending=False).reset_index()[:20]

top_10.style.set_caption('Medalhas de Ouro por Prova (Top 10)').background_gradient(cmap='summer_r')
 889:
ouro_paises = medalhas_ouro.groupby(['Year', 'Event'])['Medal'].first()

top_10 = ouro_paises.groupby('Event').size().sort_values(ascending=False).reset_index()[:20]

top_10.style.set_caption('Medalhas de Ouro por Prova (Top 10)')
 890:
ouro_paises = medalhas_ouro.groupby(['Year', 'Event'])['Medal'].first()

top_10 = ouro_paises.groupby('Event').size().sort_values(ascending=False).reset_index()[:20]

top_10.style.set_caption('Medalhas de Ouro por Prova (Top 10)').highlight_max()
 891:
ouro_paises = medalhas_ouro.groupby(['Year', 'Event'])['Medal'].first()

top_10 = ouro_paises.groupby('Event').size().sort_values(ascending=False).reset_index()[:20]

top_10.style.set_caption('Medalhas de Ouro por Prova (Top 10)')
 892:
ouro_paises = medalhas_ouro.groupby(['Year', 'Event'])['Medal'].first()

top_10 = ouro_paises.groupby('Event').size().sort_values(ascending=False).reset_index()[:10]

top_10.style.set_caption('Medalhas de Ouro por Prova (Top 10)')
 893:
mulheres_verao = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Summer")]
mulheres_verao = mulheres_verao.groupby(['Year', 'Medal'])['Medal'].count().unstack().reset_index()
mulheres_verao['Total'] = mulheres_verao['Gold'] + mulheres_verao['Silver'] + mulheres_verao['Bronze']
mulheres_verao = mulheres_verao.groupby('Year')[['Bronze', 'Silver', 'Gold']].sum()
mulheres_verao = mulheres_verao.divide(mulheres_verao.sum(axis=1), axis=0)

mulhes_inverno = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Winter")]
mulhes_inverno = mulhes_inverno.groupby(['Year', 'Medal'])['Medal'].count().unstack().reset_index()
mulhes_inverno['Total'] = mulhes_inverno['Gold'] + mulhes_inverno['Silver'] + mulhes_inverno['Bronze']
mulhes_inverno = mulhes_inverno.groupby('Year')[['Bronze', 'Silver', 'Gold']].sum()
mulhes_inverno = mulhes_inverno.divide(mulhes_inverno.sum(axis=1), axis=0)

fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(15, 9), facecolor=cor_fundo_padrao)

medals_list = ['Bronze', 'Silver', 'Gold']

for i, medal in enumerate(medals_list):
    ax1.bar(mulheres_verao.index, mulheres_verao[medal], color=cor_medalhas_array[i],
        label=medal, width=2, edgecolor='gray',
        bottom=mulheres_verao[medals_list[:i]].sum(axis=1) if i > 0 else None
    )

    ax2.bar(mulhes_inverno.index, mulhes_inverno[medal], color=cor_medalhas_array[i],
        label=medal, width=2, edgecolor='gray',
        bottom=mulhes_inverno[medals_list[:i]].sum(axis=1) if i > 0 else None
    )


ax1.set_facecolor(cor_fundo_padrao)
ax2.set_facecolor(cor_fundo_padrao)

for s in ['top', 'right']:
    ax1.spines[s].set_visible(False)
    ax2.spines[s].set_visible(False)

Xstart1, Xend1 = ax1.get_xlim()
Ystart1, Yend1 = ax1.get_ylim()

Xstart2, Xend2 = ax2.get_xlim()
Ystart2, Yend2 = ax2.get_ylim()

ax1.set_xlim(Xstart1, Xend1)
ax1.set_ylim(Ystart1, Yend1+0.1)
ax1.grid(which='both', axis='x', zorder=5, color='gray', linestyle=':', dashes=(1, 5))
ax1.set_axisbelow(True)
ax1.get_yaxis().set_visible(False)
ax1.text(Xstart1 + 3, Yend1 + 0.13, 'Distribuição de Medlhas através do anos (Verão)', fontsize=15, fontweight='bold', fontfamily='serif', color='#323232')
ax1.tittle('Distribuição de Medlhas através do anos (Verão)', fontsize=15, fontweight='bold', fontfamily='serif', color='#323232')

ax2.set_xlim(Xstart2, Xend2)
ax2.set_ylim(Ystart2, Yend2+0.1)
ax2.grid(which='both', axis='x', zorder=5, color='gray', linestyle=':', dashes=(1, 5))
ax2.set_axisbelow(True)
ax2.get_yaxis().set_visible(False)
ax2.text(Xstart2 + 3, Yend2 + 0.1, 'Distribuição de Medlhas através do anos (Verão)', fontsize=15, fontweight='bold', fontfamily='serif', color='#323232')


plt.legend(loc='upper left', bbox_to_anchor=(1, 1), title='Medal Type')
 894:
mulheres_verao = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Summer")]
mulheres_verao = mulheres_verao.groupby(['Year', 'Medal'])['Medal'].count().unstack().reset_index()
mulheres_verao['Total'] = mulheres_verao['Gold'] + mulheres_verao['Silver'] + mulheres_verao['Bronze']
mulheres_verao = mulheres_verao.groupby('Year')[['Bronze', 'Silver', 'Gold']].sum()
mulheres_verao = mulheres_verao.divide(mulheres_verao.sum(axis=1), axis=0)

mulhes_inverno = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Winter")]
mulhes_inverno = mulhes_inverno.groupby(['Year', 'Medal'])['Medal'].count().unstack().reset_index()
mulhes_inverno['Total'] = mulhes_inverno['Gold'] + mulhes_inverno['Silver'] + mulhes_inverno['Bronze']
mulhes_inverno = mulhes_inverno.groupby('Year')[['Bronze', 'Silver', 'Gold']].sum()
mulhes_inverno = mulhes_inverno.divide(mulhes_inverno.sum(axis=1), axis=0)

fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(15, 9), facecolor=cor_fundo_padrao)

medals_list = ['Bronze', 'Silver', 'Gold']

for i, medal in enumerate(medals_list):
    ax1.bar(mulheres_verao.index, mulheres_verao[medal], color=cor_medalhas_array[i],
        label=medal, width=2, edgecolor='gray',
        bottom=mulheres_verao[medals_list[:i]].sum(axis=1) if i > 0 else None
    )

    ax2.bar(mulhes_inverno.index, mulhes_inverno[medal], color=cor_medalhas_array[i],
        label=medal, width=2, edgecolor='gray',
        bottom=mulhes_inverno[medals_list[:i]].sum(axis=1) if i > 0 else None
    )


ax1.set_facecolor(cor_fundo_padrao)
ax2.set_facecolor(cor_fundo_padrao)

for s in ['top', 'right']:
    ax1.spines[s].set_visible(False)
    ax2.spines[s].set_visible(False)

Xstart1, Xend1 = ax1.get_xlim()
Ystart1, Yend1 = ax1.get_ylim()

Xstart2, Xend2 = ax2.get_xlim()
Ystart2, Yend2 = ax2.get_ylim()

ax1.set_xlim(Xstart1, Xend1)
ax1.set_ylim(Ystart1, Yend1+0.1)
ax1.grid(which='both', axis='x', zorder=5, color='gray', linestyle=':', dashes=(1, 5))
ax1.set_axisbelow(True)
ax1.get_yaxis().set_visible(False)
ax1.text(Xstart1 + 3, Yend1 + 0.13, 'Distribuição de Medlhas através do anos (Verão)', fontsize=15, fontweight='bold', fontfamily='serif', color='#323232')

plt.title('Distribuição de Medlhas através do anos', fontsize=15, fontweight='bold', fontfamily='serif', color='#323232')

ax2.set_xlim(Xstart2, Xend2)
ax2.set_ylim(Ystart2, Yend2+0.1)
ax2.grid(which='both', axis='x', zorder=5, color='gray', linestyle=':', dashes=(1, 5))
ax2.set_axisbelow(True)
ax2.get_yaxis().set_visible(False)
ax2.text(Xstart2 + 3, Yend2 + 0.1, 'Distribuição de Medlhas através do anos (Verão)', fontsize=15, fontweight='bold', fontfamily='serif', color='#323232')


plt.legend(loc='upper left', bbox_to_anchor=(1, 1), title='Medal Type')
 895:
mulheres_verao = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Summer")]
mulheres_verao = mulheres_verao.groupby(['Year', 'Medal'])['Medal'].count().unstack().reset_index()
mulheres_verao['Total'] = mulheres_verao['Gold'] + mulheres_verao['Silver'] + mulheres_verao['Bronze']
mulheres_verao = mulheres_verao.groupby('Year')[['Bronze', 'Silver', 'Gold']].sum()
mulheres_verao = mulheres_verao.divide(mulheres_verao.sum(axis=1), axis=0)

mulhes_inverno = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Winter")]
mulhes_inverno = mulhes_inverno.groupby(['Year', 'Medal'])['Medal'].count().unstack().reset_index()
mulhes_inverno['Total'] = mulhes_inverno['Gold'] + mulhes_inverno['Silver'] + mulhes_inverno['Bronze']
mulhes_inverno = mulhes_inverno.groupby('Year')[['Bronze', 'Silver', 'Gold']].sum()
mulhes_inverno = mulhes_inverno.divide(mulhes_inverno.sum(axis=1), axis=0)

fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(15, 9), facecolor=cor_fundo_padrao)

medals_list = ['Bronze', 'Silver', 'Gold']

for i, medal in enumerate(medals_list):
    ax1.bar(mulheres_verao.index, mulheres_verao[medal], color=cor_medalhas_array[i],
        label=medal, width=2, edgecolor='gray',
        bottom=mulheres_verao[medals_list[:i]].sum(axis=1) if i > 0 else None
    )

    ax2.bar(mulhes_inverno.index, mulhes_inverno[medal], color=cor_medalhas_array[i],
        label=medal, width=2, edgecolor='gray',
        bottom=mulhes_inverno[medals_list[:i]].sum(axis=1) if i > 0 else None
    )


ax1.set_facecolor(cor_fundo_padrao)
ax2.set_facecolor(cor_fundo_padrao)

for s in ['top', 'right']:
    ax1.spines[s].set_visible(False)
    ax2.spines[s].set_visible(False)

Xstart1, Xend1 = ax1.get_xlim()
Ystart1, Yend1 = ax1.get_ylim()

Xstart2, Xend2 = ax2.get_xlim()
Ystart2, Yend2 = ax2.get_ylim()

ax1.set_xlim(Xstart1, Xend1)
ax1.set_ylim(Ystart1, Yend1+0.1)
ax1.grid(which='both', axis='x', zorder=5, color='gray', linestyle=':', dashes=(1, 5))
ax1.set_axisbelow(True)
ax1.get_yaxis().set_visible(False)
ax1.text(Xstart1 + 3, Yend1 + 0.13, 'Distribuição de Medlhas através do anos (Verão)', fontsize=15, fontweight='bold', fontfamily='serif', color='#323232')

plt.title( 'Distribuição de Medlhas através do anos', fontsize=15, fontweight='bold', fontfamily='serif', color='#323232', loc='center', y=0)

ax2.set_xlim(Xstart2, Xend2)
ax2.set_ylim(Ystart2, Yend2+0.1)
ax2.grid(which='both', axis='x', zorder=5, color='gray', linestyle=':', dashes=(1, 5))
ax2.set_axisbelow(True)
ax2.get_yaxis().set_visible(False)
ax2.text(Xstart2 + 3, Yend2 + 0.1, 'Distribuição de Medlhas através do anos (Verão)', fontsize=15, fontweight='bold', fontfamily='serif', color='#323232')


plt.legend(loc='upper left', bbox_to_anchor=(1, 1), title='Medal Type')
 896:
mulheres_verao = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Summer")]
mulheres_verao = mulheres_verao.groupby(['Year', 'Medal'])['Medal'].count().unstack().reset_index()
mulheres_verao['Total'] = mulheres_verao['Gold'] + mulheres_verao['Silver'] + mulheres_verao['Bronze']
mulheres_verao = mulheres_verao.groupby('Year')[['Bronze', 'Silver', 'Gold']].sum()
mulheres_verao = mulheres_verao.divide(mulheres_verao.sum(axis=1), axis=0)

mulhes_inverno = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Winter")]
mulhes_inverno = mulhes_inverno.groupby(['Year', 'Medal'])['Medal'].count().unstack().reset_index()
mulhes_inverno['Total'] = mulhes_inverno['Gold'] + mulhes_inverno['Silver'] + mulhes_inverno['Bronze']
mulhes_inverno = mulhes_inverno.groupby('Year')[['Bronze', 'Silver', 'Gold']].sum()
mulhes_inverno = mulhes_inverno.divide(mulhes_inverno.sum(axis=1), axis=0)

fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(15, 9), facecolor=cor_fundo_padrao)

medals_list = ['Bronze', 'Silver', 'Gold']

for i, medal in enumerate(medals_list):
    ax1.bar(mulheres_verao.index, mulheres_verao[medal], color=cor_medalhas_array[i],
        label=medal, width=2, edgecolor='gray',
        bottom=mulheres_verao[medals_list[:i]].sum(axis=1) if i > 0 else None
    )

    ax2.bar(mulhes_inverno.index, mulhes_inverno[medal], color=cor_medalhas_array[i],
        label=medal, width=2, edgecolor='gray',
        bottom=mulhes_inverno[medals_list[:i]].sum(axis=1) if i > 0 else None
    )


ax1.set_facecolor(cor_fundo_padrao)
ax2.set_facecolor(cor_fundo_padrao)

for s in ['top', 'right']:
    ax1.spines[s].set_visible(False)
    ax2.spines[s].set_visible(False)

Xstart1, Xend1 = ax1.get_xlim()
Ystart1, Yend1 = ax1.get_ylim()

Xstart2, Xend2 = ax2.get_xlim()
Ystart2, Yend2 = ax2.get_ylim()

ax1.set_xlim(Xstart1, Xend1)
ax1.set_ylim(Ystart1, Yend1+0.1)
ax1.grid(which='both', axis='x', zorder=5, color='gray', linestyle=':', dashes=(1, 5))
ax1.set_axisbelow(True)
ax1.get_yaxis().set_visible(False)
ax1.text(Xstart1 + 3, Yend1 + 0.13, 'Distribuição de Medlhas através do anos (Verão)', fontsize=15, fontweight='bold', fontfamily='serif', color='#323232')

plt.title( 'Distribuição de Medlhas através do anos', fontsize=15, fontweight='bold', fontfamily='serif', color='#323232', loc='center', y=1)

ax2.set_xlim(Xstart2, Xend2)
ax2.set_ylim(Ystart2, Yend2+0.1)
ax2.grid(which='both', axis='x', zorder=5, color='gray', linestyle=':', dashes=(1, 5))
ax2.set_axisbelow(True)
ax2.get_yaxis().set_visible(False)
ax2.text(Xstart2 + 3, Yend2 + 0.1, 'Distribuição de Medlhas através do anos (Verão)', fontsize=15, fontweight='bold', fontfamily='serif', color='#323232')


plt.legend(loc='upper left', bbox_to_anchor=(1, 1), title='Medal Type')
 897:
mulheres_verao = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Summer")]
mulheres_verao = mulheres_verao.groupby(['Year', 'Medal'])['Medal'].count().unstack().reset_index()
mulheres_verao['Total'] = mulheres_verao['Gold'] + mulheres_verao['Silver'] + mulheres_verao['Bronze']
mulheres_verao = mulheres_verao.groupby('Year')[['Bronze', 'Silver', 'Gold']].sum()
mulheres_verao = mulheres_verao.divide(mulheres_verao.sum(axis=1), axis=0)

mulhes_inverno = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Winter")]
mulhes_inverno = mulhes_inverno.groupby(['Year', 'Medal'])['Medal'].count().unstack().reset_index()
mulhes_inverno['Total'] = mulhes_inverno['Gold'] + mulhes_inverno['Silver'] + mulhes_inverno['Bronze']
mulhes_inverno = mulhes_inverno.groupby('Year')[['Bronze', 'Silver', 'Gold']].sum()
mulhes_inverno = mulhes_inverno.divide(mulhes_inverno.sum(axis=1), axis=0)

fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(15, 9), facecolor=cor_fundo_padrao)

medals_list = ['Bronze', 'Silver', 'Gold']

for i, medal in enumerate(medals_list):
    ax1.bar(mulheres_verao.index, mulheres_verao[medal], color=cor_medalhas_array[i],
        label=medal, width=2, edgecolor='gray',
        bottom=mulheres_verao[medals_list[:i]].sum(axis=1) if i > 0 else None
    )

    ax2.bar(mulhes_inverno.index, mulhes_inverno[medal], color=cor_medalhas_array[i],
        label=medal, width=2, edgecolor='gray',
        bottom=mulhes_inverno[medals_list[:i]].sum(axis=1) if i > 0 else None
    )


ax1.set_facecolor(cor_fundo_padrao)
ax2.set_facecolor(cor_fundo_padrao)

for s in ['top', 'right']:
    ax1.spines[s].set_visible(False)
    ax2.spines[s].set_visible(False)

Xstart1, Xend1 = ax1.get_xlim()
Ystart1, Yend1 = ax1.get_ylim()

Xstart2, Xend2 = ax2.get_xlim()
Ystart2, Yend2 = ax2.get_ylim()

ax1.set_xlim(Xstart1, Xend1)
ax1.set_ylim(Ystart1, Yend1+0.1)
ax1.grid(which='both', axis='x', zorder=5, color='gray', linestyle=':', dashes=(1, 5))
ax1.set_axisbelow(True)
ax1.get_yaxis().set_visible(False)
ax1.text(Xstart1 + 3, Yend1 + 0.13, 'Distribuição de Medlhas através do anos (Verão)', fontsize=15, fontweight='bold', fontfamily='serif', color='#323232')

plt.title( 'Distribuição de Medlhas através do anos', fontsize=15, fontweight='bold', fontfamily='serif', color='#323232', loc='center', y=2)

ax2.set_xlim(Xstart2, Xend2)
ax2.set_ylim(Ystart2, Yend2+0.1)
ax2.grid(which='both', axis='x', zorder=5, color='gray', linestyle=':', dashes=(1, 5))
ax2.set_axisbelow(True)
ax2.get_yaxis().set_visible(False)
ax2.text(Xstart2 + 3, Yend2 + 0.1, 'Distribuição de Medlhas através do anos (Verão)', fontsize=15, fontweight='bold', fontfamily='serif', color='#323232')


plt.legend(loc='upper left', bbox_to_anchor=(1, 1), title='Medal Type')
 898:
mulheres_verao = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Summer")]
mulheres_verao = mulheres_verao.groupby(['Year', 'Medal'])['Medal'].count().unstack().reset_index()
mulheres_verao['Total'] = mulheres_verao['Gold'] + mulheres_verao['Silver'] + mulheres_verao['Bronze']
mulheres_verao = mulheres_verao.groupby('Year')[['Bronze', 'Silver', 'Gold']].sum()
mulheres_verao = mulheres_verao.divide(mulheres_verao.sum(axis=1), axis=0)

mulhes_inverno = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Winter")]
mulhes_inverno = mulhes_inverno.groupby(['Year', 'Medal'])['Medal'].count().unstack().reset_index()
mulhes_inverno['Total'] = mulhes_inverno['Gold'] + mulhes_inverno['Silver'] + mulhes_inverno['Bronze']
mulhes_inverno = mulhes_inverno.groupby('Year')[['Bronze', 'Silver', 'Gold']].sum()
mulhes_inverno = mulhes_inverno.divide(mulhes_inverno.sum(axis=1), axis=0)

fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(15, 9), facecolor=cor_fundo_padrao)

medals_list = ['Bronze', 'Silver', 'Gold']

for i, medal in enumerate(medals_list):
    ax1.bar(mulheres_verao.index, mulheres_verao[medal], color=cor_medalhas_array[i],
        label=medal, width=2, edgecolor='gray',
        bottom=mulheres_verao[medals_list[:i]].sum(axis=1) if i > 0 else None
    )

    ax2.bar(mulhes_inverno.index, mulhes_inverno[medal], color=cor_medalhas_array[i],
        label=medal, width=2, edgecolor='gray',
        bottom=mulhes_inverno[medals_list[:i]].sum(axis=1) if i > 0 else None
    )


ax1.set_facecolor(cor_fundo_padrao)
ax2.set_facecolor(cor_fundo_padrao)

for s in ['top', 'right']:
    ax1.spines[s].set_visible(False)
    ax2.spines[s].set_visible(False)

Xstart1, Xend1 = ax1.get_xlim()
Ystart1, Yend1 = ax1.get_ylim()

Xstart2, Xend2 = ax2.get_xlim()
Ystart2, Yend2 = ax2.get_ylim()

ax1.set_xlim(Xstart1, Xend1)
ax1.set_ylim(Ystart1, Yend1+0.1)
ax1.grid(which='both', axis='x', zorder=5, color='gray', linestyle=':', dashes=(1, 5))
ax1.set_axisbelow(True)
ax1.get_yaxis().set_visible(False)
ax1.text(Xstart1 + 3, Yend1 + 0.13, 'Distribuição de Medlhas através do anos (Verão)', fontsize=15, fontweight='bold', fontfamily='serif', color='#323232')

plt.title( 'Distribuição de Medlhas através do anos', fontsize=15, fontweight='bold', fontfamily='serif', color='#323232', loc='center', y=2.5)

ax2.set_xlim(Xstart2, Xend2)
ax2.set_ylim(Ystart2, Yend2+0.1)
ax2.grid(which='both', axis='x', zorder=5, color='gray', linestyle=':', dashes=(1, 5))
ax2.set_axisbelow(True)
ax2.get_yaxis().set_visible(False)
ax2.text(Xstart2 + 3, Yend2 + 0.1, 'Distribuição de Medlhas através do anos (Verão)', fontsize=15, fontweight='bold', fontfamily='serif', color='#323232')


plt.legend(loc='upper left', bbox_to_anchor=(1, 1), title='Medal Type')
 899:
mulheres_verao = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Summer")]
mulheres_verao = mulheres_verao.groupby(['Year', 'Medal'])['Medal'].count().unstack().reset_index()
mulheres_verao['Total'] = mulheres_verao['Gold'] + mulheres_verao['Silver'] + mulheres_verao['Bronze']
mulheres_verao = mulheres_verao.groupby('Year')[['Bronze', 'Silver', 'Gold']].sum()
mulheres_verao = mulheres_verao.divide(mulheres_verao.sum(axis=1), axis=0)

mulhes_inverno = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Winter")]
mulhes_inverno = mulhes_inverno.groupby(['Year', 'Medal'])['Medal'].count().unstack().reset_index()
mulhes_inverno['Total'] = mulhes_inverno['Gold'] + mulhes_inverno['Silver'] + mulhes_inverno['Bronze']
mulhes_inverno = mulhes_inverno.groupby('Year')[['Bronze', 'Silver', 'Gold']].sum()
mulhes_inverno = mulhes_inverno.divide(mulhes_inverno.sum(axis=1), axis=0)

fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(15, 9), facecolor=cor_fundo_padrao)

medals_list = ['Bronze', 'Silver', 'Gold']

for i, medal in enumerate(medals_list):
    ax1.bar(mulheres_verao.index, mulheres_verao[medal], color=cor_medalhas_array[i],
        label=medal, width=2, edgecolor='gray',
        bottom=mulheres_verao[medals_list[:i]].sum(axis=1) if i > 0 else None
    )

    ax2.bar(mulhes_inverno.index, mulhes_inverno[medal], color=cor_medalhas_array[i],
        label=medal, width=2, edgecolor='gray',
        bottom=mulhes_inverno[medals_list[:i]].sum(axis=1) if i > 0 else None
    )


ax1.set_facecolor(cor_fundo_padrao)
ax2.set_facecolor(cor_fundo_padrao)

for s in ['top', 'right']:
    ax1.spines[s].set_visible(False)
    ax2.spines[s].set_visible(False)

Xstart1, Xend1 = ax1.get_xlim()
Ystart1, Yend1 = ax1.get_ylim()

Xstart2, Xend2 = ax2.get_xlim()
Ystart2, Yend2 = ax2.get_ylim()

ax1.set_xlim(Xstart1, Xend1)
ax1.set_ylim(Ystart1, Yend1+0.1)
ax1.grid(which='both', axis='x', zorder=5, color='gray', linestyle=':', dashes=(1, 5))
ax1.set_axisbelow(True)
ax1.get_yaxis().set_visible(False)
ax1.text(Xstart1 + 3, Yend1 + 0.13, 'Verão', fontsize=15, fontweight='bold', fontfamily='serif', color='#323232')

plt.title( 'Distribuição de Medlhas através do anos', fontsize=15, fontweight='bold', fontfamily='serif', color='#323232', loc='center', y=2.5)

ax2.set_xlim(Xstart2, Xend2)
ax2.set_ylim(Ystart2, Yend2+0.1)
ax2.grid(which='both', axis='x', zorder=5, color='gray', linestyle=':', dashes=(1, 5))
ax2.set_axisbelow(True)
ax2.get_yaxis().set_visible(False)
ax2.text(Xstart2 + 3, Yend2 + 0.1, 'Inverno', fontsize=15, fontweight='bold', fontfamily='serif', color='#323232')


plt.legend(loc='upper left', bbox_to_anchor=(1, 1), title='Medal Type')
 900:
mulheres_verao = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Summer")]
mulheres_verao = mulheres_verao.groupby(['Year', 'Medal'])['Medal'].count().unstack().reset_index()
mulheres_verao['Total'] = mulheres_verao['Gold'] + mulheres_verao['Silver'] + mulheres_verao['Bronze']
mulheres_verao = mulheres_verao.groupby('Year')[['Bronze', 'Silver', 'Gold']].sum()
mulheres_verao = mulheres_verao.divide(mulheres_verao.sum(axis=1), axis=0)

mulhes_inverno = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Winter")]
mulhes_inverno = mulhes_inverno.groupby(['Year', 'Medal'])['Medal'].count().unstack().reset_index()
mulhes_inverno['Total'] = mulhes_inverno['Gold'] + mulhes_inverno['Silver'] + mulhes_inverno['Bronze']
mulhes_inverno = mulhes_inverno.groupby('Year')[['Bronze', 'Silver', 'Gold']].sum()
mulhes_inverno = mulhes_inverno.divide(mulhes_inverno.sum(axis=1), axis=0)

fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(15, 9), facecolor=cor_fundo_padrao)

medals_list = ['Bronze', 'Silver', 'Gold']

for i, medal in enumerate(medals_list):
    ax1.bar(mulheres_verao.index, mulheres_verao[medal], color=cor_medalhas_array[i],
        label=medal, width=2, edgecolor='gray',
        bottom=mulheres_verao[medals_list[:i]].sum(axis=1) if i > 0 else None
    )

    ax2.bar(mulhes_inverno.index, mulhes_inverno[medal], color=cor_medalhas_array[i],
        label=medal, width=2, edgecolor='gray',
        bottom=mulhes_inverno[medals_list[:i]].sum(axis=1) if i > 0 else None
    )


ax1.set_facecolor(cor_fundo_padrao)
ax2.set_facecolor(cor_fundo_padrao)

for s in ['top', 'right']:
    ax1.spines[s].set_visible(False)
    ax2.spines[s].set_visible(False)

Xstart1, Xend1 = ax1.get_xlim()
Ystart1, Yend1 = ax1.get_ylim()

Xstart2, Xend2 = ax2.get_xlim()
Ystart2, Yend2 = ax2.get_ylim()

ax1.set_xlim(Xstart1, Xend1)
ax1.set_ylim(Ystart1, Yend1+0.1)
ax1.grid(which='both', axis='x', zorder=5, color='gray', linestyle=':', dashes=(1, 5))
ax1.set_axisbelow(True)
ax1.get_yaxis().set_visible(False)
ax1.text(Xstart1 + 3, Yend1, 'Verão', fontsize=15, fontweight='bold', fontfamily='serif', color='#323232')

plt.title( 'Distribuição de Medlhas através do anos', fontsize=15, fontweight='bold', fontfamily='serif', color='#323232', loc='center', y=2.5)

ax2.set_xlim(Xstart2, Xend2)
ax2.set_ylim(Ystart2, Yend2+0.1)
ax2.grid(which='both', axis='x', zorder=5, color='gray', linestyle=':', dashes=(1, 5))
ax2.set_axisbelow(True)
ax2.get_yaxis().set_visible(False)
ax2.text(Xstart2 + 3, Yend2 + 0.1, 'Inverno', fontsize=15, fontweight='bold', fontfamily='serif', color='#323232')


plt.legend(loc='upper left', bbox_to_anchor=(1, 1), title='Medal Type')
 901:
mulheres_verao = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Summer")]
mulheres_verao = mulheres_verao.groupby(['Year', 'Medal'])['Medal'].count().unstack().reset_index()
mulheres_verao['Total'] = mulheres_verao['Gold'] + mulheres_verao['Silver'] + mulheres_verao['Bronze']
mulheres_verao = mulheres_verao.groupby('Year')[['Bronze', 'Silver', 'Gold']].sum()
mulheres_verao = mulheres_verao.divide(mulheres_verao.sum(axis=1), axis=0)

mulhes_inverno = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Winter")]
mulhes_inverno = mulhes_inverno.groupby(['Year', 'Medal'])['Medal'].count().unstack().reset_index()
mulhes_inverno['Total'] = mulhes_inverno['Gold'] + mulhes_inverno['Silver'] + mulhes_inverno['Bronze']
mulhes_inverno = mulhes_inverno.groupby('Year')[['Bronze', 'Silver', 'Gold']].sum()
mulhes_inverno = mulhes_inverno.divide(mulhes_inverno.sum(axis=1), axis=0)

fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(15, 9), facecolor=cor_fundo_padrao)

medals_list = ['Bronze', 'Silver', 'Gold']

for i, medal in enumerate(medals_list):
    ax1.bar(mulheres_verao.index, mulheres_verao[medal], color=cor_medalhas_array[i],
        label=medal, width=2, edgecolor='gray',
        bottom=mulheres_verao[medals_list[:i]].sum(axis=1) if i > 0 else None
    )

    ax2.bar(mulhes_inverno.index, mulhes_inverno[medal], color=cor_medalhas_array[i],
        label=medal, width=2, edgecolor='gray',
        bottom=mulhes_inverno[medals_list[:i]].sum(axis=1) if i > 0 else None
    )


ax1.set_facecolor(cor_fundo_padrao)
ax2.set_facecolor(cor_fundo_padrao)

for s in ['top', 'right']:
    ax1.spines[s].set_visible(False)
    ax2.spines[s].set_visible(False)

Xstart1, Xend1 = ax1.get_xlim()
Ystart1, Yend1 = ax1.get_ylim()

Xstart2, Xend2 = ax2.get_xlim()
Ystart2, Yend2 = ax2.get_ylim()

ax1.set_xlim(Xstart1, Xend1)
ax1.set_ylim(Ystart1, Yend1+0.1)
ax1.grid(which='both', axis='x', zorder=5, color='gray', linestyle=':', dashes=(1, 5))
ax1.set_axisbelow(True)
ax1.get_yaxis().set_visible(False)
ax1.text(Xstart1 + 3, Yend1 + 0.2, 'Verão', fontsize=15, fontweight='bold', fontfamily='serif', color='#323232')

plt.title( 'Distribuição de Medlhas através do anos', fontsize=15, fontweight='bold', fontfamily='serif', color='#323232', loc='center', y=2.5)

ax2.set_xlim(Xstart2, Xend2)
ax2.set_ylim(Ystart2, Yend2+0.1)
ax2.grid(which='both', axis='x', zorder=5, color='gray', linestyle=':', dashes=(1, 5))
ax2.set_axisbelow(True)
ax2.get_yaxis().set_visible(False)
ax2.text(Xstart2 + 3, Yend2 + 0.1, 'Inverno', fontsize=15, fontweight='bold', fontfamily='serif', color='#323232')


plt.legend(loc='upper left', bbox_to_anchor=(1, 1), title='Medal Type')
 902:
mulheres_verao = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Summer")]
mulheres_verao = mulheres_verao.groupby(['Year', 'Medal'])['Medal'].count().unstack().reset_index()
mulheres_verao['Total'] = mulheres_verao['Gold'] + mulheres_verao['Silver'] + mulheres_verao['Bronze']
mulheres_verao = mulheres_verao.groupby('Year')[['Bronze', 'Silver', 'Gold']].sum()
mulheres_verao = mulheres_verao.divide(mulheres_verao.sum(axis=1), axis=0)

mulhes_inverno = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Winter")]
mulhes_inverno = mulhes_inverno.groupby(['Year', 'Medal'])['Medal'].count().unstack().reset_index()
mulhes_inverno['Total'] = mulhes_inverno['Gold'] + mulhes_inverno['Silver'] + mulhes_inverno['Bronze']
mulhes_inverno = mulhes_inverno.groupby('Year')[['Bronze', 'Silver', 'Gold']].sum()
mulhes_inverno = mulhes_inverno.divide(mulhes_inverno.sum(axis=1), axis=0)

fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(15, 9), facecolor=cor_fundo_padrao)

medals_list = ['Bronze', 'Silver', 'Gold']

for i, medal in enumerate(medals_list):
    ax1.bar(mulheres_verao.index, mulheres_verao[medal], color=cor_medalhas_array[i],
        label=medal, width=2, edgecolor='gray',
        bottom=mulheres_verao[medals_list[:i]].sum(axis=1) if i > 0 else None
    )

    ax2.bar(mulhes_inverno.index, mulhes_inverno[medal], color=cor_medalhas_array[i],
        label=medal, width=2, edgecolor='gray',
        bottom=mulhes_inverno[medals_list[:i]].sum(axis=1) if i > 0 else None
    )


ax1.set_facecolor(cor_fundo_padrao)
ax2.set_facecolor(cor_fundo_padrao)

for s in ['top', 'right']:
    ax1.spines[s].set_visible(False)
    ax2.spines[s].set_visible(False)

Xstart1, Xend1 = ax1.get_xlim()
Ystart1, Yend1 = ax1.get_ylim()

Xstart2, Xend2 = ax2.get_xlim()
Ystart2, Yend2 = ax2.get_ylim()

ax1.set_xlim(Xstart1, Xend1)
ax1.set_ylim(Ystart1, Yend1+0.1)
ax1.grid(which='both', axis='x', zorder=5, color='gray', linestyle=':', dashes=(1, 5))
ax1.set_axisbelow(True)
ax1.get_yaxis().set_visible(False)
ax1.text(Xstart1 + 3, Yend1 + 0.4, 'Verão', fontsize=15, fontweight='bold', fontfamily='serif', color='#323232')

plt.title( 'Distribuição de Medlhas através do anos', fontsize=15, fontweight='bold', fontfamily='serif', color='#323232', loc='center', y=2.5)

ax2.set_xlim(Xstart2, Xend2)
ax2.set_ylim(Ystart2, Yend2+0.1)
ax2.grid(which='both', axis='x', zorder=5, color='gray', linestyle=':', dashes=(1, 5))
ax2.set_axisbelow(True)
ax2.get_yaxis().set_visible(False)
ax2.text(Xstart2 + 3, Yend2 + 0.1, 'Inverno', fontsize=15, fontweight='bold', fontfamily='serif', color='#323232')


plt.legend(loc='upper left', bbox_to_anchor=(1, 1), title='Medal Type')
 903:
mulheres_verao = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Summer")]
mulheres_verao = mulheres_verao.groupby(['Year', 'Medal'])['Medal'].count().unstack().reset_index()
mulheres_verao['Total'] = mulheres_verao['Gold'] + mulheres_verao['Silver'] + mulheres_verao['Bronze']
mulheres_verao = mulheres_verao.groupby('Year')[['Bronze', 'Silver', 'Gold']].sum()
mulheres_verao = mulheres_verao.divide(mulheres_verao.sum(axis=1), axis=0)

mulhes_inverno = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Winter")]
mulhes_inverno = mulhes_inverno.groupby(['Year', 'Medal'])['Medal'].count().unstack().reset_index()
mulhes_inverno['Total'] = mulhes_inverno['Gold'] + mulhes_inverno['Silver'] + mulhes_inverno['Bronze']
mulhes_inverno = mulhes_inverno.groupby('Year')[['Bronze', 'Silver', 'Gold']].sum()
mulhes_inverno = mulhes_inverno.divide(mulhes_inverno.sum(axis=1), axis=0)

fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(15, 9), facecolor=cor_fundo_padrao)

medals_list = ['Bronze', 'Silver', 'Gold']

for i, medal in enumerate(medals_list):
    ax1.bar(mulheres_verao.index, mulheres_verao[medal], color=cor_medalhas_array[i],
        label=medal, width=2, edgecolor='gray',
        bottom=mulheres_verao[medals_list[:i]].sum(axis=1) if i > 0 else None
    )

    ax2.bar(mulhes_inverno.index, mulhes_inverno[medal], color=cor_medalhas_array[i],
        label=medal, width=2, edgecolor='gray',
        bottom=mulhes_inverno[medals_list[:i]].sum(axis=1) if i > 0 else None
    )


ax1.set_facecolor(cor_fundo_padrao)
ax2.set_facecolor(cor_fundo_padrao)

for s in ['top', 'right']:
    ax1.spines[s].set_visible(False)
    ax2.spines[s].set_visible(False)

Xstart1, Xend1 = ax1.get_xlim()
Ystart1, Yend1 = ax1.get_ylim()

Xstart2, Xend2 = ax2.get_xlim()
Ystart2, Yend2 = ax2.get_ylim()

ax1.set_xlim(Xstart1, Xend1)
ax1.set_ylim(Ystart1, Yend1+0.1)
ax1.grid(which='both', axis='x', zorder=5, color='gray', linestyle=':', dashes=(1, 5))
ax1.set_axisbelow(True)
ax1.get_yaxis().set_visible(False)
ax1.text(Xstart1 + 3, Yend1 + 0.3, 'Verão', fontsize=15, fontweight='bold', fontfamily='serif', color='#323232')

plt.title( 'Distribuição de Medlhas através do anos', fontsize=15, fontweight='bold', fontfamily='serif', color='#323232', loc='center', y=2.5)

ax2.set_xlim(Xstart2, Xend2)
ax2.set_ylim(Ystart2, Yend2+0.1)
ax2.grid(which='both', axis='x', zorder=5, color='gray', linestyle=':', dashes=(1, 5))
ax2.set_axisbelow(True)
ax2.get_yaxis().set_visible(False)
ax2.text(Xstart2 + 3, Yend2 + 0.1, 'Inverno', fontsize=15, fontweight='bold', fontfamily='serif', color='#323232')


plt.legend(loc='upper left', bbox_to_anchor=(1, 1), title='Medal Type')
 904:
mulheres_verao = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Summer")]
mulheres_verao = mulheres_verao.groupby(['Year', 'Medal'])['Medal'].count().unstack().reset_index()
mulheres_verao['Total'] = mulheres_verao['Gold'] + mulheres_verao['Silver'] + mulheres_verao['Bronze']
mulheres_verao = mulheres_verao.groupby('Year')[['Bronze', 'Silver', 'Gold']].sum()
mulheres_verao = mulheres_verao.divide(mulheres_verao.sum(axis=1), axis=0)

mulhes_inverno = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Winter")]
mulhes_inverno = mulhes_inverno.groupby(['Year', 'Medal'])['Medal'].count().unstack().reset_index()
mulhes_inverno['Total'] = mulhes_inverno['Gold'] + mulhes_inverno['Silver'] + mulhes_inverno['Bronze']
mulhes_inverno = mulhes_inverno.groupby('Year')[['Bronze', 'Silver', 'Gold']].sum()
mulhes_inverno = mulhes_inverno.divide(mulhes_inverno.sum(axis=1), axis=0)

fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(15, 9), facecolor=cor_fundo_padrao)

medals_list = ['Bronze', 'Silver', 'Gold']

for i, medal in enumerate(medals_list):
    ax1.bar(mulheres_verao.index, mulheres_verao[medal], color=cor_medalhas_array[i],
        label=medal, width=2, edgecolor='gray',
        bottom=mulheres_verao[medals_list[:i]].sum(axis=1) if i > 0 else None
    )

    ax2.bar(mulhes_inverno.index, mulhes_inverno[medal], color=cor_medalhas_array[i],
        label=medal, width=2, edgecolor='gray',
        bottom=mulhes_inverno[medals_list[:i]].sum(axis=1) if i > 0 else None
    )


ax1.set_facecolor(cor_fundo_padrao)
ax2.set_facecolor(cor_fundo_padrao)

for s in ['top', 'right']:
    ax1.spines[s].set_visible(False)
    ax2.spines[s].set_visible(False)

Xstart1, Xend1 = ax1.get_xlim()
Ystart1, Yend1 = ax1.get_ylim()

Xstart2, Xend2 = ax2.get_xlim()
Ystart2, Yend2 = ax2.get_ylim()

ax1.set_xlim(Xstart1, Xend1)
ax1.set_ylim(Ystart1, Yend1+0.1)
ax1.grid(which='both', axis='x', zorder=5, color='gray', linestyle=':', dashes=(1, 5))
ax1.set_axisbelow(True)
ax1.get_yaxis().set_visible(False)
ax1.text(Xstart1 + 3, Yend1 + 0.3, 'Verão', fontsize=15, fontweight='bold', fontfamily='serif', color='#323232')

plt.title( 'Distribuição de Medlhas através do anos', fontsize=15, fontweight='bold', fontfamily='serif', color='#323232', loc='center', y=2.5)

ax2.set_xlim(Xstart2, Xend2)
ax2.set_ylim(Ystart2, Yend2+0.1)
ax2.grid(which='both', axis='x', zorder=5, color='gray', linestyle=':', dashes=(1, 5))
ax2.set_axisbelow(True)
ax2.get_yaxis().set_visible(False)
ax2.text(Xstart2 + 3, Yend2 + 0.1, 'Inverno', fontsize=15, fontweight='bold', fontfamily='serif', color='#323232')


plt.legend(loc='upper left', bbox_to_anchor=(1, 2), title='Medalha')
 905:
mulheres_verao = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Summer")]
mulheres_verao = mulheres_verao.groupby(['Year', 'Medal'])['Medal'].count().unstack().reset_index()
mulheres_verao['Total'] = mulheres_verao['Gold'] + mulheres_verao['Silver'] + mulheres_verao['Bronze']
mulheres_verao = mulheres_verao.groupby('Year')[['Bronze', 'Silver', 'Gold']].sum()
mulheres_verao = mulheres_verao.divide(mulheres_verao.sum(axis=1), axis=0)

mulhes_inverno = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Winter")]
mulhes_inverno = mulhes_inverno.groupby(['Year', 'Medal'])['Medal'].count().unstack().reset_index()
mulhes_inverno['Total'] = mulhes_inverno['Gold'] + mulhes_inverno['Silver'] + mulhes_inverno['Bronze']
mulhes_inverno = mulhes_inverno.groupby('Year')[['Bronze', 'Silver', 'Gold']].sum()
mulhes_inverno = mulhes_inverno.divide(mulhes_inverno.sum(axis=1), axis=0)

fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(15, 9), facecolor=cor_fundo_padrao)

medals_list = ['Bronze', 'Silver', 'Gold']

for i, medal in enumerate(medals_list):
    ax1.bar(mulheres_verao.index, mulheres_verao[medal], color=cor_medalhas_array[i],
        label=medal, width=2, edgecolor='gray',
        bottom=mulheres_verao[medals_list[:i]].sum(axis=1) if i > 0 else None
    )

    ax2.bar(mulhes_inverno.index, mulhes_inverno[medal], color=cor_medalhas_array[i],
        label=medal, width=2, edgecolor='gray',
        bottom=mulhes_inverno[medals_list[:i]].sum(axis=1) if i > 0 else None
    )


ax1.set_facecolor(cor_fundo_padrao)
ax2.set_facecolor(cor_fundo_padrao)

for s in ['top', 'right']:
    ax1.spines[s].set_visible(False)
    ax2.spines[s].set_visible(False)

Xstart1, Xend1 = ax1.get_xlim()
Ystart1, Yend1 = ax1.get_ylim()

Xstart2, Xend2 = ax2.get_xlim()
Ystart2, Yend2 = ax2.get_ylim()

ax1.set_xlim(Xstart1, Xend1)
ax1.set_ylim(Ystart1, Yend1+0.1)
ax1.grid(which='both', axis='x', zorder=5, color='gray', linestyle=':', dashes=(1, 5))
ax1.set_axisbelow(True)
ax1.get_yaxis().set_visible(False)
ax1.text(Xstart1 + 3, Yend1 + 0.3, 'Verão', fontsize=15, fontweight='bold', fontfamily='serif', color='#323232')

plt.title( 'Distribuição de Medlhas através do anos', fontsize=15, fontweight='bold', fontfamily='serif', color='#323232', loc='center', y=2.5)

ax2.set_xlim(Xstart2, Xend2)
ax2.set_ylim(Ystart2, Yend2+0.1)
ax2.grid(which='both', axis='x', zorder=5, color='gray', linestyle=':', dashes=(1, 5))
ax2.set_axisbelow(True)
ax2.get_yaxis().set_visible(False)
ax2.text(Xstart2 + 3, Yend2 + 0.1, 'Inverno', fontsize=15, fontweight='bold', fontfamily='serif', color='#323232')


plt.legend(loc='upper left', bbox_to_anchor=(1, 3), title='Medalha')
 906:
mulheres_verao = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Summer")]
mulheres_verao = mulheres_verao.groupby(['Year', 'Medal'])['Medal'].count().unstack().reset_index()
mulheres_verao['Total'] = mulheres_verao['Gold'] + mulheres_verao['Silver'] + mulheres_verao['Bronze']
mulheres_verao = mulheres_verao.groupby('Year')[['Bronze', 'Silver', 'Gold']].sum()
mulheres_verao = mulheres_verao.divide(mulheres_verao.sum(axis=1), axis=0)

mulhes_inverno = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Winter")]
mulhes_inverno = mulhes_inverno.groupby(['Year', 'Medal'])['Medal'].count().unstack().reset_index()
mulhes_inverno['Total'] = mulhes_inverno['Gold'] + mulhes_inverno['Silver'] + mulhes_inverno['Bronze']
mulhes_inverno = mulhes_inverno.groupby('Year')[['Bronze', 'Silver', 'Gold']].sum()
mulhes_inverno = mulhes_inverno.divide(mulhes_inverno.sum(axis=1), axis=0)

fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(15, 9), facecolor=cor_fundo_padrao)

medals_list = ['Bronze', 'Silver', 'Gold']

for i, medal in enumerate(medals_list):
    ax1.bar(mulheres_verao.index, mulheres_verao[medal], color=cor_medalhas_array[i],
        label=medal, width=2, edgecolor='gray',
        bottom=mulheres_verao[medals_list[:i]].sum(axis=1) if i > 0 else None
    )

    ax2.bar(mulhes_inverno.index, mulhes_inverno[medal], color=cor_medalhas_array[i],
        label=medal, width=2, edgecolor='gray',
        bottom=mulhes_inverno[medals_list[:i]].sum(axis=1) if i > 0 else None
    )


ax1.set_facecolor(cor_fundo_padrao)
ax2.set_facecolor(cor_fundo_padrao)

for s in ['top', 'right']:
    ax1.spines[s].set_visible(False)
    ax2.spines[s].set_visible(False)

Xstart1, Xend1 = ax1.get_xlim()
Ystart1, Yend1 = ax1.get_ylim()

Xstart2, Xend2 = ax2.get_xlim()
Ystart2, Yend2 = ax2.get_ylim()

ax1.set_xlim(Xstart1, Xend1)
ax1.set_ylim(Ystart1, Yend1+0.1)
ax1.grid(which='both', axis='x', zorder=5, color='gray', linestyle=':', dashes=(1, 5))
ax1.set_axisbelow(True)
ax1.get_yaxis().set_visible(False)
ax1.text(Xstart1 + 3, Yend1 + 0.3, 'Verão', fontsize=15, fontweight='bold', fontfamily='serif', color='#323232')

plt.title( 'Distribuição de Medlhas através do anos', fontsize=15, fontweight='bold', fontfamily='serif', color='#323232', loc='center', y=2.5)

ax2.set_xlim(Xstart2, Xend2)
ax2.set_ylim(Ystart2, Yend2+0.1)
ax2.grid(which='both', axis='x', zorder=5, color='gray', linestyle=':', dashes=(1, 5))
ax2.set_axisbelow(True)
ax2.get_yaxis().set_visible(False)
ax2.text(Xstart2 + 3, Yend2 + 0.1, 'Inverno', fontsize=15, fontweight='bold', fontfamily='serif', color='#323232')


plt.legend(loc='upper left', bbox_to_anchor=(1, 2), title='Medalha')
 907:
mulheres_verao = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Summer")]


palette = ['#E5E1BC' if age != max_age else cor_dourada for age in sorted(medalhas_ouro['Age'].unique())]

mulheres_verao
 908:
mulheres_verao = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Summer")]
cont_verao = mulheres.groupby(['Year'])['Medal'].value_counts()

palette = ['#E5E1BC' if age != max_age else cor_dourada for age in sorted(medalhas_ouro['Age'].unique())]

cont_verao
 909:
mulheres_verao = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Summer")]
cont_verao = mulheres_verao.groupby(['Year'])['Medal'].value_counts()

palette = ['#E5E1BC' if age != max_age else cor_dourada for age in sorted(medalhas_ouro['Age'].unique())]

cont_verao
 910:
mulheres_verao = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Summer")]
cont_verao = mulheres_verao.groupby(['Year'])['Medal'].value_counts().unstack()

palette = ['#E5E1BC' if age != max_age else cor_dourada for age in sorted(medalhas_ouro['Age'].unique())]

cont_verao
 911:
mulheres_verao = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Summer")]
cont_verao = mulheres_verao.groupby(['Year'])['Medal'].value_counts().unstack()

cont_verao['Total'] = cont_verao['Bronze'] + cont_verao['Silver'] + cont_verao['Bronze']

palette = ['#E5E1BC' if age != max_age else cor_dourada for age in sorted(medalhas_ouro['Age'].unique())]

cont_verao
 912:
mulheres_verao = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Summer")]
cont_verao = mulheres_verao.groupby(['Year'])['Medal'].value_counts().unstack()

cont_verao['Total'] = cont_verao['Bronze'] + cont_verao['Silver'] + cont_verao['Bronze']

cont_verao = cont_verao.sort_values(by='Total', ascending=False)

palette = ['#E5E1BC' if age != max_age else cor_dourada for age in sorted(medalhas_ouro['Age'].unique())]

cont_verao
 913:
mulheres_verao = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Summer")]
cont_verao = mulheres_verao.groupby(['Year'])['Medal'].value_counts().unstack()

cont_verao['Total'] = cont_verao['Bronze'] + cont_verao['Silver'] + cont_verao['Bronze']

cont_verao = cont_verao.sort_values(by='Total', ascending=False).reset_index()

palette = ['#E5E1BC' if age != max_age else cor_dourada for age in sorted(medalhas_ouro['Age'].unique())]

cont_verao
 914:
mulheres_verao = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Summer")]
cont_verao = mulheres_verao.groupby(['Year'])['Medal'].value_counts().unstack()

cont_verao['Total'] = cont_verao['Bronze'] + cont_verao['Silver'] + cont_verao['Bronze']

cont_verao = cont_verao.sort_values(by='Total', ascending=False).reset_index()

max_verao = cont_verao.idxmax(['Total'])

palette = ['#E5E1BC' if age != max_age else cor_dourada for age in sorted(medalhas_ouro['Age'].unique())]

cont_verao
 915:
mulheres_verao = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Summer")]
cont_verao = mulheres_verao.groupby(['Year'])['Medal'].value_counts().unstack()

cont_verao['Total'] = cont_verao['Bronze'] + cont_verao['Silver'] + cont_verao['Bronze']

cont_verao = cont_verao.sort_values(by='Total', ascending=False).reset_index()

max_verao = cont_verao.idxmax('Total')

palette = ['#E5E1BC' if age != max_age else cor_dourada for age in sorted(medalhas_ouro['Age'].unique())]

cont_verao
 916:
mulheres_verao = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Summer")]
cont_verao = mulheres_verao.groupby(['Year'])['Medal'].value_counts().unstack()

cont_verao['Total'] = cont_verao['Bronze'] + cont_verao['Silver'] + cont_verao['Bronze']

cont_verao = cont_verao.sort_values(by='Total', ascending=False).reset_index()

max_verao = cont_verao['Total'].idxmax()

palette = ['#E5E1BC' if age != max_age else cor_dourada for age in sorted(medalhas_ouro['Age'].unique())]

cont_verao
 917:
mulheres_verao = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Summer")]
cont_verao = mulheres_verao.groupby(['Year'])['Medal'].value_counts().unstack()

cont_verao['Total'] = cont_verao['Bronze'] + cont_verao['Silver'] + cont_verao['Bronze']

cont_verao = cont_verao.sort_values(by='Total', ascending=False).reset_index()

max_verao = cont_verao['Total'].idxmax()

palette = ['#E5E1BC' if age != max_age else cor_dourada for age in sorted(medalhas_ouro['Age'].unique())]

max_verao
 918:
mulheres_verao = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Summer")]
cont_verao = mulheres_verao.groupby(['Year'])['Medal'].value_counts().unstack()

cont_verao['Total'] = cont_verao['Bronze'] + cont_verao['Silver'] + cont_verao['Bronze']

cont_verao = cont_verao.sort_values(by='Total', ascending=False).reset_index()

max_verao = cont_verao['Total'].idxmin()

palette = ['#E5E1BC' if age != max_age else cor_dourada for age in sorted(medalhas_ouro['Age'].unique())]

max_verao
 919:
mulheres_verao = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Summer")]
cont_verao = mulheres_verao.groupby(['Year'])['Medal'].value_counts().unstack()

cont_verao['Total'] = cont_verao['Bronze'] + cont_verao['Silver'] + cont_verao['Bronze']

cont_verao = cont_verao.sort_values(by='Total', ascending=False).reset_index()

max_verao = cont_verao['Total'].idxmin()

palette = ['#E5E1BC' if age != max_age else cor_dourada for age in sorted(medalhas_ouro['Age'].unique())]

cont_verao
 920:
mulheres_verao = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Summer")]
cont_verao = mulheres_verao.groupby(['Year'])['Medal'].value_counts().unstack()

cont_verao['Total'] = cont_verao['Bronze'] + cont_verao['Silver'] + cont_verao['Bronze']

cont_verao = cont_verao.sort_values(by='Total', ascending=False).reset_index()

max_verao = max(cont_verao['Total'])

palette = ['#E5E1BC' if age != max_age else cor_dourada for age in sorted(medalhas_ouro['Age'].unique())]

cont_verao
 921:
mulheres_verao = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Summer")]
cont_verao = mulheres_verao.groupby(['Year'])['Medal'].value_counts().unstack()

cont_verao['Total'] = cont_verao['Bronze'] + cont_verao['Silver'] + cont_verao['Bronze']

cont_verao = cont_verao.sort_values(by='Total', ascending=False).reset_index()

max_verao = max(cont_verao['Total'])

palette = ['#E5E1BC' if age != max_age else cor_dourada for age in sorted(medalhas_ouro['Age'].unique())]

max_verao
 922:
mulheres_verao = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Summer")]
cont_verao = mulheres_verao.groupby(['Year'])['Medal'].value_counts().unstack()

cont_verao['Total'] = cont_verao['Bronze'] + cont_verao['Silver'] + cont_verao['Bronze']

cont_verao = cont_verao.sort_values(by='Total', ascending=False).reset_index()

max_verao = max(cont_verao['Total'])

palette = ['#E5E1BC' if age != max_age else cor_dourada for age in sorted(medalhas_ouro['Age'].unique())]

cont_verao
 923:
mulheres_verao = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Summer")]
cont_verao = mulheres_verao.groupby(['Year'])['Medal'].value_counts().unstack()

cont_verao['Total'] = cont_verao['Bronze'] + cont_verao['Silver'] + cont_verao['Bronze']

cont_verao = cont_verao.sort_values(by='Total', ascending=False).reset_index()

max_verao = max(cont_verao['Total'])

palette = ['#E5E1BC' if total != max_verao else cor_dourada for total in sorted(cont_verao['Total'].unique())]

palette
 924:
mulheres_verao = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Summer")]
cont_verao = mulheres_verao.groupby(['Year'])['Medal'].value_counts().unstack()

cont_verao['Total'] = cont_verao['Bronze'] + cont_verao['Silver'] + cont_verao['Bronze']

cont_verao = cont_verao.sort_values(by='Total', ascending=False).reset_index()

max_verao = max(cont_verao['Total'])

palette = ['#E5E1BC' if total != max_verao else cor_dourada for total in sorted(cont_verao['Total'].unique())]

cont_verao
 925:
mulheres_verao = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Summer")]

cont_verao = mulheres_verao.groupby(['Year'])['Medal'].value_counts().unstack()

cont_verao['Total'] = cont_verao['Bronze'] + cont_verao['Silver'] + cont_verao['Bronze']

cont_verao = cont_verao.sort_values(by='Total', ascending=False).reset_index()

max_verao = max(cont_verao['Total'])

palette = ['#E5E1BC' if total != max_verao else cor_dourada for total in sorted(cont_verao['Total'].unique())]

fig, (ax1, ax2) =  plt.figure(2, 1, figsize=(20, 10), facecolor=cor_fundo_gold)

cont_verao
 926:
mulheres_verao = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Summer")]

cont_verao = mulheres_verao.groupby(['Year'])['Medal'].value_counts().unstack()

cont_verao['Total'] = cont_verao['Bronze'] + cont_verao['Silver'] + cont_verao['Bronze']

cont_verao = cont_verao.sort_values(by='Total', ascending=False).reset_index()

max_verao = max(cont_verao['Total'])

palette = ['#E5E1BC' if total != max_verao else cor_dourada for total in sorted(cont_verao['Total'].unique())]

fig, (ax1, ax2) =  plt.subplot(2, 1, figsize=(20, 10), facecolor=cor_fundo_gold)

cont_verao
 927:
mulheres_verao = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Summer")]

cont_verao = mulheres_verao.groupby(['Year'])['Medal'].value_counts().unstack()

cont_verao['Total'] = cont_verao['Bronze'] + cont_verao['Silver'] + cont_verao['Bronze']

cont_verao = cont_verao.sort_values(by='Total', ascending=False).reset_index()

max_verao = max(cont_verao['Total'])

palette = ['#E5E1BC' if total != max_verao else cor_dourada for total in sorted(cont_verao['Total'].unique())]

fig, (ax1, ax2) =  plt.subplots(2, 1, figsize=(20, 10), facecolor=cor_fundo_gold)

cont_verao
 928:
mulheres_verao = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Summer")]

cont_verao = mulheres_verao.groupby(['Year'])['Medal'].value_counts().unstack()

cont_verao['Total'] = cont_verao['Bronze'] + cont_verao['Silver'] + cont_verao['Bronze']

cont_verao = cont_verao.sort_values(by='Total', ascending=False).reset_index()

max_verao = max(cont_verao['Total'])

palette = ['#E5E1BC' if total != max_verao else cor_dourada for total in sorted(cont_verao['Total'].unique())]

fig, (ax1, ax2) =  plt.subplots(2, 1, figsize=(20, 10), facecolor=cor_fundo_gold)

ax1.fill_between(cont_verao['Year'], cont_verao['Total'], color='#E5E1BC', alpha=0.7, edgecolor='k')


cont_verao
 929:
mulheres_verao = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Summer")]

cont_verao = mulheres_verao.groupby(['Year'])['Medal'].value_counts().unstack()

cont_verao['Total'] = cont_verao['Bronze'] + cont_verao['Silver'] + cont_verao['Bronze']

cont_verao = cont_verao.sort_values(by='Total', ascending=False).reset_index()

max_verao = max(cont_verao['Total'])

palette = ['#E5E1BC' if total != max_verao else cor_dourada for total in sorted(cont_verao['Total'].unique())]

fig, (ax1, ax2) =  plt.subplots(2, 1, figsize=(20, 10), facecolor=cor_fundo_gold)

ax1.fill_between(cont_verao['Year'], cont_verao['Total'], color='#E5E1BC', alpha=0.7, edgecolor='k')
 930:
mulheres_verao = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Summer")]

cont_verao = mulheres_verao.groupby(['Year'])['Medal'].value_counts().unstack()

cont_verao['Total'] = cont_verao['Bronze'] + cont_verao['Silver'] + cont_verao['Bronze']

cont_verao = cont_verao.sort_values(by='Total', ascending=False).reset_index()

max_verao = max(cont_verao['Total'])

palette = ['#E5E1BC' if total != max_verao else cor_dourada for total in sorted(cont_verao['Total'].unique())]

fig, (ax1, ax2) =  plt.subplots(2, 1, figsize=(20, 10), facecolor=cor_fundo_gold)

ax1.area(cont_verao['Year'], cont_verao['Total'], color='#E5E1BC', alpha=0.7)
 931:
mulheres_verao = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Summer")]

cont_verao = mulheres_verao.groupby(['Year'])['Medal'].value_counts().unstack()

cont_verao['Total'] = cont_verao['Bronze'] + cont_verao['Silver'] + cont_verao['Bronze']

cont_verao = cont_verao.sort_values(by='Total', ascending=False).reset_index()

max_verao = max(cont_verao['Total'])

palette = ['#E5E1BC' if total != max_verao else cor_dourada for total in sorted(cont_verao['Total'].unique())]

fig, (ax1, ax2) =  plt.subplots(2, 1, figsize=(20, 10), facecolor=cor_fundo_gold)

ax1.fill_between(cont_verao['Year'], cont_verao['Total'], color='#E5E1BC', alpha=0.7)
 932:
mulheres_verao = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Summer")]

cont_verao = mulheres_verao.groupby(['Year'])['Medal'].value_counts().unstack()

cont_verao['Total'] = cont_verao['Bronze'] + cont_verao['Silver'] + cont_verao['Bronze']

cont_verao = cont_verao.sort_values(by='Total', ascending=False).reset_index()

max_verao = max(cont_verao['Total'])

palette = ['#E5E1BC' if total != max_verao else cor_dourada for total in sorted(cont_verao['Total'].unique())]

fig, (ax1, ax2) =  plt.subplots(2, 1, figsize=(20, 15), facecolor=cor_fundo_gold)

ax1.fill_between(cont_verao['Year'], cont_verao['Total'], color='#E5E1BC', alpha=0.7)
 933:
mulheres_verao = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Summer")]

cont_verao = mulheres_verao.groupby(['Year'])['Medal'].value_counts().unstack()

cont_verao['Total'] = cont_verao['Bronze'] + cont_verao['Silver'] + cont_verao['Bronze']

cont_verao = cont_verao.sort_values(by='Total', ascending=False).reset_index()

max_verao = max(cont_verao['Total'])

palette = ['#E5E1BC' if total != max_verao else cor_dourada for total in sorted(cont_verao['Total'].unique())]

fig, (ax1, ax2) =  plt.subplots(2, 1, figsize=(20, 15), facecolor=cor_fundo_gold)

sns.lineplot(data=cont_verao, x='Year', y='Total', ax=ax, marker='o', color='#244747')
 934:
mulheres_verao = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Summer")]

cont_verao = mulheres_verao.groupby(['Year'])['Medal'].value_counts().unstack()

cont_verao['Total'] = cont_verao['Bronze'] + cont_verao['Silver'] + cont_verao['Bronze']

cont_verao = cont_verao.sort_values(by='Total', ascending=False).reset_index()

max_verao = max(cont_verao['Total'])

palette = ['#E5E1BC' if total != max_verao else cor_dourada for total in sorted(cont_verao['Total'].unique())]

fig, (ax1, ax2) =  plt.subplots(2, 1, figsize=(20, 15), facecolor=cor_fundo_gold)

sns.lineplot(data=cont_verao, x='Year', y='Total', ax=ax1, marker='o', color='#244747')
 935:
mulheres_verao = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Summer")]

cont_verao = mulheres_verao.groupby(['Year'])['Medal'].value_counts().unstack()

cont_verao['Total'] = cont_verao['Bronze'] + cont_verao['Silver'] + cont_verao['Bronze']

cont_verao = cont_verao.sort_values(by='Total', ascending=False).reset_index()

max_verao = max(cont_verao['Total'])

palette = ['#E5E1BC' if total != max_verao else cor_dourada for total in sorted(cont_verao['Total'].unique())]

fig, (ax1, ax2) =  plt.subplots(2, 1, figsize=(20, 15), facecolor=cor_fundo_gold)

sns.lineplot(data=cont_verao, x='Year', y='Total', ax=ax1, marker='o', palette=palette)
 936:
mulheres_verao = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Summer")]

cont_verao = mulheres_verao.groupby(['Year'])['Medal'].value_counts().unstack()

cont_verao['Total'] = cont_verao['Bronze'] + cont_verao['Silver'] + cont_verao['Bronze']

cont_verao = cont_verao.sort_values(by='Total', ascending=False).reset_index()

max_verao = max(cont_verao['Total'])

palette = ['#E5E1BC' if total != max_verao else cor_dourada for total in sorted(cont_verao['Total'].unique())]

fig, (ax1, ax2) =  plt.subplots(2, 1, figsize=(20, 15), facecolor=cor_fundo_gold)

sns.lineplot(data=cont_verao, x='Year', y='Total', ax=ax1, marker='o', palette=palette)
ax.fill_between(cont_verao['Year'], cont_verao['Total'], color='#244747', alpha=0.3)
 937:
mulheres_verao = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Summer")]

cont_verao = mulheres_verao.groupby(['Year'])['Medal'].value_counts().unstack()

cont_verao['Total'] = cont_verao['Bronze'] + cont_verao['Silver'] + cont_verao['Bronze']

cont_verao = cont_verao.sort_values(by='Total', ascending=False).reset_index()

max_verao = max(cont_verao['Total'])

palette = ['#E5E1BC' if total != max_verao else cor_dourada for total in sorted(cont_verao['Total'].unique())]

fig, (ax1, ax2) =  plt.subplots(2, 1, figsize=(20, 15), facecolor=cor_fundo_gold)

sns.lineplot(data=cont_verao, x='Year', y='Total', ax=ax1, marker='o', palette=palette)
ax1.fill_between(cont_verao['Year'], cont_verao['Total'], color='#244747', alpha=0.3)
 938:
mulheres_verao = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Summer")]

cont_verao = mulheres_verao.groupby(['Year'])['Medal'].value_counts().unstack()

cont_verao['Total'] = cont_verao['Bronze'] + cont_verao['Silver'] + cont_verao['Bronze']

cont_verao = cont_verao.sort_values(by='Total', ascending=False).reset_index()

max_verao = max(cont_verao['Total'])

palette = ['#E5E1BC' if total != max_verao else cor_dourada for total in sorted(cont_verao['Total'].unique())]

fig, (ax1, ax2) =  plt.subplots(2, 1, figsize=(20, 15), facecolor=cor_fundo_gold)

sns.lineplot(data=cont_verao, x='Year', y='Total', ax=ax1, marker='o', palette=palette)
 939:
mulheres_verao = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Summer")]

cont_verao = mulheres_verao.groupby(['Year'])['Medal'].value_counts().unstack()

cont_verao['Total'] = cont_verao['Bronze'] + cont_verao['Silver'] + cont_verao['Bronze']

cont_verao = cont_verao.sort_values(by='Total', ascending=False).reset_index()

max_verao = max(cont_verao['Total'])

palette = ['#E5E1BC' if total != max_verao else cor_dourada for total in sorted(cont_verao['Total'].unique())]

fig, (ax1, ax2) =  plt.subplots(2, 1, figsize=(20, 15), facecolor=cor_fundo_gold)

sns.lineplot(data=cont_verao, x='Year', y='Total', ax=ax1, marker='o', palette=palette)
ax1.plot(max_year, max_verao, 'o', markersize=15, color=cor_dourada, label=f'Máximo {max_verao}')
 940:
mulheres_verao = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Summer")]

cont_verao = mulheres_verao.groupby(['Year'])['Medal'].value_counts().unstack()

cont_verao['Total'] = cont_verao['Bronze'] + cont_verao['Silver'] + cont_verao['Bronze']

cont_verao = cont_verao.sort_values(by='Total', ascending=False).reset_index()

max_verao = max(cont_verao['Total'])
max_year = cont_verao.loc[cont_verao['Total'] == max_verao, 'Year'].values[0]

palette = ['#E5E1BC' if total != max_verao else cor_dourada for total in sorted(cont_verao['Total'].unique())]

fig, (ax1, ax2) =  plt.subplots(2, 1, figsize=(20, 15), facecolor=cor_fundo_gold)

sns.lineplot(data=cont_verao, x='Year', y='Total', ax=ax1, marker='o', palette=palette)
ax1.plot(max_year, max_verao, 'o', markersize=15, color=cor_dourada, label=f'Máximo {max_verao}')
 941:
mulheres_verao = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Summer")]

cont_verao = mulheres_verao.groupby(['Year'])['Medal'].value_counts().unstack()

cont_verao['Total'] = cont_verao['Bronze'] + cont_verao['Silver'] + cont_verao['Bronze']

cont_verao = cont_verao.sort_values(by='Total', ascending=False).reset_index()

max_verao = max(cont_verao['Total'])
max_year = cont_verao.loc[cont_verao['Total'] == max_verao, 'Year'].values[0]

palette = ['#E5E1BC' if total != max_verao else cor_dourada for total in sorted(cont_verao['Total'].unique())]

fig, (ax1, ax2) =  plt.subplots(2, 1, figsize=(20, 15), facecolor=cor_fundo_gold)

sns.lineplot(data=cont_verao, x='Year', y='Total', ax=ax1, marker='o', palette=palette)
ax1.plot(max_year, max_verao, 'o', markersize=15, color=cor_dourada, label=f'Máximo {max_verao}')
ax.annotate(f'{max_verao}', xy=(max_year, max_verao), xytext=(max_year, max_verao + 50),
             arrowprops=dict(facecolor='black', shrink=0.05), fontsize=12, ha='center', color='black')
 942:
mulheres_verao = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Summer")]

cont_verao = mulheres_verao.groupby(['Year'])['Medal'].value_counts().unstack()

cont_verao['Total'] = cont_verao['Bronze'] + cont_verao['Silver'] + cont_verao['Bronze']

cont_verao = cont_verao.sort_values(by='Total', ascending=False).reset_index()

max_verao = max(cont_verao['Total'])
max_year = cont_verao.loc[cont_verao['Total'] == max_verao, 'Year'].values[0]

palette = ['#E5E1BC' if total != max_verao else cor_dourada for total in sorted(cont_verao['Total'].unique())]

fig, (ax1, ax2) =  plt.subplots(2, 1, figsize=(20, 15), facecolor=cor_fundo_gold)

sns.lineplot(data=cont_verao, x='Year', y='Total', ax=ax1, marker='o', palette=palette)
ax1.plot(max_year, max_verao, 'o', markersize=15, color=cor_dourada, label=f'Máximo {max_verao}')
ax.annotate(f'{max_verao}', xy=(max_year, max_verao), xytext=(max_year, max_verao + 50),
             arrowprops=dict(facecolor='black', shrink=0.05), fontsize=12, ha='center', color='black')

plt.tight_layout()
 943:
mulheres_verao = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Summer")]

cont_verao = mulheres_verao.groupby(['Year'])['Medal'].value_counts().unstack()

cont_verao['Total'] = cont_verao['Bronze'] + cont_verao['Silver'] + cont_verao['Bronze']

cont_verao = cont_verao.sort_values(by='Total', ascending=False).reset_index()

max_verao = max(cont_verao['Total'])
max_year = cont_verao.loc[cont_verao['Total'] == max_verao, 'Year'].values[0]

palette = ['#E5E1BC' if total != max_verao else cor_dourada for total in sorted(cont_verao['Total'].unique())]

fig, (ax1, ax2) =  plt.subplots(2, 1, figsize=(20, 15), gridspec_kw={'height_ratios': [3, 1]}, facecolor=cor_fundo_gold)

sns.lineplot(data=cont_verao, x='Year', y='Total', ax=ax1, marker='o', palette=palette)
ax1.plot(max_year, max_verao, 'o', markersize=15, color=cor_dourada, label=f'Máximo {max_verao}')
ax.annotate(f'{max_verao}', xy=(max_year, max_verao), xytext=(max_year, max_verao + 50),
             arrowprops=dict(facecolor='black', shrink=0.05), fontsize=12, ha='center', color='black')

plt.tight_layout()
 944:
mulheres_verao = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Summer")]

cont_verao = mulheres_verao.groupby(['Year'])['Medal'].value_counts().unstack()

cont_verao['Total'] = cont_verao['Bronze'] + cont_verao['Silver'] + cont_verao['Bronze']

cont_verao = cont_verao.sort_values(by='Total', ascending=False).reset_index()

max_verao = max(cont_verao['Total'])
max_year = cont_verao.loc[cont_verao['Total'] == max_verao, 'Year'].values[0]

palette = ['#E5E1BC' if total != max_verao else cor_dourada for total in sorted(cont_verao['Total'].unique())]

fig, (ax1, ax2) =  plt.subplots(2, 1, figsize=(20, 15), gridspec_kw={'height_ratios': [1, 1]}, facecolor=cor_fundo_gold)

sns.lineplot(data=cont_verao, x='Year', y='Total', ax=ax1, marker='o', palette=palette)
ax1.plot(max_year, max_verao, 'o', markersize=15, color=cor_dourada, label=f'Máximo {max_verao}')
ax.annotate(f'{max_verao}', xy=(max_year, max_verao), xytext=(max_year, max_verao + 50),
             arrowprops=dict(facecolor='black', shrink=0.05), fontsize=12, ha='center', color='black')

plt.tight_layout()
 945:
mulheres_verao = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Summer")]

cont_verao = mulheres_verao.groupby(['Year'])['Medal'].value_counts().unstack()

cont_verao['Total'] = cont_verao['Bronze'] + cont_verao['Silver'] + cont_verao['Bronze']

cont_verao = cont_verao.sort_values(by='Total', ascending=False).reset_index()

max_verao = max(cont_verao['Total'])
max_year = cont_verao.loc[cont_verao['Total'] == max_verao, 'Year'].values[0]

palette = ['#E5E1BC' if total != max_verao else cor_dourada for total in sorted(cont_verao['Total'].unique())]

fig, (ax1, ax2) =  plt.subplots(2, 1, figsize=(20, 15), gridspec_kw={'height_ratios': [1, 1]}, facecolor=cor_fundo_gold)

sns.lineplot(data=cont_verao, x='Year', y='Total', ax=ax1, marker='o', palette=palette)
ax1.plot(max_year, max_verao, 'o', markersize=15, color=cor_dourada, label=f'Máximo {max_verao}')
ax1.annotate(f'{max_verao}', xy=(max_year, max_verao), xytext=(max_year, max_verao + 50),
             arrowprops=dict(facecolor='black', shrink=0.05), fontsize=12, ha='center', color='black')

plt.tight_layout()
 946:
mulheres_verao = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Summer")]

cont_verao = mulheres_verao.groupby(['Year'])['Medal'].value_counts().unstack()

cont_verao['Total'] = cont_verao['Bronze'] + cont_verao['Silver'] + cont_verao['Bronze']

cont_verao = cont_verao.sort_values(by='Total', ascending=False).reset_index()

max_verao = max(cont_verao['Total'])
max_year = cont_verao.loc[cont_verao['Total'] == max_verao, 'Year'].values[0]

palette = ['#E5E1BC' if total != max_verao else cor_dourada for total in sorted(cont_verao['Total'].unique())]

fig, (ax1, ax2) =  plt.subplots(2, 1, figsize=(20, 15), gridspec_kw={'height_ratios': [1, 1]}, facecolor=cor_fundo_gold)

sns.lineplot(data=cont_verao, x='Year', y='Total', ax=ax1, marker='o', palette=palette)
ax1.plot(max_year, max_verao, 'o', markersize=15, color=cor_dourada, label=f'Máximo {max_verao}')
ax1.annotate(f'{max_verao}', xy=(max_year, max_verao), xytext=(max_year, max_verao + 50),
            fontsize=12, ha='center', color='black')

plt.tight_layout()
 947:
mulheres_verao = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Summer")]

cont_verao = mulheres_verao.groupby(['Year'])['Medal'].value_counts().unstack()

cont_verao['Total'] = cont_verao['Bronze'] + cont_verao['Silver'] + cont_verao['Bronze']

cont_verao = cont_verao.sort_values(by='Total', ascending=False).reset_index()

max_verao = max(cont_verao['Total'])
max_year = cont_verao.loc[cont_verao['Total'] == max_verao, 'Year'].values[0]

palette = ['#E5E1BC' if total != max_verao else cor_dourada for total in sorted(cont_verao['Total'].unique())]

fig, (ax1, ax2) =  plt.subplots(2, 1, figsize=(20, 15), gridspec_kw={'height_ratios': [1, 1]}, facecolor=cor_fundo_gold)

sns.lineplot(data=cont_verao, x='Year', y='Total', ax=ax1, marker='o', palette=palette)
ax1.plot(max_year, max_verao, 'o', markersize=15, color=cor_dourada, label=f'Máximo {max_verao}')
ax1.annotate(f'{max_verao}', xy=(max_year, max_verao), xytext=(max_year, max_verao + 50),
            fontsize=12, ha='center', color='black')

ax1.set_ylim(0, max_verao + 100)

plt.tight_layout()
 948:
mulheres_verao = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Summer")]

cont_verao = mulheres_verao.groupby(['Year'])['Medal'].value_counts().unstack()

cont_verao['Total'] = cont_verao['Bronze'] + cont_verao['Silver'] + cont_verao['Bronze']

cont_verao = cont_verao.sort_values(by='Total', ascending=False).reset_index()

max_verao = max(cont_verao['Total'])
max_year = cont_verao.loc[cont_verao['Total'] == max_verao, 'Year'].values[0]

palette = ['#E5E1BC' if total != max_verao else cor_dourada for total in sorted(cont_verao['Total'].unique())]

fig, (ax1, ax2) =  plt.subplots(2, 1, figsize=(20, 15), gridspec_kw={'height_ratios': [1, 1]}, facecolor=cor_fundo_gold)

sns.lineplot(data=cont_verao, x='Year', y='Total', ax=ax1, marker='o', palette=palette)
ax1.plot(max_year, max_verao, 'o', markersize=15, color=cor_dourada, label=f'Máximo {max_verao}')
ax1.annotate(f'{max_verao}', xy=(max_year, max_verao), xytext=(max_year, max_verao + 50),
            fontsize=12, ha='center', color='black')

ax1.set_ylim(0, max_verao + 500)

plt.tight_layout()
 949:
mulheres_verao = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Summer")]

cont_verao = mulheres_verao.groupby(['Year'])['Medal'].value_counts().unstack()

cont_verao['Total'] = cont_verao['Bronze'] + cont_verao['Silver'] + cont_verao['Bronze']

cont_verao = cont_verao.sort_values(by='Total', ascending=False).reset_index()

max_verao = max(cont_verao['Total'])
max_year = cont_verao.loc[cont_verao['Total'] == max_verao, 'Year'].values[0]

palette = ['#E5E1BC' if total != max_verao else cor_dourada for total in sorted(cont_verao['Total'].unique())]

fig, (ax1, ax2) =  plt.subplots(2, 1, figsize=(20, 15), gridspec_kw={'height_ratios': [1, 1]}, facecolor=cor_fundo_gold)

sns.lineplot(data=cont_verao, x='Year', y='Total', ax=ax1, marker='o', palette=palette)
ax1.plot(max_year, max_verao, 'o', markersize=15, color=cor_dourada, label=f'Máximo {max_verao}')
ax1.annotate(f'{max_verao}', xy=(max_year, max_verao), xytext=(max_year, max_verao + 50),
            fontsize=12, ha='center', color='black')

ax1.set_ylim(0, max_verao + max_verao*1.2)

plt.tight_layout()
 950:
mulheres_verao = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Summer")]

cont_verao = mulheres_verao.groupby(['Year'])['Medal'].value_counts().unstack()

cont_verao['Total'] = cont_verao['Bronze'] + cont_verao['Silver'] + cont_verao['Bronze']

cont_verao = cont_verao.sort_values(by='Total', ascending=False).reset_index()

max_verao = max(cont_verao['Total'])
max_year = cont_verao.loc[cont_verao['Total'] == max_verao, 'Year'].values[0]

palette = ['#E5E1BC' if total != max_verao else cor_dourada for total in sorted(cont_verao['Total'].unique())]

fig, (ax1, ax2) =  plt.subplots(2, 1, figsize=(20, 15), gridspec_kw={'height_ratios': [1, 1]}, facecolor=cor_fundo_gold)

sns.lineplot(data=cont_verao, x='Year', y='Total', ax=ax1, marker='o', palette=palette)
ax1.plot(max_year, max_verao, 'o', markersize=15, color=cor_dourada, label=f'Máximo {max_verao}')
ax1.annotate(f'{max_verao}', xy=(max_year, max_verao), xytext=(max_year, max_verao + 50),
            fontsize=12, ha='center', color='black')

ax1.set_ylim(0, max_verao + max_verao*1.1)

plt.tight_layout()
 951:
mulheres_verao = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Summer")]

cont_verao = mulheres_verao.groupby(['Year'])['Medal'].value_counts().unstack()

cont_verao['Total'] = cont_verao['Bronze'] + cont_verao['Silver'] + cont_verao['Bronze']

cont_verao = cont_verao.sort_values(by='Total', ascending=False).reset_index()

max_verao = max(cont_verao['Total'])
max_year = cont_verao.loc[cont_verao['Total'] == max_verao, 'Year'].values[0]

palette = ['#E5E1BC' if total != max_verao else cor_dourada for total in sorted(cont_verao['Total'].unique())]

fig, (ax1, ax2) =  plt.subplots(2, 1, figsize=(20, 15), gridspec_kw={'height_ratios': [1, 1]}, facecolor=cor_fundo_gold)

sns.lineplot(data=cont_verao, x='Year', y='Total', ax=ax1, marker='o', palette=palette)
ax1.plot(max_year, max_verao, 'o', markersize=15, color=cor_dourada, label=f'Máximo {max_verao}')
ax1.annotate(f'{max_verao}', xy=(max_year, max_verao), xytext=(max_year, max_verao + 50),
            fontsize=12, ha='center', color='black')

ax1.set_ylim(0, max_verao + max_verao*0.8)

plt.tight_layout()
 952:
mulheres_verao = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Summer")]

cont_verao = mulheres_verao.groupby(['Year'])['Medal'].value_counts().unstack()

cont_verao['Total'] = cont_verao['Bronze'] + cont_verao['Silver'] + cont_verao['Bronze']

cont_verao = cont_verao.sort_values(by='Total', ascending=False).reset_index()

max_verao = max(cont_verao['Total'])
max_year = cont_verao.loc[cont_verao['Total'] == max_verao, 'Year'].values[0]

palette = ['#E5E1BC' if total != max_verao else cor_dourada for total in sorted(cont_verao['Total'].unique())]

fig, (ax1, ax2) =  plt.subplots(2, 1, figsize=(20, 15), gridspec_kw={'height_ratios': [1, 1]}, facecolor=cor_fundo_gold)

sns.lineplot(data=cont_verao, x='Year', y='Total', ax=ax1, marker='o', palette=palette)
ax1.plot(max_year, max_verao, 'o', markersize=15, color=cor_dourada, label=f'Máximo {max_verao}')
ax1.annotate(f'{max_verao}', xy=(max_year, max_verao), xytext=(max_year, max_verao + 50),
            fontsize=12, ha='center', color='black')

ax1.set_ylim(0, max_verao + max_verao*0.2)

plt.tight_layout()
 953:
mulheres_verao = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Summer")]

cont_verao = mulheres_verao.groupby(['Year'])['Medal'].value_counts().unstack()

cont_verao['Total'] = cont_verao['Bronze'] + cont_verao['Silver'] + cont_verao['Bronze']

cont_verao = cont_verao.sort_values(by='Total', ascending=False).reset_index()

max_verao = max(cont_verao['Total'])
max_year = cont_verao.loc[cont_verao['Total'] == max_verao, 'Year'].values[0]

palette = ['#E5E1BC' if total != max_verao else cor_dourada for total in sorted(cont_verao['Total'].unique())]

fig, (ax1, ax2) =  plt.subplots(2, 1, figsize=(20, 15), gridspec_kw={'height_ratios': [1, 1]}, facecolor=cor_fundo_gold)

sns.lineplot(data=cont_verao, x='Year', y='Total', ax=ax1, marker='o', palette=palette)
ax1.plot(max_year, max_verao, 'o', markersize=15, color=cor_dourada, label=f'Máximo {max_verao}')
ax1.annotate(f'{max_verao}', xy=(max_year, max_verao), xytext=(max_year, max_verao + 50),
            fontsize=12, ha='center', color='black')

ax1.set_ylim(0, max_verao*1.2)

plt.tight_layout()
 954:
mulheres_verao = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Summer")]

cont_verao = mulheres_verao.groupby(['Year'])['Medal'].value_counts().unstack()
cont_verao['Total'] = cont_verao['Bronze'] + cont_verao['Silver'] + cont_verao['Bronze']
cont_verao = cont_verao.sort_values(by='Total', ascending=False).reset_index()
max_verao = max(cont_verao['Total'])
max_year = cont_verao.loc[cont_verao['Total'] == max_verao, 'Year'].values[0]

palette = ['#E5E1BC' if total != max_verao else cor_dourada for total in sorted(cont_verao['Total'].unique())]

fig, (ax1, ax2) =  plt.subplots(2, 1, figsize=(20, 15), gridspec_kw={'height_ratios': [1, 1]}, facecolor=cor_fundo_gold)

sns.lineplot(data=cont_verao, x='Year', y='Total', ax=ax1, marker='o', palette=palette)
ax1.plot(max_year, max_verao, 'o', markersize=15, color=cor_dourada, label=f'Máximo {max_verao}')
ax1.annotate(f'{max_verao}', xy=(max_year, max_verao), xytext=(max_year, max_verao + 50),
            fontsize=12, ha='center', color='black')

ax1.set_ylim(0, max_verao*1.2)
ax1.set_facecolor(cor_fundo_gold)

plt.tight_layout()
 955:
mulheres_verao = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Summer")]

cont_verao = mulheres_verao.groupby(['Year'])['Medal'].value_counts().unstack()
cont_verao['Total'] = cont_verao['Bronze'] + cont_verao['Silver'] + cont_verao['Bronze']
cont_verao = cont_verao.sort_values(by='Total', ascending=False).reset_index()
max_verao = max(cont_verao['Total'])
max_year = cont_verao.loc[cont_verao['Total'] == max_verao, 'Year'].values[0]

palette = ['#E5E1BC' if total != max_verao else cor_dourada for total in sorted(cont_verao['Total'].unique())]

fig, (ax1, ax2) =  plt.subplots(2, 1, figsize=(20, 15), gridspec_kw={'height_ratios': [1, 1]}, facecolor=cor_fundo_gold)

sns.lineplot(data=cont_verao, x='Year', y='Total', ax=ax1, marker='o', color='gray')
ax1.plot(max_year, max_verao, 'o', markersize=15, color=cor_dourada, label=f'Máximo {max_verao}')
ax1.annotate(f'{max_verao}', xy=(max_year, max_verao), xytext=(max_year, max_verao + 50),
            fontsize=12, ha='center', color='black')

ax1.set_ylim(0, max_verao*1.2)
ax1.set_facecolor(cor_fundo_gold)

plt.tight_layout()
 956:
mulheres_verao = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Summer")]
mulhes_inverno = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Winter")]

cont_verao = mulheres_verao.groupby(['Year'])['Medal'].value_counts().unstack()
cont_verao['Total'] = cont_verao['Bronze'] + cont_verao['Silver'] + cont_verao['Bronze']
cont_verao = cont_verao.sort_values(by='Total', ascending=False).reset_index()
max_verao = max(cont_verao['Total'])
max_year_verao = cont_verao.loc[cont_verao['Total'] == max_verao, 'Year'].values[0]

cont_inverno = mulhes_inverno.groupby(['Year'])['Medal'].value_counts().unstack()
cont_inverno['Total'] = cont_inverno['Bronze'] + cont_inverno['Silver'] + cont_inverno['Bronze']
cont_inverno = cont_inverno.sort_values(by='Total', ascending=False).reset_index()
max_inverno = max(cont_verao['Total'])
max_year_inverno = cont_inverno.loc[cont_inverno['Total'] == max_inverno, 'Year'].values[0]

palette = ['#E5E1BC' if total != max_verao else cor_dourada for total in sorted(cont_verao['Total'].unique())]

fig, (ax1, ax2) =  plt.subplots(2, 1, figsize=(20, 15), gridspec_kw={'height_ratios': [1, 1]}, facecolor=cor_fundo_gold)

sns.lineplot(data=cont_verao, x='Year', y='Total', ax=ax1, marker='o', color='gray')
ax1.plot(max_year_verao, max_verao, 'o', markersize=15, color=cor_dourada, label=f'Máximo {max_verao}')
ax1.annotate(f'{max_verao}', xy=(max_year_verao, max_verao), xytext=(max_year_verao, max_verao + 50),
            fontsize=12, ha='center', color='black')

ax1.set_ylim(0, max_verao*1.2)
ax1.set_facecolor(cor_fundo_gold)


sns.lineplot(data=cont_inverno, x='Year', y='Total', ax=ax2, marker='o', color='gray')
ax2.plot(max_year_inverno, max_inverno, 'o', markersize=15, color=cor_dourada, label=f'Máximo {max_inverno}')
ax2.annotate(f'{max_inverno}', xy=(max_year_inverno, max_inverno), xytext=(max_year_inverno, max_inverno + 50),
            fontsize=12, ha='center', color='black')

ax2.set_ylim(0, max_inverno*1.2)
ax2.set_facecolor(cor_fundo_gold)

plt.tight_layout()
 957:
mulheres_verao = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Summer")]
mulhes_inverno = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Winter")]

cont_verao = mulheres_verao.groupby(['Year'])['Medal'].value_counts().unstack()
cont_verao['Total'] = cont_verao['Bronze'] + cont_verao['Silver'] + cont_verao['Bronze']
cont_verao = cont_verao.sort_values(by='Total', ascending=False).reset_index()
max_verao = max(cont_verao['Total'])
max_year_verao = cont_verao.loc[cont_verao['Total'] == max_verao, 'Year'].values[0]

cont_inverno = mulhes_inverno.groupby(['Year'])['Medal'].value_counts().unstack()
cont_inverno['Total'] = cont_inverno['Bronze'] + cont_inverno['Silver'] + cont_inverno['Bronze']
cont_inverno = cont_inverno.sort_values(by='Total', ascending=False).reset_index()
max_inverno = max(cont_inverno['Total'])
max_year_inverno = cont_inverno.loc[cont_inverno['Total'] == max_inverno, 'Year'].values[0]

palette = ['#E5E1BC' if total != max_verao else cor_dourada for total in sorted(cont_verao['Total'].unique())]

fig, (ax1, ax2) =  plt.subplots(2, 1, figsize=(20, 15), gridspec_kw={'height_ratios': [1, 1]}, facecolor=cor_fundo_gold)

sns.lineplot(data=cont_verao, x='Year', y='Total', ax=ax1, marker='o', color='gray')
ax1.plot(max_year_verao, max_verao, 'o', markersize=15, color=cor_dourada, label=f'Máximo {max_verao}')
ax1.annotate(f'{max_verao}', xy=(max_year_verao, max_verao), xytext=(max_year_verao, max_verao + 50),
            fontsize=12, ha='center', color='black')

ax1.set_ylim(0, max_verao*1.2)
ax1.set_facecolor(cor_fundo_gold)


sns.lineplot(data=cont_inverno, x='Year', y='Total', ax=ax2, marker='o', color='gray')
ax2.plot(max_year_inverno, max_inverno, 'o', markersize=15, color=cor_dourada, label=f'Máximo {max_inverno}')
ax2.annotate(f'{max_inverno}', xy=(max_year_inverno, max_inverno), xytext=(max_year_inverno, max_inverno + 50),
            fontsize=12, ha='center', color='black')

ax2.set_ylim(0, max_inverno*1.2)
ax2.set_facecolor(cor_fundo_gold)

plt.tight_layout()
 958:
mulheres_verao = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Summer")]
mulhes_inverno = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Winter")]

cont_verao = mulheres_verao.groupby(['Year'])['Medal'].value_counts().unstack()
cont_verao['Total'] = cont_verao['Bronze'] + cont_verao['Silver'] + cont_verao['Bronze']
cont_verao = cont_verao.sort_values(by='Total', ascending=False).reset_index()
max_verao = max(cont_verao['Total'])
max_year_verao = cont_verao.loc[cont_verao['Total'] == max_verao, 'Year'].values[0]

cont_inverno = mulhes_inverno.groupby(['Year'])['Medal'].value_counts().unstack()
cont_inverno['Total'] = cont_inverno['Bronze'] + cont_inverno['Silver'] + cont_inverno['Bronze']
cont_inverno = cont_inverno.sort_values(by='Total', ascending=False).reset_index()
max_inverno = max(cont_inverno['Total'])
max_year_inverno = cont_inverno.loc[cont_inverno['Total'] == max_inverno, 'Year'].values[0]

palette = ['#E5E1BC' if total != max_verao else cor_dourada for total in sorted(cont_verao['Total'].unique())]

fig, (ax1, ax2) =  plt.subplots(2, 1, figsize=(20, 15), gridspec_kw={'height_ratios': [1, 1]}, facecolor=cor_fundo_gold)

sns.lineplot(data=cont_verao, x='Year', y='Total', ax=ax1, marker='o', color='gray')
ax1.plot(max_year_verao, max_verao, 'o', markersize=15, color=cor_dourada, label=f'Máximo {max_verao}')
ax1.annotate(f'{max_verao}', xy=(max_year_verao, max_verao), xytext=(max_year_verao, max_verao + 50),
            fontsize=12, ha='center', color='black')

ax1.set_ylim(0, max_verao*1.2)
ax1.set_facecolor(cor_fundo_gold)


sns.lineplot(data=cont_inverno, x='Year', y='Total', ax=ax2, marker='o', color='gray')
ax2.plot(max_year_inverno, max_inverno, 'o', markersize=15, color=cor_dourada, label=f'Máximo {max_inverno}')
ax2.annotate(f'{max_inverno}', xy=(max_year_inverno, max_inverno), xytext=(max_year_inverno, max_inverno*1.1),
            fontsize=12, ha='center', color='black')

ax2.set_ylim(0, max_inverno*1.2)
ax2.set_facecolor(cor_fundo_gold)

plt.tight_layout()
 959:
mulheres_verao = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Summer")]
mulhes_inverno = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Winter")]

cont_verao = mulheres_verao.groupby(['Year'])['Medal'].value_counts().unstack()
cont_verao['Total'] = cont_verao['Bronze'] + cont_verao['Silver'] + cont_verao['Bronze']
cont_verao = cont_verao.sort_values(by='Total', ascending=False).reset_index()
max_verao = max(cont_verao['Total'])
max_year_verao = cont_verao.loc[cont_verao['Total'] == max_verao, 'Year'].values[0]

cont_inverno = mulhes_inverno.groupby(['Year'])['Medal'].value_counts().unstack()
cont_inverno['Total'] = cont_inverno['Bronze'] + cont_inverno['Silver'] + cont_inverno['Bronze']
cont_inverno = cont_inverno.sort_values(by='Total', ascending=False).reset_index()
max_inverno = max(cont_inverno['Total'])
max_year_inverno = cont_inverno.loc[cont_inverno['Total'] == max_inverno, 'Year'].values[0]

palette = ['#E5E1BC' if total != max_verao else cor_dourada for total in sorted(cont_verao['Total'].unique())]

fig, (ax1, ax2) =  plt.subplots(2, 1, figsize=(20, 15), gridspec_kw={'height_ratios': [1, 1]}, facecolor=cor_fundo_gold)

sns.lineplot(data=cont_verao, x='Year', y='Total', ax=ax1, marker='o', color='gray')
ax1.plot(max_year_verao, max_verao, 'o', markersize=15, color=cor_dourada, label=f'Máximo {max_verao}')
ax1.annotate(f'{max_verao}', xy=(max_year_verao, max_verao), xytext=(max_year_verao, max_verao + 50),
            fontsize=12, ha='center', color='black')

ax1.set_ylim(0, max_verao*1.2)
ax1.set_facecolor(cor_fundo_gold)


sns.lineplot(data=cont_inverno, x='Year', y='Total', ax=ax2, marker='o', color='gray')
ax2.plot(max_year_inverno, max_inverno, 'o', markersize=15, color=cor_dourada, label=f'Máximo {max_inverno}')
ax2.annotate(f'{max_inverno}', xy=(max_year_inverno, max_inverno), xytext=(max_year_inverno, max_inverno*1),
            fontsize=12, ha='center', color='black')

ax2.set_ylim(0, max_inverno*1.2)
ax2.set_facecolor(cor_fundo_gold)

plt.tight_layout()
 960:
mulheres_verao = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Summer")]
mulhes_inverno = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Winter")]

cont_verao = mulheres_verao.groupby(['Year'])['Medal'].value_counts().unstack()
cont_verao['Total'] = cont_verao['Bronze'] + cont_verao['Silver'] + cont_verao['Bronze']
cont_verao = cont_verao.sort_values(by='Total', ascending=False).reset_index()
max_verao = max(cont_verao['Total'])
max_year_verao = cont_verao.loc[cont_verao['Total'] == max_verao, 'Year'].values[0]

cont_inverno = mulhes_inverno.groupby(['Year'])['Medal'].value_counts().unstack()
cont_inverno['Total'] = cont_inverno['Bronze'] + cont_inverno['Silver'] + cont_inverno['Bronze']
cont_inverno = cont_inverno.sort_values(by='Total', ascending=False).reset_index()
max_inverno = max(cont_inverno['Total'])
max_year_inverno = cont_inverno.loc[cont_inverno['Total'] == max_inverno, 'Year'].values[0]

palette = ['#E5E1BC' if total != max_verao else cor_dourada for total in sorted(cont_verao['Total'].unique())]

fig, (ax1, ax2) =  plt.subplots(2, 1, figsize=(20, 15), gridspec_kw={'height_ratios': [1, 1]}, facecolor=cor_fundo_gold)

sns.lineplot(data=cont_verao, x='Year', y='Total', ax=ax1, marker='o', color='gray')
ax1.plot(max_year_verao, max_verao, 'o', markersize=15, color=cor_dourada, label=f'Máximo {max_verao}')
ax1.annotate(f'{max_verao}', xy=(max_year_verao, max_verao), xytext=(max_year_verao, max_verao + 50),
            fontsize=12, ha='center', color='black')

ax1.set_ylim(0, max_verao*1.2)
ax1.set_facecolor(cor_fundo_gold)


sns.lineplot(data=cont_inverno, x='Year', y='Total', ax=ax2, marker='o', color='gray')
ax2.plot(max_year_inverno, max_inverno, 'o', markersize=15, color=cor_dourada, label=f'Máximo {max_inverno}')
ax2.annotate(f'{max_inverno}', xy=(max_year_inverno, max_inverno), xytext=(max_year_inverno, max_inverno*1.05),
            fontsize=12, ha='center', color='black')

ax2.set_ylim(0, max_inverno*1.2)
ax2.set_facecolor(cor_fundo_gold)

plt.tight_layout()
 961:
mulheres_verao = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Summer")]
mulhes_inverno = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Winter")]

cont_verao = mulheres_verao.groupby(['Year'])['Medal'].value_counts().unstack()
cont_verao['Total'] = cont_verao['Bronze'] + cont_verao['Silver'] + cont_verao['Bronze']
cont_verao = cont_verao.sort_values(by='Total', ascending=False).reset_index()
max_verao = max(cont_verao['Total'])
max_year_verao = cont_verao.loc[cont_verao['Total'] == max_verao, 'Year'].values[0]

cont_inverno = mulhes_inverno.groupby(['Year'])['Medal'].value_counts().unstack()
cont_inverno['Total'] = cont_inverno['Bronze'] + cont_inverno['Silver'] + cont_inverno['Bronze']
cont_inverno = cont_inverno.sort_values(by='Total', ascending=False).reset_index()
max_inverno = max(cont_inverno['Total'])
max_year_inverno = cont_inverno.loc[cont_inverno['Total'] == max_inverno, 'Year'].values[0]

palette = ['#E5E1BC' if total != max_verao else cor_dourada for total in sorted(cont_verao['Total'].unique())]

fig, (ax1, ax2) =  plt.subplots(2, 1, figsize=(20, 15), gridspec_kw={'height_ratios': [1, 1]}, facecolor=cor_fundo_gold)

sns.lineplot(data=cont_verao, x='Year', y='Total', ax=ax1, marker='o', color='gray')
ax1.plot(max_year_verao, max_verao, 'o', markersize=15, color=cor_dourada, label=f'Máximo {max_verao}')
ax1.annotate(f'{max_verao}', xy=(max_year_verao, max_verao), xytext=(max_year_verao, max_verao + 50),
            fontsize=12, ha='center', color='black')

ax1.set_ylim(0, max_verao*1.2)
ax1.set_facecolor(cor_fundo_gold)


sns.lineplot(data=cont_inverno, x='Year', y='Total', ax=ax2, marker='o', color='gray')
ax2.plot(max_year_inverno, max_inverno, 'o', markersize=15, color=cor_dourada, label=f'Máximo {max_inverno}')
ax2.annotate(f'{max_inverno}', xy=(max_year_inverno, max_inverno), xytext=(max_year_inverno, max_inverno*1.05),
            fontsize=12, ha='center', color='black')

ax2.set_ylim(0, max_inverno*1.2)
ax2.set_facecolor(cor_fundo_gold)

plt.title( 'Distribuição de Medlhas através do anos', fontsize=15, fontweight='bold', fontfamily='serif', color='#323232', loc='center', y=2.5)

plt.tight_layout()
 962:
mulheres_verao = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Summer")]
mulhes_inverno = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Winter")]

cont_verao = mulheres_verao.groupby(['Year'])['Medal'].value_counts().unstack()
cont_verao['Total'] = cont_verao['Bronze'] + cont_verao['Silver'] + cont_verao['Bronze']
cont_verao = cont_verao.sort_values(by='Total', ascending=False).reset_index()
max_verao = max(cont_verao['Total'])
max_year_verao = cont_verao.loc[cont_verao['Total'] == max_verao, 'Year'].values[0]

cont_inverno = mulhes_inverno.groupby(['Year'])['Medal'].value_counts().unstack()
cont_inverno['Total'] = cont_inverno['Bronze'] + cont_inverno['Silver'] + cont_inverno['Bronze']
cont_inverno = cont_inverno.sort_values(by='Total', ascending=False).reset_index()
max_inverno = max(cont_inverno['Total'])
max_year_inverno = cont_inverno.loc[cont_inverno['Total'] == max_inverno, 'Year'].values[0]

palette = ['#E5E1BC' if total != max_verao else cor_dourada for total in sorted(cont_verao['Total'].unique())]

fig, (ax1, ax2) =  plt.subplots(2, 1, figsize=(20, 15), gridspec_kw={'height_ratios': [1, 1]}, facecolor=cor_fundo_gold)

sns.lineplot(data=cont_verao, x='Year', y='Total', ax=ax1, marker='o', color='gray')
ax1.plot(max_year_verao, max_verao, 'o', markersize=15, color=cor_dourada, label=f'Máximo {max_verao}')
ax1.annotate(f'{max_verao}', xy=(max_year_verao, max_verao), xytext=(max_year_verao, max_verao + 50),
            fontsize=12, ha='center', color='black')

ax1.set_ylim(0, max_verao*1.2)
ax1.set_facecolor(cor_fundo_gold)


sns.lineplot(data=cont_inverno, x='Year', y='Total', ax=ax2, marker='o', color='gray')
ax2.plot(max_year_inverno, max_inverno, 'o', markersize=15, color=cor_dourada, label=f'Máximo {max_inverno}')
ax2.annotate(f'{max_inverno}', xy=(max_year_inverno, max_inverno), xytext=(max_year_inverno, max_inverno*1.05),
            fontsize=12, ha='center', color='black')

ax2.set_ylim(0, max_inverno*1.2)
ax2.set_facecolor(cor_fundo_gold)

plt.title( 'Distribuição de Medlhas através do anos', fontsize=15, fontweight='bold', fontfamily='serif', color='#323232', loc='center', y=1)

plt.tight_layout()
 963:
mulheres_verao = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Summer")]
mulhes_inverno = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Winter")]

cont_verao = mulheres_verao.groupby(['Year'])['Medal'].value_counts().unstack()
cont_verao['Total'] = cont_verao['Bronze'] + cont_verao['Silver'] + cont_verao['Bronze']
cont_verao = cont_verao.sort_values(by='Total', ascending=False).reset_index()
max_verao = max(cont_verao['Total'])
max_year_verao = cont_verao.loc[cont_verao['Total'] == max_verao, 'Year'].values[0]

cont_inverno = mulhes_inverno.groupby(['Year'])['Medal'].value_counts().unstack()
cont_inverno['Total'] = cont_inverno['Bronze'] + cont_inverno['Silver'] + cont_inverno['Bronze']
cont_inverno = cont_inverno.sort_values(by='Total', ascending=False).reset_index()
max_inverno = max(cont_inverno['Total'])
max_year_inverno = cont_inverno.loc[cont_inverno['Total'] == max_inverno, 'Year'].values[0]

palette = ['#E5E1BC' if total != max_verao else cor_dourada for total in sorted(cont_verao['Total'].unique())]

fig, (ax1, ax2) =  plt.subplots(2, 1, figsize=(20, 15), gridspec_kw={'height_ratios': [1, 1]}, facecolor=cor_fundo_gold)

sns.lineplot(data=cont_verao, x='Year', y='Total', ax=ax1, marker='o', color='gray')
ax1.plot(max_year_verao, max_verao, 'o', markersize=15, color=cor_dourada, label=f'Máximo {max_verao}')
ax1.annotate(f'{max_verao}', xy=(max_year_verao, max_verao), xytext=(max_year_verao, max_verao + 50),
            fontsize=12, ha='center', color='black')

ax1.set_ylim(0, max_verao*1.2)
ax1.set_facecolor(cor_fundo_gold)


sns.lineplot(data=cont_inverno, x='Year', y='Total', ax=ax2, marker='o', color='gray')
ax2.plot(max_year_inverno, max_inverno, 'o', markersize=15, color=cor_dourada, label=f'Máximo {max_inverno}')
ax2.annotate(f'{max_inverno}', xy=(max_year_inverno, max_inverno), xytext=(max_year_inverno, max_inverno*1.05),
            fontsize=12, ha='center', color='black')

ax2.set_ylim(0, max_inverno*1.2)
ax2.set_facecolor(cor_fundo_gold)

plt.title( 'Distribuição de Medlhas através do anos', fontsize=15, fontweight='bold', fontfamily='serif', color='#323232', loc='center', y=0)

plt.tight_layout()
 964:
mulheres_verao = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Summer")]
mulhes_inverno = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Winter")]

cont_verao = mulheres_verao.groupby(['Year'])['Medal'].value_counts().unstack()
cont_verao['Total'] = cont_verao['Bronze'] + cont_verao['Silver'] + cont_verao['Bronze']
cont_verao = cont_verao.sort_values(by='Total', ascending=False).reset_index()
max_verao = max(cont_verao['Total'])
max_year_verao = cont_verao.loc[cont_verao['Total'] == max_verao, 'Year'].values[0]

cont_inverno = mulhes_inverno.groupby(['Year'])['Medal'].value_counts().unstack()
cont_inverno['Total'] = cont_inverno['Bronze'] + cont_inverno['Silver'] + cont_inverno['Bronze']
cont_inverno = cont_inverno.sort_values(by='Total', ascending=False).reset_index()
max_inverno = max(cont_inverno['Total'])
max_year_inverno = cont_inverno.loc[cont_inverno['Total'] == max_inverno, 'Year'].values[0]

palette = ['#E5E1BC' if total != max_verao else cor_dourada for total in sorted(cont_verao['Total'].unique())]

fig, (ax1, ax2) =  plt.subplots(2, 1, figsize=(20, 15), gridspec_kw={'height_ratios': [1, 1]}, facecolor=cor_fundo_gold)

sns.lineplot(data=cont_verao, x='Year', y='Total', ax=ax1, marker='o', color='gray')
ax1.plot(max_year_verao, max_verao, 'o', markersize=15, color=cor_dourada, label=f'Máximo {max_verao}')
ax1.annotate(f'{max_verao}', xy=(max_year_verao, max_verao), xytext=(max_year_verao, max_verao + 50),
            fontsize=12, ha='center', color='black')

ax1.set_ylim(0, max_verao*1.2)
ax1.set_facecolor(cor_fundo_gold)


sns.lineplot(data=cont_inverno, x='Year', y='Total', ax=ax2, marker='o', color='gray')
ax2.plot(max_year_inverno, max_inverno, 'o', markersize=15, color=cor_dourada, label=f'Máximo {max_inverno}')
ax2.annotate(f'{max_inverno}', xy=(max_year_inverno, max_inverno), xytext=(max_year_inverno, max_inverno*1.05),
            fontsize=12, ha='center', color='black')

ax2.set_ylim(0, max_inverno*1.2)
ax2.set_facecolor(cor_fundo_gold)

plt.title( 'Distribuição de Medlhas através do anos', fontsize=15, fontweight='bold', fontfamily='serif', color='#323232', loc='center', y=2)

plt.tight_layout()
 965:
mulheres_verao = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Summer")]
mulhes_inverno = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Winter")]

cont_verao = mulheres_verao.groupby(['Year'])['Medal'].value_counts().unstack()
cont_verao['Total'] = cont_verao['Bronze'] + cont_verao['Silver'] + cont_verao['Bronze']
cont_verao = cont_verao.sort_values(by='Total', ascending=False).reset_index()
max_verao = max(cont_verao['Total'])
max_year_verao = cont_verao.loc[cont_verao['Total'] == max_verao, 'Year'].values[0]

cont_inverno = mulhes_inverno.groupby(['Year'])['Medal'].value_counts().unstack()
cont_inverno['Total'] = cont_inverno['Bronze'] + cont_inverno['Silver'] + cont_inverno['Bronze']
cont_inverno = cont_inverno.sort_values(by='Total', ascending=False).reset_index()
max_inverno = max(cont_inverno['Total'])
max_year_inverno = cont_inverno.loc[cont_inverno['Total'] == max_inverno, 'Year'].values[0]

palette = ['#E5E1BC' if total != max_verao else cor_dourada for total in sorted(cont_verao['Total'].unique())]

fig, (ax1, ax2) =  plt.subplots(2, 1, figsize=(20, 15), gridspec_kw={'height_ratios': [1, 1]}, facecolor=cor_fundo_gold)

sns.lineplot(data=cont_verao, x='Year', y='Total', ax=ax1, marker='o', color='gray')
ax1.plot(max_year_verao, max_verao, 'o', markersize=15, color=cor_dourada, label=f'Máximo {max_verao}')
ax1.annotate(f'{max_verao}', xy=(max_year_verao, max_verao), xytext=(max_year_verao, max_verao + 50),
            fontsize=12, ha='center', color='black')

ax1.set_ylim(0, max_verao*1.2)
ax1.set_facecolor(cor_fundo_gold)


sns.lineplot(data=cont_inverno, x='Year', y='Total', ax=ax2, marker='o', color='gray')
ax2.plot(max_year_inverno, max_inverno, 'o', markersize=15, color=cor_dourada, label=f'Máximo {max_inverno}')
ax2.annotate(f'{max_inverno}', xy=(max_year_inverno, max_inverno), xytext=(max_year_inverno, max_inverno*1.05),
            fontsize=12, ha='center', color='black')

ax2.set_ylim(0, max_inverno*1.2)
ax2.set_facecolor(cor_fundo_gold)

plt.title( 'Distribuição de Medlhas através do anos', fontsize=15, fontweight='bold', fontfamily='serif', color='#323232', loc='center', y=3)

plt.tight_layout()
 966:
mulheres_verao = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Summer")]
mulhes_inverno = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Winter")]

cont_verao = mulheres_verao.groupby(['Year'])['Medal'].value_counts().unstack()
cont_verao['Total'] = cont_verao['Bronze'] + cont_verao['Silver'] + cont_verao['Bronze']
cont_verao = cont_verao.sort_values(by='Total', ascending=False).reset_index()
max_verao = max(cont_verao['Total'])
max_year_verao = cont_verao.loc[cont_verao['Total'] == max_verao, 'Year'].values[0]

cont_inverno = mulhes_inverno.groupby(['Year'])['Medal'].value_counts().unstack()
cont_inverno['Total'] = cont_inverno['Bronze'] + cont_inverno['Silver'] + cont_inverno['Bronze']
cont_inverno = cont_inverno.sort_values(by='Total', ascending=False).reset_index()
max_inverno = max(cont_inverno['Total'])
max_year_inverno = cont_inverno.loc[cont_inverno['Total'] == max_inverno, 'Year'].values[0]

palette = ['#E5E1BC' if total != max_verao else cor_dourada for total in sorted(cont_verao['Total'].unique())]

fig, (ax1, ax2) =  plt.subplots(2, 1, figsize=(20, 15), gridspec_kw={'height_ratios': [1, 1]}, facecolor=cor_fundo_gold)

sns.lineplot(data=cont_verao, x='Year', y='Total', ax=ax1, marker='o', color='gray')
ax1.plot(max_year_verao, max_verao, 'o', markersize=15, color=cor_dourada, label=f'Máximo {max_verao}')
ax1.annotate(f'{max_verao}', xy=(max_year_verao, max_verao), xytext=(max_year_verao, max_verao + 50),
            fontsize=12, ha='center', color='black')

ax1.set_ylim(0, max_verao*1.2)
ax1.set_facecolor(cor_fundo_gold)


sns.lineplot(data=cont_inverno, x='Year', y='Total', ax=ax2, marker='o', color='gray')
ax2.plot(max_year_inverno, max_inverno, 'o', markersize=15, color=cor_dourada, label=f'Máximo {max_inverno}')
ax2.annotate(f'{max_inverno}', xy=(max_year_inverno, max_inverno), xytext=(max_year_inverno, max_inverno*1.05),
            fontsize=12, ha='center', color='black')

ax2.set_ylim(0, max_inverno*1.2)
ax2.set_facecolor(cor_fundo_gold)

plt.title( 'Distribuição de Medlhas através do anos', fontsize=15, fontweight='bold', fontfamily='serif', color='#323232', loc='center', y=0)

plt.tight_layout()
 967:
mulheres_verao = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Summer")]
mulhes_inverno = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Winter")]

cont_verao = mulheres_verao.groupby(['Year'])['Medal'].value_counts().unstack()
cont_verao['Total'] = cont_verao['Bronze'] + cont_verao['Silver'] + cont_verao['Bronze']
cont_verao = cont_verao.sort_values(by='Total', ascending=False).reset_index()
max_verao = max(cont_verao['Total'])
max_year_verao = cont_verao.loc[cont_verao['Total'] == max_verao, 'Year'].values[0]

cont_inverno = mulhes_inverno.groupby(['Year'])['Medal'].value_counts().unstack()
cont_inverno['Total'] = cont_inverno['Bronze'] + cont_inverno['Silver'] + cont_inverno['Bronze']
cont_inverno = cont_inverno.sort_values(by='Total', ascending=False).reset_index()
max_inverno = max(cont_inverno['Total'])
max_year_inverno = cont_inverno.loc[cont_inverno['Total'] == max_inverno, 'Year'].values[0]

palette = ['#E5E1BC' if total != max_verao else cor_dourada for total in sorted(cont_verao['Total'].unique())]

fig, (ax1, ax2) =  plt.subplots(2, 1, figsize=(20, 15), gridspec_kw={'height_ratios': [1, 1]}, facecolor=cor_fundo_gold)

sns.lineplot(data=cont_verao, x='Year', y='Total', ax=ax1, marker='o', color='gray')
ax1.plot(max_year_verao, max_verao, 'o', markersize=15, color=cor_dourada, label=f'Máximo {max_verao}')
ax1.annotate(f'{max_verao}', xy=(max_year_verao, max_verao), xytext=(max_year_verao, max_verao + 50),
            fontsize=12, ha='center', color='black')

ax1.set_ylim(0, max_verao*1.2)
ax1.set_facecolor(cor_fundo_gold)


sns.lineplot(data=cont_inverno, x='Year', y='Total', ax=ax2, marker='o', color='gray')
ax2.plot(max_year_inverno, max_inverno, 'o', markersize=15, color=cor_dourada, label=f'Máximo {max_inverno}')
ax2.annotate(f'{max_inverno}', xy=(max_year_inverno, max_inverno), xytext=(max_year_inverno, max_inverno*1.05),
            fontsize=12, ha='center', color='black')

ax2.set_ylim(0, max_inverno*1.2)
ax2.set_facecolor(cor_fundo_gold)

fig.suptitle('Distribuição de Medalhas através dos anos', fontsize=15, fontweight='bold', fontfamily='serif', color='#323232', verticalalignment='top', y=0.98)

plt.tight_layout()
 968:
mulheres_verao = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Summer")]
mulhes_inverno = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Winter")]

cont_verao = mulheres_verao.groupby(['Year'])['Medal'].value_counts().unstack()
cont_verao['Total'] = cont_verao['Bronze'] + cont_verao['Silver'] + cont_verao['Bronze']
cont_verao = cont_verao.sort_values(by='Total', ascending=False).reset_index()
max_verao = max(cont_verao['Total'])
max_year_verao = cont_verao.loc[cont_verao['Total'] == max_verao, 'Year'].values[0]

cont_inverno = mulhes_inverno.groupby(['Year'])['Medal'].value_counts().unstack()
cont_inverno['Total'] = cont_inverno['Bronze'] + cont_inverno['Silver'] + cont_inverno['Bronze']
cont_inverno = cont_inverno.sort_values(by='Total', ascending=False).reset_index()
max_inverno = max(cont_inverno['Total'])
max_year_inverno = cont_inverno.loc[cont_inverno['Total'] == max_inverno, 'Year'].values[0]

palette = ['#E5E1BC' if total != max_verao else cor_dourada for total in sorted(cont_verao['Total'].unique())]

fig, (ax1, ax2) =  plt.subplots(2, 1, figsize=(20, 15), gridspec_kw={'height_ratios': [1, 1]}, facecolor=cor_fundo_gold)

sns.lineplot(data=cont_verao, x='Year', y='Total', ax=ax1, marker='o', color='gray')
ax1.plot(max_year_verao, max_verao, 'o', markersize=15, color=cor_dourada, label=f'Máximo {max_verao}')
ax1.annotate(f'{max_verao}', xy=(max_year_verao, max_verao), xytext=(max_year_verao, max_verao + 50),
            fontsize=12, ha='center', color='black')

ax1.set_ylim(0, max_verao*1.2)
ax1.set_facecolor(cor_fundo_gold)


sns.lineplot(data=cont_inverno, x='Year', y='Total', ax=ax2, marker='o', color='gray')
ax2.plot(max_year_inverno, max_inverno, 'o', markersize=15, color=cor_dourada, label=f'Máximo {max_inverno}')
ax2.annotate(f'{max_inverno}', xy=(max_year_inverno, max_inverno), xytext=(max_year_inverno, max_inverno*1.05),
            fontsize=12, ha='center', color='black')

ax2.set_ylim(0, max_inverno*1.2)
ax2.set_facecolor(cor_fundo_gold)

fig.suptitle('Distribuição de Medalhas através dos anos', fontsize=15, fontweight='bold', fontfamily='serif', color='#323232', verticalalignment='top', y=0.95)

plt.tight_layout()
 969:
mulheres_verao = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Summer")]
mulhes_inverno = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Winter")]

cont_verao = mulheres_verao.groupby(['Year'])['Medal'].value_counts().unstack()
cont_verao['Total'] = cont_verao['Bronze'] + cont_verao['Silver'] + cont_verao['Bronze']
cont_verao = cont_verao.sort_values(by='Total', ascending=False).reset_index()
max_verao = max(cont_verao['Total'])
max_year_verao = cont_verao.loc[cont_verao['Total'] == max_verao, 'Year'].values[0]

cont_inverno = mulhes_inverno.groupby(['Year'])['Medal'].value_counts().unstack()
cont_inverno['Total'] = cont_inverno['Bronze'] + cont_inverno['Silver'] + cont_inverno['Bronze']
cont_inverno = cont_inverno.sort_values(by='Total', ascending=False).reset_index()
max_inverno = max(cont_inverno['Total'])
max_year_inverno = cont_inverno.loc[cont_inverno['Total'] == max_inverno, 'Year'].values[0]

palette = ['#E5E1BC' if total != max_verao else cor_dourada for total in sorted(cont_verao['Total'].unique())]

fig, (ax1, ax2) =  plt.subplots(2, 1, figsize=(20, 15), gridspec_kw={'height_ratios': [1, 1]}, facecolor=cor_fundo_gold)

sns.lineplot(data=cont_verao, x='Year', y='Total', ax=ax1, marker='o', color='gray')
ax1.plot(max_year_verao, max_verao, 'o', markersize=20, color=cor_dourada, label=f'Máximo {max_verao}')
ax1.annotate(f'{max_verao}', xy=(max_year_verao, max_verao), xytext=(max_year_verao, max_verao + 50),
            fontsize=12, ha='center', color='black')

ax1.set_ylim(0, max_verao*1.2)
ax1.set_facecolor(cor_fundo_gold)


sns.lineplot(data=cont_inverno, x='Year', y='Total', ax=ax2, marker='o', color='gray')
ax2.plot(max_year_inverno, max_inverno, 'o', markersize=20, color=cor_dourada, label=f'Máximo {max_inverno}')
ax2.annotate(f'{max_inverno}', xy=(max_year_inverno, max_inverno), xytext=(max_year_inverno, max_inverno*1.05),
            fontsize=12, ha='center', color='black')

ax2.set_ylim(0, max_inverno*1.2)
ax2.set_facecolor(cor_fundo_gold)

fig.suptitle('Distribuição de Medalhas através dos anos', fontsize=15, fontweight='bold', fontfamily='serif', color='#323232', verticalalignment='top', y=0.95)

plt.tight_layout()
 970:
mulheres_verao = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Summer")]
mulhes_inverno = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Winter")]

cont_verao = mulheres_verao.groupby(['Year'])['Medal'].value_counts().unstack()
cont_verao['Total'] = cont_verao['Bronze'] + cont_verao['Silver'] + cont_verao['Bronze']
cont_verao = cont_verao.sort_values(by='Total', ascending=False).reset_index()
max_verao = max(cont_verao['Total'])
max_year_verao = cont_verao.loc[cont_verao['Total'] == max_verao, 'Year'].values[0]

cont_inverno = mulhes_inverno.groupby(['Year'])['Medal'].value_counts().unstack()
cont_inverno['Total'] = cont_inverno['Bronze'] + cont_inverno['Silver'] + cont_inverno['Bronze']
cont_inverno = cont_inverno.sort_values(by='Total', ascending=False).reset_index()
max_inverno = max(cont_inverno['Total'])
max_year_inverno = cont_inverno.loc[cont_inverno['Total'] == max_inverno, 'Year'].values[0]

palette = ['#E5E1BC' if total != max_verao else cor_dourada for total in sorted(cont_verao['Total'].unique())]

fig, (ax1, ax2) =  plt.subplots(2, 1, figsize=(20, 15), gridspec_kw={'height_ratios': [1, 1]}, facecolor=cor_fundo_gold)

sns.lineplot(data=cont_verao, x='Year', y='Total', ax=ax1, marker='o', color='gray')
ax1.plot(max_year_verao, max_verao, 'o', markersize=20, color=cor_dourada, label=f'Máximo {max_verao}')
ax1.annotate(f'{max_verao}', xy=(max_year_verao, max_verao), xytext=(max_year_verao, max_verao + 50),
            fontsize=12, ha='center', color='black')

ax1.set_ylim(0, max_verao*1.2)
ax1.set_facecolor(cor_fundo_gold)


sns.lineplot(data=cont_inverno, x='Year', y='Total', ax=ax2, marker='o', color='gray')
ax2.plot(max_year_inverno, max_inverno, 'o', markersize=20, color=cor_dourada, label=f'Máximo {max_inverno}')
ax2.annotate(f'{max_inverno}', xy=(max_year_inverno, max_inverno), xytext=(max_year_inverno, max_inverno*1.05),
            fontsize=12, ha='center', color='black')

ax2.set_ylim(0, max_inverno*1.2)
ax2.set_facecolor(cor_fundo_gold)

fig.suptitle('Distribuição de Medalhas através dos anos', fontsize=15, fontweight='bold', fontfamily='serif', color='#323232', verticalalignment='top', y=0.95)

plt.tight_layout()
plt.xlabel('')
plt.ylabel('')
 971:
mulheres_verao = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Summer")]
mulhes_inverno = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Winter")]

cont_verao = mulheres_verao.groupby(['Year'])['Medal'].value_counts().unstack()
cont_verao['Total'] = cont_verao['Bronze'] + cont_verao['Silver'] + cont_verao['Bronze']
cont_verao = cont_verao.sort_values(by='Total', ascending=False).reset_index()
max_verao = max(cont_verao['Total'])
max_year_verao = cont_verao.loc[cont_verao['Total'] == max_verao, 'Year'].values[0]

cont_inverno = mulhes_inverno.groupby(['Year'])['Medal'].value_counts().unstack()
cont_inverno['Total'] = cont_inverno['Bronze'] + cont_inverno['Silver'] + cont_inverno['Bronze']
cont_inverno = cont_inverno.sort_values(by='Total', ascending=False).reset_index()
max_inverno = max(cont_inverno['Total'])
max_year_inverno = cont_inverno.loc[cont_inverno['Total'] == max_inverno, 'Year'].values[0]

palette = ['#E5E1BC' if total != max_verao else cor_dourada for total in sorted(cont_verao['Total'].unique())]

fig, (ax1, ax2) =  plt.subplots(2, 1, figsize=(20, 15), gridspec_kw={'height_ratios': [1, 1]}, facecolor=cor_fundo_gold)

sns.lineplot(data=cont_verao, x='Year', y='Total', ax=ax1, marker='o', color='gray')
ax1.plot(max_year_verao, max_verao, 'o', markersize=20, color=cor_dourada, label=f'Máximo {max_verao}')
ax1.annotate(f'{max_verao}', xy=(max_year_verao, max_verao), xytext=(max_year_verao, max_verao + 50),
            fontsize=12, ha='center', color='black')

ax1.set_ylim(0, max_verao*1.2)
ax1.set_facecolor(cor_fundo_gold)


sns.lineplot(data=cont_inverno, x='Year', y='Total', ax=ax2, marker='o', color='gray')
ax2.plot(max_year_inverno, max_inverno, 'o', markersize=20, color=cor_dourada, label=f'Máximo {max_inverno}')
ax2.annotate(f'{max_inverno}', xy=(max_year_inverno, max_inverno), xytext=(max_year_inverno, max_inverno*1.05),
            fontsize=12, ha='center', color='black')

ax2.set_ylim(0, max_inverno*1.2)
ax2.set_facecolor(cor_fundo_gold)

fig.suptitle('Distribuição de Medalhas através dos anos', fontsize=15, fontweight='bold', fontfamily='serif', color='#323232', verticalalignment='top', y=0.95)

plt.tight_layout()
ax1.set_xlabel('')
ax2.set_ylabel('')
 972:
mulheres_verao = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Summer")]
mulhes_inverno = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Winter")]

cont_verao = mulheres_verao.groupby(['Year'])['Medal'].value_counts().unstack()
cont_verao['Total'] = cont_verao['Bronze'] + cont_verao['Silver'] + cont_verao['Bronze']
cont_verao = cont_verao.sort_values(by='Total', ascending=False).reset_index()
max_verao = max(cont_verao['Total'])
max_year_verao = cont_verao.loc[cont_verao['Total'] == max_verao, 'Year'].values[0]

cont_inverno = mulhes_inverno.groupby(['Year'])['Medal'].value_counts().unstack()
cont_inverno['Total'] = cont_inverno['Bronze'] + cont_inverno['Silver'] + cont_inverno['Bronze']
cont_inverno = cont_inverno.sort_values(by='Total', ascending=False).reset_index()
max_inverno = max(cont_inverno['Total'])
max_year_inverno = cont_inverno.loc[cont_inverno['Total'] == max_inverno, 'Year'].values[0]

palette = ['#E5E1BC' if total != max_verao else cor_dourada for total in sorted(cont_verao['Total'].unique())]

fig, (ax1, ax2) =  plt.subplots(2, 1, figsize=(20, 15), gridspec_kw={'height_ratios': [1, 1]}, facecolor=cor_fundo_gold)

sns.lineplot(data=cont_verao, x='Year', y='Total', ax=ax1, marker='o', color='gray')
ax1.plot(max_year_verao, max_verao, 'o', markersize=20, color=cor_dourada, label=f'Máximo {max_verao}')
ax1.annotate(f'{max_verao}', xy=(max_year_verao, max_verao), xytext=(max_year_verao, max_verao + 50),
            fontsize=12, ha='center', color='black')

ax1.set_ylim(0, max_verao*1.2)
ax1.set_facecolor(cor_fundo_gold)


sns.lineplot(data=cont_inverno, x='Year', y='Total', ax=ax2, marker='o', color='gray')
ax2.plot(max_year_inverno, max_inverno, 'o', markersize=20, color=cor_dourada, label=f'Máximo {max_inverno}')
ax2.annotate(f'{max_inverno}', xy=(max_year_inverno, max_inverno), xytext=(max_year_inverno, max_inverno*1.05),
            fontsize=12, ha='center', color='black')

ax2.set_ylim(0, max_inverno*1.2)
ax2.set_facecolor(cor_fundo_gold)

fig.suptitle('Distribuição de Medalhas através dos anos', fontsize=15, fontweight='bold', fontfamily='serif', color='#323232', verticalalignment='top', y=0.95)

plt.tight_layout()
ax1.set_xlabel('')
ax1.set_ylabel('')
ax2.set_ylabel('')
ax2.set_xlabel('')
 973:
mulheres_verao = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Summer")]
mulhes_inverno = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Winter")]

cont_verao = mulheres_verao.groupby(['Year'])['Medal'].value_counts().unstack()
cont_verao['Total'] = cont_verao['Bronze'] + cont_verao['Silver'] + cont_verao['Bronze']
cont_verao = cont_verao.sort_values(by='Total', ascending=False).reset_index()
max_verao = max(cont_verao['Total'])
max_year_verao = cont_verao.loc[cont_verao['Total'] == max_verao, 'Year'].values[0]

cont_inverno = mulhes_inverno.groupby(['Year'])['Medal'].value_counts().unstack()
cont_inverno['Total'] = cont_inverno['Bronze'] + cont_inverno['Silver'] + cont_inverno['Bronze']
cont_inverno = cont_inverno.sort_values(by='Total', ascending=False).reset_index()
max_inverno = max(cont_inverno['Total'])
max_year_inverno = cont_inverno.loc[cont_inverno['Total'] == max_inverno, 'Year'].values[0]

palette = ['#E5E1BC' if total != max_verao else cor_dourada for total in sorted(cont_verao['Total'].unique())]

fig, (ax1, ax2) =  plt.subplots(2, 1, figsize=(20, 15), gridspec_kw={'height_ratios': [1, 1]}, facecolor=cor_fundo_gold)

sns.lineplot(data=cont_verao, x='Year', y='Total', ax=ax1, marker='o', color='gray')
ax1.plot(max_year_verao, max_verao, 'o', markersize=20, color=cor_dourada, label=f'Máximo {max_verao}')
ax1.annotate(f'{max_verao}', xy=(max_year_verao, max_verao), xytext=(max_year_verao, max_verao + 50),
            fontsize=12, ha='center', color='black')

ax1.set_ylim(0, max_verao*1.2)
ax1.set_facecolor(cor_fundo_gold)

ax1.text(-4, len(filtrado2) - 0.2, 'Medalhas de Ouro por modalidade ( > 50 anos)', fontsize=15, fontweight='bold', fontfamily='serif', color='#323232')


sns.lineplot(data=cont_inverno, x='Year', y='Total', ax=ax2, marker='o', color='gray')
ax2.plot(max_year_inverno, max_inverno, 'o', markersize=20, color=cor_dourada, label=f'Máximo {max_inverno}')
ax2.annotate(f'{max_inverno}', xy=(max_year_inverno, max_inverno), xytext=(max_year_inverno, max_inverno*1.05),
            fontsize=12, ha='center', color='black')

ax2.set_ylim(0, max_inverno*1.2)
ax2.set_facecolor(cor_fundo_gold)

fig.suptitle('Distribuição de Medalhas através dos anos', fontsize=15, fontweight='bold', fontfamily='serif', color='#323232', verticalalignment='top', y=0.95)

plt.tight_layout()
ax1.set_xlabel('')
ax1.set_ylabel('')
ax2.set_ylabel('')
ax2.set_xlabel('')
 974:
mulheres_verao = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Summer")]
mulhes_inverno = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Winter")]

cont_verao = mulheres_verao.groupby(['Year'])['Medal'].value_counts().unstack()
cont_verao['Total'] = cont_verao['Bronze'] + cont_verao['Silver'] + cont_verao['Bronze']
cont_verao = cont_verao.sort_values(by='Total', ascending=False).reset_index()
max_verao = max(cont_verao['Total'])
max_year_verao = cont_verao.loc[cont_verao['Total'] == max_verao, 'Year'].values[0]

cont_inverno = mulhes_inverno.groupby(['Year'])['Medal'].value_counts().unstack()
cont_inverno['Total'] = cont_inverno['Bronze'] + cont_inverno['Silver'] + cont_inverno['Bronze']
cont_inverno = cont_inverno.sort_values(by='Total', ascending=False).reset_index()
max_inverno = max(cont_inverno['Total'])
max_year_inverno = cont_inverno.loc[cont_inverno['Total'] == max_inverno, 'Year'].values[0]

palette = ['#E5E1BC' if total != max_verao else cor_dourada for total in sorted(cont_verao['Total'].unique())]

fig, (ax1, ax2) =  plt.subplots(2, 1, figsize=(20, 15), gridspec_kw={'height_ratios': [1, 1]}, facecolor=cor_fundo_gold)

sns.lineplot(data=cont_verao, x='Year', y='Total', ax=ax1, marker='o', color='gray')
ax1.plot(max_year_verao, max_verao, 'o', markersize=20, color=cor_dourada, label=f'Máximo {max_verao}')
ax1.annotate(f'{max_verao}', xy=(max_year_verao, max_verao), xytext=(max_year_verao, max_verao + 50),
            fontsize=12, ha='center', color='black')

ax1.set_ylim(0, max_verao*1.2)
ax1.set_facecolor(cor_fundo_gold)

ax1.text(0, 0, 'Medalhas de Ouro por modalidade ( > 50 anos)', fontsize=15, fontweight='bold', fontfamily='serif', color='#323232')


sns.lineplot(data=cont_inverno, x='Year', y='Total', ax=ax2, marker='o', color='gray')
ax2.plot(max_year_inverno, max_inverno, 'o', markersize=20, color=cor_dourada, label=f'Máximo {max_inverno}')
ax2.annotate(f'{max_inverno}', xy=(max_year_inverno, max_inverno), xytext=(max_year_inverno, max_inverno*1.05),
            fontsize=12, ha='center', color='black')

ax2.set_ylim(0, max_inverno*1.2)
ax2.set_facecolor(cor_fundo_gold)

fig.suptitle('Distribuição de Medalhas através dos anos', fontsize=15, fontweight='bold', fontfamily='serif', color='#323232', verticalalignment='top', y=0.95)

plt.tight_layout()
ax1.set_xlabel('')
ax1.set_ylabel('')
ax2.set_ylabel('')
ax2.set_xlabel('')
 975:
mulheres_verao = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Summer")]
mulhes_inverno = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Winter")]

cont_verao = mulheres_verao.groupby(['Year'])['Medal'].value_counts().unstack()
cont_verao['Total'] = cont_verao['Bronze'] + cont_verao['Silver'] + cont_verao['Bronze']
cont_verao = cont_verao.sort_values(by='Total', ascending=False).reset_index()
max_verao = max(cont_verao['Total'])
max_year_verao = cont_verao.loc[cont_verao['Total'] == max_verao, 'Year'].values[0]

cont_inverno = mulhes_inverno.groupby(['Year'])['Medal'].value_counts().unstack()
cont_inverno['Total'] = cont_inverno['Bronze'] + cont_inverno['Silver'] + cont_inverno['Bronze']
cont_inverno = cont_inverno.sort_values(by='Total', ascending=False).reset_index()
max_inverno = max(cont_inverno['Total'])
max_year_inverno = cont_inverno.loc[cont_inverno['Total'] == max_inverno, 'Year'].values[0]

palette = ['#E5E1BC' if total != max_verao else cor_dourada for total in sorted(cont_verao['Total'].unique())]

fig, (ax1, ax2) =  plt.subplots(2, 1, figsize=(20, 15), gridspec_kw={'height_ratios': [1, 1]}, facecolor=cor_fundo_gold)

sns.lineplot(data=cont_verao, x='Year', y='Total', ax=ax1, marker='o', color='gray')
ax1.plot(max_year_verao, max_verao, 'o', markersize=20, color=cor_dourada, label=f'Máximo {max_verao}')
ax1.annotate(f'{max_verao}', xy=(max_year_verao, max_verao), xytext=(max_year_verao, max_verao + 50),
            fontsize=12, ha='center', color='black')

ax1.set_ylim(0, max_verao*1.2)
ax1.set_facecolor(cor_fundo_gold)

ax1.text(max_year_verao, max_verao * 1.3, 'Verão', ha='center', va='top', fontsize=15, fontweight='bold', fontfamily='serif', color='#323232')


sns.lineplot(data=cont_inverno, x='Year', y='Total', ax=ax2, marker='o', color='gray')
ax2.plot(max_year_inverno, max_inverno, 'o', markersize=20, color=cor_dourada, label=f'Máximo {max_inverno}')
ax2.annotate(f'{max_inverno}', xy=(max_year_inverno, max_inverno), xytext=(max_year_inverno, max_inverno*1.05),
            fontsize=12, ha='center', color='black')

ax2.set_ylim(0, max_inverno*1.2)
ax2.set_facecolor(cor_fundo_gold)

fig.suptitle('Distribuição de Medalhas através dos anos', fontsize=15, fontweight='bold', fontfamily='serif', color='#323232', verticalalignment='top', y=0.95)

plt.tight_layout()
ax1.set_xlabel('')
ax1.set_ylabel('')
ax2.set_ylabel('')
ax2.set_xlabel('')
 976:
mulheres_verao = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Summer")]
mulhes_inverno = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Winter")]

cont_verao = mulheres_verao.groupby(['Year'])['Medal'].value_counts().unstack()
cont_verao['Total'] = cont_verao['Bronze'] + cont_verao['Silver'] + cont_verao['Bronze']
cont_verao = cont_verao.sort_values(by='Total', ascending=False).reset_index()
max_verao = max(cont_verao['Total'])
max_year_verao = cont_verao.loc[cont_verao['Total'] == max_verao, 'Year'].values[0]

cont_inverno = mulhes_inverno.groupby(['Year'])['Medal'].value_counts().unstack()
cont_inverno['Total'] = cont_inverno['Bronze'] + cont_inverno['Silver'] + cont_inverno['Bronze']
cont_inverno = cont_inverno.sort_values(by='Total', ascending=False).reset_index()
max_inverno = max(cont_inverno['Total'])
max_year_inverno = cont_inverno.loc[cont_inverno['Total'] == max_inverno, 'Year'].values[0]

palette = ['#E5E1BC' if total != max_verao else cor_dourada for total in sorted(cont_verao['Total'].unique())]

fig, (ax1, ax2) =  plt.subplots(2, 1, figsize=(20, 15), gridspec_kw={'height_ratios': [1, 1]}, facecolor=cor_fundo_gold)

sns.lineplot(data=cont_verao, x='Year', y='Total', ax=ax1, marker='o', color='gray')
ax1.plot(max_year_verao, max_verao, 'o', markersize=20, color=cor_dourada, label=f'Máximo {max_verao}')
ax1.annotate(f'{max_verao}', xy=(max_year_verao, max_verao), xytext=(max_year_verao, max_verao + 50),
            fontsize=12, ha='center', color='black')

ax1.set_ylim(0, max_verao*1.2)
ax1.set_facecolor(cor_fundo_gold)

ax1.text(max_year_verao/2, max_verao * 1.3, 'Verão', ha='center', va='top', fontsize=15, fontweight='bold', fontfamily='serif', color='#323232')


sns.lineplot(data=cont_inverno, x='Year', y='Total', ax=ax2, marker='o', color='gray')
ax2.plot(max_year_inverno, max_inverno, 'o', markersize=20, color=cor_dourada, label=f'Máximo {max_inverno}')
ax2.annotate(f'{max_inverno}', xy=(max_year_inverno, max_inverno), xytext=(max_year_inverno, max_inverno*1.05),
            fontsize=12, ha='center', color='black')

ax2.set_ylim(0, max_inverno*1.2)
ax2.set_facecolor(cor_fundo_gold)

fig.suptitle('Distribuição de Medalhas através dos anos', fontsize=15, fontweight='bold', fontfamily='serif', color='#323232', verticalalignment='top', y=0.95)

plt.tight_layout()
ax1.set_xlabel('')
ax1.set_ylabel('')
ax2.set_ylabel('')
ax2.set_xlabel('')
 977:
mulheres_verao = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Summer")]
mulhes_inverno = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Winter")]

cont_verao = mulheres_verao.groupby(['Year'])['Medal'].value_counts().unstack()
cont_verao['Total'] = cont_verao['Bronze'] + cont_verao['Silver'] + cont_verao['Bronze']
cont_verao = cont_verao.sort_values(by='Total', ascending=False).reset_index()
max_verao = max(cont_verao['Total'])
max_year_verao = cont_verao.loc[cont_verao['Total'] == max_verao, 'Year'].values[0]

cont_inverno = mulhes_inverno.groupby(['Year'])['Medal'].value_counts().unstack()
cont_inverno['Total'] = cont_inverno['Bronze'] + cont_inverno['Silver'] + cont_inverno['Bronze']
cont_inverno = cont_inverno.sort_values(by='Total', ascending=False).reset_index()
max_inverno = max(cont_inverno['Total'])
max_year_inverno = cont_inverno.loc[cont_inverno['Total'] == max_inverno, 'Year'].values[0]

palette = ['#E5E1BC' if total != max_verao else cor_dourada for total in sorted(cont_verao['Total'].unique())]

fig, (ax1, ax2) =  plt.subplots(2, 1, figsize=(20, 15), gridspec_kw={'height_ratios': [1, 1]}, facecolor=cor_fundo_gold)

sns.lineplot(data=cont_verao, x='Year', y='Total', ax=ax1, marker='o', color='gray')
ax1.plot(max_year_verao, max_verao, 'o', markersize=20, color=cor_dourada, label=f'Máximo {max_verao}')
ax1.annotate(f'{max_verao}', xy=(max_year_verao, max_verao), xytext=(max_year_verao, max_verao + 50),
            fontsize=12, ha='center', color='black')

ax1.set_ylim(0, max_verao*1.2)
ax1.set_facecolor(cor_fundo_gold)

ax1.text(max_year_verao*0.5, max_verao * 1.3, 'Verão', ha='center', va='top', fontsize=15, fontweight='bold', fontfamily='serif', color='#323232')


sns.lineplot(data=cont_inverno, x='Year', y='Total', ax=ax2, marker='o', color='gray')
ax2.plot(max_year_inverno, max_inverno, 'o', markersize=20, color=cor_dourada, label=f'Máximo {max_inverno}')
ax2.annotate(f'{max_inverno}', xy=(max_year_inverno, max_inverno), xytext=(max_year_inverno, max_inverno*1.05),
            fontsize=12, ha='center', color='black')

ax2.set_ylim(0, max_inverno*1.2)
ax2.set_facecolor(cor_fundo_gold)

fig.suptitle('Distribuição de Medalhas através dos anos', fontsize=15, fontweight='bold', fontfamily='serif', color='#323232', verticalalignment='top', y=0.95)

plt.tight_layout()
ax1.set_xlabel('')
ax1.set_ylabel('')
ax2.set_ylabel('')
ax2.set_xlabel('')
 978:
mulheres_verao = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Summer")]
mulhes_inverno = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Winter")]

cont_verao = mulheres_verao.groupby(['Year'])['Medal'].value_counts().unstack()
cont_verao['Total'] = cont_verao['Bronze'] + cont_verao['Silver'] + cont_verao['Bronze']
cont_verao = cont_verao.sort_values(by='Total', ascending=False).reset_index()
max_verao = max(cont_verao['Total'])
max_year_verao = cont_verao.loc[cont_verao['Total'] == max_verao, 'Year'].values[0]

cont_inverno = mulhes_inverno.groupby(['Year'])['Medal'].value_counts().unstack()
cont_inverno['Total'] = cont_inverno['Bronze'] + cont_inverno['Silver'] + cont_inverno['Bronze']
cont_inverno = cont_inverno.sort_values(by='Total', ascending=False).reset_index()
max_inverno = max(cont_inverno['Total'])
max_year_inverno = cont_inverno.loc[cont_inverno['Total'] == max_inverno, 'Year'].values[0]

palette = ['#E5E1BC' if total != max_verao else cor_dourada for total in sorted(cont_verao['Total'].unique())]

fig, (ax1, ax2) =  plt.subplots(2, 1, figsize=(20, 15), gridspec_kw={'height_ratios': [1, 1]}, facecolor=cor_fundo_gold)

sns.lineplot(data=cont_verao, x='Year', y='Total', ax=ax1, marker='o', color='gray')
ax1.plot(max_year_verao, max_verao, 'o', markersize=20, color=cor_dourada, label=f'Máximo {max_verao}')
ax1.annotate(f'{max_verao}', xy=(max_year_verao, max_verao), xytext=(max_year_verao, max_verao + 50),
            fontsize=12, ha='center', color='black')

ax1.set_ylim(0, max_verao*1.2)
ax1.set_facecolor(cor_fundo_gold)

ax1.text(max_year_verao, max_verao * 1.3, 'Verão', ha='center', va='top', fontsize=15, fontweight='bold', fontfamily='serif', color='#323232')


sns.lineplot(data=cont_inverno, x='Year', y='Total', ax=ax2, marker='o', color='gray')
ax2.plot(max_year_inverno, max_inverno, 'o', markersize=20, color=cor_dourada, label=f'Máximo {max_inverno}')
ax2.annotate(f'{max_inverno}', xy=(max_year_inverno, max_inverno), xytext=(max_year_inverno, max_inverno*1.05),
            fontsize=12, ha='center', color='black')

ax2.set_ylim(0, max_inverno*1.2)
ax2.set_facecolor(cor_fundo_gold)

fig.suptitle('Distribuição de Medalhas através dos anos', fontsize=15, fontweight='bold', fontfamily='serif', color='#323232', verticalalignment='top', y=0.95)

plt.tight_layout()
ax1.set_xlabel('')
ax1.set_ylabel('')
ax2.set_ylabel('')
ax2.set_xlabel('')
 979:
mulheres_verao = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Summer")]
mulhes_inverno = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Winter")]

cont_verao = mulheres_verao.groupby(['Year'])['Medal'].value_counts().unstack()
cont_verao['Total'] = cont_verao['Bronze'] + cont_verao['Silver'] + cont_verao['Bronze']
cont_verao = cont_verao.sort_values(by='Total', ascending=False).reset_index()
max_verao = max(cont_verao['Total'])
max_year_verao = cont_verao.loc[cont_verao['Total'] == max_verao, 'Year'].values[0]

cont_inverno = mulhes_inverno.groupby(['Year'])['Medal'].value_counts().unstack()
cont_inverno['Total'] = cont_inverno['Bronze'] + cont_inverno['Silver'] + cont_inverno['Bronze']
cont_inverno = cont_inverno.sort_values(by='Total', ascending=False).reset_index()
max_inverno = max(cont_inverno['Total'])
max_year_inverno = cont_inverno.loc[cont_inverno['Total'] == max_inverno, 'Year'].values[0]

palette = ['#E5E1BC' if total != max_verao else cor_dourada for total in sorted(cont_verao['Total'].unique())]

fig, (ax1, ax2) =  plt.subplots(2, 1, figsize=(20, 15), gridspec_kw={'height_ratios': [1, 1]}, facecolor=cor_fundo_gold)

sns.lineplot(data=cont_verao, x='Year', y='Total', ax=ax1, marker='o', color='gray')
ax1.plot(max_year_verao, max_verao, 'o', markersize=20, color=cor_dourada, label=f'Máximo {max_verao}')
ax1.annotate(f'{max_verao}', xy=(max_year_verao, max_verao), xytext=(max_year_verao, max_verao + 50),
            fontsize=12, ha='center', color='black')

ax1.set_ylim(0, max_verao*1.2)
ax1.set_facecolor(cor_fundo_gold)

ax1.text(max_year_verao, max_verao, 'Verão', ha='center', va='top', fontsize=15, fontweight='bold', fontfamily='serif', color='#323232')


sns.lineplot(data=cont_inverno, x='Year', y='Total', ax=ax2, marker='o', color='gray')
ax2.plot(max_year_inverno, max_inverno, 'o', markersize=20, color=cor_dourada, label=f'Máximo {max_inverno}')
ax2.annotate(f'{max_inverno}', xy=(max_year_inverno, max_inverno), xytext=(max_year_inverno, max_inverno*1.05),
            fontsize=12, ha='center', color='black')

ax2.set_ylim(0, max_inverno*1.2)
ax2.set_facecolor(cor_fundo_gold)

fig.suptitle('Distribuição de Medalhas através dos anos', fontsize=15, fontweight='bold', fontfamily='serif', color='#323232', verticalalignment='top', y=0.95)

plt.tight_layout()
ax1.set_xlabel('')
ax1.set_ylabel('')
ax2.set_ylabel('')
ax2.set_xlabel('')
 980:
mulheres_verao = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Summer")]
mulhes_inverno = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Winter")]

cont_verao = mulheres_verao.groupby(['Year'])['Medal'].value_counts().unstack()
cont_verao['Total'] = cont_verao['Bronze'] + cont_verao['Silver'] + cont_verao['Bronze']
cont_verao = cont_verao.sort_values(by='Total', ascending=False).reset_index()
max_verao = max(cont_verao['Total'])
max_year_verao = cont_verao.loc[cont_verao['Total'] == max_verao, 'Year'].values[0]

cont_inverno = mulhes_inverno.groupby(['Year'])['Medal'].value_counts().unstack()
cont_inverno['Total'] = cont_inverno['Bronze'] + cont_inverno['Silver'] + cont_inverno['Bronze']
cont_inverno = cont_inverno.sort_values(by='Total', ascending=False).reset_index()
max_inverno = max(cont_inverno['Total'])
max_year_inverno = cont_inverno.loc[cont_inverno['Total'] == max_inverno, 'Year'].values[0]

palette = ['#E5E1BC' if total != max_verao else cor_dourada for total in sorted(cont_verao['Total'].unique())]

fig, (ax1, ax2) =  plt.subplots(2, 1, figsize=(20, 15), gridspec_kw={'height_ratios': [1, 1]}, facecolor=cor_fundo_gold)

sns.lineplot(data=cont_verao, x='Year', y='Total', ax=ax1, marker='o', color='gray')
ax1.plot(max_year_verao, max_verao, 'o', markersize=20, color=cor_dourada, label=f'Máximo {max_verao}')
ax1.annotate(f'{max_verao}', xy=(max_year_verao, max_verao), xytext=(max_year_verao, max_verao + 50),
            fontsize=12, ha='center', color='black')

ax1.set_ylim(0, max_verao*1.2)
ax1.set_facecolor(cor_fundo_gold)

ax1.text(0.5, max_verao, 'Verão', ha='center', va='top', fontsize=15, fontweight='bold', fontfamily='serif', color='#323232')


sns.lineplot(data=cont_inverno, x='Year', y='Total', ax=ax2, marker='o', color='gray')
ax2.plot(max_year_inverno, max_inverno, 'o', markersize=20, color=cor_dourada, label=f'Máximo {max_inverno}')
ax2.annotate(f'{max_inverno}', xy=(max_year_inverno, max_inverno), xytext=(max_year_inverno, max_inverno*1.05),
            fontsize=12, ha='center', color='black')

ax2.set_ylim(0, max_inverno*1.2)
ax2.set_facecolor(cor_fundo_gold)

fig.suptitle('Distribuição de Medalhas através dos anos', fontsize=15, fontweight='bold', fontfamily='serif', color='#323232', verticalalignment='top', y=0.95)

plt.tight_layout()
ax1.set_xlabel('')
ax1.set_ylabel('')
ax2.set_ylabel('')
ax2.set_xlabel('')
 981:
mulheres_verao = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Summer")]
mulhes_inverno = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Winter")]

cont_verao = mulheres_verao.groupby(['Year'])['Medal'].value_counts().unstack()
cont_verao['Total'] = cont_verao['Bronze'] + cont_verao['Silver'] + cont_verao['Bronze']
cont_verao = cont_verao.sort_values(by='Total', ascending=False).reset_index()
max_verao = max(cont_verao['Total'])
max_year_verao = cont_verao.loc[cont_verao['Total'] == max_verao, 'Year'].values[0]

cont_inverno = mulhes_inverno.groupby(['Year'])['Medal'].value_counts().unstack()
cont_inverno['Total'] = cont_inverno['Bronze'] + cont_inverno['Silver'] + cont_inverno['Bronze']
cont_inverno = cont_inverno.sort_values(by='Total', ascending=False).reset_index()
max_inverno = max(cont_inverno['Total'])
max_year_inverno = cont_inverno.loc[cont_inverno['Total'] == max_inverno, 'Year'].values[0]

palette = ['#E5E1BC' if total != max_verao else cor_dourada for total in sorted(cont_verao['Total'].unique())]

fig, (ax1, ax2) =  plt.subplots(2, 1, figsize=(20, 15), gridspec_kw={'height_ratios': [1, 1]}, facecolor=cor_fundo_gold)

sns.lineplot(data=cont_verao, x='Year', y='Total', ax=ax1, marker='o', color='gray')
ax1.plot(max_year_verao, max_verao, 'o', markersize=20, color=cor_dourada, label=f'Máximo {max_verao}')
ax1.annotate(f'{max_verao}', xy=(max_year_verao, max_verao), xytext=(max_year_verao, max_verao + 50),
            fontsize=12, ha='center', color='black')

ax1.set_ylim(0, max_verao*1.2)
ax1.set_facecolor(cor_fundo_gold)

ax1.text(max_year_verao, max_verao, 'Verão', ha='center', va='top', fontsize=15, fontweight='bold', fontfamily='serif', color='#323232')


sns.lineplot(data=cont_inverno, x='Year', y='Total', ax=ax2, marker='o', color='gray')
ax2.plot(max_year_inverno, max_inverno, 'o', markersize=20, color=cor_dourada, label=f'Máximo {max_inverno}')
ax2.annotate(f'{max_inverno}', xy=(max_year_inverno, max_inverno), xytext=(max_year_inverno, max_inverno*1.05),
            fontsize=12, ha='center', color='black')

ax2.set_ylim(0, max_inverno*1.2)
ax2.set_facecolor(cor_fundo_gold)

fig.suptitle('Distribuição de Medalhas através dos anos', fontsize=15, fontweight='bold', fontfamily='serif', color='#323232', verticalalignment='top', y=0.95)

plt.tight_layout()
ax1.set_xlabel('')
ax1.set_ylabel('')
ax2.set_ylabel('')
ax2.set_xlabel('')
 982:
mulheres_verao = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Summer")]
mulhes_inverno = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Winter")]

cont_verao = mulheres_verao.groupby(['Year'])['Medal'].value_counts().unstack()
cont_verao['Total'] = cont_verao['Bronze'] + cont_verao['Silver'] + cont_verao['Bronze']
cont_verao = cont_verao.sort_values(by='Total', ascending=False).reset_index()
max_verao = max(cont_verao['Total'])
max_year_verao = cont_verao.loc[cont_verao['Total'] == max_verao, 'Year'].values[0]

cont_inverno = mulhes_inverno.groupby(['Year'])['Medal'].value_counts().unstack()
cont_inverno['Total'] = cont_inverno['Bronze'] + cont_inverno['Silver'] + cont_inverno['Bronze']
cont_inverno = cont_inverno.sort_values(by='Total', ascending=False).reset_index()
max_inverno = max(cont_inverno['Total'])
max_year_inverno = cont_inverno.loc[cont_inverno['Total'] == max_inverno, 'Year'].values[0]

palette = ['#E5E1BC' if total != max_verao else cor_dourada for total in sorted(cont_verao['Total'].unique())]

fig, (ax1, ax2) =  plt.subplots(2, 1, figsize=(20, 15), gridspec_kw={'height_ratios': [1, 1]}, facecolor=cor_fundo_gold)

sns.lineplot(data=cont_verao, x='Year', y='Total', ax=ax1, marker='o', color='gray')
ax1.plot(max_year_verao, max_verao, 'o', markersize=20, color=cor_dourada, label=f'Máximo {max_verao}')
ax1.annotate(f'{max_verao}', xy=(max_year_verao, max_verao), xytext=(max_year_verao, max_verao + 50),
            fontsize=12, ha='center', color='black')

ax1.set_ylim(0, max_verao*1.2)
ax1.set_facecolor(cor_fundo_gold)

ax1.text(1900, max_verao, 'Verão', ha='center', va='top', fontsize=15, fontweight='bold', fontfamily='serif', color='#323232')


sns.lineplot(data=cont_inverno, x='Year', y='Total', ax=ax2, marker='o', color='gray')
ax2.plot(max_year_inverno, max_inverno, 'o', markersize=20, color=cor_dourada, label=f'Máximo {max_inverno}')
ax2.annotate(f'{max_inverno}', xy=(max_year_inverno, max_inverno), xytext=(max_year_inverno, max_inverno*1.05),
            fontsize=12, ha='center', color='black')

ax2.set_ylim(0, max_inverno*1.2)
ax2.set_facecolor(cor_fundo_gold)

fig.suptitle('Distribuição de Medalhas através dos anos', fontsize=15, fontweight='bold', fontfamily='serif', color='#323232', verticalalignment='top', y=0.95)

plt.tight_layout()
ax1.set_xlabel('')
ax1.set_ylabel('')
ax2.set_ylabel('')
ax2.set_xlabel('')
 983:
mulheres_verao = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Summer")]
mulhes_inverno = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Winter")]

cont_verao = mulheres_verao.groupby(['Year'])['Medal'].value_counts().unstack()
cont_verao['Total'] = cont_verao['Bronze'] + cont_verao['Silver'] + cont_verao['Bronze']
cont_verao = cont_verao.sort_values(by='Total', ascending=False).reset_index()
max_verao = max(cont_verao['Total'])
max_year_verao = cont_verao.loc[cont_verao['Total'] == max_verao, 'Year'].values[0]

cont_inverno = mulhes_inverno.groupby(['Year'])['Medal'].value_counts().unstack()
cont_inverno['Total'] = cont_inverno['Bronze'] + cont_inverno['Silver'] + cont_inverno['Bronze']
cont_inverno = cont_inverno.sort_values(by='Total', ascending=False).reset_index()
max_inverno = max(cont_inverno['Total'])
max_year_inverno = cont_inverno.loc[cont_inverno['Total'] == max_inverno, 'Year'].values[0]

palette = ['#E5E1BC' if total != max_verao else cor_dourada for total in sorted(cont_verao['Total'].unique())]

fig, (ax1, ax2) =  plt.subplots(2, 1, figsize=(20, 15), gridspec_kw={'height_ratios': [1, 1]}, facecolor=cor_fundo_gold)

sns.lineplot(data=cont_verao, x='Year', y='Total', ax=ax1, marker='o', color='gray')
ax1.plot(max_year_verao, max_verao, 'o', markersize=20, color=cor_dourada, label=f'Máximo {max_verao}')
ax1.annotate(f'{max_verao}', xy=(max_year_verao, max_verao), xytext=(max_year_verao, max_verao + 50),
            fontsize=12, ha='center', color='black')

ax1.set_ylim(0, max_verao*1.2)
ax1.set_facecolor(cor_fundo_gold)

ax1.text(1900, max_verao*1.1, 'Verão', ha='center', va='top', fontsize=15, fontweight='bold', fontfamily='serif', color='#323232')


sns.lineplot(data=cont_inverno, x='Year', y='Total', ax=ax2, marker='o', color='gray')
ax2.plot(max_year_inverno, max_inverno, 'o', markersize=20, color=cor_dourada, label=f'Máximo {max_inverno}')
ax2.annotate(f'{max_inverno}', xy=(max_year_inverno, max_inverno), xytext=(max_year_inverno, max_inverno*1.05),
            fontsize=12, ha='center', color='black')

ax2.set_ylim(0, max_inverno*1.2)
ax2.set_facecolor(cor_fundo_gold)

fig.suptitle('Distribuição de Medalhas através dos anos', fontsize=15, fontweight='bold', fontfamily='serif', color='#323232', verticalalignment='top', y=0.95)

plt.tight_layout()
ax1.set_xlabel('')
ax1.set_ylabel('')
ax2.set_ylabel('')
ax2.set_xlabel('')
 984:
mulheres_verao = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Summer")]
mulhes_inverno = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Winter")]

cont_verao = mulheres_verao.groupby(['Year'])['Medal'].value_counts().unstack()
cont_verao['Total'] = cont_verao['Bronze'] + cont_verao['Silver'] + cont_verao['Bronze']
cont_verao = cont_verao.sort_values(by='Total', ascending=False).reset_index()
max_verao = max(cont_verao['Total'])
max_year_verao = cont_verao.loc[cont_verao['Total'] == max_verao, 'Year'].values[0]

cont_inverno = mulhes_inverno.groupby(['Year'])['Medal'].value_counts().unstack()
cont_inverno['Total'] = cont_inverno['Bronze'] + cont_inverno['Silver'] + cont_inverno['Bronze']
cont_inverno = cont_inverno.sort_values(by='Total', ascending=False).reset_index()
max_inverno = max(cont_inverno['Total'])
max_year_inverno = cont_inverno.loc[cont_inverno['Total'] == max_inverno, 'Year'].values[0]

palette = ['#E5E1BC' if total != max_verao else cor_dourada for total in sorted(cont_verao['Total'].unique())]

fig, (ax1, ax2) =  plt.subplots(2, 1, figsize=(20, 15), gridspec_kw={'height_ratios': [1, 1]}, facecolor=cor_fundo_gold)

sns.lineplot(data=cont_verao, x='Year', y='Total', ax=ax1, marker='o', color='gray')
ax1.plot(max_year_verao, max_verao, 'o', markersize=20, color=cor_dourada, label=f'Máximo {max_verao}')
ax1.annotate(f'{max_verao}', xy=(max_year_verao, max_verao), xytext=(max_year_verao, max_verao + 50),
            fontsize=12, ha='center', color='black')

ax1.set_ylim(0, max_verao*1.2)
ax1.set_facecolor(cor_fundo_gold)

ax1.text(1900, max_verao*1.1, 'Verão', ha='center', va='top', fontsize=15, fontweight='bold', fontfamily='serif', color='#FFA07')


sns.lineplot(data=cont_inverno, x='Year', y='Total', ax=ax2, marker='o', color='gray')
ax2.plot(max_year_inverno, max_inverno, 'o', markersize=20, color=cor_dourada, label=f'Máximo {max_inverno}')
ax2.annotate(f'{max_inverno}', xy=(max_year_inverno, max_inverno), xytext=(max_year_inverno, max_inverno*1.05),
            fontsize=12, ha='center', color='black')

ax2.set_ylim(0, max_inverno*1.2)
ax2.set_facecolor(cor_fundo_gold)

fig.suptitle('Distribuição de Medalhas através dos anos', fontsize=15, fontweight='bold', fontfamily='serif', color='#323232', verticalalignment='top', y=0.95)

plt.tight_layout()
ax1.set_xlabel('')
ax1.set_ylabel('')
ax2.set_ylabel('')
ax2.set_xlabel('')
 985:
mulheres_verao = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Summer")]
mulhes_inverno = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Winter")]

cont_verao = mulheres_verao.groupby(['Year'])['Medal'].value_counts().unstack()
cont_verao['Total'] = cont_verao['Bronze'] + cont_verao['Silver'] + cont_verao['Bronze']
cont_verao = cont_verao.sort_values(by='Total', ascending=False).reset_index()
max_verao = max(cont_verao['Total'])
max_year_verao = cont_verao.loc[cont_verao['Total'] == max_verao, 'Year'].values[0]

cont_inverno = mulhes_inverno.groupby(['Year'])['Medal'].value_counts().unstack()
cont_inverno['Total'] = cont_inverno['Bronze'] + cont_inverno['Silver'] + cont_inverno['Bronze']
cont_inverno = cont_inverno.sort_values(by='Total', ascending=False).reset_index()
max_inverno = max(cont_inverno['Total'])
max_year_inverno = cont_inverno.loc[cont_inverno['Total'] == max_inverno, 'Year'].values[0]

palette = ['#E5E1BC' if total != max_verao else cor_dourada for total in sorted(cont_verao['Total'].unique())]

fig, (ax1, ax2) =  plt.subplots(2, 1, figsize=(20, 15), gridspec_kw={'height_ratios': [1, 1]}, facecolor=cor_fundo_gold)

sns.lineplot(data=cont_verao, x='Year', y='Total', ax=ax1, marker='o', color='gray')
ax1.plot(max_year_verao, max_verao, 'o', markersize=20, color=cor_dourada, label=f'Máximo {max_verao}')
ax1.annotate(f'{max_verao}', xy=(max_year_verao, max_verao), xytext=(max_year_verao, max_verao + 50),
            fontsize=12, ha='center', color='black')

ax1.set_ylim(0, max_verao*1.2)
ax1.set_facecolor(cor_fundo_gold)

ax1.text(1900, max_verao*1.1, 'Verão', ha='center', va='top', fontsize=15, fontweight='bold', fontfamily='serif', color='#FFA07A')


sns.lineplot(data=cont_inverno, x='Year', y='Total', ax=ax2, marker='o', color='gray')
ax2.plot(max_year_inverno, max_inverno, 'o', markersize=20, color=cor_dourada, label=f'Máximo {max_inverno}')
ax2.annotate(f'{max_inverno}', xy=(max_year_inverno, max_inverno), xytext=(max_year_inverno, max_inverno*1.05),
            fontsize=12, ha='center', color='black')

ax2.set_ylim(0, max_inverno*1.2)
ax2.set_facecolor(cor_fundo_gold)

fig.suptitle('Distribuição de Medalhas através dos anos', fontsize=15, fontweight='bold', fontfamily='serif', color='#323232', verticalalignment='top', y=0.95)

plt.tight_layout()
ax1.set_xlabel('')
ax1.set_ylabel('')
ax2.set_ylabel('')
ax2.set_xlabel('')
 986:
mulheres_verao = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Summer")]
mulhes_inverno = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Winter")]

cont_verao = mulheres_verao.groupby(['Year'])['Medal'].value_counts().unstack()
cont_verao['Total'] = cont_verao['Bronze'] + cont_verao['Silver'] + cont_verao['Bronze']
cont_verao = cont_verao.sort_values(by='Total', ascending=False).reset_index()
max_verao = max(cont_verao['Total'])
max_year_verao = cont_verao.loc[cont_verao['Total'] == max_verao, 'Year'].values[0]

cont_inverno = mulhes_inverno.groupby(['Year'])['Medal'].value_counts().unstack()
cont_inverno['Total'] = cont_inverno['Bronze'] + cont_inverno['Silver'] + cont_inverno['Bronze']
cont_inverno = cont_inverno.sort_values(by='Total', ascending=False).reset_index()
max_inverno = max(cont_inverno['Total'])
max_year_inverno = cont_inverno.loc[cont_inverno['Total'] == max_inverno, 'Year'].values[0]

palette = ['#E5E1BC' if total != max_verao else cor_dourada for total in sorted(cont_verao['Total'].unique())]

fig, (ax1, ax2) =  plt.subplots(2, 1, figsize=(20, 15), gridspec_kw={'height_ratios': [1, 1]}, facecolor=cor_fundo_gold)

sns.lineplot(data=cont_verao, x='Year', y='Total', ax=ax1, marker='o', color='#FFA07A')
ax1.plot(max_year_verao, max_verao, 'o', markersize=20, color=cor_dourada, label=f'Máximo {max_verao}')
ax1.annotate(f'{max_verao}', xy=(max_year_verao, max_verao), xytext=(max_year_verao, max_verao + 50),
            fontsize=12, ha='center', color='black')

ax1.set_ylim(0, max_verao*1.2)
ax1.set_facecolor(cor_fundo_gold)

ax1.text(1900, max_verao*1.1, 'Verão', ha='center', va='top', fontsize=15, fontweight='bold', fontfamily='serif', color='#FFA07A')


sns.lineplot(data=cont_inverno, x='Year', y='Total', ax=ax2, marker='o', color='gray')
ax2.plot(max_year_inverno, max_inverno, 'o', markersize=20, color=cor_dourada, label=f'Máximo {max_inverno}')
ax2.annotate(f'{max_inverno}', xy=(max_year_inverno, max_inverno), xytext=(max_year_inverno, max_inverno*1.05),
            fontsize=12, ha='center', color='black')

ax2.set_ylim(0, max_inverno*1.2)
ax2.set_facecolor(cor_fundo_gold)

fig.suptitle('Distribuição de Medalhas através dos anos', fontsize=15, fontweight='bold', fontfamily='serif', color='#323232', verticalalignment='top', y=0.95)

plt.tight_layout()
ax1.set_xlabel('')
ax1.set_ylabel('')
ax2.set_ylabel('')
ax2.set_xlabel('')
 987:
mulheres_verao = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Summer")]
mulhes_inverno = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Winter")]

cont_verao = mulheres_verao.groupby(['Year'])['Medal'].value_counts().unstack()
cont_verao['Total'] = cont_verao['Bronze'] + cont_verao['Silver'] + cont_verao['Bronze']
cont_verao = cont_verao.sort_values(by='Total', ascending=False).reset_index()
max_verao = max(cont_verao['Total'])
max_year_verao = cont_verao.loc[cont_verao['Total'] == max_verao, 'Year'].values[0]

cont_inverno = mulhes_inverno.groupby(['Year'])['Medal'].value_counts().unstack()
cont_inverno['Total'] = cont_inverno['Bronze'] + cont_inverno['Silver'] + cont_inverno['Bronze']
cont_inverno = cont_inverno.sort_values(by='Total', ascending=False).reset_index()
max_inverno = max(cont_inverno['Total'])
max_year_inverno = cont_inverno.loc[cont_inverno['Total'] == max_inverno, 'Year'].values[0]

palette = ['#E5E1BC' if total != max_verao else cor_dourada for total in sorted(cont_verao['Total'].unique())]

fig, (ax1, ax2) =  plt.subplots(2, 1, figsize=(20, 15), gridspec_kw={'height_ratios': [1, 1]}, facecolor=cor_fundo_gold)

sns.lineplot(data=cont_verao, x='Year', y='Total', ax=ax1, marker='o', color='#FFA07A')
ax1.plot(max_year_verao, max_verao, 'o', markersize=20, color=cor_dourada, label=f'Máximo {max_verao}')
ax1.annotate(f'{max_verao}', xy=(max_year_verao, max_verao), xytext=(max_year_verao, max_verao + 50),
            fontsize=12, ha='center', color='black')

ax1.set_ylim(0, max_verao*1.2)
ax1.set_facecolor(cor_fundo_gold)

ax1.text(1900, max_verao*1.1, 'Verão', ha='center', va='top', fontsize=15, fontweight='bold', fontfamily='serif', color='#FFA07A')


sns.lineplot(data=cont_inverno, x='Year', y='Total', ax=ax2, marker='o', color='#B0E0E6')
ax2.plot(max_year_inverno, max_inverno, 'o', markersize=20, color=cor_dourada, label=f'Máximo {max_inverno}')
ax2.annotate(f'{max_inverno}', xy=(max_year_inverno, max_inverno), xytext=(max_year_inverno, max_inverno*1.05),
            fontsize=12, ha='center', color='black')

ax2.set_ylim(0, max_inverno*1.2)
ax2.set_facecolor(cor_fundo_gold)

ax2.text(1900, max_verao*1.1, 'Inverno', ha='center', va='top', fontsize=15, fontweight='bold', fontfamily='serif', color='#B0E0E6')

fig.suptitle('Distribuição de Medalhas através dos anos', fontsize=15, fontweight='bold', fontfamily='serif', color='#323232', verticalalignment='top', y=0.95)

plt.tight_layout()
ax1.set_xlabel('')
ax1.set_ylabel('')
ax2.set_ylabel('')
ax2.set_xlabel('')
 988:
mulheres_verao = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Summer")]
mulhes_inverno = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Winter")]

cont_verao = mulheres_verao.groupby(['Year'])['Medal'].value_counts().unstack()
cont_verao['Total'] = cont_verao['Bronze'] + cont_verao['Silver'] + cont_verao['Bronze']
cont_verao = cont_verao.sort_values(by='Total', ascending=False).reset_index()
max_verao = max(cont_verao['Total'])
max_year_verao = cont_verao.loc[cont_verao['Total'] == max_verao, 'Year'].values[0]

cont_inverno = mulhes_inverno.groupby(['Year'])['Medal'].value_counts().unstack()
cont_inverno['Total'] = cont_inverno['Bronze'] + cont_inverno['Silver'] + cont_inverno['Bronze']
cont_inverno = cont_inverno.sort_values(by='Total', ascending=False).reset_index()
max_inverno = max(cont_inverno['Total'])
max_year_inverno = cont_inverno.loc[cont_inverno['Total'] == max_inverno, 'Year'].values[0]

palette = ['#E5E1BC' if total != max_verao else cor_dourada for total in sorted(cont_verao['Total'].unique())]

fig, (ax1, ax2) =  plt.subplots(2, 1, figsize=(20, 15), gridspec_kw={'height_ratios': [1, 1]}, facecolor=cor_fundo_gold)

sns.lineplot(data=cont_verao, x='Year', y='Total', ax=ax1, marker='o', color='#FFA07A')
ax1.plot(max_year_verao, max_verao, 'o', markersize=20, color=cor_dourada, label=f'Máximo {max_verao}')
ax1.annotate(f'{max_verao}', xy=(max_year_verao, max_verao), xytext=(max_year_verao, max_verao + 50),
            fontsize=12, ha='center', color='black')

ax1.set_ylim(0, max_verao*1.2)
ax1.set_facecolor(cor_fundo_gold)

ax1.text(1900, max_verao*1.1, 'Verão', ha='center', va='top', fontsize=15, fontweight='bold', fontfamily='serif', color='#FFA07A')


sns.lineplot(data=cont_inverno, x='Year', y='Total', ax=ax2, marker='o', color='#B0E0E6')
ax2.plot(max_year_inverno, max_inverno, 'o', markersize=20, color=cor_dourada, label=f'Máximo {max_inverno}')
ax2.annotate(f'{max_inverno}', xy=(max_year_inverno, max_inverno), xytext=(max_year_inverno, max_inverno*1.05),
            fontsize=12, ha='center', color='black')

ax2.set_ylim(0, max_inverno*1.2)
ax2.set_facecolor(cor_fundo_gold)

ax2.text(1900, max_inverno*1.1, 'Inverno', ha='center', va='top', fontsize=15, fontweight='bold', fontfamily='serif', color='#B0E0E6')

fig.suptitle('Distribuição de Medalhas através dos anos', fontsize=15, fontweight='bold', fontfamily='serif', color='#323232', verticalalignment='top', y=0.95)

plt.tight_layout()
ax1.set_xlabel('')
ax1.set_ylabel('')
ax2.set_ylabel('')
ax2.set_xlabel('')
 989:
mulheres_verao = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Summer")]
mulhes_inverno = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Winter")]

cont_verao = mulheres_verao.groupby(['Year'])['Medal'].value_counts().unstack()
cont_verao['Total'] = cont_verao['Bronze'] + cont_verao['Silver'] + cont_verao['Bronze']
cont_verao = cont_verao.sort_values(by='Total', ascending=False).reset_index()
max_verao = max(cont_verao['Total'])
max_year_verao = cont_verao.loc[cont_verao['Total'] == max_verao, 'Year'].values[0]

cont_inverno = mulhes_inverno.groupby(['Year'])['Medal'].value_counts().unstack()
cont_inverno['Total'] = cont_inverno['Bronze'] + cont_inverno['Silver'] + cont_inverno['Bronze']
cont_inverno = cont_inverno.sort_values(by='Total', ascending=False).reset_index()
max_inverno = max(cont_inverno['Total'])
max_year_inverno = cont_inverno.loc[cont_inverno['Total'] == max_inverno, 'Year'].values[0]

palette = ['#E5E1BC' if total != max_verao else cor_dourada for total in sorted(cont_verao['Total'].unique())]

fig, (ax1, ax2) =  plt.subplots(2, 1, figsize=(20, 15), gridspec_kw={'height_ratios': [1, 1]}, facecolor=cor_fundo_gold)

sns.lineplot(data=cont_verao, x='Year', y='Total', ax=ax1, marker='o', color='#FFA07A')
ax1.plot(max_year_verao, max_verao, 'o', markersize=20, color=cor_dourada, label=f'Máximo {max_verao}')
ax1.annotate(f'{max_verao}', xy=(max_year_verao, max_verao), xytext=(max_year_verao, max_verao + 50),
            fontsize=12, ha='center', color='black')

ax1.set_ylim(0, max_verao*1.2)
ax1.set_facecolor(cor_fundo_gold)

ax1.text(1900, max_verao*1.1, 'Verão', ha='center', va='top', fontsize=15, fontweight='bold', fontfamily='serif', color='#FFA07A')


sns.lineplot(data=cont_inverno, x='Year', y='Total', ax=ax2, marker='o', color='#B0E0E6')
ax2.plot(max_year_inverno, max_inverno, 'o', markersize=20, color=cor_dourada, label=f'Máximo {max_inverno}')
ax2.annotate(f'{max_inverno}', xy=(max_year_inverno, max_inverno), xytext=(max_year_inverno, max_inverno*1.05),
            fontsize=12, ha='center', color='black')

ax2.set_ylim(0, max_inverno*1.2)
ax2.set_facecolor(cor_fundo_gold)

ax2.text(1920, max_inverno*1.1, 'Inverno', ha='center', va='top', fontsize=15, fontweight='bold', fontfamily='serif', color='#B0E0E6')

fig.suptitle('Distribuição de Medalhas através dos anos', fontsize=15, fontweight='bold', fontfamily='serif', color='#323232', verticalalignment='top', y=0.95)

plt.tight_layout()
ax1.set_xlabel('')
ax1.set_ylabel('')
ax2.set_ylabel('')
ax2.set_xlabel('')
 990:
mulheres_verao = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Summer")]
mulhes_inverno = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Winter")]

cont_verao = mulheres_verao.groupby(['Year'])['Medal'].value_counts().unstack()
cont_verao['Total'] = cont_verao['Bronze'] + cont_verao['Silver'] + cont_verao['Bronze']
cont_verao = cont_verao.sort_values(by='Total', ascending=False).reset_index()
max_verao = max(cont_verao['Total'])
max_year_verao = cont_verao.loc[cont_verao['Total'] == max_verao, 'Year'].values[0]

cont_inverno = mulhes_inverno.groupby(['Year'])['Medal'].value_counts().unstack()
cont_inverno['Total'] = cont_inverno['Bronze'] + cont_inverno['Silver'] + cont_inverno['Bronze']
cont_inverno = cont_inverno.sort_values(by='Total', ascending=False).reset_index()
max_inverno = max(cont_inverno['Total'])
max_year_inverno = cont_inverno.loc[cont_inverno['Total'] == max_inverno, 'Year'].values[0]

palette = ['#E5E1BC' if total != max_verao else cor_dourada for total in sorted(cont_verao['Total'].unique())]

fig, (ax1, ax2) =  plt.subplots(2, 1, figsize=(20, 15), gridspec_kw={'height_ratios': [1, 1]}, facecolor=cor_fundo_gold)

sns.lineplot(data=cont_verao, x='Year', y='Total', ax=ax1, marker='o', color='#FFA07A')
ax1.plot(max_year_verao, max_verao, 'o', markersize=20, color=cor_dourada, label=f'Máximo {max_verao}')
ax1.annotate(f'{max_verao}', xy=(max_year_verao, max_verao), xytext=(max_year_verao, max_verao + 50),
            fontsize=12, ha='center', color='black')

ax1.set_ylim(0, max_verao*1.2)
ax1.set_facecolor(cor_fundo_gold)

ax1.text(1900, max_verao*1.1, 'Verão', ha='center', va='top', fontsize=15, fontweight='bold', fontfamily='serif', color='#FFA07A')


sns.lineplot(data=cont_inverno, x='Year', y='Total', ax=ax2, marker='o', color='#B0E0E6')
ax2.plot(max_year_inverno, max_inverno, 'o', markersize=20, color=cor_dourada, label=f'Máximo {max_inverno}')
ax2.annotate(f'{max_inverno}', xy=(max_year_inverno, max_inverno), xytext=(max_year_inverno, max_inverno*1.05),
            fontsize=12, ha='center', color='black')

ax2.set_ylim(0, max_inverno*1.2)
ax2.set_facecolor(cor_fundo_gold)

ax2.text(1930, max_inverno*1.1, 'Inverno', ha='center', va='top', fontsize=15, fontweight='bold', fontfamily='serif', color='#B0E0E6')

fig.suptitle('Distribuição de Medalhas através dos anos', fontsize=15, fontweight='bold', fontfamily='serif', color='#323232', verticalalignment='top', y=0.95)

plt.tight_layout()
ax1.set_xlabel('')
ax1.set_ylabel('')
ax2.set_ylabel('')
ax2.set_xlabel('')
 991:
mulheres_verao = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Summer")]
mulhes_inverno = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Winter")]

cont_verao = mulheres_verao.groupby(['Year'])['Medal'].value_counts().unstack()
cont_verao['Total'] = cont_verao['Bronze'] + cont_verao['Silver'] + cont_verao['Bronze']
cont_verao = cont_verao.sort_values(by='Total', ascending=False).reset_index()
max_verao = max(cont_verao['Total'])
max_year_verao = cont_verao.loc[cont_verao['Total'] == max_verao, 'Year'].values[0]

cont_inverno = mulhes_inverno.groupby(['Year'])['Medal'].value_counts().unstack()
cont_inverno['Total'] = cont_inverno['Bronze'] + cont_inverno['Silver'] + cont_inverno['Bronze']
cont_inverno = cont_inverno.sort_values(by='Total', ascending=False).reset_index()
max_inverno = max(cont_inverno['Total'])
max_year_inverno = cont_inverno.loc[cont_inverno['Total'] == max_inverno, 'Year'].values[0]

palette = ['#E5E1BC' if total != max_verao else cor_dourada for total in sorted(cont_verao['Total'].unique())]

fig, (ax1, ax2) =  plt.subplots(2, 1, figsize=(20, 15), gridspec_kw={'height_ratios': [1, 1]}, facecolor=cor_fundo_gold)

sns.lineplot(data=cont_verao, x='Year', y='Total', ax=ax1, marker='o', color='#FFA07A')
ax1.plot(max_year_verao, max_verao, 'o', markersize=20, color=cor_dourada, label=f'Máximo {max_verao}')
ax1.annotate(f'{max_verao}', xy=(max_year_verao, max_verao), xytext=(max_year_verao, max_verao + 50),
            fontsize=12, ha='center', color='black')

ax1.set_ylim(0, max_verao*1.2)
ax1.set_facecolor(cor_fundo_gold)

ax1.text(1900, max_verao*1.1, 'Verão', ha='center', va='top', fontsize=15, fontweight='bold', fontfamily='serif', color='#FFA07A')


sns.lineplot(data=cont_inverno, x='Year', y='Total', ax=ax2, marker='o', color='#B0E0E6')
ax2.plot(max_year_inverno, max_inverno, 'o', markersize=20, color=cor_dourada, label=f'Máximo {max_inverno}')
ax2.annotate(f'{max_inverno}', xy=(max_year_inverno, max_inverno), xytext=(max_year_inverno, max_inverno*1.05),
            fontsize=12, ha='center', color='black')

ax2.set_ylim(0, max_inverno*1.2)
ax2.set_facecolor(cor_fundo_gold)

ax2.text(1925, max_inverno*1.1, 'Inverno', ha='center', va='top', fontsize=15, fontweight='bold', fontfamily='serif', color='#B0E0E6')

fig.suptitle('Distribuição de Medalhas através dos anos', fontsize=15, fontweight='bold', fontfamily='serif', color='#323232', verticalalignment='top', y=0.95)

plt.tight_layout()
ax1.set_xlabel('')
ax1.set_ylabel('')
ax2.set_ylabel('')
ax2.set_xlabel('')
 992:
mulheres_verao = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Summer")]
mulhes_inverno = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Winter")]

cont_verao = mulheres_verao.groupby(['Year'])['Medal'].value_counts().unstack()
cont_verao['Total'] = cont_verao['Bronze'] + cont_verao['Silver'] + cont_verao['Bronze']
cont_verao = cont_verao.sort_values(by='Total', ascending=False).reset_index()
max_verao = max(cont_verao['Total'])
max_year_verao = cont_verao.loc[cont_verao['Total'] == max_verao, 'Year'].values[0]

cont_inverno = mulhes_inverno.groupby(['Year'])['Medal'].value_counts().unstack()
cont_inverno['Total'] = cont_inverno['Bronze'] + cont_inverno['Silver'] + cont_inverno['Bronze']
cont_inverno = cont_inverno.sort_values(by='Total', ascending=False).reset_index()
max_inverno = max(cont_inverno['Total'])
max_year_inverno = cont_inverno.loc[cont_inverno['Total'] == max_inverno, 'Year'].values[0]

palette = ['#E5E1BC' if total != max_verao else cor_dourada for total in sorted(cont_verao['Total'].unique())]

fig, (ax1, ax2) =  plt.subplots(2, 1, figsize=(20, 15), gridspec_kw={'height_ratios': [1, 1]}, facecolor=cor_fundo_gold)

sns.lineplot(data=cont_verao, x='Year', y='Total', ax=ax1, marker='o', color='#FFA07A')
ax1.plot(max_year_verao, max_verao, 'o', markersize=20, color=cor_dourada, label=f'Máximo {max_verao}')
ax1.annotate(f'{max_verao}', xy=(max_year_verao, max_verao), xytext=(max_year_verao, max_verao + 50),
            fontsize=12, ha='center', color='black')

ax1.set_ylim(0, max_verao*1.2)
ax1.set_facecolor(cor_fundo_gold)

ax1.text(1900, max_verao*1.1, 'Verão', ha='center', va='top', fontsize=15, fontweight='bold', fontfamily='serif', color='#FFA07A')


sns.lineplot(data=cont_inverno, x='Year', y='Total', ax=ax2, marker='o', color='#B0E0E6')
ax2.plot(max_year_inverno, max_inverno, 'o', markersize=20, color=cor_dourada, label=f'Máximo {max_inverno}')
ax2.annotate(f'{max_inverno}', xy=(max_year_inverno, max_inverno), xytext=(max_year_inverno, max_inverno*1.05),
            fontsize=12, ha='center', color='black')

ax2.set_ylim(0, max_inverno*1.2)
ax2.set_facecolor(cor_fundo_gold)

ax2.text(1925, max_inverno*1.1, 'Inverno', ha='center', va='top', fontsize=15, fontweight='bold', fontfamily='serif', color='#4682B4')

fig.suptitle('Distribuição de Medalhas através dos anos', fontsize=15, fontweight='bold', fontfamily='serif', color='#323232', verticalalignment='top', y=0.95)

plt.tight_layout()
ax1.set_xlabel('')
ax1.set_ylabel('')
ax2.set_ylabel('')
ax2.set_xlabel('')
 993:
mulheres_verao = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Summer")]
mulhes_inverno = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Winter")]

cont_verao = mulheres_verao.groupby(['Year'])['Medal'].value_counts().unstack()
cont_verao['Total'] = cont_verao['Bronze'] + cont_verao['Silver'] + cont_verao['Bronze']
cont_verao = cont_verao.sort_values(by='Total', ascending=False).reset_index()
max_verao = max(cont_verao['Total'])
max_year_verao = cont_verao.loc[cont_verao['Total'] == max_verao, 'Year'].values[0]

cont_inverno = mulhes_inverno.groupby(['Year'])['Medal'].value_counts().unstack()
cont_inverno['Total'] = cont_inverno['Bronze'] + cont_inverno['Silver'] + cont_inverno['Bronze']
cont_inverno = cont_inverno.sort_values(by='Total', ascending=False).reset_index()
max_inverno = max(cont_inverno['Total'])
max_year_inverno = cont_inverno.loc[cont_inverno['Total'] == max_inverno, 'Year'].values[0]

palette = ['#E5E1BC' if total != max_verao else cor_dourada for total in sorted(cont_verao['Total'].unique())]

fig, (ax1, ax2) =  plt.subplots(2, 1, figsize=(20, 15), gridspec_kw={'height_ratios': [1, 1]}, facecolor=cor_fundo_gold)

sns.lineplot(data=cont_verao, x='Year', y='Total', ax=ax1, marker='o', color='#FFA07A')
ax1.plot(max_year_verao, max_verao, 'o', markersize=20, color=cor_dourada, label=f'Máximo {max_verao}')
ax1.annotate(f'{max_verao}', xy=(max_year_verao, max_verao), xytext=(max_year_verao, max_verao + 50),
            fontsize=12, ha='center', color='black')

ax1.set_ylim(0, max_verao*1.2)
ax1.set_facecolor(cor_fundo_gold)

ax1.text(1900, max_verao*1.1, 'Verão', ha='center', va='top', fontsize=15, fontweight='bold', fontfamily='serif', color='#FFA07A')


sns.lineplot(data=cont_inverno, x='Year', y='Total', ax=ax2, marker='o', color='#4682B4')
ax2.plot(max_year_inverno, max_inverno, 'o', markersize=20, color=cor_dourada, label=f'Máximo {max_inverno}')
ax2.annotate(f'{max_inverno}', xy=(max_year_inverno, max_inverno), xytext=(max_year_inverno, max_inverno*1.05),
            fontsize=12, ha='center', color='black')

ax2.set_ylim(0, max_inverno*1.2)
ax2.set_facecolor(cor_fundo_gold)

ax2.text(1925, max_inverno*1.1, 'Inverno', ha='center', va='top', fontsize=15, fontweight='bold', fontfamily='serif', color='#4682B4')

fig.suptitle('Distribuição de Medalhas através dos anos', fontsize=15, fontweight='bold', fontfamily='serif', color='#323232', verticalalignment='top', y=0.95)

plt.tight_layout()
ax1.set_xlabel('')
ax1.set_ylabel('')
ax2.set_ylabel('')
ax2.set_xlabel('')
 994:
mulheres_verao = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Summer")]
mulhes_inverno = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Winter")]

cont_verao = mulheres_verao.groupby(['Year'])['Medal'].value_counts().unstack()
cont_verao['Total'] = cont_verao['Bronze'] + cont_verao['Silver'] + cont_verao['Bronze']
cont_verao = cont_verao.sort_values(by='Total', ascending=False).reset_index()
max_verao = max(cont_verao['Total'])
max_year_verao = cont_verao.loc[cont_verao['Total'] == max_verao, 'Year'].values[0]

cont_inverno = mulhes_inverno.groupby(['Year'])['Medal'].value_counts().unstack()
cont_inverno['Total'] = cont_inverno['Bronze'] + cont_inverno['Silver'] + cont_inverno['Bronze']
cont_inverno = cont_inverno.sort_values(by='Total', ascending=False).reset_index()
max_inverno = max(cont_inverno['Total'])
max_year_inverno = cont_inverno.loc[cont_inverno['Total'] == max_inverno, 'Year'].values[0]

palette = ['#E5E1BC' if total != max_verao else cor_dourada for total in sorted(cont_verao['Total'].unique())]

fig, (ax1, ax2) =  plt.subplots(2, 1, figsize=(20, 15), gridspec_kw={'height_ratios': [1, 1]}, facecolor=cor_fundo_gold)

sns.lineplot(data=cont_verao, x='Year', y='Total', ax=ax1, marker='o', color='#FFA07A')
ax1.plot(max_year_verao, max_verao, 'o', markersize=20, color=cor_dourada, label=f'Máximo {max_verao}')
ax1.annotate(f'{max_verao}', xy=(max_year_verao, max_verao), xytext=(max_year_verao, max_verao + 50),
            fontsize=12, ha='center', color='black')

ax1.set_ylim(0, max_verao*1.2)
ax1.set_facecolor(cor_fundo_gold)

ax1.text(1900, max_verao*1.1, 'Verão', ha='center', va='top', fontsize=25, fontweight='bold', fontfamily='serif', color='#FFA07A')


sns.lineplot(data=cont_inverno, x='Year', y='Total', ax=ax2, marker='o', color='#4682B4')
ax2.plot(max_year_inverno, max_inverno, 'o', markersize=20, color=cor_dourada, label=f'Máximo {max_inverno}')
ax2.annotate(f'{max_inverno}', xy=(max_year_inverno, max_inverno), xytext=(max_year_inverno, max_inverno*1.05),
            fontsize=12, ha='center', color='black')

ax2.set_ylim(0, max_inverno*1.2)
ax2.set_facecolor(cor_fundo_gold)

ax2.text(1925, max_inverno*1.1, 'Inverno', ha='center', va='top', fontsize=25, fontweight='bold', fontfamily='serif', color='#4682B4')

fig.suptitle('Distribuição de Medalhas através dos anos', fontsize=15, fontweight='bold', fontfamily='serif', color='#323232', verticalalignment='top', y=0.95)

plt.tight_layout()
ax1.set_xlabel('')
ax1.set_ylabel('')
ax2.set_ylabel('')
ax2.set_xlabel('')
 995:
mulheres_verao = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Summer")]
mulhes_inverno = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Winter")]

cont_verao = mulheres_verao.groupby(['Year'])['Medal'].value_counts().unstack()
cont_verao['Total'] = cont_verao['Bronze'] + cont_verao['Silver'] + cont_verao['Bronze']
cont_verao = cont_verao.sort_values(by='Total', ascending=False).reset_index()
max_verao = max(cont_verao['Total'])
max_year_verao = cont_verao.loc[cont_verao['Total'] == max_verao, 'Year'].values[0]

cont_inverno = mulhes_inverno.groupby(['Year'])['Medal'].value_counts().unstack()
cont_inverno['Total'] = cont_inverno['Bronze'] + cont_inverno['Silver'] + cont_inverno['Bronze']
cont_inverno = cont_inverno.sort_values(by='Total', ascending=False).reset_index()
max_inverno = max(cont_inverno['Total'])
max_year_inverno = cont_inverno.loc[cont_inverno['Total'] == max_inverno, 'Year'].values[0]

palette = ['#E5E1BC' if total != max_verao else cor_dourada for total in sorted(cont_verao['Total'].unique())]

fig, (ax1, ax2) =  plt.subplots(2, 1, figsize=(20, 15), gridspec_kw={'height_ratios': [1, 1]}, facecolor=cor_fundo_gold)

sns.lineplot(data=cont_verao, x='Year', y='Total', ax=ax1, marker='o', color='#FFA07A')
ax1.plot(max_year_verao, max_verao, 'o', markersize=20, color=cor_dourada, label=f'Máximo {max_verao}')
ax1.annotate(f'{max_verao}', xy=(max_year_verao, max_verao), xytext=(max_year_verao, max_verao + 50),
            fontsize=12, ha='center', color='black')

ax1.set_ylim(0, max_verao*1.2)
ax1.set_facecolor(cor_fundo_gold)

ax1.text(1900, max_verao*1.1, 'Verão', ha='center', va='top', fontsize=25, fontweight='bold', fontfamily='serif', color='#FFA07A')


sns.lineplot(data=cont_inverno, x='Year', y='Total', ax=ax2, marker='o', color='#4682B4')
ax2.plot(max_year_inverno, max_inverno, 'o', markersize=20, color=cor_dourada, label=f'Máximo {max_inverno}')
ax2.annotate(f'{max_inverno}', xy=(max_year_inverno, max_inverno), xytext=(max_year_inverno, max_inverno*1.05),
            fontsize=12, ha='center', color='black')

ax2.set_ylim(0, max_inverno*1.2)
ax2.set_facecolor(cor_fundo_gold)

ax2.text(1925, max_inverno*1.1, 'Inverno', ha='center', va='top', fontsize=25, fontweight='bold', fontfamily='serif', color='#4682B4')

fig.suptitle('Distribuição de Medalhas através dos anos', fontsize=17, fontweight='bold', fontfamily='serif', color='#323232', verticalalignment='top', y=0.95)

plt.tight_layout()
ax1.set_xlabel('')
ax1.set_ylabel('')
ax2.set_ylabel('')
ax2.set_xlabel('')
 996:
mulheres_verao = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Summer")]
mulhes_inverno = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Winter")]

cont_verao = mulheres_verao.groupby(['Year'])['Medal'].value_counts().unstack()
cont_verao['Total'] = cont_verao['Bronze'] + cont_verao['Silver'] + cont_verao['Bronze']
cont_verao = cont_verao.sort_values(by='Total', ascending=False).reset_index()
max_verao = max(cont_verao['Total'])
max_year_verao = cont_verao.loc[cont_verao['Total'] == max_verao, 'Year'].values[0]

cont_inverno = mulhes_inverno.groupby(['Year'])['Medal'].value_counts().unstack()
cont_inverno['Total'] = cont_inverno['Bronze'] + cont_inverno['Silver'] + cont_inverno['Bronze']
cont_inverno = cont_inverno.sort_values(by='Total', ascending=False).reset_index()
max_inverno = max(cont_inverno['Total'])
max_year_inverno = cont_inverno.loc[cont_inverno['Total'] == max_inverno, 'Year'].values[0]

palette = ['#E5E1BC' if total != max_verao else cor_dourada for total in sorted(cont_verao['Total'].unique())]

fig, (ax1, ax2) =  plt.subplots(2, 1, figsize=(20, 15), gridspec_kw={'height_ratios': [1, 1]}, facecolor=cor_fundo_gold)

sns.lineplot(data=cont_verao, x='Year', y='Total', ax=ax1, marker='o', color='#FFA07A')
ax1.plot(max_year_verao, max_verao, 'o', markersize=20, color='#FFA07A', label=f'Máximo {max_verao}')
ax1.annotate(f'{max_verao}', xy=(max_year_verao, max_verao), xytext=(max_year_verao, max_verao + 50),
            fontsize=12, ha='center', color='black')

ax1.set_ylim(0, max_verao*1.2)
ax1.set_facecolor(cor_fundo_gold)

ax1.text(1900, max_verao*1.1, 'Verão', ha='center', va='top', fontsize=25, fontweight='bold', fontfamily='serif', color='#FFA07A')


sns.lineplot(data=cont_inverno, x='Year', y='Total', ax=ax2, marker='o', color='#4682B4')
ax2.plot(max_year_inverno, max_inverno, 'o', markersize=20, color='#4682B4', label=f'Máximo {max_inverno}')
ax2.annotate(f'{max_inverno}', xy=(max_year_inverno, max_inverno), xytext=(max_year_inverno, max_inverno*1.05),
            fontsize=12, ha='center', color='black')

ax2.set_ylim(0, max_inverno*1.2)
ax2.set_facecolor(cor_fundo_gold)

ax2.text(1925, max_inverno*1.1, 'Inverno', ha='center', va='top', fontsize=25, fontweight='bold', fontfamily='serif', color='#4682B4')

fig.suptitle('Distribuição de Medalhas através dos anos', fontsize=17, fontweight='bold', fontfamily='serif', color='#323232', verticalalignment='top', y=0.95)

plt.tight_layout()
ax1.set_xlabel('')
ax1.set_ylabel('')
ax2.set_ylabel('')
ax2.set_xlabel('')
 997:
import matplotlib.pyplot as plt

# Filtrando e preparando os dados para o primeiro gráfico
filtrado1 = medalhas_ouro.query('Age <= 15')\
    .groupby(['Sport', 'Medal'])['Medal'].count()\
    .unstack().fillna(0).astype(int).reset_index()\
    .sort_values(by='Gold', ascending=True)

# Filtrando e preparando os dados para o segundo gráfico
filtrado2 = medalhas_ouro.query('Age > 50')\
    .groupby(['Sport', 'Medal'])['Medal'].count()\
    .unstack().fillna(0).astype(int).reset_index()\
    .sort_values(by='Gold', ascending=True)

filtrado2.reset_index(drop=True, inplace=True)

# Criando subplots lado a lado
fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(14, 5), facecolor=cor_fundo_gold)

# Gráfico 1
maior1 = len(filtrado1) - 1
ax1.hlines(y=filtrado1['Sport'], xmin=0, xmax=filtrado1['Gold'], color='gray')
ax1.plot(filtrado1['Gold'], filtrado1['Sport'], "o", markersize=10, color='#244747')
ax1.plot(filtrado1['Gold'][maior1], filtrado1['Sport'][maior1], "o", markersize=20, color=cor_dourada)
ax1.set_facecolor(cor_fundo_gold)
ax1.tick_params(axis=u'both', which=u'both', length=0)
ax1.set_xlabel("")
ax1.set_axisbelow(True)

for s in ['top', 'right', 'bottom', 'left']:
    ax1.spines[s].set_visible(False)

ax1.text(-10, len(filtrado1), 'Medalhas de Ouro por modalidade ( < 16 anos)', fontsize=15, fontweight='bold', fontfamily='serif', color='#323232')
x_coord1 = filtrado1['Gold'].iloc[maior1]
y_coord1 = filtrado1['Sport'].iloc[maior1]
ax1.annotate(filtrado1['Gold'][maior1], xy=(x_coord1, y_coord1), va='center', ha='center', fontweight='bold', fontfamily='monospace', fontsize=10, color='white', rotation=0)

# Gráfico 2
maior2 = len(filtrado2) - 1
ax2.hlines(y=filtrado2['Sport'], xmin=0, xmax=filtrado2['Gold'], color='gray')
ax2.plot(filtrado2['Gold'], filtrado2['Sport'], "o", markersize=10, color='#244747')
ax2.plot(filtrado2['Gold'][maior2], filtrado2['Sport'][maior2], "o", markersize=20, color=cor_dourada)
ax2.set_facecolor(cor_fundo_gold)
ax2.tick_params(axis=u'both', which=u'both', length=0)
ax2.set_xlabel("")
ax2.set_axisbelow(True)
for s in ['top', 'right', 'bottom', 'left']:
    ax2.spines[s].set_visible(False)
ax2.text(-4, len(filtrado2) - 0.2, 'Medalhas de Ouro por modalidade ( > 50 anos)', fontsize=15, fontweight='bold', fontfamily='serif', color='#323232')
x_coord2 = filtrado2['Gold'].iloc[maior2]
y_coord2 = filtrado2['Sport'].iloc[maior2]
ax2.annotate(filtrado2['Gold'][maior2], xy=(x_coord2, y_coord2), va='center', ha='center', fontweight='bold', fontfamily='monospace', fontsize=10, color='white', rotation=0)

fig.suptitle('Distribuição de Medalhas através dos anos', fontsize=17, fontweight='bold', fontfamily='serif', color='#323232', verticalalignment='top', y=0.95)

plt.tight_layout()
plt.show()
 998:
import matplotlib.pyplot as plt

# Filtrando e preparando os dados para o primeiro gráfico
filtrado1 = medalhas_ouro.query('Age <= 15')\
    .groupby(['Sport', 'Medal'])['Medal'].count()\
    .unstack().fillna(0).astype(int).reset_index()\
    .sort_values(by='Gold', ascending=True)

# Filtrando e preparando os dados para o segundo gráfico
filtrado2 = medalhas_ouro.query('Age > 50')\
    .groupby(['Sport', 'Medal'])['Medal'].count()\
    .unstack().fillna(0).astype(int).reset_index()\
    .sort_values(by='Gold', ascending=True)

filtrado2.reset_index(drop=True, inplace=True)

# Criando subplots lado a lado
fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(14, 5), facecolor=cor_fundo_gold)

# Gráfico 1
maior1 = len(filtrado1) - 1
ax1.hlines(y=filtrado1['Sport'], xmin=0, xmax=filtrado1['Gold'], color='gray')
ax1.plot(filtrado1['Gold'], filtrado1['Sport'], "o", markersize=10, color='#244747')
ax1.plot(filtrado1['Gold'][maior1], filtrado1['Sport'][maior1], "o", markersize=20, color=cor_dourada)
ax1.set_facecolor(cor_fundo_gold)
ax1.tick_params(axis=u'both', which=u'both', length=0)
ax1.set_xlabel("")
ax1.set_axisbelow(True)

for s in ['top', 'right', 'bottom', 'left']:
    ax1.spines[s].set_visible(False)

ax1.text(-10, len(filtrado1), 'Medalhas de Ouro por modalidade ( < 16 anos)', fontsize=15, fontweight='bold', fontfamily='serif', color='#323232')
x_coord1 = filtrado1['Gold'].iloc[maior1]
y_coord1 = filtrado1['Sport'].iloc[maior1]
ax1.annotate(filtrado1['Gold'][maior1], xy=(x_coord1, y_coord1), va='center', ha='center', fontweight='bold', fontfamily='monospace', fontsize=10, color='white', rotation=0)

# Gráfico 2
maior2 = len(filtrado2) - 1
ax2.hlines(y=filtrado2['Sport'], xmin=0, xmax=filtrado2['Gold'], color='gray')
ax2.plot(filtrado2['Gold'], filtrado2['Sport'], "o", markersize=10, color='#244747')
ax2.plot(filtrado2['Gold'][maior2], filtrado2['Sport'][maior2], "o", markersize=20, color=cor_dourada)
ax2.set_facecolor(cor_fundo_gold)
ax2.tick_params(axis=u'both', which=u'both', length=0)
ax2.set_xlabel("")
ax2.set_axisbelow(True)
for s in ['top', 'right', 'bottom', 'left']:
    ax2.spines[s].set_visible(False)
ax2.text(-4, len(filtrado2) - 0.2, '> 50 anos', fontsize=13, fontweight='bold', fontfamily='serif', color='#323232')
x_coord2 = filtrado2['Gold'].iloc[maior2]
y_coord2 = filtrado2['Sport'].iloc[maior2]
ax2.annotate(filtrado2['Gold'][maior2], xy=(x_coord2, y_coord2), va='center', ha='center', fontweight='bold', fontfamily='monospace', fontsize=10, color='white', rotation=0)

fig.suptitle('Distribuição de Medalhas através dos anos', fontsize=17, fontweight='bold', fontfamily='serif', color='#323232', verticalalignment='top', y=0.95)

plt.tight_layout()
plt.show()
 999:
import matplotlib.pyplot as plt

# Filtrando e preparando os dados para o primeiro gráfico
filtrado1 = medalhas_ouro.query('Age <= 15')\
    .groupby(['Sport', 'Medal'])['Medal'].count()\
    .unstack().fillna(0).astype(int).reset_index()\
    .sort_values(by='Gold', ascending=True)

# Filtrando e preparando os dados para o segundo gráfico
filtrado2 = medalhas_ouro.query('Age > 50')\
    .groupby(['Sport', 'Medal'])['Medal'].count()\
    .unstack().fillna(0).astype(int).reset_index()\
    .sort_values(by='Gold', ascending=True)

filtrado2.reset_index(drop=True, inplace=True)

# Criando subplots lado a lado
fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(14, 5), facecolor=cor_fundo_gold)

# Gráfico 1
maior1 = len(filtrado1) - 1
ax1.hlines(y=filtrado1['Sport'], xmin=0, xmax=filtrado1['Gold'], color='gray')
ax1.plot(filtrado1['Gold'], filtrado1['Sport'], "o", markersize=10, color='#244747')
ax1.plot(filtrado1['Gold'][maior1], filtrado1['Sport'][maior1], "o", markersize=20, color=cor_dourada)
ax1.set_facecolor(cor_fundo_gold)
ax1.tick_params(axis=u'both', which=u'both', length=0)
ax1.set_xlabel("")
ax1.set_axisbelow(True)

for s in ['top', 'right', 'bottom', 'left']:
    ax1.spines[s].set_visible(False)

ax1.text(-10, len(filtrado1), '< 16 anos', fontsize=13, fontweight='bold', fontfamily='serif', color='#323232')
x_coord1 = filtrado1['Gold'].iloc[maior1]
y_coord1 = filtrado1['Sport'].iloc[maior1]
ax1.annotate(filtrado1['Gold'][maior1], xy=(x_coord1, y_coord1), va='center', ha='center', fontweight='bold', fontfamily='monospace', fontsize=10, color='white', rotation=0)

# Gráfico 2
maior2 = len(filtrado2) - 1
ax2.hlines(y=filtrado2['Sport'], xmin=0, xmax=filtrado2['Gold'], color='gray')
ax2.plot(filtrado2['Gold'], filtrado2['Sport'], "o", markersize=10, color='#244747')
ax2.plot(filtrado2['Gold'][maior2], filtrado2['Sport'][maior2], "o", markersize=20, color=cor_dourada)
ax2.set_facecolor(cor_fundo_gold)
ax2.tick_params(axis=u'both', which=u'both', length=0)
ax2.set_xlabel("")
ax2.set_axisbelow(True)
for s in ['top', 'right', 'bottom', 'left']:
    ax2.spines[s].set_visible(False)
ax2.text(-4, len(filtrado2) - 0.2, '> 50 anos', fontsize=13, fontweight='bold', fontfamily='serif', color='#323232')
x_coord2 = filtrado2['Gold'].iloc[maior2]
y_coord2 = filtrado2['Sport'].iloc[maior2]
ax2.annotate(filtrado2['Gold'][maior2], xy=(x_coord2, y_coord2), va='center', ha='center', fontweight='bold', fontfamily='monospace', fontsize=10, color='white', rotation=0)

fig.suptitle('Distribuição de Medalhas através dos anos', fontsize=17, fontweight='bold', fontfamily='serif', color='#323232', verticalalignment='top', y=0.95)

plt.tight_layout()
plt.show()
1000:
import matplotlib.pyplot as plt

# Filtrando e preparando os dados para o primeiro gráfico
filtrado1 = medalhas_ouro.query('Age <= 15')\
    .groupby(['Sport', 'Medal'])['Medal'].count()\
    .unstack().fillna(0).astype(int).reset_index()\
    .sort_values(by='Gold', ascending=True)

# Filtrando e preparando os dados para o segundo gráfico
filtrado2 = medalhas_ouro.query('Age > 50')\
    .groupby(['Sport', 'Medal'])['Medal'].count()\
    .unstack().fillna(0).astype(int).reset_index()\
    .sort_values(by='Gold', ascending=True)

filtrado2.reset_index(drop=True, inplace=True)

# Criando subplots lado a lado
fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(14, 6), facecolor=cor_fundo_gold)

# Gráfico 1
maior1 = len(filtrado1) - 1
ax1.hlines(y=filtrado1['Sport'], xmin=0, xmax=filtrado1['Gold'], color='gray')
ax1.plot(filtrado1['Gold'], filtrado1['Sport'], "o", markersize=10, color='#244747')
ax1.plot(filtrado1['Gold'][maior1], filtrado1['Sport'][maior1], "o", markersize=20, color=cor_dourada)
ax1.set_facecolor(cor_fundo_gold)
ax1.tick_params(axis=u'both', which=u'both', length=0)
ax1.set_xlabel("")
ax1.set_axisbelow(True)

for s in ['top', 'right', 'bottom', 'left']:
    ax1.spines[s].set_visible(False)

ax1.text(-10, len(filtrado1), '< 16 anos', fontsize=13, fontweight='bold', fontfamily='serif', color='#323232')
x_coord1 = filtrado1['Gold'].iloc[maior1]
y_coord1 = filtrado1['Sport'].iloc[maior1]
ax1.annotate(filtrado1['Gold'][maior1], xy=(x_coord1, y_coord1), va='center', ha='center', fontweight='bold', fontfamily='monospace', fontsize=10, color='white', rotation=0)

# Gráfico 2
maior2 = len(filtrado2) - 1
ax2.hlines(y=filtrado2['Sport'], xmin=0, xmax=filtrado2['Gold'], color='gray')
ax2.plot(filtrado2['Gold'], filtrado2['Sport'], "o", markersize=10, color='#244747')
ax2.plot(filtrado2['Gold'][maior2], filtrado2['Sport'][maior2], "o", markersize=20, color=cor_dourada)
ax2.set_facecolor(cor_fundo_gold)
ax2.tick_params(axis=u'both', which=u'both', length=0)
ax2.set_xlabel("")
ax2.set_axisbelow(True)
for s in ['top', 'right', 'bottom', 'left']:
    ax2.spines[s].set_visible(False)
ax2.text(-4, len(filtrado2) - 0.2, '> 50 anos', fontsize=13, fontweight='bold', fontfamily='serif', color='#323232')
x_coord2 = filtrado2['Gold'].iloc[maior2]
y_coord2 = filtrado2['Sport'].iloc[maior2]
ax2.annotate(filtrado2['Gold'][maior2], xy=(x_coord2, y_coord2), va='center', ha='center', fontweight='bold', fontfamily='monospace', fontsize=10, color='white', rotation=0)

fig.suptitle('Distribuição de Medalhas através dos anos', fontsize=17, fontweight='bold', fontfamily='serif', color='#323232', verticalalignment='top', y=0.95)

plt.tight_layout()
plt.show()
1001:
import matplotlib.pyplot as plt

# Filtrando e preparando os dados para o primeiro gráfico
filtrado1 = medalhas_ouro.query('Age <= 15')\
    .groupby(['Sport', 'Medal'])['Medal'].count()\
    .unstack().fillna(0).astype(int).reset_index()\
    .sort_values(by='Gold', ascending=True)

# Filtrando e preparando os dados para o segundo gráfico
filtrado2 = medalhas_ouro.query('Age > 50')\
    .groupby(['Sport', 'Medal'])['Medal'].count()\
    .unstack().fillna(0).astype(int).reset_index()\
    .sort_values(by='Gold', ascending=True)

filtrado2.reset_index(drop=True, inplace=True)

# Criando subplots lado a lado
fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(14, 7), facecolor=cor_fundo_gold)

# Gráfico 1
maior1 = len(filtrado1) - 1
ax1.hlines(y=filtrado1['Sport'], xmin=0, xmax=filtrado1['Gold'], color='gray')
ax1.plot(filtrado1['Gold'], filtrado1['Sport'], "o", markersize=10, color='#244747')
ax1.plot(filtrado1['Gold'][maior1], filtrado1['Sport'][maior1], "o", markersize=20, color=cor_dourada)
ax1.set_facecolor(cor_fundo_gold)
ax1.tick_params(axis=u'both', which=u'both', length=0)
ax1.set_xlabel("")
ax1.set_axisbelow(True)

for s in ['top', 'right', 'bottom', 'left']:
    ax1.spines[s].set_visible(False)

ax1.text(-10, len(filtrado1), '< 16 anos', fontsize=13, fontweight='bold', fontfamily='serif', color='#323232')
x_coord1 = filtrado1['Gold'].iloc[maior1]
y_coord1 = filtrado1['Sport'].iloc[maior1]
ax1.annotate(filtrado1['Gold'][maior1], xy=(x_coord1, y_coord1), va='center', ha='center', fontweight='bold', fontfamily='monospace', fontsize=10, color='white', rotation=0)

# Gráfico 2
maior2 = len(filtrado2) - 1
ax2.hlines(y=filtrado2['Sport'], xmin=0, xmax=filtrado2['Gold'], color='gray')
ax2.plot(filtrado2['Gold'], filtrado2['Sport'], "o", markersize=10, color='#244747')
ax2.plot(filtrado2['Gold'][maior2], filtrado2['Sport'][maior2], "o", markersize=20, color=cor_dourada)
ax2.set_facecolor(cor_fundo_gold)
ax2.tick_params(axis=u'both', which=u'both', length=0)
ax2.set_xlabel("")
ax2.set_axisbelow(True)
for s in ['top', 'right', 'bottom', 'left']:
    ax2.spines[s].set_visible(False)
ax2.text(-4, len(filtrado2) - 0.2, '> 50 anos', fontsize=13, fontweight='bold', fontfamily='serif', color='#323232')
x_coord2 = filtrado2['Gold'].iloc[maior2]
y_coord2 = filtrado2['Sport'].iloc[maior2]
ax2.annotate(filtrado2['Gold'][maior2], xy=(x_coord2, y_coord2), va='center', ha='center', fontweight='bold', fontfamily='monospace', fontsize=10, color='white', rotation=0)

fig.suptitle('Distribuição de Medalhas através dos anos', fontsize=17, fontweight='bold', fontfamily='serif', color='#323232', verticalalignment='top', y=0.95)

plt.tight_layout()
plt.show()
1002:
import matplotlib.pyplot as plt

# Filtrando e preparando os dados para o primeiro gráfico
filtrado1 = medalhas_ouro.query('Age <= 15')\
    .groupby(['Sport', 'Medal'])['Medal'].count()\
    .unstack().fillna(0).astype(int).reset_index()\
    .sort_values(by='Gold', ascending=True)

# Filtrando e preparando os dados para o segundo gráfico
filtrado2 = medalhas_ouro.query('Age > 50')\
    .groupby(['Sport', 'Medal'])['Medal'].count()\
    .unstack().fillna(0).astype(int).reset_index()\
    .sort_values(by='Gold', ascending=True)

filtrado2.reset_index(drop=True, inplace=True)

# Criando subplots lado a lado
fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(14, 7), facecolor=cor_fundo_gold)

# Gráfico 1
maior1 = len(filtrado1) - 1
ax1.hlines(y=filtrado1['Sport'], xmin=0, xmax=filtrado1['Gold'], color='gray')
ax1.plot(filtrado1['Gold'], filtrado1['Sport'], "o", markersize=10, color='#244747')
ax1.plot(filtrado1['Gold'][maior1], filtrado1['Sport'][maior1], "o", markersize=20, color=cor_dourada)
ax1.set_facecolor(cor_fundo_gold)
ax1.tick_params(axis=u'both', which=u'both', length=0)
ax1.set_xlabel("")
ax1.set_axisbelow(True)

for s in ['top', 'right', 'bottom', 'left']:
    ax1.spines[s].set_visible(False)

ax1.text(-10, len(filtrado1), '< 16 anos', fontsize=13, fontweight='bold', fontfamily='serif', color='#323232')
x_coord1 = filtrado1['Gold'].iloc[maior1]
y_coord1 = filtrado1['Sport'].iloc[maior1]
ax1.annotate(filtrado1['Gold'][maior1], xy=(x_coord1, y_coord1), va='center', ha='center', fontweight='bold', fontfamily='monospace', fontsize=10, color='white', rotation=0)

# Gráfico 2
maior2 = len(filtrado2) - 1
ax2.hlines(y=filtrado2['Sport'], xmin=0, xmax=filtrado2['Gold'], color='gray')
ax2.plot(filtrado2['Gold'], filtrado2['Sport'], "o", markersize=10, color='#244747')
ax2.plot(filtrado2['Gold'][maior2], filtrado2['Sport'][maior2], "o", markersize=20, color=cor_dourada)
ax2.set_facecolor(cor_fundo_gold)
ax2.tick_params(axis=u'both', which=u'both', length=0)
ax2.set_xlabel("")
ax2.set_axisbelow(True)
for s in ['top', 'right', 'bottom', 'left']:
    ax2.spines[s].set_visible(False)
ax2.text(-4, len(filtrado2) - 0.3, '> 50 anos', fontsize=13, fontweight='bold', fontfamily='serif', color='#323232')
x_coord2 = filtrado2['Gold'].iloc[maior2]
y_coord2 = filtrado2['Sport'].iloc[maior2]
ax2.annotate(filtrado2['Gold'][maior2], xy=(x_coord2, y_coord2), va='center', ha='center', fontweight='bold', fontfamily='monospace', fontsize=10, color='white', rotation=0)

fig.suptitle('Distribuição de Medalhas através dos anos', fontsize=17, fontweight='bold', fontfamily='serif', color='#323232', verticalalignment='top', y=0.95)

plt.tight_layout()
plt.show()
1003:
import matplotlib.pyplot as plt

# Filtrando e preparando os dados para o primeiro gráfico
filtrado1 = medalhas_ouro.query('Age <= 15')\
    .groupby(['Sport', 'Medal'])['Medal'].count()\
    .unstack().fillna(0).astype(int).reset_index()\
    .sort_values(by='Gold', ascending=True)

# Filtrando e preparando os dados para o segundo gráfico
filtrado2 = medalhas_ouro.query('Age > 50')\
    .groupby(['Sport', 'Medal'])['Medal'].count()\
    .unstack().fillna(0).astype(int).reset_index()\
    .sort_values(by='Gold', ascending=True)

filtrado2.reset_index(drop=True, inplace=True)

# Criando subplots lado a lado
fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(14, 7), facecolor=cor_fundo_gold)

# Gráfico 1
maior1 = len(filtrado1) - 1
ax1.hlines(y=filtrado1['Sport'], xmin=0, xmax=filtrado1['Gold'], color='gray')
ax1.plot(filtrado1['Gold'], filtrado1['Sport'], "o", markersize=10, color='#244747')
ax1.plot(filtrado1['Gold'][maior1], filtrado1['Sport'][maior1], "o", markersize=20, color=cor_dourada)
ax1.set_facecolor(cor_fundo_gold)
ax1.tick_params(axis=u'both', which=u'both', length=0)
ax1.set_xlabel("")
ax1.set_axisbelow(True)

for s in ['top', 'right', 'bottom', 'left']:
    ax1.spines[s].set_visible(False)

ax1.text(-10, len(filtrado1), '< 16 anos', fontsize=13, fontweight='bold', fontfamily='serif', color='#323232')
x_coord1 = filtrado1['Gold'].iloc[maior1]
y_coord1 = filtrado1['Sport'].iloc[maior1]
ax1.annotate(filtrado1['Gold'][maior1], xy=(x_coord1, y_coord1), va='center', ha='center', fontweight='bold', fontfamily='monospace', fontsize=10, color='white', rotation=0)

# Gráfico 2
maior2 = len(filtrado2) - 1
ax2.hlines(y=filtrado2['Sport'], xmin=0, xmax=filtrado2['Gold'], color='gray')
ax2.plot(filtrado2['Gold'], filtrado2['Sport'], "o", markersize=10, color='#244747')
ax2.plot(filtrado2['Gold'][maior2], filtrado2['Sport'][maior2], "o", markersize=20, color=cor_dourada)
ax2.set_facecolor(cor_fundo_gold)
ax2.tick_params(axis=u'both', which=u'both', length=0)
ax2.set_xlabel("")
ax2.set_axisbelow(True)
for s in ['top', 'right', 'bottom', 'left']:
    ax2.spines[s].set_visible(False)
ax2.text(-4, len(filtrado2) - 0.4, '> 50 anos', fontsize=13, fontweight='bold', fontfamily='serif', color='#323232')
x_coord2 = filtrado2['Gold'].iloc[maior2]
y_coord2 = filtrado2['Sport'].iloc[maior2]
ax2.annotate(filtrado2['Gold'][maior2], xy=(x_coord2, y_coord2), va='center', ha='center', fontweight='bold', fontfamily='monospace', fontsize=10, color='white', rotation=0)

fig.suptitle('Distribuição de Medalhas através dos anos', fontsize=17, fontweight='bold', fontfamily='serif', color='#323232', verticalalignment='top', y=0.95)

plt.tight_layout()
plt.show()
1004:
import matplotlib.pyplot as plt

# Filtrando e preparando os dados para o primeiro gráfico
filtrado1 = medalhas_ouro.query('Age <= 15')\
    .groupby(['Sport', 'Medal'])['Medal'].count()\
    .unstack().fillna(0).astype(int).reset_index()\
    .sort_values(by='Gold', ascending=True)

# Filtrando e preparando os dados para o segundo gráfico
filtrado2 = medalhas_ouro.query('Age > 50')\
    .groupby(['Sport', 'Medal'])['Medal'].count()\
    .unstack().fillna(0).astype(int).reset_index()\
    .sort_values(by='Gold', ascending=True)

filtrado2.reset_index(drop=True, inplace=True)

# Criando subplots lado a lado
fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(14, 7), facecolor=cor_fundo_gold)

# Gráfico 1
maior1 = len(filtrado1) - 1
ax1.hlines(y=filtrado1['Sport'], xmin=0, xmax=filtrado1['Gold'], color='gray')
ax1.plot(filtrado1['Gold'], filtrado1['Sport'], "o", markersize=10, color='#244747')
ax1.plot(filtrado1['Gold'][maior1], filtrado1['Sport'][maior1], "o", markersize=20, color=cor_dourada)
ax1.set_facecolor(cor_fundo_gold)
ax1.tick_params(axis=u'both', which=u'both', length=0)
ax1.set_xlabel("")
ax1.set_axisbelow(True)

for s in ['top', 'right', 'bottom', 'left']:
    ax1.spines[s].set_visible(False)

ax1.text(-10, len(filtrado1)-0.4, '< 16 anos', fontsize=13, fontweight='bold', fontfamily='serif', color='#323232')
x_coord1 = filtrado1['Gold'].iloc[maior1]
y_coord1 = filtrado1['Sport'].iloc[maior1]
ax1.annotate(filtrado1['Gold'][maior1], xy=(x_coord1, y_coord1), va='center', ha='center', fontweight='bold', fontfamily='monospace', fontsize=10, color='white', rotation=0)

# Gráfico 2
maior2 = len(filtrado2) - 1
ax2.hlines(y=filtrado2['Sport'], xmin=0, xmax=filtrado2['Gold'], color='gray')
ax2.plot(filtrado2['Gold'], filtrado2['Sport'], "o", markersize=10, color='#244747')
ax2.plot(filtrado2['Gold'][maior2], filtrado2['Sport'][maior2], "o", markersize=20, color=cor_dourada)
ax2.set_facecolor(cor_fundo_gold)
ax2.tick_params(axis=u'both', which=u'both', length=0)
ax2.set_xlabel("")
ax2.set_axisbelow(True)
for s in ['top', 'right', 'bottom', 'left']:
    ax2.spines[s].set_visible(False)
ax2.text(-4, len(filtrado2) - 0.4, '> 50 anos', fontsize=13, fontweight='bold', fontfamily='serif', color='#323232')
x_coord2 = filtrado2['Gold'].iloc[maior2]
y_coord2 = filtrado2['Sport'].iloc[maior2]
ax2.annotate(filtrado2['Gold'][maior2], xy=(x_coord2, y_coord2), va='center', ha='center', fontweight='bold', fontfamily='monospace', fontsize=10, color='white', rotation=0)

fig.suptitle('Distribuição de Medalhas através dos anos', fontsize=17, fontweight='bold', fontfamily='serif', color='#323232', verticalalignment='top', y=0.95)

plt.tight_layout()
plt.show()
1005:
import matplotlib.pyplot as plt

# Filtrando e preparando os dados para o primeiro gráfico
filtrado1 = medalhas_ouro.query('Age <= 15')\
    .groupby(['Sport', 'Medal'])['Medal'].count()\
    .unstack().fillna(0).astype(int).reset_index()\
    .sort_values(by='Gold', ascending=True)

# Filtrando e preparando os dados para o segundo gráfico
filtrado2 = medalhas_ouro.query('Age > 50')\
    .groupby(['Sport', 'Medal'])['Medal'].count()\
    .unstack().fillna(0).astype(int).reset_index()\
    .sort_values(by='Gold', ascending=True)

filtrado2.reset_index(drop=True, inplace=True)

# Criando subplots lado a lado
fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(14, 7), facecolor=cor_fundo_gold)

# Gráfico 1
maior1 = len(filtrado1) - 1
ax1.hlines(y=filtrado1['Sport'], xmin=0, xmax=filtrado1['Gold'], color='gray')
ax1.plot(filtrado1['Gold'], filtrado1['Sport'], "o", markersize=10, color='#244747')
ax1.plot(filtrado1['Gold'][maior1], filtrado1['Sport'][maior1], "o", markersize=20, color=cor_dourada)
ax1.set_facecolor(cor_fundo_gold)
ax1.tick_params(axis=u'both', which=u'both', length=0)
ax1.set_xlabel("")
ax1.set_axisbelow(True)

for s in ['top', 'right', 'bottom', 'left']:
    ax1.spines[s].set_visible(False)

ax1.text(-10, len(filtrado1)-0.1, '< 16 anos', fontsize=13, fontweight='bold', fontfamily='serif', color='#323232')
x_coord1 = filtrado1['Gold'].iloc[maior1]
y_coord1 = filtrado1['Sport'].iloc[maior1]
ax1.annotate(filtrado1['Gold'][maior1], xy=(x_coord1, y_coord1), va='center', ha='center', fontweight='bold', fontfamily='monospace', fontsize=10, color='white', rotation=0)

# Gráfico 2
maior2 = len(filtrado2) - 1
ax2.hlines(y=filtrado2['Sport'], xmin=0, xmax=filtrado2['Gold'], color='gray')
ax2.plot(filtrado2['Gold'], filtrado2['Sport'], "o", markersize=10, color='#244747')
ax2.plot(filtrado2['Gold'][maior2], filtrado2['Sport'][maior2], "o", markersize=20, color=cor_dourada)
ax2.set_facecolor(cor_fundo_gold)
ax2.tick_params(axis=u'both', which=u'both', length=0)
ax2.set_xlabel("")
ax2.set_axisbelow(True)
for s in ['top', 'right', 'bottom', 'left']:
    ax2.spines[s].set_visible(False)
ax2.text(-4, len(filtrado2) - 0.4, '> 50 anos', fontsize=13, fontweight='bold', fontfamily='serif', color='#323232')
x_coord2 = filtrado2['Gold'].iloc[maior2]
y_coord2 = filtrado2['Sport'].iloc[maior2]
ax2.annotate(filtrado2['Gold'][maior2], xy=(x_coord2, y_coord2), va='center', ha='center', fontweight='bold', fontfamily='monospace', fontsize=10, color='white', rotation=0)

fig.suptitle('Distribuição de Medalhas através dos anos', fontsize=17, fontweight='bold', fontfamily='serif', color='#323232', verticalalignment='top', y=0.95)

plt.tight_layout()
plt.show()
1006:
import matplotlib.pyplot as plt

# Filtrando e preparando os dados para o primeiro gráfico
filtrado1 = medalhas_ouro.query('Age <= 15')\
    .groupby(['Sport', 'Medal'])['Medal'].count()\
    .unstack().fillna(0).astype(int).reset_index()\
    .sort_values(by='Gold', ascending=True)

# Filtrando e preparando os dados para o segundo gráfico
filtrado2 = medalhas_ouro.query('Age > 50')\
    .groupby(['Sport', 'Medal'])['Medal'].count()\
    .unstack().fillna(0).astype(int).reset_index()\
    .sort_values(by='Gold', ascending=True)

filtrado2.reset_index(drop=True, inplace=True)

# Criando subplots lado a lado
fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(14, 7), facecolor=cor_fundo_gold)

# Gráfico 1
maior1 = len(filtrado1) - 1
ax1.hlines(y=filtrado1['Sport'], xmin=0, xmax=filtrado1['Gold'], color='gray')
ax1.plot(filtrado1['Gold'], filtrado1['Sport'], "o", markersize=10, color='#244747')
ax1.plot(filtrado1['Gold'][maior1], filtrado1['Sport'][maior1], "o", markersize=20, color=cor_dourada)
ax1.set_facecolor(cor_fundo_gold)
ax1.tick_params(axis=u'both', which=u'both', length=0)
ax1.set_xlabel("")
ax1.set_axisbelow(True)

for s in ['top', 'right', 'bottom', 'left']:
    ax1.spines[s].set_visible(False)

ax1.text(-10, len(filtrado1)-0.2, '< 16 anos', fontsize=13, fontweight='bold', fontfamily='serif', color='#323232')
x_coord1 = filtrado1['Gold'].iloc[maior1]
y_coord1 = filtrado1['Sport'].iloc[maior1]
ax1.annotate(filtrado1['Gold'][maior1], xy=(x_coord1, y_coord1), va='center', ha='center', fontweight='bold', fontfamily='monospace', fontsize=10, color='white', rotation=0)

# Gráfico 2
maior2 = len(filtrado2) - 1
ax2.hlines(y=filtrado2['Sport'], xmin=0, xmax=filtrado2['Gold'], color='gray')
ax2.plot(filtrado2['Gold'], filtrado2['Sport'], "o", markersize=10, color='#244747')
ax2.plot(filtrado2['Gold'][maior2], filtrado2['Sport'][maior2], "o", markersize=20, color=cor_dourada)
ax2.set_facecolor(cor_fundo_gold)
ax2.tick_params(axis=u'both', which=u'both', length=0)
ax2.set_xlabel("")
ax2.set_axisbelow(True)
for s in ['top', 'right', 'bottom', 'left']:
    ax2.spines[s].set_visible(False)
ax2.text(-4, len(filtrado2) - 0.3, '> 50 anos', fontsize=13, fontweight='bold', fontfamily='serif', color='#323232')
x_coord2 = filtrado2['Gold'].iloc[maior2]
y_coord2 = filtrado2['Sport'].iloc[maior2]
ax2.annotate(filtrado2['Gold'][maior2], xy=(x_coord2, y_coord2), va='center', ha='center', fontweight='bold', fontfamily='monospace', fontsize=10, color='white', rotation=0)

fig.suptitle('Distribuição de Medalhas através dos anos', fontsize=17, fontweight='bold', fontfamily='serif', color='#323232', verticalalignment='top', y=0.95)

plt.tight_layout()
plt.show()
1007:
import matplotlib.pyplot as plt

# Filtrando e preparando os dados para o primeiro gráfico
filtrado1 = medalhas_ouro.query('Age <= 15')\
    .groupby(['Sport', 'Medal'])['Medal'].count()\
    .unstack().fillna(0).astype(int).reset_index()\
    .sort_values(by='Gold', ascending=True)

# Filtrando e preparando os dados para o segundo gráfico
filtrado2 = medalhas_ouro.query('Age > 50')\
    .groupby(['Sport', 'Medal'])['Medal'].count()\
    .unstack().fillna(0).astype(int).reset_index()\
    .sort_values(by='Gold', ascending=True)

filtrado2.reset_index(drop=True, inplace=True)

# Criando subplots lado a lado
fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(14, 7), facecolor=cor_fundo_gold)

# Gráfico 1
maior1 = len(filtrado1) - 1
ax1.hlines(y=filtrado1['Sport'], xmin=0, xmax=filtrado1['Gold'], color='gray')
ax1.plot(filtrado1['Gold'], filtrado1['Sport'], "o", markersize=10, color='#244747')
ax1.plot(filtrado1['Gold'][maior1], filtrado1['Sport'][maior1], "o", markersize=20, color=cor_dourada)
ax1.set_facecolor(cor_fundo_gold)
ax1.tick_params(axis=u'both', which=u'both', length=0)
ax1.set_xlabel("")
ax1.set_axisbelow(True)

for s in ['top', 'right', 'bottom', 'left']:
    ax1.spines[s].set_visible(False)

ax1.text(-10, len(filtrado1)-0.4, '< 16 anos', fontsize=13, fontweight='bold', fontfamily='serif', color='#323232')
x_coord1 = filtrado1['Gold'].iloc[maior1]
y_coord1 = filtrado1['Sport'].iloc[maior1]
ax1.annotate(filtrado1['Gold'][maior1], xy=(x_coord1, y_coord1), va='center', ha='center', fontweight='bold', fontfamily='monospace', fontsize=10, color='white', rotation=0)

# Gráfico 2
maior2 = len(filtrado2) - 1
ax2.hlines(y=filtrado2['Sport'], xmin=0, xmax=filtrado2['Gold'], color='gray')
ax2.plot(filtrado2['Gold'], filtrado2['Sport'], "o", markersize=10, color='#244747')
ax2.plot(filtrado2['Gold'][maior2], filtrado2['Sport'][maior2], "o", markersize=20, color=cor_dourada)
ax2.set_facecolor(cor_fundo_gold)
ax2.tick_params(axis=u'both', which=u'both', length=0)
ax2.set_xlabel("")
ax2.set_axisbelow(True)
for s in ['top', 'right', 'bottom', 'left']:
    ax2.spines[s].set_visible(False)
ax2.text(-4, len(filtrado2) - 0.3, '> 50 anos', fontsize=13, fontweight='bold', fontfamily='serif', color='#323232')
x_coord2 = filtrado2['Gold'].iloc[maior2]
y_coord2 = filtrado2['Sport'].iloc[maior2]
ax2.annotate(filtrado2['Gold'][maior2], xy=(x_coord2, y_coord2), va='center', ha='center', fontweight='bold', fontfamily='monospace', fontsize=10, color='white', rotation=0)

fig.suptitle('Distribuição de Medalhas através dos anos', fontsize=17, fontweight='bold', fontfamily='serif', color='#323232', verticalalignment='top', y=0.95)

plt.tight_layout()
plt.show()
1008:
import matplotlib.pyplot as plt

# Filtrando e preparando os dados para o primeiro gráfico
filtrado1 = medalhas_ouro.query('Age <= 15')\
    .groupby(['Sport', 'Medal'])['Medal'].count()\
    .unstack().fillna(0).astype(int).reset_index()\
    .sort_values(by='Gold', ascending=True)

# Filtrando e preparando os dados para o segundo gráfico
filtrado2 = medalhas_ouro.query('Age > 50')\
    .groupby(['Sport', 'Medal'])['Medal'].count()\
    .unstack().fillna(0).astype(int).reset_index()\
    .sort_values(by='Gold', ascending=True)

filtrado2.reset_index(drop=True, inplace=True)

# Criando subplots lado a lado
fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(14, 7), facecolor=cor_fundo_gold)

# Gráfico 1
maior1 = len(filtrado1) - 1
ax1.hlines(y=filtrado1['Sport'], xmin=0, xmax=filtrado1['Gold'], color='gray')
ax1.plot(filtrado1['Gold'], filtrado1['Sport'], "o", markersize=10, color='#244747')
ax1.plot(filtrado1['Gold'][maior1], filtrado1['Sport'][maior1], "o", markersize=20, color=cor_dourada)
ax1.set_facecolor(cor_fundo_gold)
ax1.tick_params(axis=u'both', which=u'both', length=0)
ax1.set_xlabel("")
ax1.set_axisbelow(True)

for s in ['top', 'right', 'bottom', 'left']:
    ax1.spines[s].set_visible(False)

ax1.text(-10, len(filtrado1)-0.4, '< 16 anos', fontsize=13, fontweight='bold', fontfamily='serif', color='#323232')
x_coord1 = filtrado1['Gold'].iloc[maior1]
y_coord1 = filtrado1['Sport'].iloc[maior1]
ax1.annotate(filtrado1['Gold'][maior1], xy=(x_coord1, y_coord1), va='center', ha='center', fontweight='bold', fontfamily='monospace', fontsize=10, color='white', rotation=0)

# Gráfico 2
maior2 = len(filtrado2) - 1
ax2.hlines(y=filtrado2['Sport'], xmin=0, xmax=filtrado2['Gold'], color='gray')
ax2.plot(filtrado2['Gold'], filtrado2['Sport'], "o", markersize=10, color='#244747')
ax2.plot(filtrado2['Gold'][maior2], filtrado2['Sport'][maior2], "o", markersize=20, color=cor_dourada)
ax2.set_facecolor(cor_fundo_gold)
ax2.tick_params(axis=u'both', which=u'both', length=0)
ax2.set_xlabel("")
ax2.set_axisbelow(True)
for s in ['top', 'right', 'bottom', 'left']:
    ax2.spines[s].set_visible(False)
ax2.text(-4, len(filtrado2) - 0.1, '> 50 anos', fontsize=13, fontweight='bold', fontfamily='serif', color='#323232')
x_coord2 = filtrado2['Gold'].iloc[maior2]
y_coord2 = filtrado2['Sport'].iloc[maior2]
ax2.annotate(filtrado2['Gold'][maior2], xy=(x_coord2, y_coord2), va='center', ha='center', fontweight='bold', fontfamily='monospace', fontsize=10, color='white', rotation=0)

fig.suptitle('Distribuição de Medalhas através dos anos', fontsize=17, fontweight='bold', fontfamily='serif', color='#323232', verticalalignment='top', y=0.95)

plt.tight_layout()
plt.show()
1009:
import matplotlib.pyplot as plt

# Filtrando e preparando os dados para o primeiro gráfico
filtrado1 = medalhas_ouro.query('Age <= 15')\
    .groupby(['Sport', 'Medal'])['Medal'].count()\
    .unstack().fillna(0).astype(int).reset_index()\
    .sort_values(by='Gold', ascending=True)

# Filtrando e preparando os dados para o segundo gráfico
filtrado2 = medalhas_ouro.query('Age > 50')\
    .groupby(['Sport', 'Medal'])['Medal'].count()\
    .unstack().fillna(0).astype(int).reset_index()\
    .sort_values(by='Gold', ascending=True)

filtrado2.reset_index(drop=True, inplace=True)

# Criando subplots lado a lado
fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(14, 7), facecolor=cor_fundo_gold)

# Gráfico 1
maior1 = len(filtrado1) - 1
ax1.hlines(y=filtrado1['Sport'], xmin=0, xmax=filtrado1['Gold'], color='gray')
ax1.plot(filtrado1['Gold'], filtrado1['Sport'], "o", markersize=10, color='#244747')
ax1.plot(filtrado1['Gold'][maior1], filtrado1['Sport'][maior1], "o", markersize=20, color=cor_dourada)
ax1.set_facecolor(cor_fundo_gold)
ax1.tick_params(axis=u'both', which=u'both', length=0)
ax1.set_xlabel("")
ax1.set_axisbelow(True)

for s in ['top', 'right', 'bottom', 'left']:
    ax1.spines[s].set_visible(False)

ax1.text(-10, len(filtrado1)-0.4, '< 16 anos', fontsize=13, fontweight='bold', fontfamily='serif', color='#323232')
x_coord1 = filtrado1['Gold'].iloc[maior1]
y_coord1 = filtrado1['Sport'].iloc[maior1]
ax1.annotate(filtrado1['Gold'][maior1], xy=(x_coord1, y_coord1), va='center', ha='center', fontweight='bold', fontfamily='monospace', fontsize=10, color='white', rotation=0)

# Gráfico 2
maior2 = len(filtrado2) - 1
ax2.hlines(y=filtrado2['Sport'], xmin=0, xmax=filtrado2['Gold'], color='gray')
ax2.plot(filtrado2['Gold'], filtrado2['Sport'], "o", markersize=10, color='#244747')
ax2.plot(filtrado2['Gold'][maior2], filtrado2['Sport'][maior2], "o", markersize=20, color=cor_dourada)
ax2.set_facecolor(cor_fundo_gold)
ax2.tick_params(axis=u'both', which=u'both', length=0)
ax2.set_xlabel("")
ax2.set_axisbelow(True)
for s in ['top', 'right', 'bottom', 'left']:
    ax2.spines[s].set_visible(False)
ax2.text(-4, len(filtrado2) - 0.4, '> 50 anos', fontsize=13, fontweight='bold', fontfamily='serif', color='#323232')
x_coord2 = filtrado2['Gold'].iloc[maior2]
y_coord2 = filtrado2['Sport'].iloc[maior2]
ax2.annotate(filtrado2['Gold'][maior2], xy=(x_coord2, y_coord2), va='center', ha='center', fontweight='bold', fontfamily='monospace', fontsize=10, color='white', rotation=0)

fig.suptitle('Distribuição de Medalhas através dos anos', fontsize=17, fontweight='bold', fontfamily='serif', color='#323232', verticalalignment='top', y=0.95)

plt.tight_layout()
plt.show()
1010:
import matplotlib.pyplot as plt

# Filtrando e preparando os dados para o primeiro gráfico
filtrado1 = medalhas_ouro.query('Age <= 15')\
    .groupby(['Sport', 'Medal'])['Medal'].count()\
    .unstack().fillna(0).astype(int).reset_index()\
    .sort_values(by='Gold', ascending=True)

# Filtrando e preparando os dados para o segundo gráfico
filtrado2 = medalhas_ouro.query('Age > 50')\
    .groupby(['Sport', 'Medal'])['Medal'].count()\
    .unstack().fillna(0).astype(int).reset_index()\
    .sort_values(by='Gold', ascending=True)

filtrado2.reset_index(drop=True, inplace=True)

# Criando subplots lado a lado
fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(14, 7), facecolor=cor_fundo_gold)

# Gráfico 1
maior1 = len(filtrado1) - 1
ax1.hlines(y=filtrado1['Sport'], xmin=0, xmax=filtrado1['Gold'], color='gray')
ax1.plot(filtrado1['Gold'], filtrado1['Sport'], "o", markersize=10, color='#244747')
ax1.plot(filtrado1['Gold'][maior1], filtrado1['Sport'][maior1], "o", markersize=20, color=cor_dourada)
ax1.set_facecolor(cor_fundo_gold)
ax1.tick_params(axis=u'both', which=u'both', length=0)
ax1.set_xlabel("")
ax1.set_axisbelow(True)

for s in ['top', 'right', 'bottom', 'left']:
    ax1.spines[s].set_visible(False)

ax1.text(-10, len(filtrado1)-0.4, '< 16 anos', fontsize=13, fontweight='bold', fontfamily='serif', color='#323232')
x_coord1 = filtrado1['Gold'].iloc[maior1]
y_coord1 = filtrado1['Sport'].iloc[maior1]
ax1.annotate(filtrado1['Gold'][maior1], xy=(x_coord1, y_coord1), va='center', ha='center', fontweight='bold', fontfamily='monospace', fontsize=10, color='white', rotation=0)

# Gráfico 2
maior2 = len(filtrado2) - 1
ax2.hlines(y=filtrado2['Sport'], xmin=0, xmax=filtrado2['Gold'], color='gray')
ax2.plot(filtrado2['Gold'], filtrado2['Sport'], "o", markersize=10, color='#244747')
ax2.plot(filtrado2['Gold'][maior2], filtrado2['Sport'][maior2], "o", markersize=20, color=cor_dourada)
ax2.set_facecolor(cor_fundo_gold)
ax2.tick_params(axis=u'both', which=u'both', length=0)
ax2.set_xlabel("")
ax2.set_axisbelow(True)
for s in ['top', 'right', 'bottom', 'left']:
    ax2.spines[s].set_visible(False)
ax2.text(-4, len(filtrado2) - 0.5, '> 50 anos', fontsize=13, fontweight='bold', fontfamily='serif', color='#323232')
x_coord2 = filtrado2['Gold'].iloc[maior2]
y_coord2 = filtrado2['Sport'].iloc[maior2]
ax2.annotate(filtrado2['Gold'][maior2], xy=(x_coord2, y_coord2), va='center', ha='center', fontweight='bold', fontfamily='monospace', fontsize=10, color='white', rotation=0)

fig.suptitle('Distribuição de Medalhas através dos anos', fontsize=17, fontweight='bold', fontfamily='serif', color='#323232', verticalalignment='top', y=0.95)

plt.tight_layout()
plt.show()
1011:
import matplotlib.pyplot as plt

# Filtrando e preparando os dados para o primeiro gráfico
filtrado1 = medalhas_ouro.query('Age <= 15')\
    .groupby(['Sport', 'Medal'])['Medal'].count()\
    .unstack().fillna(0).astype(int).reset_index()\
    .sort_values(by='Gold', ascending=True)

# Filtrando e preparando os dados para o segundo gráfico
filtrado2 = medalhas_ouro.query('Age > 50')\
    .groupby(['Sport', 'Medal'])['Medal'].count()\
    .unstack().fillna(0).astype(int).reset_index()\
    .sort_values(by='Gold', ascending=True)

filtrado2.reset_index(drop=True, inplace=True)

# Criando subplots lado a lado
fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(14, 7), facecolor=cor_fundo_gold)

# Gráfico 1
maior1 = len(filtrado1) - 1
ax1.hlines(y=filtrado1['Sport'], xmin=0, xmax=filtrado1['Gold'], color='gray')
ax1.plot(filtrado1['Gold'], filtrado1['Sport'], "o", markersize=10, color='#244747')
ax1.plot(filtrado1['Gold'][maior1], filtrado1['Sport'][maior1], "o", markersize=20, color=cor_dourada)
ax1.set_facecolor(cor_fundo_gold)
ax1.tick_params(axis=u'both', which=u'both', length=0)
ax1.set_xlabel("")
ax1.set_axisbelow(True)

for s in ['top', 'right', 'bottom', 'left']:
    ax1.spines[s].set_visible(False)

ax1.text(-10, len(filtrado1)-0.4, '< 16 anos', fontsize=13, fontweight='bold', fontfamily='serif', color='#323232')
x_coord1 = filtrado1['Gold'].iloc[maior1]
y_coord1 = filtrado1['Sport'].iloc[maior1]
ax1.annotate(filtrado1['Gold'][maior1], xy=(x_coord1, y_coord1), va='center', ha='center', fontweight='bold', fontfamily='monospace', fontsize=10, color='white', rotation=0)

# Gráfico 2
maior2 = len(filtrado2) - 1
ax2.hlines(y=filtrado2['Sport'], xmin=0, xmax=filtrado2['Gold'], color='gray')
ax2.plot(filtrado2['Gold'], filtrado2['Sport'], "o", markersize=10, color='#244747')
ax2.plot(filtrado2['Gold'][maior2], filtrado2['Sport'][maior2], "o", markersize=20, color=cor_dourada)
ax2.set_facecolor(cor_fundo_gold)
ax2.tick_params(axis=u'both', which=u'both', length=0)
ax2.set_xlabel("")
ax2.set_axisbelow(True)
for s in ['top', 'right', 'bottom', 'left']:
    ax2.spines[s].set_visible(False)
ax2.text(-4, len(filtrado2) - 0.6, '> 50 anos', fontsize=13, fontweight='bold', fontfamily='serif', color='#323232')
x_coord2 = filtrado2['Gold'].iloc[maior2]
y_coord2 = filtrado2['Sport'].iloc[maior2]
ax2.annotate(filtrado2['Gold'][maior2], xy=(x_coord2, y_coord2), va='center', ha='center', fontweight='bold', fontfamily='monospace', fontsize=10, color='white', rotation=0)

fig.suptitle('Distribuição de Medalhas através dos anos', fontsize=17, fontweight='bold', fontfamily='serif', color='#323232', verticalalignment='top', y=0.95)

plt.tight_layout()
plt.show()
1012:

# Filtrando e preparando os dados para o primeiro gráfico
filtrado1 = medalhas_ouro.query('Age <= 15')\
    .groupby(['Sport', 'Medal'])['Medal'].count()\
    .unstack().fillna(0).astype(int).reset_index()\
    .sort_values(by='Gold', ascending=True)

# Filtrando e preparando os dados para o segundo gráfico
filtrado2 = medalhas_ouro.query('Age > 50')\
    .groupby(['Sport', 'Medal'])['Medal'].count()\
    .unstack().fillna(0).astype(int).reset_index()\
    .sort_values(by='Gold', ascending=True)

filtrado2.reset_index(drop=True, inplace=True)

# Criando subplots lado a lado
fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(14, 7), facecolor=cor_fundo_gold)

# Gráfico 1
maior1 = len(filtrado1) - 1
ax1.hlines(y=filtrado1['Sport'], xmin=0, xmax=filtrado1['Gold'], color='gray')
ax1.plot(filtrado1['Gold'], filtrado1['Sport'], "o", markersize=10, color='#244747')
ax1.plot(filtrado1['Gold'][maior1], filtrado1['Sport'][maior1], "o", markersize=20, color=cor_dourada)
ax1.set_facecolor(cor_fundo_gold)
ax1.tick_params(axis=u'both', which=u'both', length=0)
ax1.set_xlabel("")
ax1.set_axisbelow(True)

for s in ['top', 'right', 'bottom', 'left']:
    ax1.spines[s].set_visible(False)

ax1.text(-10, len(filtrado1)-0.4, '< 16 anos', fontsize=13, fontweight='bold', fontfamily='serif', color='#323232')
x_coord1 = filtrado1['Gold'].iloc[maior1]
y_coord1 = filtrado1['Sport'].iloc[maior1]
ax1.annotate(filtrado1['Gold'][maior1], xy=(x_coord1, y_coord1), va='center', ha='center', fontweight='bold', fontfamily='monospace', fontsize=10, color='white', rotation=0)

# Gráfico 2
maior2 = len(filtrado2) - 1
ax2.hlines(y=filtrado2['Sport'], xmin=0, xmax=filtrado2['Gold'], color='gray')
ax2.plot(filtrado2['Gold'], filtrado2['Sport'], "o", markersize=10, color='#244747')
ax2.plot(filtrado2['Gold'][maior2], filtrado2['Sport'][maior2], "o", markersize=20, color=cor_dourada)
ax2.set_facecolor(cor_fundo_gold)
ax2.tick_params(axis=u'both', which=u'both', length=0)
ax2.set_xlabel("")
ax2.set_axisbelow(True)
for s in ['top', 'right', 'bottom', 'left']:
    ax2.spines[s].set_visible(False)
ax2.text(-4, len(filtrado2) - 0.6, '> 50 anos', fontsize=13, fontweight='bold', fontfamily='serif', color='#323232')
x_coord2 = filtrado2['Gold'].iloc[maior2]
y_coord2 = filtrado2['Sport'].iloc[maior2]
ax2.annotate(filtrado2['Gold'][maior2], xy=(x_coord2, y_coord2), va='center', ha='center', fontweight='bold', fontfamily='monospace', fontsize=10, color='white', rotation=0)

fig.suptitle('Distribuição de Medalhas de Ouro por Categoria', fontsize=17, fontweight='bold', fontfamily='serif', color='#323232', verticalalignment='top', y=0.95)

plt.tight_layout()
plt.show()
1013:

# Filtrando e preparando os dados para o primeiro gráfico
filtrado1 = medalhas_ouro.query('Age <= 15')\
    .groupby(['Sport', 'Medal'])['Medal'].count()\
    .unstack().fillna(0).astype(int).reset_index()\
    .sort_values(by='Gold', ascending=True)

# Filtrando e preparando os dados para o segundo gráfico
filtrado2 = medalhas_ouro.query('Age > 50')\
    .groupby(['Sport', 'Medal'])['Medal'].count()\
    .unstack().fillna(0).astype(int).reset_index()\
    .sort_values(by='Gold', ascending=True)

filtrado2.reset_index(drop=True, inplace=True)

# Criando subplots lado a lado
fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(14, 7), facecolor=cor_fundo_gold)

# Gráfico 1
maior1 = len(filtrado1) - 1
ax1.hlines(y=filtrado1['Sport'], xmin=0, xmax=filtrado1['Gold'], color='gray')
ax1.plot(filtrado1['Gold'], filtrado1['Sport'], "o", markersize=10, color='#244747')
ax1.plot(filtrado1['Gold'][maior1], filtrado1['Sport'][maior1], "o", markersize=20, color=cor_dourada)
ax1.set_facecolor(cor_fundo_gold)
ax1.tick_params(axis=u'both', which=u'both', length=0)
ax1.set_xlabel("")
ax1.set_axisbelow(True)

for s in ['top', 'right', 'bottom', 'left']:
    ax1.spines[s].set_visible(False)

ax1.text(-10, len(filtrado1)-0.4, '< 16 anos', fontsize=13, fontweight='bold', fontfamily='serif', color='#323232')
x_coord1 = filtrado1['Gold'].iloc[maior1]
y_coord1 = filtrado1['Sport'].iloc[maior1]
ax1.annotate(filtrado1['Gold'][maior1], xy=(x_coord1, y_coord1), va='center', ha='center', fontweight='bold', fontfamily='monospace', fontsize=10, color='white', rotation=0)

# Gráfico 2
maior2 = len(filtrado2) - 1
ax2.hlines(y=filtrado2['Sport'], xmin=0, xmax=filtrado2['Gold'], color='gray')
ax2.plot(filtrado2['Gold'], filtrado2['Sport'], "o", markersize=10, color='#244747')
ax2.plot(filtrado2['Gold'][maior2], filtrado2['Sport'][maior2], "o", markersize=20, color=cor_dourada)
ax2.set_facecolor(cor_fundo_gold)
ax2.tick_params(axis=u'both', which=u'both', length=0)
ax2.set_xlabel("")
ax2.set_axisbelow(True)
for s in ['top', 'right', 'bottom', 'left']:
    ax2.spines[s].set_visible(False)
ax2.text(-4, len(filtrado2) - 0.6, '> 50 anos', fontsize=13, fontweight='bold', fontfamily='serif', color='#323232')
x_coord2 = filtrado2['Gold'].iloc[maior2]
y_coord2 = filtrado2['Sport'].iloc[maior2]
ax2.annotate(filtrado2['Gold'][maior2], xy=(x_coord2, y_coord2), va='center', ha='center', fontweight='bold', fontfamily='monospace', fontsize=10, color='white', rotation=0)

fig.suptitle('Distribuição de Medalhas de Ouro por Categoria', fontsize=17, fontweight='bold', fontfamily='serif', color='#323232', verticalalignment='top', y=0.1)

plt.tight_layout()
plt.show()
1014:

# Filtrando e preparando os dados para o primeiro gráfico
filtrado1 = medalhas_ouro.query('Age <= 15')\
    .groupby(['Sport', 'Medal'])['Medal'].count()\
    .unstack().fillna(0).astype(int).reset_index()\
    .sort_values(by='Gold', ascending=True)

# Filtrando e preparando os dados para o segundo gráfico
filtrado2 = medalhas_ouro.query('Age > 50')\
    .groupby(['Sport', 'Medal'])['Medal'].count()\
    .unstack().fillna(0).astype(int).reset_index()\
    .sort_values(by='Gold', ascending=True)

filtrado2.reset_index(drop=True, inplace=True)

# Criando subplots lado a lado
fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(14, 7), facecolor=cor_fundo_gold)

# Gráfico 1
maior1 = len(filtrado1) - 1
ax1.hlines(y=filtrado1['Sport'], xmin=0, xmax=filtrado1['Gold'], color='gray')
ax1.plot(filtrado1['Gold'], filtrado1['Sport'], "o", markersize=10, color='#244747')
ax1.plot(filtrado1['Gold'][maior1], filtrado1['Sport'][maior1], "o", markersize=20, color=cor_dourada)
ax1.set_facecolor(cor_fundo_gold)
ax1.tick_params(axis=u'both', which=u'both', length=0)
ax1.set_xlabel("")
ax1.set_axisbelow(True)

for s in ['top', 'right', 'bottom', 'left']:
    ax1.spines[s].set_visible(False)

ax1.text(-10, len(filtrado1)-0.4, '< 16 anos', fontsize=13, fontweight='bold', fontfamily='serif', color='#323232')
x_coord1 = filtrado1['Gold'].iloc[maior1]
y_coord1 = filtrado1['Sport'].iloc[maior1]
ax1.annotate(filtrado1['Gold'][maior1], xy=(x_coord1, y_coord1), va='center', ha='center', fontweight='bold', fontfamily='monospace', fontsize=10, color='white', rotation=0)

# Gráfico 2
maior2 = len(filtrado2) - 1
ax2.hlines(y=filtrado2['Sport'], xmin=0, xmax=filtrado2['Gold'], color='gray')
ax2.plot(filtrado2['Gold'], filtrado2['Sport'], "o", markersize=10, color='#244747')
ax2.plot(filtrado2['Gold'][maior2], filtrado2['Sport'][maior2], "o", markersize=20, color=cor_dourada)
ax2.set_facecolor(cor_fundo_gold)
ax2.tick_params(axis=u'both', which=u'both', length=0)
ax2.set_xlabel("")
ax2.set_axisbelow(True)
for s in ['top', 'right', 'bottom', 'left']:
    ax2.spines[s].set_visible(False)
ax2.text(-4, len(filtrado2) - 0.6, '> 50 anos', fontsize=13, fontweight='bold', fontfamily='serif', color='#323232')
x_coord2 = filtrado2['Gold'].iloc[maior2]
y_coord2 = filtrado2['Sport'].iloc[maior2]
ax2.annotate(filtrado2['Gold'][maior2], xy=(x_coord2, y_coord2), va='center', ha='center', fontweight='bold', fontfamily='monospace', fontsize=10, color='white', rotation=0)

fig.suptitle('Distribuição de Medalhas de Ouro por Categoria', fontsize=17, fontweight='bold', fontfamily='serif', color='#323232', verticalalignment='top', y=0.90)

plt.tight_layout()
plt.show()
1015:

# Filtrando e preparando os dados para o primeiro gráfico
filtrado1 = medalhas_ouro.query('Age <= 15')\
    .groupby(['Sport', 'Medal'])['Medal'].count()\
    .unstack().fillna(0).astype(int).reset_index()\
    .sort_values(by='Gold', ascending=True)

# Filtrando e preparando os dados para o segundo gráfico
filtrado2 = medalhas_ouro.query('Age > 50')\
    .groupby(['Sport', 'Medal'])['Medal'].count()\
    .unstack().fillna(0).astype(int).reset_index()\
    .sort_values(by='Gold', ascending=True)

filtrado2.reset_index(drop=True, inplace=True)

# Criando subplots lado a lado
fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(14, 7), facecolor=cor_fundo_gold)

# Gráfico 1
maior1 = len(filtrado1) - 1
ax1.hlines(y=filtrado1['Sport'], xmin=0, xmax=filtrado1['Gold'], color='gray')
ax1.plot(filtrado1['Gold'], filtrado1['Sport'], "o", markersize=10, color='#244747')
ax1.plot(filtrado1['Gold'][maior1], filtrado1['Sport'][maior1], "o", markersize=20, color=cor_dourada)
ax1.set_facecolor(cor_fundo_gold)
ax1.tick_params(axis=u'both', which=u'both', length=0)
ax1.set_xlabel("")
ax1.set_axisbelow(True)

for s in ['top', 'right', 'bottom', 'left']:
    ax1.spines[s].set_visible(False)

ax1.text(-10, len(filtrado1)-0.4, '< 16 anos', fontsize=13, fontweight='bold', fontfamily='serif', color='#323232')
x_coord1 = filtrado1['Gold'].iloc[maior1]
y_coord1 = filtrado1['Sport'].iloc[maior1]
ax1.annotate(filtrado1['Gold'][maior1], xy=(x_coord1, y_coord1), va='center', ha='center', fontweight='bold', fontfamily='monospace', fontsize=10, color='white', rotation=0)

# Gráfico 2
maior2 = len(filtrado2) - 1
ax2.hlines(y=filtrado2['Sport'], xmin=0, xmax=filtrado2['Gold'], color='gray')
ax2.plot(filtrado2['Gold'], filtrado2['Sport'], "o", markersize=10, color='#244747')
ax2.plot(filtrado2['Gold'][maior2], filtrado2['Sport'][maior2], "o", markersize=20, color=cor_dourada)
ax2.set_facecolor(cor_fundo_gold)
ax2.tick_params(axis=u'both', which=u'both', length=0)
ax2.set_xlabel("")
ax2.set_axisbelow(True)
for s in ['top', 'right', 'bottom', 'left']:
    ax2.spines[s].set_visible(False)
ax2.text(-4, len(filtrado2) - 0.6, '> 50 anos', fontsize=13, fontweight='bold', fontfamily='serif', color='#323232')
x_coord2 = filtrado2['Gold'].iloc[maior2]
y_coord2 = filtrado2['Sport'].iloc[maior2]
ax2.annotate(filtrado2['Gold'][maior2], xy=(x_coord2, y_coord2), va='center', ha='center', fontweight='bold', fontfamily='monospace', fontsize=10, color='white', rotation=0)

fig.suptitle('Distribuição de Medalhas de Ouro por Categoria', fontsize=17, fontweight='bold', fontfamily='serif', color='#323232', verticalalignment='top', y=0.95)

plt.tight_layout()
plt.show()
1016:

# Filtrando e preparando os dados para o primeiro gráfico
filtrado1 = medalhas_ouro.query('Age <= 15')\
    .groupby(['Sport', 'Medal'])['Medal'].count()\
    .unstack().fillna(0).astype(int).reset_index()\
    .sort_values(by='Gold', ascending=True)

# Filtrando e preparando os dados para o segundo gráfico
filtrado2 = medalhas_ouro.query('Age > 50')\
    .groupby(['Sport', 'Medal'])['Medal'].count()\
    .unstack().fillna(0).astype(int).reset_index()\
    .sort_values(by='Gold', ascending=True)

filtrado2.reset_index(drop=True, inplace=True)

# Criando subplots lado a lado
fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(14, 7), facecolor=cor_fundo_gold)

# Gráfico 1
maior1 = len(filtrado1) - 1
ax1.hlines(y=filtrado1['Sport'], xmin=0, xmax=filtrado1['Gold'], color='gray')
ax1.plot(filtrado1['Gold'], filtrado1['Sport'], "o", markersize=10, color='#244747')
ax1.plot(filtrado1['Gold'][maior1], filtrado1['Sport'][maior1], "o", markersize=20, color=cor_dourada)
ax1.set_facecolor(cor_fundo_gold)
ax1.tick_params(axis=u'both', which=u'both', length=0)
ax1.set_xlabel("")
ax1.set_axisbelow(True)

for s in ['top', 'right', 'bottom', 'left']:
    ax1.spines[s].set_visible(False)

ax1.text(-10, len(filtrado1)-0.4, '< 16 anos', fontsize=13, fontweight='bold', fontfamily='serif', color='#323232')
x_coord1 = filtrado1['Gold'].iloc[maior1]
y_coord1 = filtrado1['Sport'].iloc[maior1]
ax1.annotate(filtrado1['Gold'][maior1], xy=(x_coord1, y_coord1), va='center', ha='center', fontweight='bold', fontfamily='monospace', fontsize=10, color='white', rotation=0)

# Gráfico 2
maior2 = len(filtrado2) - 1
ax2.hlines(y=filtrado2['Sport'], xmin=0, xmax=filtrado2['Gold'], color='gray')
ax2.plot(filtrado2['Gold'], filtrado2['Sport'], "o", markersize=10, color='#244747')
ax2.plot(filtrado2['Gold'][maior2], filtrado2['Sport'][maior2], "o", markersize=20, color=cor_dourada)
ax2.set_facecolor(cor_fundo_gold)
ax2.tick_params(axis=u'both', which=u'both', length=0)
ax2.set_xlabel("")
ax2.set_axisbelow(True)
for s in ['top', 'right', 'bottom', 'left']:
    ax2.spines[s].set_visible(False)
ax2.text(-4, len(filtrado2) - 0.6, '> 50 anos', fontsize=13, fontweight='bold', fontfamily='serif', color='#323232')
x_coord2 = filtrado2['Gold'].iloc[maior2]
y_coord2 = filtrado2['Sport'].iloc[maior2]
ax2.annotate(filtrado2['Gold'][maior2], xy=(x_coord2, y_coord2), va='center', ha='center', fontweight='bold', fontfamily='monospace', fontsize=10, color='white', rotation=0)

fig.suptitle('Distribuição de Medalhas de Ouro por Categoria', fontsize=17, fontweight='bold', fontfamily='serif', color='#323232', verticalalignment='top', y=0.96)

plt.tight_layout()
plt.show()
1017:
mulheres_verao = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Summer")]
mulheres_verao = mulheres_verao.groupby(['Year', 'Medal'])['Medal'].count().unstack().reset_index()
mulheres_verao['Total'] = mulheres_verao['Gold'] + mulheres_verao['Silver'] + mulheres_verao['Bronze']
mulheres_verao = mulheres_verao.groupby('Year')[['Bronze', 'Silver', 'Gold']].sum()
mulheres_verao = mulheres_verao.divide(mulheres_verao.sum(axis=1), axis=0)

mulhes_inverno = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Winter")]
mulhes_inverno = mulhes_inverno.groupby(['Year', 'Medal'])['Medal'].count().unstack().reset_index()
mulhes_inverno['Total'] = mulhes_inverno['Gold'] + mulhes_inverno['Silver'] + mulhes_inverno['Bronze']
mulhes_inverno = mulhes_inverno.groupby('Year')[['Bronze', 'Silver', 'Gold']].sum()
mulhes_inverno = mulhes_inverno.divide(mulhes_inverno.sum(axis=1), axis=0)

fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(15, 9), facecolor=cor_fundo_padrao)

medals_list = ['Bronze', 'Silver', 'Gold']

for i, medal in enumerate(medals_list):
    ax1.bar(mulheres_verao.index, mulheres_verao[medal], color=cor_medalhas_array[i],
        label=medal, width=2, edgecolor='gray',
        bottom=mulheres_verao[medals_list[:i]].sum(axis=1) if i > 0 else None
    )

    ax2.bar(mulhes_inverno.index, mulhes_inverno[medal], color=cor_medalhas_array[i],
        label=medal, width=2, edgecolor='gray',
        bottom=mulhes_inverno[medals_list[:i]].sum(axis=1) if i > 0 else None
    )


ax1.set_facecolor(cor_fundo_padrao)
ax2.set_facecolor(cor_fundo_padrao)

for s in ['top', 'right']:
    ax1.spines[s].set_visible(False)
    ax2.spines[s].set_visible(False)

Xstart1, Xend1 = ax1.get_xlim()
Ystart1, Yend1 = ax1.get_ylim()

Xstart2, Xend2 = ax2.get_xlim()
Ystart2, Yend2 = ax2.get_ylim()

ax1.set_xlim(Xstart1, Xend1)
ax1.set_ylim(Ystart1, Yend1+0.1)
ax1.grid(which='both', axis='x', zorder=5, color='gray', linestyle=':', dashes=(1, 5))
ax1.set_axisbelow(True)
ax1.get_yaxis().set_visible(False)
ax1.text(Xstart1 + 3, Yend1 + 0.3, 'Verão', fontsize=15, fontweight='bold', fontfamily='serif', color='#323232')

fig.suptitle('Distribuição de Medlhas através do anos', fontsize=17, fontweight='bold', fontfamily='serif', color='#323232', verticalalignment='top', y=0.95)


ax2.set_xlim(Xstart2, Xend2)
ax2.set_ylim(Ystart2, Yend2+0.1)
ax2.grid(which='both', axis='x', zorder=5, color='gray', linestyle=':', dashes=(1, 5))
ax2.set_axisbelow(True)
ax2.get_yaxis().set_visible(False)
ax2.text(Xstart2 + 3, Yend2 + 0.1, 'Inverno', fontsize=15, fontweight='bold', fontfamily='serif', color='#323232')

plt.legend(loc='upper left', bbox_to_anchor=(1, 2), title='Medalha')
1018:
mulheres_verao = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Summer")]
mulheres_verao = mulheres_verao.groupby(['Year', 'Medal'])['Medal'].count().unstack().reset_index()
mulheres_verao['Total'] = mulheres_verao['Gold'] + mulheres_verao['Silver'] + mulheres_verao['Bronze']
mulheres_verao = mulheres_verao.groupby('Year')[['Bronze', 'Silver', 'Gold']].sum()
mulheres_verao = mulheres_verao.divide(mulheres_verao.sum(axis=1), axis=0)

mulhes_inverno = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Winter")]
mulhes_inverno = mulhes_inverno.groupby(['Year', 'Medal'])['Medal'].count().unstack().reset_index()
mulhes_inverno['Total'] = mulhes_inverno['Gold'] + mulhes_inverno['Silver'] + mulhes_inverno['Bronze']
mulhes_inverno = mulhes_inverno.groupby('Year')[['Bronze', 'Silver', 'Gold']].sum()
mulhes_inverno = mulhes_inverno.divide(mulhes_inverno.sum(axis=1), axis=0)

max_verao = max(mulhes_inverno['Total'])

fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(15, 9), facecolor=cor_fundo_padrao)

medals_list = ['Bronze', 'Silver', 'Gold']

for i, medal in enumerate(medals_list):
    ax1.bar(mulheres_verao.index, mulheres_verao[medal], color=cor_medalhas_array[i],
        label=medal, width=2, edgecolor='gray',
        bottom=mulheres_verao[medals_list[:i]].sum(axis=1) if i > 0 else None
    )

    ax2.bar(mulhes_inverno.index, mulhes_inverno[medal], color=cor_medalhas_array[i],
        label=medal, width=2, edgecolor='gray',
        bottom=mulhes_inverno[medals_list[:i]].sum(axis=1) if i > 0 else None
    )


ax1.set_facecolor(cor_fundo_padrao)
ax2.set_facecolor(cor_fundo_padrao)

for s in ['top', 'right']:
    ax1.spines[s].set_visible(False)
    ax2.spines[s].set_visible(False)

Xstart1, Xend1 = ax1.get_xlim()
Ystart1, Yend1 = ax1.get_ylim()

Xstart2, Xend2 = ax2.get_xlim()
Ystart2, Yend2 = ax2.get_ylim()

ax1.set_xlim(Xstart1, Xend1)
ax1.set_ylim(Ystart1, Yend1+0.1)
ax1.grid(which='both', axis='x', zorder=5, color='gray', linestyle=':', dashes=(1, 5))
ax1.set_axisbelow(True)
ax1.get_yaxis().set_visible(False)
ax1.text(Xstart1, max_verao*1.1, 'Verão', ha='center', va='top', fontsize=25, fontweight='bold', fontfamily='serif', color='#FFA07A')

fig.suptitle('Distribuição de Medlhas através do anos', fontsize=17, fontweight='bold', fontfamily='serif', color='#323232', verticalalignment='top', y=0.95)

ax2.set_xlim(Xstart2, Xend2)
ax2.set_ylim(Ystart2, Yend2+0.1)
ax2.grid(which='both', axis='x', zorder=5, color='gray', linestyle=':', dashes=(1, 5))
ax2.set_axisbelow(True)
ax2.get_yaxis().set_visible(False)
ax2.text(Xstart2 + 3, Yend2 + 0.1, 'Inverno', fontsize=15, fontweight='bold', fontfamily='serif', color='#323232')

plt.legend(loc='upper left', bbox_to_anchor=(1, 2), title='Medalha')
1019:
mulheres_verao = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Summer")]
mulheres_verao = mulheres_verao.groupby(['Year', 'Medal'])['Medal'].count().unstack().reset_index()
mulheres_verao['Total'] = mulheres_verao['Gold'] + mulheres_verao['Silver'] + mulheres_verao['Bronze']
mulheres_verao = mulheres_verao.groupby('Year')[['Bronze', 'Silver', 'Gold']].sum()
mulheres_verao = mulheres_verao.divide(mulheres_verao.sum(axis=1), axis=0)

mulhes_inverno = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Winter")]
mulhes_inverno = mulhes_inverno.groupby(['Year', 'Medal'])['Medal'].count().unstack().reset_index()
mulhes_inverno['Total'] = mulhes_inverno['Gold'] + mulhes_inverno['Silver'] + mulhes_inverno['Bronze']
mulhes_inverno = mulhes_inverno.groupby('Year')[['Bronze', 'Silver', 'Gold']].sum()
mulhes_inverno = mulhes_inverno.divide(mulhes_inverno.sum(axis=1), axis=0)


fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(15, 9), facecolor=cor_fundo_padrao)

medals_list = ['Bronze', 'Silver', 'Gold']

for i, medal in enumerate(medals_list):
    ax1.bar(mulheres_verao.index, mulheres_verao[medal], color=cor_medalhas_array[i],
        label=medal, width=2, edgecolor='gray',
        bottom=mulheres_verao[medals_list[:i]].sum(axis=1) if i > 0 else None
    )

    ax2.bar(mulhes_inverno.index, mulhes_inverno[medal], color=cor_medalhas_array[i],
        label=medal, width=2, edgecolor='gray',
        bottom=mulhes_inverno[medals_list[:i]].sum(axis=1) if i > 0 else None
    )


ax1.set_facecolor(cor_fundo_padrao)
ax2.set_facecolor(cor_fundo_padrao)

for s in ['top', 'right']:
    ax1.spines[s].set_visible(False)
    ax2.spines[s].set_visible(False)

Xstart1, Xend1 = ax1.get_xlim()
Ystart1, Yend1 = ax1.get_ylim()

Xstart2, Xend2 = ax2.get_xlim()
Ystart2, Yend2 = ax2.get_ylim()

ax1.set_xlim(Xstart1, Xend1)
ax1.set_ylim(Ystart1, Yend1+0.1)
ax1.grid(which='both', axis='x', zorder=5, color='gray', linestyle=':', dashes=(1, 5))
ax1.set_axisbelow(True)
ax1.get_yaxis().set_visible(False)
ax1.text(Xstart1, max_verao*1.1, 'Verão', ha='center', va='top', fontsize=25, fontweight='bold', fontfamily='serif', color='#FFA07A')

fig.suptitle('Distribuição de Medlhas através do anos', fontsize=17, fontweight='bold', fontfamily='serif', color='#323232', verticalalignment='top', y=0.95)

ax2.set_xlim(Xstart2, Xend2)
ax2.set_ylim(Ystart2, Yend2+0.1)
ax2.grid(which='both', axis='x', zorder=5, color='gray', linestyle=':', dashes=(1, 5))
ax2.set_axisbelow(True)
ax2.get_yaxis().set_visible(False)
ax2.text(Xstart2 + 3, Yend2 + 0.1, 'Inverno', fontsize=15, fontweight='bold', fontfamily='serif', color='#323232')

plt.legend(loc='upper left', bbox_to_anchor=(1, 2), title='Medalha')

mulhes_inverno
1020:
mulheres_verao = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Summer")]
mulheres_verao = mulheres_verao.groupby(['Year', 'Medal'])['Medal'].count().unstack().reset_index()
mulheres_verao['Total'] = mulheres_verao['Gold'] + mulheres_verao['Silver'] + mulheres_verao['Bronze']
mulheres_verao = mulheres_verao.groupby('Year')[['Bronze', 'Silver', 'Gold']].sum()
mulheres_verao = mulheres_verao.divide(mulheres_verao.sum(axis=1), axis=0)

mulhes_inverno = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Winter")]
mulhes_inverno = mulhes_inverno.groupby(['Year', 'Medal'])['Medal'].count().unstack().reset_index()
mulhes_inverno['Total'] = mulhes_inverno['Gold'] + mulhes_inverno['Silver'] + mulhes_inverno['Bronze']
mulhes_inverno = mulhes_inverno.groupby('Year')[['Bronze', 'Silver', 'Gold']].sum()
mulhes_inverno = mulhes_inverno.divide(mulhes_inverno.sum(axis=1), axis=0)


fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(15, 9), facecolor=cor_fundo_padrao)

medals_list = ['Bronze', 'Silver', 'Gold']

for i, medal in enumerate(medals_list):
    ax1.bar(mulheres_verao.index, mulheres_verao[medal], color=cor_medalhas_array[i],
        label=medal, width=2, edgecolor='gray',
        bottom=mulheres_verao[medals_list[:i]].sum(axis=1) if i > 0 else None
    )

    ax2.bar(mulhes_inverno.index, mulhes_inverno[medal], color=cor_medalhas_array[i],
        label=medal, width=2, edgecolor='gray',
        bottom=mulhes_inverno[medals_list[:i]].sum(axis=1) if i > 0 else None
    )


ax1.set_facecolor(cor_fundo_padrao)
ax2.set_facecolor(cor_fundo_padrao)

for s in ['top', 'right']:
    ax1.spines[s].set_visible(False)
    ax2.spines[s].set_visible(False)

Xstart1, Xend1 = ax1.get_xlim()
Ystart1, Yend1 = ax1.get_ylim()

Xstart2, Xend2 = ax2.get_xlim()
Ystart2, Yend2 = ax2.get_ylim()

ax1.set_xlim(Xstart1, Xend1)
ax1.set_ylim(Ystart1, Yend1+0.1)
ax1.grid(which='both', axis='x', zorder=5, color='gray', linestyle=':', dashes=(1, 5))
ax1.set_axisbelow(True)
ax1.get_yaxis().set_visible(False)
ax1.text(Xstart1, max_verao*1.1, 'Verão', ha='center', va='top', fontsize=25, fontweight='bold', fontfamily='serif', color='#FFA07A')

fig.suptitle('Distribuição de Medlhas através do anos', fontsize=17, fontweight='bold', fontfamily='serif', color='#323232', verticalalignment='top', y=0.95)

ax2.set_xlim(Xstart2, Xend2)
ax2.set_ylim(Ystart2, Yend2+0.1)
ax2.grid(which='both', axis='x', zorder=5, color='gray', linestyle=':', dashes=(1, 5))
ax2.set_axisbelow(True)
ax2.get_yaxis().set_visible(False)
ax2.text(Xstart2 + 3, Yend2 + 0.1, 'Inverno', fontsize=15, fontweight='bold', fontfamily='serif', color='#323232')

plt.legend(loc='upper left', bbox_to_anchor=(1, 2), title='Medalha')
1021:
mulheres_verao = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Summer")]
mulheres_verao = mulheres_verao.groupby(['Year', 'Medal'])['Medal'].count().unstack().reset_index()
mulheres_verao['Total'] = mulheres_verao['Gold'] + mulheres_verao['Silver'] + mulheres_verao['Bronze']
mulheres_verao = mulheres_verao.groupby('Year')[['Bronze', 'Silver', 'Gold']].sum()
mulheres_verao = mulheres_verao.divide(mulheres_verao.sum(axis=1), axis=0)

mulhes_inverno = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Winter")]
mulhes_inverno = mulhes_inverno.groupby(['Year', 'Medal'])['Medal'].count().unstack().reset_index()
mulhes_inverno['Total'] = mulhes_inverno['Gold'] + mulhes_inverno['Silver'] + mulhes_inverno['Bronze']
mulhes_inverno = mulhes_inverno.groupby('Year')[['Bronze', 'Silver', 'Gold']].sum()
mulhes_inverno = mulhes_inverno.divide(mulhes_inverno.sum(axis=1), axis=0)


fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(15, 9), facecolor=cor_fundo_padrao)

medals_list = ['Bronze', 'Silver', 'Gold']

for i, medal in enumerate(medals_list):
    ax1.bar(mulheres_verao.index, mulheres_verao[medal], color=cor_medalhas_array[i],
        label=medal, width=2, edgecolor='gray',
        bottom=mulheres_verao[medals_list[:i]].sum(axis=1) if i > 0 else None
    )

    ax2.bar(mulhes_inverno.index, mulhes_inverno[medal], color=cor_medalhas_array[i],
        label=medal, width=2, edgecolor='gray',
        bottom=mulhes_inverno[medals_list[:i]].sum(axis=1) if i > 0 else None
    )


ax1.set_facecolor(cor_fundo_padrao)
ax2.set_facecolor(cor_fundo_padrao)

for s in ['top', 'right']:
    ax1.spines[s].set_visible(False)
    ax2.spines[s].set_visible(False)

Xstart1, Xend1 = ax1.get_xlim()
Ystart1, Yend1 = ax1.get_ylim()

Xstart2, Xend2 = ax2.get_xlim()
Ystart2, Yend2 = ax2.get_ylim()

ax1.set_xlim(Xstart1, Xend1)
ax1.set_ylim(Ystart1, Yend1+0.1)
ax1.grid(which='both', axis='x', zorder=5, color='gray', linestyle=':', dashes=(1, 5))
ax1.set_axisbelow(True)
ax1.get_yaxis().set_visible(False)
#ax1.text(Xstart1, max_verao*1.1, 'Verão', ha='center', va='top', fontsize=25, fontweight='bold', fontfamily='serif', color='#FFA07A')

fig.suptitle('Distribuição de Medlhas através do anos', fontsize=17, fontweight='bold', fontfamily='serif', color='#323232', verticalalignment='top', y=0.95)

ax2.set_xlim(Xstart2, Xend2)
ax2.set_ylim(Ystart2, Yend2+0.1)
ax2.grid(which='both', axis='x', zorder=5, color='gray', linestyle=':', dashes=(1, 5))
ax2.set_axisbelow(True)
ax2.get_yaxis().set_visible(False)
ax2.text(Xstart2 + 3, Yend2 + 0.1, 'Inverno', fontsize=15, fontweight='bold', fontfamily='serif', color='#323232')

plt.legend(loc='upper left', bbox_to_anchor=(1, 2), title='Medalha')
1022:
mulheres_verao = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Summer")]
mulheres_verao = mulheres_verao.groupby(['Year', 'Medal'])['Medal'].count().unstack().reset_index()
mulheres_verao['Total'] = mulheres_verao['Gold'] + mulheres_verao['Silver'] + mulheres_verao['Bronze']
mulheres_verao = mulheres_verao.groupby('Year')[['Bronze', 'Silver', 'Gold']].sum()
mulheres_verao = mulheres_verao.divide(mulheres_verao.sum(axis=1), axis=0)

mulhes_inverno = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Winter")]
mulhes_inverno = mulhes_inverno.groupby(['Year', 'Medal'])['Medal'].count().unstack().reset_index()
mulhes_inverno['Total'] = mulhes_inverno['Gold'] + mulhes_inverno['Silver'] + mulhes_inverno['Bronze']
mulhes_inverno = mulhes_inverno.groupby('Year')[['Bronze', 'Silver', 'Gold']].sum()
mulhes_inverno = mulhes_inverno.divide(mulhes_inverno.sum(axis=1), axis=0)


fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(15, 9), facecolor=cor_fundo_padrao)

medals_list = ['Bronze', 'Silver', 'Gold']

for i, medal in enumerate(medals_list):
    ax1.bar(mulheres_verao.index, mulheres_verao[medal], color=cor_medalhas_array[i],
        label=medal, width=2, edgecolor='gray',
        bottom=mulheres_verao[medals_list[:i]].sum(axis=1) if i > 0 else None
    )

    ax2.bar(mulhes_inverno.index, mulhes_inverno[medal], color=cor_medalhas_array[i],
        label=medal, width=2, edgecolor='gray',
        bottom=mulhes_inverno[medals_list[:i]].sum(axis=1) if i > 0 else None
    )


ax1.set_facecolor(cor_fundo_padrao)
ax2.set_facecolor(cor_fundo_padrao)

for s in ['top', 'right']:
    ax1.spines[s].set_visible(False)
    ax2.spines[s].set_visible(False)

Xstart1, Xend1 = ax1.get_xlim()
Ystart1, Yend1 = ax1.get_ylim()

Xstart2, Xend2 = ax2.get_xlim()
Ystart2, Yend2 = ax2.get_ylim()

ax1.set_xlim(Xstart1, Xend1)
ax1.set_ylim(Ystart1, Yend1+0.1)
ax1.grid(which='both', axis='x', zorder=5, color='gray', linestyle=':', dashes=(1, 5))
ax1.set_axisbelow(True)
ax1.get_yaxis().set_visible(False)
ax1.text(Xstart1, 1.1, 'Verão', ha='center', va='top', fontsize=25, fontweight='bold', fontfamily='serif', color='#FFA07A')

fig.suptitle('Distribuição de Medlhas através do anos', fontsize=17, fontweight='bold', fontfamily='serif', color='#323232', verticalalignment='top', y=0.95)

ax2.set_xlim(Xstart2, Xend2)
ax2.set_ylim(Ystart2, Yend2+0.1)
ax2.grid(which='both', axis='x', zorder=5, color='gray', linestyle=':', dashes=(1, 5))
ax2.set_axisbelow(True)
ax2.get_yaxis().set_visible(False)
ax2.text(Xstart2 + 3, Yend2 + 0.1, 'Inverno', fontsize=15, fontweight='bold', fontfamily='serif', color='#323232')

plt.legend(loc='upper left', bbox_to_anchor=(1, 2), title='Medalha')
1023:
mulheres_verao = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Summer")]
mulheres_verao = mulheres_verao.groupby(['Year', 'Medal'])['Medal'].count().unstack().reset_index()
mulheres_verao['Total'] = mulheres_verao['Gold'] + mulheres_verao['Silver'] + mulheres_verao['Bronze']
mulheres_verao = mulheres_verao.groupby('Year')[['Bronze', 'Silver', 'Gold']].sum()
mulheres_verao = mulheres_verao.divide(mulheres_verao.sum(axis=1), axis=0)

mulhes_inverno = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Winter")]
mulhes_inverno = mulhes_inverno.groupby(['Year', 'Medal'])['Medal'].count().unstack().reset_index()
mulhes_inverno['Total'] = mulhes_inverno['Gold'] + mulhes_inverno['Silver'] + mulhes_inverno['Bronze']
mulhes_inverno = mulhes_inverno.groupby('Year')[['Bronze', 'Silver', 'Gold']].sum()
mulhes_inverno = mulhes_inverno.divide(mulhes_inverno.sum(axis=1), axis=0)


fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(15, 9), facecolor=cor_fundo_padrao)

medals_list = ['Bronze', 'Silver', 'Gold']

for i, medal in enumerate(medals_list):
    ax1.bar(mulheres_verao.index, mulheres_verao[medal], color=cor_medalhas_array[i],
        label=medal, width=2, edgecolor='gray',
        bottom=mulheres_verao[medals_list[:i]].sum(axis=1) if i > 0 else None
    )

    ax2.bar(mulhes_inverno.index, mulhes_inverno[medal], color=cor_medalhas_array[i],
        label=medal, width=2, edgecolor='gray',
        bottom=mulhes_inverno[medals_list[:i]].sum(axis=1) if i > 0 else None
    )


ax1.set_facecolor(cor_fundo_padrao)
ax2.set_facecolor(cor_fundo_padrao)

for s in ['top', 'right']:
    ax1.spines[s].set_visible(False)
    ax2.spines[s].set_visible(False)

Xstart1, Xend1 = ax1.get_xlim()
Ystart1, Yend1 = ax1.get_ylim()

Xstart2, Xend2 = ax2.get_xlim()
Ystart2, Yend2 = ax2.get_ylim()

ax1.set_xlim(Xstart1, Xend1)
ax1.set_ylim(Ystart1, Yend1)
ax1.grid(which='both', axis='x', zorder=5, color='gray', linestyle=':', dashes=(1, 5))
ax1.set_axisbelow(True)
ax1.get_yaxis().set_visible(False)
ax1.text(Xstart1, 1.1, 'Verão', ha='center', va='top', fontsize=25, fontweight='bold', fontfamily='serif', color='#FFA07A')

fig.suptitle('Distribuição de Medlhas através do anos', fontsize=17, fontweight='bold', fontfamily='serif', color='#323232', verticalalignment='top', y=0.95)

ax2.set_xlim(Xstart2, Xend2)
ax2.set_ylim(Ystart2, Yend2+0.1)
ax2.grid(which='both', axis='x', zorder=5, color='gray', linestyle=':', dashes=(1, 5))
ax2.set_axisbelow(True)
ax2.get_yaxis().set_visible(False)
ax2.text(Xstart2 + 3, Yend2 + 0.1, 'Inverno', fontsize=15, fontweight='bold', fontfamily='serif', color='#323232')

plt.legend(loc='upper left', bbox_to_anchor=(1, 2), title='Medalha')
1024:
mulheres_verao = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Summer")]
mulheres_verao = mulheres_verao.groupby(['Year', 'Medal'])['Medal'].count().unstack().reset_index()
mulheres_verao['Total'] = mulheres_verao['Gold'] + mulheres_verao['Silver'] + mulheres_verao['Bronze']
mulheres_verao = mulheres_verao.groupby('Year')[['Bronze', 'Silver', 'Gold']].sum()
mulheres_verao = mulheres_verao.divide(mulheres_verao.sum(axis=1), axis=0)

mulhes_inverno = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Winter")]
mulhes_inverno = mulhes_inverno.groupby(['Year', 'Medal'])['Medal'].count().unstack().reset_index()
mulhes_inverno['Total'] = mulhes_inverno['Gold'] + mulhes_inverno['Silver'] + mulhes_inverno['Bronze']
mulhes_inverno = mulhes_inverno.groupby('Year')[['Bronze', 'Silver', 'Gold']].sum()
mulhes_inverno = mulhes_inverno.divide(mulhes_inverno.sum(axis=1), axis=0)


fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(15, 9), facecolor=cor_fundo_padrao)

medals_list = ['Bronze', 'Silver', 'Gold']

for i, medal in enumerate(medals_list):
    ax1.bar(mulheres_verao.index, mulheres_verao[medal], color=cor_medalhas_array[i],
        label=medal, width=2, edgecolor='gray',
        bottom=mulheres_verao[medals_list[:i]].sum(axis=1) if i > 0 else None
    )

    ax2.bar(mulhes_inverno.index, mulhes_inverno[medal], color=cor_medalhas_array[i],
        label=medal, width=2, edgecolor='gray',
        bottom=mulhes_inverno[medals_list[:i]].sum(axis=1) if i > 0 else None
    )


ax1.set_facecolor(cor_fundo_padrao)
ax2.set_facecolor(cor_fundo_padrao)

for s in ['top', 'right']:
    ax1.spines[s].set_visible(False)
    ax2.spines[s].set_visible(False)

Xstart1, Xend1 = ax1.get_xlim()
Ystart1, Yend1 = ax1.get_ylim()

Xstart2, Xend2 = ax2.get_xlim()
Ystart2, Yend2 = ax2.get_ylim()

ax1.set_xlim(Xstart1, Xend1)
ax1.set_ylim(Ystart1, Yend1)
ax1.grid(which='both', axis='x', zorder=5, color='gray', linestyle=':', dashes=(1, 5))
ax1.set_axisbelow(True)
ax1.get_yaxis().set_visible(False)
ax1.text(Xstart1, 1.2, 'Verão', ha='center', va='top', fontsize=25, fontweight='bold', fontfamily='serif', color='#FFA07A')

fig.suptitle('Distribuição de Medlhas através do anos', fontsize=17, fontweight='bold', fontfamily='serif', color='#323232', verticalalignment='top', y=0.95)

ax2.set_xlim(Xstart2, Xend2)
ax2.set_ylim(Ystart2, Yend2+0.1)
ax2.grid(which='both', axis='x', zorder=5, color='gray', linestyle=':', dashes=(1, 5))
ax2.set_axisbelow(True)
ax2.get_yaxis().set_visible(False)
ax2.text(Xstart2 + 3, Yend2 + 0.1, 'Inverno', fontsize=15, fontweight='bold', fontfamily='serif', color='#323232')

plt.legend(loc='upper left', bbox_to_anchor=(1, 2), title='Medalha')
1025:
mulheres_verao = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Summer")]
mulheres_verao = mulheres_verao.groupby(['Year', 'Medal'])['Medal'].count().unstack().reset_index()
mulheres_verao['Total'] = mulheres_verao['Gold'] + mulheres_verao['Silver'] + mulheres_verao['Bronze']
mulheres_verao = mulheres_verao.groupby('Year')[['Bronze', 'Silver', 'Gold']].sum()
mulheres_verao = mulheres_verao.divide(mulheres_verao.sum(axis=1), axis=0)

mulhes_inverno = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Winter")]
mulhes_inverno = mulhes_inverno.groupby(['Year', 'Medal'])['Medal'].count().unstack().reset_index()
mulhes_inverno['Total'] = mulhes_inverno['Gold'] + mulhes_inverno['Silver'] + mulhes_inverno['Bronze']
mulhes_inverno = mulhes_inverno.groupby('Year')[['Bronze', 'Silver', 'Gold']].sum()
mulhes_inverno = mulhes_inverno.divide(mulhes_inverno.sum(axis=1), axis=0)


fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(15, 9), facecolor=cor_fundo_padrao)

medals_list = ['Bronze', 'Silver', 'Gold']

for i, medal in enumerate(medals_list):
    ax1.bar(mulheres_verao.index, mulheres_verao[medal], color=cor_medalhas_array[i],
        label=medal, width=2, edgecolor='gray',
        bottom=mulheres_verao[medals_list[:i]].sum(axis=1) if i > 0 else None
    )

    ax2.bar(mulhes_inverno.index, mulhes_inverno[medal], color=cor_medalhas_array[i],
        label=medal, width=2, edgecolor='gray',
        bottom=mulhes_inverno[medals_list[:i]].sum(axis=1) if i > 0 else None
    )


ax1.set_facecolor(cor_fundo_padrao)
ax2.set_facecolor(cor_fundo_padrao)

for s in ['top', 'right']:
    ax1.spines[s].set_visible(False)
    ax2.spines[s].set_visible(False)

Xstart1, Xend1 = ax1.get_xlim()
Ystart1, Yend1 = ax1.get_ylim()

Xstart2, Xend2 = ax2.get_xlim()
Ystart2, Yend2 = ax2.get_ylim()

ax1.set_xlim(Xstart1, Xend1)
ax1.set_ylim(Ystart1, Yend1)
ax1.grid(which='both', axis='x', zorder=5, color='gray', linestyle=':', dashes=(1, 5))
ax1.set_axisbelow(True)
ax1.get_yaxis().set_visible(False)
ax1.text(Xstart1, 1.15, 'Verão', ha='center', va='top', fontsize=25, fontweight='bold', fontfamily='serif', color='#FFA07A')

fig.suptitle('Distribuição de Medlhas através do anos', fontsize=17, fontweight='bold', fontfamily='serif', color='#323232', verticalalignment='top', y=0.95)

ax2.set_xlim(Xstart2, Xend2)
ax2.set_ylim(Ystart2, Yend2+0.1)
ax2.grid(which='both', axis='x', zorder=5, color='gray', linestyle=':', dashes=(1, 5))
ax2.set_axisbelow(True)
ax2.get_yaxis().set_visible(False)
ax2.text(Xstart2 + 3, Yend2 + 0.1, 'Inverno', fontsize=15, fontweight='bold', fontfamily='serif', color='#323232')

plt.legend(loc='upper left', bbox_to_anchor=(1, 2), title='Medalha')
1026:
mulheres_verao = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Summer")]
mulheres_verao = mulheres_verao.groupby(['Year', 'Medal'])['Medal'].count().unstack().reset_index()
mulheres_verao['Total'] = mulheres_verao['Gold'] + mulheres_verao['Silver'] + mulheres_verao['Bronze']
mulheres_verao = mulheres_verao.groupby('Year')[['Bronze', 'Silver', 'Gold']].sum()
mulheres_verao = mulheres_verao.divide(mulheres_verao.sum(axis=1), axis=0)

mulhes_inverno = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Winter")]
mulhes_inverno = mulhes_inverno.groupby(['Year', 'Medal'])['Medal'].count().unstack().reset_index()
mulhes_inverno['Total'] = mulhes_inverno['Gold'] + mulhes_inverno['Silver'] + mulhes_inverno['Bronze']
mulhes_inverno = mulhes_inverno.groupby('Year')[['Bronze', 'Silver', 'Gold']].sum()
mulhes_inverno = mulhes_inverno.divide(mulhes_inverno.sum(axis=1), axis=0)


fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(15, 9), facecolor=cor_fundo_padrao)

medals_list = ['Bronze', 'Silver', 'Gold']

for i, medal in enumerate(medals_list):
    ax1.bar(mulheres_verao.index, mulheres_verao[medal], color=cor_medalhas_array[i],
        label=medal, width=2, edgecolor='gray',
        bottom=mulheres_verao[medals_list[:i]].sum(axis=1) if i > 0 else None
    )

    ax2.bar(mulhes_inverno.index, mulhes_inverno[medal], color=cor_medalhas_array[i],
        label=medal, width=2, edgecolor='gray',
        bottom=mulhes_inverno[medals_list[:i]].sum(axis=1) if i > 0 else None
    )


ax1.set_facecolor(cor_fundo_padrao)
ax2.set_facecolor(cor_fundo_padrao)

for s in ['top', 'right']:
    ax1.spines[s].set_visible(False)
    ax2.spines[s].set_visible(False)

Xstart1, Xend1 = ax1.get_xlim()
Ystart1, Yend1 = ax1.get_ylim()

Xstart2, Xend2 = ax2.get_xlim()
Ystart2, Yend2 = ax2.get_ylim()

ax1.set_xlim(Xstart1, Xend1)
ax1.set_ylim(Ystart1, Yend1)
ax1.grid(which='both', axis='x', zorder=5, color='gray', linestyle=':', dashes=(1, 5))
ax1.set_axisbelow(True)
ax1.get_yaxis().set_visible(False)
ax1.text(Xstart1, 1.15, 'Verão', ha='center', va='top', fontsize=25, fontweight='bold', fontfamily='serif', color='#FFA07A')

fig.suptitle('Distribuição de Medlhas através do anos', fontsize=17, fontweight='bold', fontfamily='serif', color='#323232', verticalalignment='top', y=0.95)

ax2.set_xlim(Xstart2, Xend2)
ax2.set_ylim(Ystart2, Yend2+0.1)
ax2.grid(which='both', axis='x', zorder=5, color='gray', linestyle=':', dashes=(1, 5))
ax2.set_axisbelow(True)
ax2.get_yaxis().set_visible(False)
ax2.text(Xstart2, 1.15, 'Inverno', ha='center', va='top', fontsize=25, fontweight='bold', fontfamily='serif', color='#4682B4')


plt.legend(loc='upper left', bbox_to_anchor=(1, 2), title='Medalha')
1027:
mulheres_verao = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Summer")]
mulheres_verao = mulheres_verao.groupby(['Year', 'Medal'])['Medal'].count().unstack().reset_index()
mulheres_verao['Total'] = mulheres_verao['Gold'] + mulheres_verao['Silver'] + mulheres_verao['Bronze']
mulheres_verao = mulheres_verao.groupby('Year')[['Bronze', 'Silver', 'Gold']].sum()
mulheres_verao = mulheres_verao.divide(mulheres_verao.sum(axis=1), axis=0)

mulhes_inverno = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Winter")]
mulhes_inverno = mulhes_inverno.groupby(['Year', 'Medal'])['Medal'].count().unstack().reset_index()
mulhes_inverno['Total'] = mulhes_inverno['Gold'] + mulhes_inverno['Silver'] + mulhes_inverno['Bronze']
mulhes_inverno = mulhes_inverno.groupby('Year')[['Bronze', 'Silver', 'Gold']].sum()
mulhes_inverno = mulhes_inverno.divide(mulhes_inverno.sum(axis=1), axis=0)


fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(15, 9), facecolor=cor_fundo_padrao)

medals_list = ['Bronze', 'Silver', 'Gold']

for i, medal in enumerate(medals_list):
    ax1.bar(mulheres_verao.index, mulheres_verao[medal], color=cor_medalhas_array[i],
        label=medal, width=2, edgecolor='gray',
        bottom=mulheres_verao[medals_list[:i]].sum(axis=1) if i > 0 else None
    )

    ax2.bar(mulhes_inverno.index, mulhes_inverno[medal], color=cor_medalhas_array[i],
        label=medal, width=2, edgecolor='gray',
        bottom=mulhes_inverno[medals_list[:i]].sum(axis=1) if i > 0 else None
    )


ax1.set_facecolor(cor_fundo_padrao)
ax2.set_facecolor(cor_fundo_padrao)

for s in ['top', 'right']:
    ax1.spines[s].set_visible(False)
    ax2.spines[s].set_visible(False)

Xstart1, Xend1 = ax1.get_xlim()
Ystart1, Yend1 = ax1.get_ylim()

Xstart2, Xend2 = ax2.get_xlim()
Ystart2, Yend2 = ax2.get_ylim()

ax1.set_xlim(Xstart1, Xend1)
ax1.set_ylim(Ystart1, Yend1)
ax1.grid(which='both', axis='x', zorder=5, color='gray', linestyle=':', dashes=(1, 5))
ax1.set_axisbelow(True)
ax1.get_yaxis().set_visible(False)
ax1.text(Xstart1, 1.15, 'Verão', ha='center', va='top', fontsize=25, fontweight='bold', fontfamily='serif', color='#FFA07A')

fig.suptitle('Distribuição de Medlhas através do anos', fontsize=17, fontweight='bold', fontfamily='serif', color='#323232', verticalalignment='top', y=0.95)

ax2.set_xlim(Xstart2, Xend2)
ax2.set_ylim(Ystart2, Yend2)
ax2.grid(which='both', axis='x', zorder=5, color='gray', linestyle=':', dashes=(1, 5))
ax2.set_axisbelow(True)
ax2.get_yaxis().set_visible(False)
ax2.text(Xstart2, 1.15, 'Inverno', ha='center', va='top', fontsize=25, fontweight='bold', fontfamily='serif', color='#4682B4')


plt.legend(loc='upper left', bbox_to_anchor=(1, 2), title='Medalha')
1028:
mulheres_verao = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Summer")]
mulheres_verao = mulheres_verao.groupby(['Year', 'Medal'])['Medal'].count().unstack().reset_index()
mulheres_verao['Total'] = mulheres_verao['Gold'] + mulheres_verao['Silver'] + mulheres_verao['Bronze']
mulheres_verao = mulheres_verao.groupby('Year')[['Bronze', 'Silver', 'Gold']].sum()
mulheres_verao = mulheres_verao.divide(mulheres_verao.sum(axis=1), axis=0)

mulhes_inverno = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Winter")]
mulhes_inverno = mulhes_inverno.groupby(['Year', 'Medal'])['Medal'].count().unstack().reset_index()
mulhes_inverno['Total'] = mulhes_inverno['Gold'] + mulhes_inverno['Silver'] + mulhes_inverno['Bronze']
mulhes_inverno = mulhes_inverno.groupby('Year')[['Bronze', 'Silver', 'Gold']].sum()
mulhes_inverno = mulhes_inverno.divide(mulhes_inverno.sum(axis=1), axis=0)


fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(15, 9), facecolor=cor_fundo_padrao)

medals_list = ['Bronze', 'Silver', 'Gold']

for i, medal in enumerate(medals_list):
    ax1.bar(mulheres_verao.index, mulheres_verao[medal], color=cor_medalhas_array[i],
        label=medal, width=2, edgecolor='gray',
        bottom=mulheres_verao[medals_list[:i]].sum(axis=1) if i > 0 else None
    )

    ax2.bar(mulhes_inverno.index, mulhes_inverno[medal], color=cor_medalhas_array[i],
        label=medal, width=2, edgecolor='gray',
        bottom=mulhes_inverno[medals_list[:i]].sum(axis=1) if i > 0 else None
    )

ax1.set_facecolor(cor_fundo_padrao)
ax2.set_facecolor(cor_fundo_padrao)

for s in ['top', 'right']:
    ax1.spines[s].set_visible(False)
    ax2.spines[s].set_visible(False)

Xstart1, Xend1 = ax1.get_xlim()
Ystart1, Yend1 = ax1.get_ylim()

Xstart2, Xend2 = ax2.get_xlim()
Ystart2, Yend2 = ax2.get_ylim()

ax1.set_xlim(Xstart1, Xend1)
ax1.set_ylim(Ystart1, Yend1)
ax1.grid(which='both', axis='x', zorder=5, color='gray', linestyle=':', dashes=(1, 5))
ax1.set_axisbelow(True)
ax1.get_yaxis().set_visible(False)
ax1.text(Xstart1, 1.15, 'Verão', ha='center', va='top', fontsize=25, fontweight='bold', fontfamily='serif', color='#FFA07A')

fig.suptitle('Distribuição de Medlhas através do anos', fontsize=17, fontweight='bold', fontfamily='serif', color='#323232', verticalalignment='top', y=0.95)

ax2.set_xlim(Xstart2, Xend2)
ax2.set_ylim(Ystart2, Yend2)
ax2.grid(which='both', axis='x', zorder=5, color='gray', linestyle=':', dashes=(1, 5))
ax2.set_axisbelow(True)
ax2.get_yaxis().set_visible(False)
ax2.text(Xstart1, 1.15, 'Inverno', ha='center', va='top', fontsize=25, fontweight='bold', fontfamily='serif', color='#4682B4')

plt.legend(loc='upper left', bbox_to_anchor=(1, 2), title='Medalha')
1029:
mulheres_verao = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Summer")]
mulheres_verao = mulheres_verao.groupby(['Year', 'Medal'])['Medal'].count().unstack().reset_index()
mulheres_verao['Total'] = mulheres_verao['Gold'] + mulheres_verao['Silver'] + mulheres_verao['Bronze']
mulheres_verao = mulheres_verao.groupby('Year')[['Bronze', 'Silver', 'Gold']].sum()
mulheres_verao = mulheres_verao.divide(mulheres_verao.sum(axis=1), axis=0)

mulhes_inverno = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Winter")]
mulhes_inverno = mulhes_inverno.groupby(['Year', 'Medal'])['Medal'].count().unstack().reset_index()
mulhes_inverno['Total'] = mulhes_inverno['Gold'] + mulhes_inverno['Silver'] + mulhes_inverno['Bronze']
mulhes_inverno = mulhes_inverno.groupby('Year')[['Bronze', 'Silver', 'Gold']].sum()
mulhes_inverno = mulhes_inverno.divide(mulhes_inverno.sum(axis=1), axis=0)


fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(15, 9), facecolor=cor_fundo_padrao)

medals_list = ['Bronze', 'Silver', 'Gold']

for i, medal in enumerate(medals_list):
    ax1.bar(mulheres_verao.index, mulheres_verao[medal], color=cor_medalhas_array[i],
        label=medal, width=2, edgecolor='gray',
        bottom=mulheres_verao[medals_list[:i]].sum(axis=1) if i > 0 else None
    )

    ax2.bar(mulhes_inverno.index, mulhes_inverno[medal], color=cor_medalhas_array[i],
        label=medal, width=2, edgecolor='gray',
        bottom=mulhes_inverno[medals_list[:i]].sum(axis=1) if i > 0 else None
    )

ax1.set_facecolor(cor_fundo_padrao)
ax2.set_facecolor(cor_fundo_padrao)

for s in ['top', 'right']:
    ax1.spines[s].set_visible(False)
    ax2.spines[s].set_visible(False)

Xstart1, Xend1 = ax1.get_xlim()
Ystart1, Yend1 = ax1.get_ylim()

Xstart2, Xend2 = ax2.get_xlim()
Ystart2, Yend2 = ax2.get_ylim()

ax1.set_xlim(Xstart1, Xend1)
ax1.set_ylim(Ystart1, Yend1)
ax1.grid(which='both', axis='x', zorder=5, color='gray', linestyle=':', dashes=(1, 5))
ax1.set_axisbelow(True)
ax1.get_yaxis().set_visible(False)
ax1.text(Xstart1, 1.15, 'Verão', ha='center', va='top', fontsize=25, fontweight='bold', fontfamily='serif', color='#FFA07A')

fig.suptitle('Distribuição de Medlhas através do anos', fontsize=17, fontweight='bold', fontfamily='serif', color='#323232', verticalalignment='top', y=0.95)

ax2.set_xlim(Xstart2, Xend2)
ax2.set_ylim(Ystart2, Yend2)
ax2.grid(which='both', axis='x', zorder=5, color='gray', linestyle=':', dashes=(1, 5))
ax2.set_axisbelow(True)
ax2.get_yaxis().set_visible(False)
ax2.text(Xstart2, 1.15, 'Inverno', ha='center', va='top', fontsize=25, fontweight='bold', fontfamily='serif', color='#4682B4')

plt.legend(loc='upper left', bbox_to_anchor=(1, 2), title='Medalha')
1030:
mulheres_verao = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Summer")]
mulheres_verao = mulheres_verao.groupby(['Year', 'Medal'])['Medal'].count().unstack().reset_index()
mulheres_verao['Total'] = mulheres_verao['Gold'] + mulheres_verao['Silver'] + mulheres_verao['Bronze']
mulheres_verao = mulheres_verao.groupby('Year')[['Bronze', 'Silver', 'Gold']].sum()
mulheres_verao = mulheres_verao.divide(mulheres_verao.sum(axis=1), axis=0)

mulhes_inverno = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Winter")]
mulhes_inverno = mulhes_inverno.groupby(['Year', 'Medal'])['Medal'].count().unstack().reset_index()
mulhes_inverno['Total'] = mulhes_inverno['Gold'] + mulhes_inverno['Silver'] + mulhes_inverno['Bronze']
mulhes_inverno = mulhes_inverno.groupby('Year')[['Bronze', 'Silver', 'Gold']].sum()
mulhes_inverno = mulhes_inverno.divide(mulhes_inverno.sum(axis=1), axis=0)


fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(15, 9), facecolor=cor_fundo_padrao)

medals_list = ['Bronze', 'Silver', 'Gold']

for i, medal in enumerate(medals_list):
    ax1.bar(mulheres_verao.index, mulheres_verao[medal], color=cor_medalhas_array[i],
        label=medal, width=2, edgecolor='gray',
        bottom=mulheres_verao[medals_list[:i]].sum(axis=1) if i > 0 else None
    )

    ax2.bar(mulhes_inverno.index, mulhes_inverno[medal], color=cor_medalhas_array[i],
        label=medal, width=2, edgecolor='gray',
        bottom=mulhes_inverno[medals_list[:i]].sum(axis=1) if i > 0 else None
    )

ax1.set_facecolor(cor_fundo_padrao)
ax2.set_facecolor(cor_fundo_padrao)

for s in ['top', 'right']:
    ax1.spines[s].set_visible(False)
    ax2.spines[s].set_visible(False)

Xstart1, Xend1 = ax1.get_xlim()
Ystart1, Yend1 = ax1.get_ylim()

Xstart2, Xend2 = ax2.get_xlim()
Ystart2, Yend2 = ax2.get_ylim()

ax1.set_xlim(Xstart1, Xend1)
ax1.set_ylim(Ystart1, Yend1)
ax1.grid(which='both', axis='x', zorder=5, color='gray', linestyle=':', dashes=(1, 5))
ax1.set_axisbelow(True)
ax1.get_yaxis().set_visible(False)
ax1.text(Xstart1, 1.15, 'Verão', ha='center', va='top', fontsize=25, fontweight='bold', fontfamily='serif', color='#FFA07A')

fig.suptitle('Distribuição de Medlhas através do anos', fontsize=17, fontweight='bold', fontfamily='serif', color='#323232', verticalalignment='top', y=0.95)

ax2.set_xlim(Xstart2, Xend2)
ax2.set_ylim(Ystart2, Yend2)
ax2.grid(which='both', axis='x', zorder=5, color='gray', linestyle=':', dashes=(1, 5))
ax2.set_axisbelow(True)
ax2.get_yaxis().set_visible(False)
ax2.text(Xstart2 + 500, 1.15, 'Inverno', ha='center', va='top', fontsize=25, fontweight='bold', fontfamily='serif', color='#4682B4')

plt.legend(loc='upper left', bbox_to_anchor=(1, 2), title='Medalha')
1031:
mulheres_verao = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Summer")]
mulheres_verao = mulheres_verao.groupby(['Year', 'Medal'])['Medal'].count().unstack().reset_index()
mulheres_verao['Total'] = mulheres_verao['Gold'] + mulheres_verao['Silver'] + mulheres_verao['Bronze']
mulheres_verao = mulheres_verao.groupby('Year')[['Bronze', 'Silver', 'Gold']].sum()
mulheres_verao = mulheres_verao.divide(mulheres_verao.sum(axis=1), axis=0)

mulhes_inverno = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Winter")]
mulhes_inverno = mulhes_inverno.groupby(['Year', 'Medal'])['Medal'].count().unstack().reset_index()
mulhes_inverno['Total'] = mulhes_inverno['Gold'] + mulhes_inverno['Silver'] + mulhes_inverno['Bronze']
mulhes_inverno = mulhes_inverno.groupby('Year')[['Bronze', 'Silver', 'Gold']].sum()
mulhes_inverno = mulhes_inverno.divide(mulhes_inverno.sum(axis=1), axis=0)


fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(15, 9), facecolor=cor_fundo_padrao)

medals_list = ['Bronze', 'Silver', 'Gold']

for i, medal in enumerate(medals_list):
    ax1.bar(mulheres_verao.index, mulheres_verao[medal], color=cor_medalhas_array[i],
        label=medal, width=2, edgecolor='gray',
        bottom=mulheres_verao[medals_list[:i]].sum(axis=1) if i > 0 else None
    )

    ax2.bar(mulhes_inverno.index, mulhes_inverno[medal], color=cor_medalhas_array[i],
        label=medal, width=2, edgecolor='gray',
        bottom=mulhes_inverno[medals_list[:i]].sum(axis=1) if i > 0 else None
    )

ax1.set_facecolor(cor_fundo_padrao)
ax2.set_facecolor(cor_fundo_padrao)

for s in ['top', 'right']:
    ax1.spines[s].set_visible(False)
    ax2.spines[s].set_visible(False)

Xstart1, Xend1 = ax1.get_xlim()
Ystart1, Yend1 = ax1.get_ylim()

Xstart2, Xend2 = ax2.get_xlim()
Ystart2, Yend2 = ax2.get_ylim()

ax1.set_xlim(Xstart1, Xend1)
ax1.set_ylim(Ystart1, Yend1)
ax1.grid(which='both', axis='x', zorder=5, color='gray', linestyle=':', dashes=(1, 5))
ax1.set_axisbelow(True)
ax1.get_yaxis().set_visible(False)
ax1.text(Xstart1, 1.15, 'Verão', ha='center', va='top', fontsize=25, fontweight='bold', fontfamily='serif', color='#FFA07A')

fig.suptitle('Distribuição de Medlhas através do anos', fontsize=17, fontweight='bold', fontfamily='serif', color='#323232', verticalalignment='top', y=0.95)

ax2.set_xlim(Xstart2, Xend2)
ax2.set_ylim(Ystart2, Yend2)
ax2.grid(which='both', axis='x', zorder=5, color='gray', linestyle=':', dashes=(1, 5))
ax2.set_axisbelow(True)
ax2.get_yaxis().set_visible(False)
ax2.text(Xstart2 +20, 1.15, 'Inverno', ha='center', va='top', fontsize=25, fontweight='bold', fontfamily='serif', color='#4682B4')

plt.legend(loc='upper left', bbox_to_anchor=(1, 2), title='Medalha')
1032:
mulheres_verao = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Summer")]
mulheres_verao = mulheres_verao.groupby(['Year', 'Medal'])['Medal'].count().unstack().reset_index()
mulheres_verao['Total'] = mulheres_verao['Gold'] + mulheres_verao['Silver'] + mulheres_verao['Bronze']
mulheres_verao = mulheres_verao.groupby('Year')[['Bronze', 'Silver', 'Gold']].sum()
mulheres_verao = mulheres_verao.divide(mulheres_verao.sum(axis=1), axis=0)

mulhes_inverno = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Winter")]
mulhes_inverno = mulhes_inverno.groupby(['Year', 'Medal'])['Medal'].count().unstack().reset_index()
mulhes_inverno['Total'] = mulhes_inverno['Gold'] + mulhes_inverno['Silver'] + mulhes_inverno['Bronze']
mulhes_inverno = mulhes_inverno.groupby('Year')[['Bronze', 'Silver', 'Gold']].sum()
mulhes_inverno = mulhes_inverno.divide(mulhes_inverno.sum(axis=1), axis=0)


fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(15, 9), facecolor=cor_fundo_padrao)

medals_list = ['Bronze', 'Silver', 'Gold']

for i, medal in enumerate(medals_list):
    ax1.bar(mulheres_verao.index, mulheres_verao[medal], color=cor_medalhas_array[i],
        label=medal, width=2, edgecolor='gray',
        bottom=mulheres_verao[medals_list[:i]].sum(axis=1) if i > 0 else None
    )

    ax2.bar(mulhes_inverno.index, mulhes_inverno[medal], color=cor_medalhas_array[i],
        label=medal, width=2, edgecolor='gray',
        bottom=mulhes_inverno[medals_list[:i]].sum(axis=1) if i > 0 else None
    )

ax1.set_facecolor(cor_fundo_padrao)
ax2.set_facecolor(cor_fundo_padrao)

for s in ['top', 'right']:
    ax1.spines[s].set_visible(False)
    ax2.spines[s].set_visible(False)

Xstart1, Xend1 = ax1.get_xlim()
Ystart1, Yend1 = ax1.get_ylim()

Xstart2, Xend2 = ax2.get_xlim()
Ystart2, Yend2 = ax2.get_ylim()

ax1.set_xlim(Xstart1, Xend1)
ax1.set_ylim(Ystart1, Yend1)
ax1.grid(which='both', axis='x', zorder=5, color='gray', linestyle=':', dashes=(1, 5))
ax1.set_axisbelow(True)
ax1.get_yaxis().set_visible(False)
ax1.text(Xstart1, 1.15, 'Verão', ha='center', va='top', fontsize=25, fontweight='bold', fontfamily='serif', color='#FFA07A')

fig.suptitle('Distribuição de Medlhas através do anos', fontsize=17, fontweight='bold', fontfamily='serif', color='#323232', verticalalignment='top', y=0.95)

ax2.set_xlim(Xstart2, Xend2)
ax2.set_ylim(Ystart2, Yend2)
ax2.grid(which='both', axis='x', zorder=5, color='gray', linestyle=':', dashes=(1, 5))
ax2.set_axisbelow(True)
ax2.get_yaxis().set_visible(False)
ax2.text(Xstart2 + 10, 1.15, 'Inverno', ha='center', va='top', fontsize=25, fontweight='bold', fontfamily='serif', color='#4682B4')

plt.legend(loc='upper left', bbox_to_anchor=(1, 2), title='Medalha')
1033:
mulheres_verao = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Summer")]
mulheres_verao = mulheres_verao.groupby(['Year', 'Medal'])['Medal'].count().unstack().reset_index()
mulheres_verao['Total'] = mulheres_verao['Gold'] + mulheres_verao['Silver'] + mulheres_verao['Bronze']
mulheres_verao = mulheres_verao.groupby('Year')[['Bronze', 'Silver', 'Gold']].sum()
mulheres_verao = mulheres_verao.divide(mulheres_verao.sum(axis=1), axis=0)

mulhes_inverno = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Winter")]
mulhes_inverno = mulhes_inverno.groupby(['Year', 'Medal'])['Medal'].count().unstack().reset_index()
mulhes_inverno['Total'] = mulhes_inverno['Gold'] + mulhes_inverno['Silver'] + mulhes_inverno['Bronze']
mulhes_inverno = mulhes_inverno.groupby('Year')[['Bronze', 'Silver', 'Gold']].sum()
mulhes_inverno = mulhes_inverno.divide(mulhes_inverno.sum(axis=1), axis=0)


fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(15, 9), facecolor=cor_fundo_padrao)

medals_list = ['Bronze', 'Silver', 'Gold']

for i, medal in enumerate(medals_list):
    ax1.bar(mulheres_verao.index, mulheres_verao[medal], color=cor_medalhas_array[i],
        label=medal, width=2, edgecolor='gray',
        bottom=mulheres_verao[medals_list[:i]].sum(axis=1) if i > 0 else None
    )

    ax2.bar(mulhes_inverno.index, mulhes_inverno[medal], color=cor_medalhas_array[i],
        label=medal, width=2, edgecolor='gray',
        bottom=mulhes_inverno[medals_list[:i]].sum(axis=1) if i > 0 else None
    )

ax1.set_facecolor(cor_fundo_padrao)
ax2.set_facecolor(cor_fundo_padrao)

for s in ['top', 'right']:
    ax1.spines[s].set_visible(False)
    ax2.spines[s].set_visible(False)

Xstart1, Xend1 = ax1.get_xlim()
Ystart1, Yend1 = ax1.get_ylim()

Xstart2, Xend2 = ax2.get_xlim()
Ystart2, Yend2 = ax2.get_ylim()

ax1.set_xlim(Xstart1, Xend1)
ax1.set_ylim(Ystart1, Yend1)
ax1.grid(which='both', axis='x', zorder=5, color='gray', linestyle=':', dashes=(1, 5))
ax1.set_axisbelow(True)
ax1.get_yaxis().set_visible(False)
ax1.text(Xstart1, 1.15, 'Verão', ha='center', va='top', fontsize=25, fontweight='bold', fontfamily='serif', color='#FFA07A')

fig.suptitle('Distribuição de Medlhas através do anos', fontsize=17, fontweight='bold', fontfamily='serif', color='#323232', verticalalignment='top', y=0.95)

ax2.set_xlim(Xstart2, Xend2)
ax2.set_ylim(Ystart2, Yend2)
ax2.grid(which='both', axis='x', zorder=5, color='gray', linestyle=':', dashes=(1, 5))
ax2.set_axisbelow(True)
ax2.get_yaxis().set_visible(False)
ax2.text(Xstart2*1.1, 1.15, 'Inverno', ha='center', va='top', fontsize=25, fontweight='bold', fontfamily='serif', color='#4682B4')

plt.legend(loc='upper left', bbox_to_anchor=(1, 2), title='Medalha')
1034:
mulheres_verao = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Summer")]
mulheres_verao = mulheres_verao.groupby(['Year', 'Medal'])['Medal'].count().unstack().reset_index()
mulheres_verao['Total'] = mulheres_verao['Gold'] + mulheres_verao['Silver'] + mulheres_verao['Bronze']
mulheres_verao = mulheres_verao.groupby('Year')[['Bronze', 'Silver', 'Gold']].sum()
mulheres_verao = mulheres_verao.divide(mulheres_verao.sum(axis=1), axis=0)

mulhes_inverno = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Winter")]
mulhes_inverno = mulhes_inverno.groupby(['Year', 'Medal'])['Medal'].count().unstack().reset_index()
mulhes_inverno['Total'] = mulhes_inverno['Gold'] + mulhes_inverno['Silver'] + mulhes_inverno['Bronze']
mulhes_inverno = mulhes_inverno.groupby('Year')[['Bronze', 'Silver', 'Gold']].sum()
mulhes_inverno = mulhes_inverno.divide(mulhes_inverno.sum(axis=1), axis=0)


fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(15, 9), facecolor=cor_fundo_padrao)

medals_list = ['Bronze', 'Silver', 'Gold']

for i, medal in enumerate(medals_list):
    ax1.bar(mulheres_verao.index, mulheres_verao[medal], color=cor_medalhas_array[i],
        label=medal, width=2, edgecolor='gray',
        bottom=mulheres_verao[medals_list[:i]].sum(axis=1) if i > 0 else None
    )

    ax2.bar(mulhes_inverno.index, mulhes_inverno[medal], color=cor_medalhas_array[i],
        label=medal, width=2, edgecolor='gray',
        bottom=mulhes_inverno[medals_list[:i]].sum(axis=1) if i > 0 else None
    )

ax1.set_facecolor(cor_fundo_padrao)
ax2.set_facecolor(cor_fundo_padrao)

for s in ['top', 'right']:
    ax1.spines[s].set_visible(False)
    ax2.spines[s].set_visible(False)

Xstart1, Xend1 = ax1.get_xlim()
Ystart1, Yend1 = ax1.get_ylim()

Xstart2, Xend2 = ax2.get_xlim()
Ystart2, Yend2 = ax2.get_ylim()

ax1.set_xlim(Xstart1, Xend1)
ax1.set_ylim(Ystart1, Yend1)
ax1.grid(which='both', axis='x', zorder=5, color='gray', linestyle=':', dashes=(1, 5))
ax1.set_axisbelow(True)
ax1.get_yaxis().set_visible(False)
ax1.text(Xstart1, 1.15, 'Verão', ha='center', va='top', fontsize=25, fontweight='bold', fontfamily='serif', color='#FFA07A')

fig.suptitle('Distribuição de Medlhas através do anos', fontsize=17, fontweight='bold', fontfamily='serif', color='#323232', verticalalignment='top', y=0.95)

ax2.set_xlim(Xstart2, Xend2)
ax2.set_ylim(Ystart2, Yend2)
ax2.grid(which='both', axis='x', zorder=5, color='gray', linestyle=':', dashes=(1, 5))
ax2.set_axisbelow(True)
ax2.get_yaxis().set_visible(False)
ax2.text(Xstart2*0.1, 1.15, 'Inverno', ha='center', va='top', fontsize=25, fontweight='bold', fontfamily='serif', color='#4682B4')

plt.legend(loc='upper left', bbox_to_anchor=(1, 2), title='Medalha')
1035:
mulheres_verao = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Summer")]
mulheres_verao = mulheres_verao.groupby(['Year', 'Medal'])['Medal'].count().unstack().reset_index()
mulheres_verao['Total'] = mulheres_verao['Gold'] + mulheres_verao['Silver'] + mulheres_verao['Bronze']
mulheres_verao = mulheres_verao.groupby('Year')[['Bronze', 'Silver', 'Gold']].sum()
mulheres_verao = mulheres_verao.divide(mulheres_verao.sum(axis=1), axis=0)

mulhes_inverno = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Winter")]
mulhes_inverno = mulhes_inverno.groupby(['Year', 'Medal'])['Medal'].count().unstack().reset_index()
mulhes_inverno['Total'] = mulhes_inverno['Gold'] + mulhes_inverno['Silver'] + mulhes_inverno['Bronze']
mulhes_inverno = mulhes_inverno.groupby('Year')[['Bronze', 'Silver', 'Gold']].sum()
mulhes_inverno = mulhes_inverno.divide(mulhes_inverno.sum(axis=1), axis=0)


fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(15, 9), facecolor=cor_fundo_padrao)

medals_list = ['Bronze', 'Silver', 'Gold']

for i, medal in enumerate(medals_list):
    ax1.bar(mulheres_verao.index, mulheres_verao[medal], color=cor_medalhas_array[i],
        label=medal, width=2, edgecolor='gray',
        bottom=mulheres_verao[medals_list[:i]].sum(axis=1) if i > 0 else None
    )

    ax2.bar(mulhes_inverno.index, mulhes_inverno[medal], color=cor_medalhas_array[i],
        label=medal, width=2, edgecolor='gray',
        bottom=mulhes_inverno[medals_list[:i]].sum(axis=1) if i > 0 else None
    )

ax1.set_facecolor(cor_fundo_padrao)
ax2.set_facecolor(cor_fundo_padrao)

for s in ['top', 'right']:
    ax1.spines[s].set_visible(False)
    ax2.spines[s].set_visible(False)

Xstart1, Xend1 = ax1.get_xlim()
Ystart1, Yend1 = ax1.get_ylim()

Xstart2, Xend2 = ax2.get_xlim()
Ystart2, Yend2 = ax2.get_ylim()

ax1.set_xlim(Xstart1, Xend1)
ax1.set_ylim(Ystart1, Yend1)
ax1.grid(which='both', axis='x', zorder=5, color='gray', linestyle=':', dashes=(1, 5))
ax1.set_axisbelow(True)
ax1.get_yaxis().set_visible(False)
ax1.text(Xstart1, 1.15, 'Verão', ha='center', va='top', fontsize=25, fontweight='bold', fontfamily='serif', color='#FFA07A')

fig.suptitle('Distribuição de Medlhas através do anos', fontsize=17, fontweight='bold', fontfamily='serif', color='#323232', verticalalignment='top', y=0.95)

ax2.set_xlim(Xstart2, Xend2)
ax2.set_ylim(Ystart2, Yend2)
ax2.grid(which='both', axis='x', zorder=5, color='gray', linestyle=':', dashes=(1, 5))
ax2.set_axisbelow(True)
ax2.get_yaxis().set_visible(False)
ax2.text(Xstart2*1.05, 1.15, 'Inverno', ha='center', va='top', fontsize=25, fontweight='bold', fontfamily='serif', color='#4682B4')

plt.legend(loc='upper left', bbox_to_anchor=(1, 2), title='Medalha')
1036:
mulheres_verao = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Summer")]
mulheres_verao = mulheres_verao.groupby(['Year', 'Medal'])['Medal'].count().unstack().reset_index()
mulheres_verao['Total'] = mulheres_verao['Gold'] + mulheres_verao['Silver'] + mulheres_verao['Bronze']
mulheres_verao = mulheres_verao.groupby('Year')[['Bronze', 'Silver', 'Gold']].sum()
mulheres_verao = mulheres_verao.divide(mulheres_verao.sum(axis=1), axis=0)

mulhes_inverno = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Winter")]
mulhes_inverno = mulhes_inverno.groupby(['Year', 'Medal'])['Medal'].count().unstack().reset_index()
mulhes_inverno['Total'] = mulhes_inverno['Gold'] + mulhes_inverno['Silver'] + mulhes_inverno['Bronze']
mulhes_inverno = mulhes_inverno.groupby('Year')[['Bronze', 'Silver', 'Gold']].sum()
mulhes_inverno = mulhes_inverno.divide(mulhes_inverno.sum(axis=1), axis=0)


fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(15, 9), facecolor=cor_fundo_padrao)

medals_list = ['Bronze', 'Silver', 'Gold']

for i, medal in enumerate(medals_list):
    ax1.bar(mulheres_verao.index, mulheres_verao[medal], color=cor_medalhas_array[i],
        label=medal, width=2, edgecolor='gray',
        bottom=mulheres_verao[medals_list[:i]].sum(axis=1) if i > 0 else None
    )

    ax2.bar(mulhes_inverno.index, mulhes_inverno[medal], color=cor_medalhas_array[i],
        label=medal, width=2, edgecolor='gray',
        bottom=mulhes_inverno[medals_list[:i]].sum(axis=1) if i > 0 else None
    )

ax1.set_facecolor(cor_fundo_padrao)
ax2.set_facecolor(cor_fundo_padrao)

for s in ['top', 'right']:
    ax1.spines[s].set_visible(False)
    ax2.spines[s].set_visible(False)

Xstart1, Xend1 = ax1.get_xlim()
Ystart1, Yend1 = ax1.get_ylim()

Xstart2, Xend2 = ax2.get_xlim()
Ystart2, Yend2 = ax2.get_ylim()

ax1.set_xlim(Xstart1, Xend1)
ax1.set_ylim(Ystart1, Yend1)
ax1.grid(which='both', axis='x', zorder=5, color='gray', linestyle=':', dashes=(1, 5))
ax1.set_axisbelow(True)
ax1.get_yaxis().set_visible(False)
ax1.text(Xstart1, 1.15, 'Verão', ha='center', va='top', fontsize=25, fontweight='bold', fontfamily='serif', color='#FFA07A')

fig.suptitle('Distribuição de Medlhas através do anos', fontsize=17, fontweight='bold', fontfamily='serif', color='#323232', verticalalignment='top', y=0.95)

ax2.set_xlim(Xstart2, Xend2)
ax2.set_ylim(Ystart2, Yend2)
ax2.grid(which='both', axis='x', zorder=5, color='gray', linestyle=':', dashes=(1, 5))
ax2.set_axisbelow(True)
ax2.get_yaxis().set_visible(False)
ax2.text(Xstart2*1.005, 1.15, 'Inverno', ha='center', va='top', fontsize=25, fontweight='bold', fontfamily='serif', color='#4682B4')

plt.legend(loc='upper left', bbox_to_anchor=(1, 2), title='Medalha')
1037:
mulheres_verao = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Summer")]
mulheres_verao = mulheres_verao.groupby(['Year', 'Medal'])['Medal'].count().unstack().reset_index()
mulheres_verao['Total'] = mulheres_verao['Gold'] + mulheres_verao['Silver'] + mulheres_verao['Bronze']
mulheres_verao = mulheres_verao.groupby('Year')[['Bronze', 'Silver', 'Gold']].sum()
mulheres_verao = mulheres_verao.divide(mulheres_verao.sum(axis=1), axis=0)

mulhes_inverno = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Winter")]
mulhes_inverno = mulhes_inverno.groupby(['Year', 'Medal'])['Medal'].count().unstack().reset_index()
mulhes_inverno['Total'] = mulhes_inverno['Gold'] + mulhes_inverno['Silver'] + mulhes_inverno['Bronze']
mulhes_inverno = mulhes_inverno.groupby('Year')[['Bronze', 'Silver', 'Gold']].sum()
mulhes_inverno = mulhes_inverno.divide(mulhes_inverno.sum(axis=1), axis=0)


fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(15, 9), facecolor=cor_fundo_padrao)

medals_list = ['Bronze', 'Silver', 'Gold']

for i, medal in enumerate(medals_list):
    ax1.bar(mulheres_verao.index, mulheres_verao[medal], color=cor_medalhas_array[i],
        label=medal, width=2, edgecolor='gray',
        bottom=mulheres_verao[medals_list[:i]].sum(axis=1) if i > 0 else None
    )

    ax2.bar(mulhes_inverno.index, mulhes_inverno[medal], color=cor_medalhas_array[i],
        label=medal, width=2, edgecolor='gray',
        bottom=mulhes_inverno[medals_list[:i]].sum(axis=1) if i > 0 else None
    )

ax1.set_facecolor(cor_fundo_padrao)
ax2.set_facecolor(cor_fundo_padrao)

for s in ['top', 'right']:
    ax1.spines[s].set_visible(False)
    ax2.spines[s].set_visible(False)

Xstart1, Xend1 = ax1.get_xlim()
Ystart1, Yend1 = ax1.get_ylim()

Xstart2, Xend2 = ax2.get_xlim()
Ystart2, Yend2 = ax2.get_ylim()

ax1.set_xlim(Xstart1, Xend1)
ax1.set_ylim(Ystart1, Yend1)
ax1.grid(which='both', axis='x', zorder=5, color='gray', linestyle=':', dashes=(1, 5))
ax1.set_axisbelow(True)
ax1.get_yaxis().set_visible(False)
ax1.text(Xstart1*1.005, 1.15, 'Verão', ha='center', va='top', fontsize=25, fontweight='bold', fontfamily='serif', color='#FFA07A')

fig.suptitle('Distribuição de Medlhas através do anos', fontsize=17, fontweight='bold', fontfamily='serif', color='#323232', verticalalignment='top', y=0.95)

ax2.set_xlim(Xstart2, Xend2)
ax2.set_ylim(Ystart2, Yend2)
ax2.grid(which='both', axis='x', zorder=5, color='gray', linestyle=':', dashes=(1, 5))
ax2.set_axisbelow(True)
ax2.get_yaxis().set_visible(False)
ax2.text(Xstart2*1.005, 1.15, 'Inverno', ha='center', va='top', fontsize=25, fontweight='bold', fontfamily='serif', color='#4682B4')

plt.legend(loc='upper left', bbox_to_anchor=(1, 2), title='Medalha')
1038:
mulheres_verao = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Summer")]
mulheres_verao = mulheres_verao.groupby(['Year', 'Medal'])['Medal'].count().unstack().reset_index()
mulheres_verao['Total'] = mulheres_verao['Gold'] + mulheres_verao['Silver'] + mulheres_verao['Bronze']
mulheres_verao = mulheres_verao.groupby('Year')[['Bronze', 'Silver', 'Gold']].sum()
mulheres_verao = mulheres_verao.divide(mulheres_verao.sum(axis=1), axis=0)

mulhes_inverno = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Winter")]
mulhes_inverno = mulhes_inverno.groupby(['Year', 'Medal'])['Medal'].count().unstack().reset_index()
mulhes_inverno['Total'] = mulhes_inverno['Gold'] + mulhes_inverno['Silver'] + mulhes_inverno['Bronze']
mulhes_inverno = mulhes_inverno.groupby('Year')[['Bronze', 'Silver', 'Gold']].sum()
mulhes_inverno = mulhes_inverno.divide(mulhes_inverno.sum(axis=1), axis=0)


fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(15, 9), facecolor=cor_fundo_padrao)

medals_list = ['Bronze', 'Silver', 'Gold']

for i, medal in enumerate(medals_list):
    ax1.bar(mulheres_verao.index, mulheres_verao[medal], color=cor_medalhas_array[i],
        label=medal, width=2, edgecolor='gray',
        bottom=mulheres_verao[medals_list[:i]].sum(axis=1) if i > 0 else None
    )

    ax2.bar(mulhes_inverno.index, mulhes_inverno[medal], color=cor_medalhas_array[i],
        label=medal, width=2, edgecolor='gray',
        bottom=mulhes_inverno[medals_list[:i]].sum(axis=1) if i > 0 else None
    )

ax1.set_facecolor(cor_fundo_padrao)
ax2.set_facecolor(cor_fundo_padrao)

for s in ['top', 'right']:
    ax1.spines[s].set_visible(False)
    ax2.spines[s].set_visible(False)

Xstart1, Xend1 = ax1.get_xlim()
Ystart1, Yend1 = ax1.get_ylim()

Xstart2, Xend2 = ax2.get_xlim()
Ystart2, Yend2 = ax2.get_ylim()

ax1.set_xlim(Xstart1, Xend1)
ax1.set_ylim(Ystart1, Yend1)
ax1.grid(which='both', axis='x', zorder=5, color='gray', linestyle=':', dashes=(1, 5))
ax1.set_axisbelow(True)
ax1.get_yaxis().set_visible(False)
ax1.text(Xstart1*1.005, 1.15, 'Verão', ha='center', va='top', fontsize=20, fontweight='bold', fontfamily='serif', color='#FFA07A')

fig.suptitle('Distribuição de Medlhas através do anos', fontsize=17, fontweight='bold', fontfamily='serif', color='#323232', verticalalignment='top', y=0.95)

ax2.set_xlim(Xstart2, Xend2)
ax2.set_ylim(Ystart2, Yend2)
ax2.grid(which='both', axis='x', zorder=5, color='gray', linestyle=':', dashes=(1, 5))
ax2.set_axisbelow(True)
ax2.get_yaxis().set_visible(False)
ax2.text(Xstart2*1.005, 1.15, 'Inverno', ha='center', va='top', fontsize=20, fontweight='bold', fontfamily='serif', color='#4682B4')

plt.legend(loc='upper left', bbox_to_anchor=(1, 2), title='Medalha')
1039:
mulheres_verao = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Summer")]
mulheres_verao = mulheres_verao.groupby(['Year', 'Medal'])['Medal'].count().unstack().reset_index()
mulheres_verao['Total'] = mulheres_verao['Gold'] + mulheres_verao['Silver'] + mulheres_verao['Bronze']
mulheres_verao = mulheres_verao.groupby('Year')[['Bronze', 'Silver', 'Gold']].sum()
mulheres_verao = mulheres_verao.divide(mulheres_verao.sum(axis=1), axis=0)

mulhes_inverno = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Winter")]
mulhes_inverno = mulhes_inverno.groupby(['Year', 'Medal'])['Medal'].count().unstack().reset_index()
mulhes_inverno['Total'] = mulhes_inverno['Gold'] + mulhes_inverno['Silver'] + mulhes_inverno['Bronze']
mulhes_inverno = mulhes_inverno.groupby('Year')[['Bronze', 'Silver', 'Gold']].sum()
mulhes_inverno = mulhes_inverno.divide(mulhes_inverno.sum(axis=1), axis=0)


fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(15, 9), facecolor=cor_fundo_padrao)

medals_list = ['Bronze', 'Silver', 'Gold']

for i, medal in enumerate(medals_list):
    ax1.bar(mulheres_verao.index, mulheres_verao[medal], color=cor_medalhas_array[i],
        label=medal, width=2, edgecolor='gray',
        bottom=mulheres_verao[medals_list[:i]].sum(axis=1) if i > 0 else None
    )

    ax2.bar(mulhes_inverno.index, mulhes_inverno[medal], color=cor_medalhas_array[i],
        label=medal, width=2, edgecolor='gray',
        bottom=mulhes_inverno[medals_list[:i]].sum(axis=1) if i > 0 else None
    )

ax1.set_facecolor(cor_fundo_padrao)
ax2.set_facecolor(cor_fundo_padrao)

for s in ['top', 'right']:
    ax1.spines[s].set_visible(False)
    ax2.spines[s].set_visible(False)

Xstart1, Xend1 = ax1.get_xlim()
Ystart1, Yend1 = ax1.get_ylim()

Xstart2, Xend2 = ax2.get_xlim()
Ystart2, Yend2 = ax2.get_ylim()

ax1.set_xlim(Xstart1, Xend1)
ax1.set_ylim(Ystart1, Yend1)
ax1.grid(which='both', axis='x', zorder=5, color='gray', linestyle=':', dashes=(1, 5))
ax1.set_axisbelow(True)
ax1.get_yaxis().set_visible(False)
ax1.text(Xstart1*1.005, 1.15, 'Verão', ha='center', va='top', fontsize=20, fontweight='bold', fontfamily='serif', color='#FFA07A')


ax2.set_xlim(Xstart2, Xend2)
ax2.set_ylim(Ystart2, Yend2)
ax2.grid(which='both', axis='x', zorder=5, color='gray', linestyle=':', dashes=(1, 5))
ax2.set_axisbelow(True)
ax2.get_yaxis().set_visible(False)
ax2.text(Xstart2*1.005, 1.15, 'Inverno', ha='center', va='top', fontsize=20, fontweight='bold', fontfamily='serif', color='#4682B4')

fig.suptitle('Distribuição de Medlhas através do anos', fontsize=17, fontweight='bold', fontfamily='serif', color='#323232', verticalalignment='top', y=0.95)
plt.legend(loc='upper left', bbox_to_anchor=(1, 2), title='Medalha')
1040:
mulheres_verao = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Summer")]
mulheres_verao = mulheres_verao.groupby(['Year', 'Medal'])['Medal'].count().unstack().reset_index()
mulheres_verao['Total'] = mulheres_verao['Gold'] + mulheres_verao['Silver'] + mulheres_verao['Bronze']
mulheres_verao = mulheres_verao.groupby('Year')[['Bronze', 'Silver', 'Gold']].sum()
mulheres_verao = mulheres_verao.divide(mulheres_verao.sum(axis=1), axis=0)

mulhes_inverno = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Winter")]
mulhes_inverno = mulhes_inverno.groupby(['Year', 'Medal'])['Medal'].count().unstack().reset_index()
mulhes_inverno['Total'] = mulhes_inverno['Gold'] + mulhes_inverno['Silver'] + mulhes_inverno['Bronze']
mulhes_inverno = mulhes_inverno.groupby('Year')[['Bronze', 'Silver', 'Gold']].sum()
mulhes_inverno = mulhes_inverno.divide(mulhes_inverno.sum(axis=1), axis=0)


fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(15, 9), facecolor=cor_fundo_padrao)

medals_list = ['Bronze', 'Silver', 'Gold']

for i, medal in enumerate(medals_list):
    ax1.bar(mulheres_verao.index, mulheres_verao[medal], color=cor_medalhas_array[i],
        label=medal, width=2, edgecolor='gray',
        bottom=mulheres_verao[medals_list[:i]].sum(axis=1) if i > 0 else None
    )

    ax2.bar(mulhes_inverno.index, mulhes_inverno[medal], color=cor_medalhas_array[i],
        label=medal, width=2, edgecolor='gray',
        bottom=mulhes_inverno[medals_list[:i]].sum(axis=1) if i > 0 else None
    )

ax1.set_facecolor(cor_fundo_padrao)
ax2.set_facecolor(cor_fundo_padrao)

for s in ['top', 'right']:
    ax1.spines[s].set_visible(False)
    ax2.spines[s].set_visible(False)

Xstart1, Xend1 = ax1.get_xlim()
Ystart1, Yend1 = ax1.get_ylim()

Xstart2, Xend2 = ax2.get_xlim()
Ystart2, Yend2 = ax2.get_ylim()

ax1.set_xlim(Xstart1, Xend1)
ax1.set_ylim(Ystart1, Yend1)
ax1.grid(which='both', axis='x', zorder=5, color='gray', linestyle=':', dashes=(1, 5))
ax1.set_axisbelow(True)
ax1.get_yaxis().set_visible(False)
ax1.text(Xstart1*1.005, 1.15, 'Verão', ha='center', va='top', fontsize=20, fontweight='bold', fontfamily='serif', color='#FFA07A')


ax2.set_xlim(Xstart2, Xend2)
ax2.set_ylim(Ystart2, Yend2)
ax2.grid(which='both', axis='x', zorder=5, color='gray', linestyle=':', dashes=(1, 5))
ax2.set_axisbelow(True)
ax2.get_yaxis().set_visible(False)
ax2.text(Xstart2*1.005, 1.1, 'Inverno', ha='center', va='top', fontsize=20, fontweight='bold', fontfamily='serif', color='#4682B4')

fig.suptitle('Distribuição de Medlhas através do anos', fontsize=17, fontweight='bold', fontfamily='serif', color='#323232', verticalalignment='top', y=0.95)
plt.legend(loc='upper left', bbox_to_anchor=(1, 2), title='Medalha')
1041:
mulheres_verao = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Summer")]
mulheres_verao = mulheres_verao.groupby(['Year', 'Medal'])['Medal'].count().unstack().reset_index()
mulheres_verao['Total'] = mulheres_verao['Gold'] + mulheres_verao['Silver'] + mulheres_verao['Bronze']
mulheres_verao = mulheres_verao.groupby('Year')[['Bronze', 'Silver', 'Gold']].sum()
mulheres_verao = mulheres_verao.divide(mulheres_verao.sum(axis=1), axis=0)

mulhes_inverno = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Winter")]
mulhes_inverno = mulhes_inverno.groupby(['Year', 'Medal'])['Medal'].count().unstack().reset_index()
mulhes_inverno['Total'] = mulhes_inverno['Gold'] + mulhes_inverno['Silver'] + mulhes_inverno['Bronze']
mulhes_inverno = mulhes_inverno.groupby('Year')[['Bronze', 'Silver', 'Gold']].sum()
mulhes_inverno = mulhes_inverno.divide(mulhes_inverno.sum(axis=1), axis=0)


fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(15, 9), facecolor=cor_fundo_padrao)

medals_list = ['Bronze', 'Silver', 'Gold']

for i, medal in enumerate(medals_list):
    ax1.bar(mulheres_verao.index, mulheres_verao[medal], color=cor_medalhas_array[i],
        label=medal, width=2, edgecolor='gray',
        bottom=mulheres_verao[medals_list[:i]].sum(axis=1) if i > 0 else None
    )

    ax2.bar(mulhes_inverno.index, mulhes_inverno[medal], color=cor_medalhas_array[i],
        label=medal, width=2, edgecolor='gray',
        bottom=mulhes_inverno[medals_list[:i]].sum(axis=1) if i > 0 else None
    )

ax1.set_facecolor(cor_fundo_padrao)
ax2.set_facecolor(cor_fundo_padrao)

for s in ['top', 'right']:
    ax1.spines[s].set_visible(False)
    ax2.spines[s].set_visible(False)

Xstart1, Xend1 = ax1.get_xlim()
Ystart1, Yend1 = ax1.get_ylim()

Xstart2, Xend2 = ax2.get_xlim()
Ystart2, Yend2 = ax2.get_ylim()

ax1.set_xlim(Xstart1, Xend1)
ax1.set_ylim(Ystart1, Yend1)
ax1.grid(which='both', axis='x', zorder=5, color='gray', linestyle=':', dashes=(1, 5))
ax1.set_axisbelow(True)
ax1.get_yaxis().set_visible(False)
ax1.text(Xstart1*1.005, 1.15, 'Verão', ha='center', va='top', fontsize=20, fontweight='bold', fontfamily='serif', color='#FFA07A')


ax2.set_xlim(Xstart2, Xend2)
ax2.set_ylim(Ystart2, Yend2)
ax2.grid(which='both', axis='x', zorder=5, color='gray', linestyle=':', dashes=(1, 5))
ax2.set_axisbelow(True)
ax2.get_yaxis().set_visible(False)
ax2.text(Xstart2*1.005, 1.12, 'Inverno', ha='center', va='top', fontsize=20, fontweight='bold', fontfamily='serif', color='#4682B4')

fig.suptitle('Distribuição de Medlhas através do anos', fontsize=17, fontweight='bold', fontfamily='serif', color='#323232', verticalalignment='top', y=0.95)
plt.legend(loc='upper left', bbox_to_anchor=(1, 2), title='Medalha')
1042:
mulheres_verao = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Summer")]
mulheres_verao = mulheres_verao.groupby(['Year', 'Medal'])['Medal'].count().unstack().reset_index()
mulheres_verao['Total'] = mulheres_verao['Gold'] + mulheres_verao['Silver'] + mulheres_verao['Bronze']
mulheres_verao = mulheres_verao.groupby('Year')[['Bronze', 'Silver', 'Gold']].sum()
mulheres_verao = mulheres_verao.divide(mulheres_verao.sum(axis=1), axis=0)

mulhes_inverno = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Winter")]
mulhes_inverno = mulhes_inverno.groupby(['Year', 'Medal'])['Medal'].count().unstack().reset_index()
mulhes_inverno['Total'] = mulhes_inverno['Gold'] + mulhes_inverno['Silver'] + mulhes_inverno['Bronze']
mulhes_inverno = mulhes_inverno.groupby('Year')[['Bronze', 'Silver', 'Gold']].sum()
mulhes_inverno = mulhes_inverno.divide(mulhes_inverno.sum(axis=1), axis=0)


fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(15, 9), facecolor=cor_fundo_padrao)

medals_list = ['Bronze', 'Silver', 'Gold']

for i, medal in enumerate(medals_list):
    ax1.bar(mulheres_verao.index, mulheres_verao[medal], color=cor_medalhas_array[i],
        label=medal, width=2, edgecolor='gray',
        bottom=mulheres_verao[medals_list[:i]].sum(axis=1) if i > 0 else None
    )

    ax2.bar(mulhes_inverno.index, mulhes_inverno[medal], color=cor_medalhas_array[i],
        label=medal, width=2, edgecolor='gray',
        bottom=mulhes_inverno[medals_list[:i]].sum(axis=1) if i > 0 else None
    )

ax1.set_facecolor(cor_fundo_padrao)
ax2.set_facecolor(cor_fundo_padrao)

for s in ['top', 'right']:
    ax1.spines[s].set_visible(False)
    ax2.spines[s].set_visible(False)

Xstart1, Xend1 = ax1.get_xlim()
Ystart1, Yend1 = ax1.get_ylim()

Xstart2, Xend2 = ax2.get_xlim()
Ystart2, Yend2 = ax2.get_ylim()

ax1.set_xlim(Xstart1, Xend1)
ax1.set_ylim(Ystart1, Yend1)
ax1.grid(which='both', axis='x', zorder=5, color='gray', linestyle=':', dashes=(1, 5))
ax1.set_axisbelow(True)
ax1.get_yaxis().set_visible(False)
ax1.text(Xstart1*1.005, 1.15, 'Verão', ha='center', va='top', fontsize=20, fontweight='bold', fontfamily='serif', color='#FFA07A')


ax2.set_xlim(Xstart2, Xend2)
ax2.set_ylim(Ystart2, Yend2)
ax2.grid(which='both', axis='x', zorder=5, color='gray', linestyle=':', dashes=(1, 5))
ax2.set_axisbelow(True)
ax2.get_yaxis().set_visible(False)
ax2.text(Xstart2*1.005, 1.12, 'Inverno', ha='center', va='top', fontsize=20, fontweight='bold', fontfamily='serif', color='#4682B4')

fig.suptitle('Distribuição de Medlhas através do anos', fontsize=17, fontweight='bold', fontfamily='serif', color='gray', verticalalignment='top', y=0.95)
plt.legend(loc='upper left', bbox_to_anchor=(1, 2), title='Medalha')
1043:
mulheres_verao = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Summer")]
mulheres_verao = mulheres_verao.groupby(['Year', 'Medal'])['Medal'].count().unstack().reset_index()
mulheres_verao['Total'] = mulheres_verao['Gold'] + mulheres_verao['Silver'] + mulheres_verao['Bronze']
mulheres_verao = mulheres_verao.groupby('Year')[['Bronze', 'Silver', 'Gold']].sum()
mulheres_verao = mulheres_verao.divide(mulheres_verao.sum(axis=1), axis=0)

mulhes_inverno = mesclado[(mesclado.Sex == 'F') & (mesclado.Season == "Winter")]
mulhes_inverno = mulhes_inverno.groupby(['Year', 'Medal'])['Medal'].count().unstack().reset_index()
mulhes_inverno['Total'] = mulhes_inverno['Gold'] + mulhes_inverno['Silver'] + mulhes_inverno['Bronze']
mulhes_inverno = mulhes_inverno.groupby('Year')[['Bronze', 'Silver', 'Gold']].sum()
mulhes_inverno = mulhes_inverno.divide(mulhes_inverno.sum(axis=1), axis=0)


fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(15, 9), facecolor=cor_fundo_padrao)

medals_list = ['Bronze', 'Silver', 'Gold']

for i, medal in enumerate(medals_list):
    ax1.bar(mulheres_verao.index, mulheres_verao[medal], color=cor_medalhas_array[i],
        label=medal, width=2, edgecolor='gray',
        bottom=mulheres_verao[medals_list[:i]].sum(axis=1) if i > 0 else None
    )

    ax2.bar(mulhes_inverno.index, mulhes_inverno[medal], color=cor_medalhas_array[i],
        label=medal, width=2, edgecolor='gray',
        bottom=mulhes_inverno[medals_list[:i]].sum(axis=1) if i > 0 else None
    )

ax1.set_facecolor(cor_fundo_padrao)
ax2.set_facecolor(cor_fundo_padrao)

for s in ['top', 'right']:
    ax1.spines[s].set_visible(False)
    ax2.spines[s].set_visible(False)

Xstart1, Xend1 = ax1.get_xlim()
Ystart1, Yend1 = ax1.get_ylim()

Xstart2, Xend2 = ax2.get_xlim()
Ystart2, Yend2 = ax2.get_ylim()

ax1.set_xlim(Xstart1, Xend1)
ax1.set_ylim(Ystart1, Yend1)
ax1.grid(which='both', axis='x', zorder=5, color='gray', linestyle=':', dashes=(1, 5))
ax1.set_axisbelow(True)
ax1.get_yaxis().set_visible(False)
ax1.text(Xstart1*1.005, 1.15, 'Verão', ha='center', va='top', fontsize=20, fontweight='bold', fontfamily='serif', color='#FFA07A')


ax2.set_xlim(Xstart2, Xend2)
ax2.set_ylim(Ystart2, Yend2)
ax2.grid(which='both', axis='x', zorder=5, color='gray', linestyle=':', dashes=(1, 5))
ax2.set_axisbelow(True)
ax2.get_yaxis().set_visible(False)
ax2.text(Xstart2*1.005, 1.12, 'Inverno', ha='center', va='top', fontsize=20, fontweight='bold', fontfamily='serif', color='#4682B4')

fig.suptitle('Distribuição de Medlhas através dos anos', fontsize=17, fontweight='bold', fontfamily='serif', color='gray', verticalalignment='top', y=0.95)
plt.legend(loc='upper left', bbox_to_anchor=(1, 2), title='Medalha')
1044:
# For geographic plotting
formas_paises = os.path.join(input_path, 'country_shapes.json')
global_polygons = gpd.read_file(formas_paises)
global_polygons.to_file('global_polygons.geojson', driver = 'GeoJSON')
1045:
import numpy as np
import pandas as pd
import seaborn as sns
import geopandas as gpd
import os
import warnings
import branca
import json

from matplotlib import pyplot as plt
from matplotlib.colors import LinearSegmentedColormap
from folium import folium


dir_atual = os.path.dirname(os.path.abspath('__file__'))
root_dir = os.path.abspath(os.path.join(dir_atual, '..'))
input_path = os.path.join(dir_atual, 'input')

warnings.filterwarnings('ignore')

sns.set()

%matplotlib inline
1046:
# For geographic plotting
formas_paises = os.path.join(input_path, 'country_shapes.json')
global_polygons = gpd.read_file(formas_paises)
global_polygons.to_file('global_polygons.geojson', driver = 'GeoJSON')
1047:
# For geographic plotting
formas_paises = os.path.join(input_path, 'country_shapes.json')
formas_paise = 'https://raw.githubusercontent.com/python-visualization/folium/master/examples/data'
global_polygons = gpd.read_file(formas_paises)
global_polygons.to_file('global_polygons.geojson', driver = 'GeoJSON')
1048:
# For geographic plotting
formas_paises = os.path.join(input_path, 'country_shapes.json')
formas_paises = 'https://raw.githubusercontent.com/python-visualization/folium/master/examples/data'
global_polygons = gpd.read_file(formas_paises)
global_polygons.to_file('global_polygons.geojson', driver = 'GeoJSON')
1049:
# For geographic plotting
formas_paises = os.path.join(input_path, 'country_shapes.json')
formas_paises = 'https://raw.githubusercontent.com/python-visualization/folium/main/examples/data/data.json'
global_polygons = gpd.read_file(formas_paises)
global_polygons.to_file('global_polygons.geojson', driver = 'GeoJSON')
1050:
import numpy as np
import pandas as pd
import seaborn as sns
import geopandas as gpd
import os
import warnings
import requests
import branca
import json

from matplotlib import pyplot as plt
from matplotlib.colors import LinearSegmentedColormap
from folium import folium


dir_atual = os.path.dirname(os.path.abspath('__file__'))
root_dir = os.path.abspath(os.path.join(dir_atual, '..'))
input_path = os.path.join(dir_atual, 'input')

warnings.filterwarnings('ignore')

sns.set()

%matplotlib inline
1051:

# Definir o caminho de entrada e saída
input_path = dir_atual  # substitua pelo caminho do seu diretório
output_path = os.path.join(input_path, 'global_polygons.geojson')

# URL do arquivo GeoJSON
formas_paises_url = 'https://raw.githubusercontent.com/python-visualization/folium/main/examples/data/world-countries.json'

# Fazer o download do arquivo
response = requests.get(formas_paises_url)
if response.status_code == 200:
    with open(output_path, 'wb') as file:
        file.write(response.content)
    print(f"Arquivo baixado com sucesso e salvo em {output_path}")
else:
    print("Erro ao fazer o download do arquivo")

# Ler o arquivo com geopandas
try:
    global_polygons = gpd.read_file(output_path)
    global_polygons.to_file('global_polygons.geojson', driver='GeoJSON')
    print("Arquivo GeoJSON lido e salvo com sucesso.")
except Exception as e:
    print(f"Erro ao ler o arquivo GeoJSON: {e}")
1052:

# Definir o caminho de entrada e saída
input_path = input_path  # substitua pelo caminho do seu diretório
output_path = os.path.join(input_path, 'global_polygons.geojson')

# URL do arquivo GeoJSON
formas_paises_url = 'https://raw.githubusercontent.com/python-visualization/folium/main/examples/data/world-countries.json'

# Fazer o download do arquivo
response = requests.get(formas_paises_url)
if response.status_code == 200:
    with open(output_path, 'wb') as file:
        file.write(response.content)
    print(f"Arquivo baixado com sucesso e salvo em {output_path}")
else:
    print("Erro ao fazer o download do arquivo")

# Ler o arquivo com geopandas
try:
    global_polygons = gpd.read_file(output_path)
    global_polygons.to_file('global_polygons.geojson', driver='GeoJSON')
    print("Arquivo GeoJSON lido e salvo com sucesso.")
except Exception as e:
    print(f"Erro ao ler o arquivo GeoJSON: {e}")
1053:

# Definir o caminho de entrada e saída
input_path = input_path  # substitua pelo caminho do seu diretório
output_path = os.path.join(input_path, 'global_polygons.geojson')

# URL do arquivo GeoJSON
formas_paises_url = 'https://raw.githubusercontent.com/python-visualization/folium/main/examples/data/world-countries.json'

# Fazer o download do arquivo
response = requests.get(formas_paises_url)
if response.status_code == 200:
    with open(output_path, 'wb') as file:
        file.write(response.content)
    print(f"Arquivo baixado com sucesso e salvo em {output_path}")
else:
    print("Erro ao fazer o download do arquivo")

# Ler o arquivo com geopandas
try:
    global_polygons = gpd.read_file(output_path)
    global_polygons.to_file('global_polygons.geojson', driver='GeoJSON')
    print("Arquivo GeoJSON lido e salvo com sucesso.")
except Exception as e:
    print(f"Erro ao ler o arquivo GeoJSON: {e}")
1054:

# Definir o caminho de entrada e saída
   # substitua pelo caminho do seu diretório
output_path = os.path.join(input_path, 'global_polygons.geojson')

# URL do arquivo GeoJSON
formas_paises_url = 'https://raw.githubusercontent.com/python-visualization/folium/main/examples/data/world-countries.json'

# Fazer o download do arquivo
response = requests.get(formas_paises_url)
if response.status_code == 200:
    with open(output_path, 'wb') as file:
        file.write(response.content)
    print(f"Arquivo baixado com sucesso e salvo em {output_path}")
else:
    print("Erro ao fazer o download do arquivo")

# Ler o arquivo com geopandas
try:
    global_polygons = gpd.read_file(output_path)
    global_polygons.to_file('global_polygons.geojson', driver='GeoJSON')
    print("Arquivo GeoJSON lido e salvo com sucesso.")
except Exception as e:
    print(f"Erro ao ler o arquivo GeoJSON: {e}")
1055:

# Definir o caminho de entrada e saída
# substitua pelo caminho do seu diretório
output_path = os.path.join(input_path, 'global_polygons.geojson')

# URL do arquivo GeoJSON
formas_paises_url = 'https://raw.githubusercontent.com/python-visualization/folium/main/examples/data/world-countries.json'

# Fazer o download do arquivo
response = requests.get(formas_paises_url)
if response.status_code == 200:
    with open(output_path, 'wb') as file:
        file.write(response.content)
    print(f"Arquivo baixado com sucesso e salvo em {output_path}")
else:
    print("Erro ao fazer o download do arquivo")

# Ler o arquivo com geopandas
try:
    global_polygons = gpd.read_file(output_path)
    global_polygons.to_file('global_polygons.geojson', driver='GeoJSON')
    print("Arquivo GeoJSON lido e salvo com sucesso.")
except Exception as e:
    print(f"Erro ao ler o arquivo GeoJSON: {e}")
1056:
import numpy as np
import pandas as pd
import seaborn as sns
import geopandas as gpd
import os
import warnings
import requests
import branca
import json

from matplotlib import pyplot as plt
from matplotlib.colors import LinearSegmentedColormap
from folium import folium


dir_atual = os.path.dirname(os.path.abspath('__file__'))
root_dir = os.path.abspath(os.path.join(dir_atual, '..'))
input_path = os.path.join(dir_atual, 'input')

warnings.filterwarnings('ignore')

sns.set()

%matplotlib inline
1057:
import numpy as np
import pandas as pd
import seaborn as sns
import geopandas as gpd
import os
import warnings
import requests
import branca
import json

from matplotlib import pyplot as plt
from matplotlib.colors import LinearSegmentedColormap
from folium import folium


dir_atual = os.path.dirname(os.path.abspath('__file__'))
root_dir = os.path.abspath(os.path.join(dir_atual, '..'))
input_path = os.path.join(dir_atual, 'input')

warnings.filterwarnings('ignore')

sns.set()

%matplotlib inline
1058:

# Definir o caminho de entrada e saída
# substitua pelo caminho do seu diretório
output_path = os.path.join(input_path, 'global_polygons.geojson')

# URL do arquivo GeoJSON
formas_paises_url = 'https://raw.githubusercontent.com/python-visualization/folium/main/examples/data/world-countries.json'

# Fazer o download do arquivo
response = requests.get(formas_paises_url)
if response.status_code == 200:
    with open(output_path, 'wb') as file:
        file.write(response.content)
    print(f"Arquivo baixado com sucesso e salvo em {output_path}")
else:
    print("Erro ao fazer o download do arquivo")

# Ler o arquivo com geopandas
try:
    global_polygons = gpd.read_file(output_path)
    global_polygons.to_file('global_polygons.geojson', driver='GeoJSON')
    print("Arquivo GeoJSON lido e salvo com sucesso.")
except Exception as e:
    print(f"Erro ao ler o arquivo GeoJSON: {e}")
1059:

# Definir o caminho de entrada e saída
# substitua pelo caminho do seu diretório
output_path = os.path.join(input_path, 'global_polygons.geojson')

# URL do arquivo GeoJSON
formas_paises_url = 'https://raw.githubusercontent.com/python-visualization/folium/main/examples/data/world-countries.json'

# Fazer o download do arquivo
response = requests.get(formas_paises_url)
if response.status_code == 200:
    with open(output_path, 'wb') as file:
        file.write(response.content)
else:
    print("Erro ao fazer o download do arquivo")

# Ler o arquivo com geopandas
global_polygons = gpd.read_file(output_path)
global_polygons.to_file('global_polygons.geojson', driver='GeoJSON')
print("Arquivo GeoJSON lido e salvo com sucesso.")
1060:

# Definir o caminho de entrada e saída
# substitua pelo caminho do seu diretório
output_path = os.path.join(input_path, 'global_polygons.geojson')

# URL do arquivo GeoJSON
formas_paises_url = 'https://raw.githubusercontent.com/python-visualization/folium/main/examples/data/world-countries.json'

# Fazer o download do arquivo
response = requests.get(formas_paises_url)
if response.status_code == 200:
    with open(output_path, 'wb') as file:
        file.write(response.content)
else:
    print("Erro ao fazer o download do arquivo")

# Ler o arquivo com geopandas
global_polygons = gpd.read_file(output_path)
global_polygons.to_file('global_polygons.geojson', driver='GeoJSON')
1061:
df = mesclado

df.replace('USA', "United States of America", inplace = True)
df.replace('Tanzania', "United Republic of Tanzania", inplace = True)
df.replace('Democratic Republic of Congo', "Democratic Republic of the Congo", inplace = True)
df.replace('Congo', "Republic of the Congo", inplace = True)
df.replace('Lao', "Laos", inplace = True)
df.replace('Syrian Arab Republic', "Syria", inplace = True)
df.replace('Serbia', "Republic of Serbia", inplace = True)
df.replace('Czechia', "Czech Republic", inplace = True)
df.replace('UAE', "United Arab Emirates", inplace = True)
df.replace('UK', "United Kingdom", inplace = True)

medals
1062:
df = mesclado

df.replace('USA', "United States of America", inplace = True)
df.replace('Tanzania', "United Republic of Tanzania", inplace = True)
df.replace('Democratic Republic of Congo', "Democratic Republic of the Congo", inplace = True)
df.replace('Congo', "Republic of the Congo", inplace = True)
df.replace('Lao', "Laos", inplace = True)
df.replace('Syrian Arab Republic', "Syria", inplace = True)
df.replace('Serbia', "Republic of Serbia", inplace = True)
df.replace('Czechia', "Czech Republic", inplace = True)
df.replace('UAE', "United Arab Emirates", inplace = True)
df.replace('UK', "United Kingdom", inplace = True)

medals_temp = medals.reset_index()
medals_temp
1063:

# Definir o caminho de entrada e saída
# substitua pelo caminho do seu diretório
output_path = os.path.join(input_path, 'global_polygons.geojson')

# URL do arquivo GeoJSON
formas_paises_url = 'https://raw.githubusercontent.com/python-visualization/folium/main/examples/data/world-countries.json'

# Fazer o download do arquivo
response = requests.get(formas_paises_url)
if response.status_code == 200:
    with open(output_path, 'wb') as file:
        file.write(response.content)
else:
    print("Erro ao fazer o download do arquivo")

# Ler o arquivo com geopandas
global_polygons = gpd.read_file(output_path)
global_polygons.to_file('global_polygons.geojson', driver='GeoJSON')

global_polygons
1064:
df = mesclado

df.replace('USA', "United States of America", inplace = True)
df.replace('Tanzania', "United Republic of Tanzania", inplace = True)
df.replace('Democratic Republic of Congo', "Democratic Republic of the Congo", inplace = True)
df.replace('Congo', "Republic of the Congo", inplace = True)
df.replace('Lao', "Laos", inplace = True)
df.replace('Syrian Arab Republic', "Syria", inplace = True)
df.replace('Serbia', "Republic of Serbia", inplace = True)
df.replace('Czechia', "Czech Republic", inplace = True)
df.replace('UAE', "United Arab Emirates", inplace = True)
df.replace('UK', "United Kingdom", inplace = True)

medals_temp = medals.reset_index()
medals_map = pd.merge(global_polygons, medals_temp, left_on='name', right_on='region')
medals_map
1065:
def rd2(x):
    return round(x, 2)

Temp = medals_temp

minimum, maximum = Temp['Total'].quantile([0.05, 0.95]).apply(rd2)
minimum
1066:
def rd2(x):
    return round(x, 2)

Temp = medals_temp

minimum, maximum = Temp['Total'].quantile([0.05, 0.95]).apply(rd2)
maximum
1067:
def rd2(x):
    return round(x, 2)

Temp = medals_temp

minimum, maximum = Temp['Total'].quantile([0.05, 0.95]).apply(rd2)

mean = round(Temp["Total"].mean(), 2)

mean
1068:
import numpy as np
import pandas as pd
import seaborn as sns
import geopandas as gpd
import os
import warnings
import requests
import branca
import json

from matplotlib import pyplot as plt
from matplotlib.colors import LinearSegmentedColormap
from folium import folium
from folium.plugins import Search
from folium.plugins import HeatMap


dir_atual = os.path.dirname(os.path.abspath('__file__'))
root_dir = os.path.abspath(os.path.join(dir_atual, '..'))
input_path = os.path.join(dir_atual, 'input')

warnings.filterwarnings('ignore')

sns.set()

%matplotlib inline
1069:
import numpy as np
import pandas as pd
import seaborn as sns
import geopandas as gpd
import os
import warnings
import requests
import branca
import folium
import json

from matplotlib import pyplot as plt
from matplotlib.colors import LinearSegmentedColormap
from folium import plugins
from folium.plugins import Search
from folium.plugins import HeatMap


dir_atual = os.path.dirname(os.path.abspath('__file__'))
root_dir = os.path.abspath(os.path.join(dir_atual, '..'))
input_path = os.path.join(dir_atual, 'input')

warnings.filterwarnings('ignore')

sns.set()

%matplotlib inline
1070:
import numpy as np
import pandas as pd
import seaborn as sns
import geopandas as gpd
import os
import warnings
import requests
import branca
import folium
import json

from matplotlib import pyplot as plt
from matplotlib.colors import LinearSegmentedColormap
from folium import plugins
from folium.plugins import Search
from folium.plugins import HeatMap


dir_atual = os.path.dirname(os.path.abspath('__file__'))
root_dir = os.path.abspath(os.path.join(dir_atual, '..'))
input_path = os.path.join(dir_atual, 'input')

warnings.filterwarnings('ignore')

sns.set()

%matplotlib inline
1071:
def rd2(x):
    return round(x, 2)

Temp = medals_temp

minimum, maximum = Temp['Total'].quantile([0.05, 0.95]).apply(rd2)

mean = round(Temp["Total"].mean(), 2)

colormap = branca.colormap.LinearColormap(
    colors=["#f2f0f7", "#cbc9e2", "#9e9ac8", "#756bb1", "#54278f"],
    index=Temp["Total"].quantile([0.25, 0.5, 0.85, 0.95]),
    vmin=minimum,
    vmax=maximum,
)

colormap.caption = "Total medals"

m = folium.Map(location=(50,0),zoom_start=3)

def style_function(x):
    return {
        "fillColor": colormap(x["properties"]["Total"]),
        "color": "black",
        "weight": 2,
        "fillOpacity": 0.5,
    }


Map_Layer = folium.GeoJson(
    Temp,
    name="Medals",
    style_function=style_function,
    tooltip=folium.GeoJsonTooltip(
        fields=["name","Total","Gold","Silver","Bronze"], aliases=["Country","Total Medals","Gold","Silver","Bronze"], localize=True
    ),
).add_to(m)

minimap = plugins.MiniMap()
m.add_child(minimap)

folium.LayerControl().add_to(m)
colormap.add_to(m)

m
1072:
def rd2(x):
    return round(x, 2)

Temp = medals_temp

type(Temp)
1073:
def rd2(x):
    return round(x, 2)

Temp = medals_map

type(Temp)
1074:
def rd2(x):
    return round(x, 2)

Temp = medals_map

minimum, maximum = Temp['Total'].quantile([0.05, 0.95]).apply(rd2)

mean = round(Temp["Total"].mean(), 2)

colormap = branca.colormap.LinearColormap(
    colors=["#f2f0f7", "#cbc9e2", "#9e9ac8", "#756bb1", "#54278f"],
    index=Temp["Total"].quantile([0.25, 0.5, 0.85, 0.95]),
    vmin=minimum,
    vmax=maximum,
)

colormap.caption = "Total medals"

m = folium.Map(location=(50,0),zoom_start=3)

def style_function(x):
    return {
        "fillColor": colormap(x["properties"]["Total"]),
        "color": "black",
        "weight": 2,
        "fillOpacity": 0.5,
    }


Map_Layer = folium.GeoJson(
    Temp,
    name="Medals",
    style_function=style_function,
    tooltip=folium.GeoJsonTooltip(
        fields=["name","Total","Gold","Silver","Bronze"], aliases=["Country","Total Medals","Gold","Silver","Bronze"], localize=True
    ),
).add_to(m)

minimap = plugins.MiniMap()
m.add_child(minimap)

folium.LayerControl().add_to(m)
colormap.add_to(m)

m
1075:
def rd2(x):
    return round(x, 2)

Temp = medals_map

minimum, maximum = Temp['Total'].quantile([0.05, 0.95]).apply(rd2)

mean = round(Temp["Total"].mean(), 2)

colormap = branca.colormap.LinearColormap(
    colors=["#F9D3D9", "#F49BA4", "#EF626F", "#EA2A3A", "#E7314C"],
    index=Temp["Total"].quantile([0.25, 0.5, 0.85, 0.95]),
    vmin=minimum,
    vmax=maximum,
)

colormap.caption = "Total medals"

m = folium.Map(location=(50,0),zoom_start=3)

def style_function(x):
    return {
        "fillColor": colormap(x["properties"]["Total"]),
        "color": "black",
        "weight": 2,
        "fillOpacity": 0.5,
    }


Map_Layer = folium.GeoJson(
    Temp,
    name="Medals",
    style_function=style_function,
    tooltip=folium.GeoJsonTooltip(
        fields=["name","Total","Gold","Silver","Bronze"], aliases=["Country","Total Medals","Gold","Silver","Bronze"], localize=True
    ),
).add_to(m)

minimap = plugins.MiniMap()
m.add_child(minimap)

folium.LayerControl().add_to(m)
colormap.add_to(m)

m
1076:
def rd2(x):
    return round(x, 2)

Temp = medals_map

minimum, maximum = Temp['Total'].quantile([0.05, 0.95]).apply(rd2)

mean = round(Temp["Total"].mean(), 2)

colormap = branca.colormap.LinearColormap(
    colors=["#F9D3D9", "#F49BA4", "#EF626F", "#EA2A3A", "#E7314C"],
    index=Temp["Total"].quantile([0.25, 0.5, 0.85, 0.95]),
    vmin=minimum,
    vmax=maximum,
)

colormap.caption = "Total medals"

m = folium.Map(location=(50,0),zoom_start=3)

def style_function(x):
    return {
        "fillColor": colormap(x["properties"]["Total"]),
        "color": "gray",
        "weight": 2,
        "fillOpacity": 0.5,
    }

Map_Layer = folium.GeoJson(
    Temp,
    name="Medals",
    style_function=style_function,
    tooltip=folium.GeoJsonTooltip(
        fields=["name","Total","Gold","Silver","Bronze"], 
        aliases=["Country","Total Medals","Gold","Silver","Bronze"], localize=True
    ),
).add_to(m)

minimap = plugins.MiniMap()
m.add_child(minimap)

folium.LayerControl().add_to(m)
colormap.add_to(m)

m
1077:
def rd2(x):
    return round(x, 2)

Temp = medals_map

minimum, maximum = Temp['Total'].quantile([0.05, 0.95]).apply(rd2)

mean = round(Temp["Total"].mean(), 2)

colormap = branca.colormap.LinearColormap(
    colors=["#F9D3D9", "#F49BA4", "#EF626F", "#EA2A3A", "#E7314C"],
    index=Temp["Total"].quantile([0.25, 0.5, 0.85, 0.95]),
    vmin=minimum,
    vmax=maximum,
)

colormap.caption = "Total medals"

m = folium.Map(location=(50,0),zoom_start=3)

def style_function(x):
    return {
        "fillColor": colormap(x["properties"]["Total"]),
        "color": "#5B5B5B",
        "weight": 2,
        "fillOpacity": 0.5,
    }

Map_Layer = folium.GeoJson(
    Temp,
    name="Medals",
    style_function=style_function,
    tooltip=folium.GeoJsonTooltip(
        fields=["name","Total","Gold","Silver","Bronze"], 
        aliases=["Country","Total Medals","Gold","Silver","Bronze"], localize=True
    ),
).add_to(m)

minimap = plugins.MiniMap()
m.add_child(minimap)

folium.LayerControl().add_to(m)
colormap.add_to(m)

m
1078:
def rd2(x):
    return round(x, 2)

Temp = medals_map

minimum, maximum = Temp['Total'].quantile([0.05, 0.95]).apply(rd2)

mean = round(Temp["Total"].mean(), 2)

colormap = branca.colormap.LinearColormap(
    colors=cor_medalhas_array,
    index=Temp["Total"].quantile([0.25, 0.5, 0.85, 0.95]),
    vmin=minimum,
    vmax=maximum,
)

colormap.caption = "Total medals"

m = folium.Map(location=(50,0),zoom_start=3)

def style_function(x):
    return {
        "fillColor": colormap(x["properties"]["Total"]),
        "color": "#5B5B5B",
        "weight": 2,
        "fillOpacity": 0.5,
    }

Map_Layer = folium.GeoJson(
    Temp,
    name="Medals",
    style_function=style_function,
    tooltip=folium.GeoJsonTooltip(
        fields=["name","Total","Gold","Silver","Bronze"], 
        aliases=["Country","Total Medals","Gold","Silver","Bronze"], localize=True
    ),
).add_to(m)

minimap = plugins.MiniMap()
m.add_child(minimap)

folium.LayerControl().add_to(m)
colormap.add_to(m)

m
1079:
def rd2(x):
    return round(x, 2)

Temp = medals_map

minimum, maximum = Temp['Total'].quantile([0.05, 0.95]).apply(rd2)

mean = round(Temp["Total"].mean(), 2)

colormap = branca.colormap.LinearColormap(
    colors=["#F9D3D9", "#F49BA4", "#EF626F", "#EA2A3A", "#E7314C"],
    index=Temp["Total"].quantile([0.25, 0.5, 0.85, 0.95]),
    vmin=minimum,
    vmax=maximum,
)

colormap.caption = "Total medals"

m = folium.Map(location=(50,0),zoom_start=3)

def style_function(x):
    return {
        "fillColor": colormap(x["properties"]["Total"]),
        "color": "#5B5B5B",
        "weight": 2,
        "fillOpacity": 0.5,
    }

Map_Layer = folium.GeoJson(
    Temp,
    name="Medals",
    style_function=style_function,
    tooltip=folium.GeoJsonTooltip(
        fields=["name","Total","Gold","Silver","Bronze"], 
        aliases=["Country","Total Medals","Gold","Silver","Bronze"], localize=True
    ),
).add_to(m)

minimap = plugins.MiniMap()
m.add_child(minimap)

folium.LayerControl().add_to(m)
colormap.add_to(m)

m
1080:
def rd2(x):
    return round(x, 2)

Temp = medals_map

minimum, maximum = Temp['Total'].quantile([0.05, 0.95]).apply(rd2)

mean = round(Temp["Total"].mean(), 2)

colormap = branca.colormap.LinearColormap(
    colors=["#fdf3da", "#fae3a2", "#f7d46a", "#f4c532", "#f0c05a"],
    index=Temp["Total"].quantile([0.25, 0.5, 0.85, 0.95]),
    vmin=minimum,
    vmax=maximum,
)

colormap.caption = "Total medals"

m = folium.Map(location=(50,0),zoom_start=3)

def style_function(x):
    return {
        "fillColor": colormap(x["properties"]["Total"]),
        "color": "#5B5B5B",
        "weight": 2,
        "fillOpacity": 0.5,
    }

Map_Layer = folium.GeoJson(
    Temp,
    name="Medals",
    style_function=style_function,
    tooltip=folium.GeoJsonTooltip(
        fields=["name","Total","Gold","Silver","Bronze"], 
        aliases=["Country","Total Medals","Gold","Silver","Bronze"], localize=True
    ),
).add_to(m)

minimap = plugins.MiniMap()
m.add_child(minimap)

folium.LayerControl().add_to(m)
colormap.add_to(m)

m
1081:
def rd2(x):
    return round(x, 2)

def style_function(x):
    return {
        "fillColor": mapa_colorido(x["properties"]["Total"]),
        "color": "#5B5B5B",
        "weight": 2,
        "fillOpacity": 0.5,
    }

Temp = medals_map

minino, maximo = Temp['Total'].quantile([0.05, 0.95]).apply(rd2)

mean = round(Temp["Total"].mean(), 2)

mapa_colorido = branca.colormap.LinearColormap(
    colors=["#fdf3da", "#fae3a2", "#f7d46a", "#f4c532", "#f0c05a"],
    index=Temp["Total"].quantile([0.25, 0.5, 0.85, 0.95]),
    vmin=minino,
    vmax=maximo,
)

mapa_colorido.caption = "Total de medalhas"

m = folium.Map(location=(50,0),zoom_start=3)

camada = folium.GeoJson(
    Temp,
    name="Medalhas",
    style_function=style_function,
    tooltip=folium.GeoJsonTooltip(
        fields=["name","Total","Gold","Silver","Bronze"], 
        aliases=["Country","Total Medals","Gold","Silver","Bronze"], localize=True
    ),
).add_to(m)

minimap = plugins.MiniMap()
m.add_child(minimap)

folium.LayerControl().add_to(m)
mapa_colorido.add_to(m)

m
1082:
def rd2(x):
    return round(x, 2)

def style_function(x):
    return {
        "fillColor": mapa_colorido(x["properties"]["Total"]),
        "color": "#5B5B5B",
        "weight": 2,
        "fillOpacity": 0.5,
    }

Temp = medals_map

minino, maximo = Temp['Total'].quantile([0.05, 0.95]).apply(rd2)

mean = round(Temp["Total"].mean(), 2)

mapa_colorido = branca.colormap.LinearColormap(
    colors=["#fdf3da", "#fae3a2", "#f7d46a", "#f4c532", "#f0c05a"],
    index=Temp["Total"].quantile([0.25, 0.5, 0.85, 0.95]),
    vmin=minino,
    vmax=maximo,
)

mapa_colorido.caption = "Total de medalhas"

m = folium.Map(location=(50,0),zoom_start=3)

camada = folium.GeoJson(
    Temp,
    name="Medalhas",
    style_function=style_function,
    tooltip=folium.GeoJsonTooltip(
        fields=["name","Total","Gold","Silver","Bronze"], 
        aliases=["Páis","Total de Medalhas","Ouro","Prata","Bronze"], localize=True
    ),
).add_to(m)

minimap = plugins.MiniMap()
m.add_child(minimap)

folium.LayerControl().add_to(m)
mapa_colorido.add_to(m)

m
 9/1: %history -g -f history.txt
1084:
def rd2(x):
    return round(x, 2)

def style_function(x):
    return {
        "fillColor": mapa_colorido(x["properties"]["Total"]),
        "color": "#5B5B5B",
        "weight": 2,
        "fillOpacity": 0.5,
    }

Temp = medals_map

minino, maximo = Temp['Total'].quantile([0.05, 0.95]).apply(rd2)

mean = round(Temp["Total"].mean(), 2)

mapa_colorido = branca.colormap.LinearColormap(
    colors=["#fdf3da", "#fae3a2", "#f7d46a", "#f4c532", "#f0c05a"],
    index=Temp["Total"].quantile([0.25, 0.5, 0.85, 0.95]),
    vmin=minino,
    vmax=maximo,
)

mapa_colorido.caption = "Total de medalhas"

m = folium.Map(location=(50,0),zoom_start=3)

camada = folium.GeoJson(
    Temp,
    name="Medalhas",
    style_function=style_function,
    tooltip=folium.GeoJsonTooltip(
        fields=["name","Total","Gold","Silver","Bronze"], 
        aliases=["Páis","Total de Medalhas","Ouro","Prata","Bronze"], localize=True
    ),
).add_to(m)

minimap = plugins.MiniMap()
m.add_child(minimap)

folium.LayerControl().add_to(m)
mapa_colorido.add_to(m)

m
1085: %history -g -f history.txt
11/1: %history -g -f history2.txt
11/2: %history -f history3.txt
1086: %history -g -f history3.txt
